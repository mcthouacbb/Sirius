#include "psqt.h"

namespace eval
{

int psqtMG[7][64];
int psqtEG[7][64];

const int psqtHalfMG[6][32] = {
	// king
	{
		  16,  172,   38,  -21, 
		 -48,    9,   51,  101, 
		  -5,  135,  153,   51, 
		-106,  -42,  -64,  -90, 
		-173, -109, -153, -205, 
		 -80,  -59, -123, -168, 
		  29,    8,  -85, -149, 
		  34,   62,  -55,   -1, 
	},
	// queen
	{
		  -5,   36,  107,  111, 
		 -11,  -70,   32,  -30, 
		  42,   44,   33,   20, 
		 -14,  -52,   -1,  -28, 
		 -15,  -22,  -21,  -28, 
		 -26,   14,  -14,  -16, 
		 -57,  -15,   33,   -3, 
		 -14,  -40,  -33,   12, 
	},
	// rook
	{
		  70,   96,   32,  146, 
		  49,   64,  165,  164, 
		 -18,   59,   59,   47, 
		 -63,  -31,   16,   28, 
		 -81,  -47,  -47,  -16, 
		-101,  -51,  -46,  -41, 
		-130,  -44,  -46,  -34, 
		 -60,  -62,  -24,    6, 
	},
	// bishop
	{
		 -49,   -6, -162,  -86, 
		 -88,   30,   22,    9, 
		 -25,   69,   83,   70, 
		 -11,   -3,   50,   81, 
		 -19,    9,   13,   48, 
		  -2,   21,   29,   17, 
		   1,   36,   23,   -5, 
		 -78,  -31,  -34,  -45, 
	},
	// knight
	{
		-316, -147, -144,    5, 
		-111,  -35,  148,   50, 
		  -2,  155,  121,  164, 
		  34,   40,   83,   86, 
		 -18,   30,   40,   41, 
		 -28,   20,   35,   34, 
		 -42,  -69,    0,    5, 
		-124,  -28,  -71,  -49, 
	},
	// pawn
	{
		 -29,  -29,  -29,  -29, 
		  56,  156,  155,  198, 
		 -58,    0,   67,   80, 
		 -62,    3,   -7,   21, 
		 -78,  -23,  -32,    8, 
		 -64,   -7,  -26,  -26, 
		 -84,    0,  -26,  -61, 
		 -29,  -29,  -29,  -29, 
	}
};

const int psqtHalfEG[6][32] = {
	// king
	{
		 -83,  -61,  -19,  -37, 
		   6,   29,   32,    2, 
		  12,   36,   35,   13, 
		   2,   45,   59,   55, 
		 -12,   18,   58,   73, 
		 -19,   10,   39,   60, 
		 -53,  -20,   17,   38, 
		-121,  -71,  -32,  -67, 
	},
	// queen
	{
		 -11,    3,  -12,    4, 
		 -31,   55,   50,  106, 
		 -40,  -21,   30,   98, 
		  19,   89,   47,  104, 
		 -19,   56,   46,   86, 
		 -12,  -57,   21,   10, 
		 -61,  -72, -100,  -33, 
		 -97,  -65,  -72, -107, 
	},
	// rook
	{
		   9,    2,   26,    4, 
		  12,   10,  -12,  -12, 
		   7,   -1,   -2,    4, 
		  10,    2,   14,   -1, 
		  -2,    2,    9,    0, 
		 -12,   -5,  -12,   -6, 
		  -2,  -13,   -5,   -4, 
		 -23,    7,    0,   -3, 
	},
	// bishop
	{
		 -27,  -27,   10,    3, 
		   4,   -3,    2,   -5, 
		  17,   -6,    8,    0, 
		  10,   26,   27,   27, 
		  -2,   12,   32,   34, 
		 -14,    0,   18,   33, 
		 -38,  -27,  -11,   17, 
		 -23,   -8,  -37,   -3, 
	},
	// knight
	{
		 -90,  -50,    4,  -21, 
		 -29,    6,  -24,   24, 
		 -30,  -15,   45,   32, 
		  -6,   41,   68,   78, 
		  -5,   31,   64,   74, 
		 -19,    7,   24,   53, 
		 -50,   -8,    2,   19, 
		 -57,  -77,  -11,   -5, 
	},
	// pawn
	{
		 -60,  -60,  -60,  -60, 
		 323,  287,  234,  201, 
		 124,  130,   67,   52, 
		 -14,  -26,  -46,  -66, 
		 -54,  -53,  -76,  -83, 
		 -71,  -59,  -76,  -63, 
		 -59,  -53,  -55,  -44, 
		 -60,  -60,  -60,  -60, 
	},
};

void initPSQT()
{
	for (int i = 0; i < 6; i++)
	{
		for (int y = 0; y < 8; y++)
		{
			for (int x = 0; x < 4; x++)
			{
				psqtMG[i + 1][y * 8 + x] = psqtHalfMG[i][y * 4 + x];
				psqtMG[i + 1][y * 8 + x + 4] = psqtHalfMG[i][y * 4 + 3 - x];

				psqtEG[i + 1][y * 8 + x] = psqtHalfEG[i][y * 4 + x];
				psqtEG[i + 1][y * 8 + x + 4] = psqtHalfEG[i][y * 4 + 3 - x];
			}
		}
	}
}

int getPSQTMG(PieceType piece, int square)
{
	// static constexpr int* psqt = psqtMG[0];
	return psqtMG[static_cast<int>(piece)][square];
	// return psqt[64 * static_cast<int>(piece) + square];
}

int getPSQTEG(PieceType piece, int square)
{
	// static constexpr int* psqt = psqtEG[0];
	return psqtEG[static_cast<int>(piece)][square];
	// return psqt[64 * static_cast<int>(piece) + square];
}

}