#include "psqt.h"

namespace eval
{

int psqtMG[7][64];
int psqtEG[7][64];

const int psqtHalfMG[6][32] = {
	// king
	{
		   5,   67,   14,  -10,
		 -21,    2,   19,   39,
		  -4,   52,   59,   19,
		 -44,  -18,  -27,  -38,
		 -71,  -45,  -63,  -83,
		 -34,  -25,  -51,  -69,
		  10,    2,  -36,  -61,
		  12,   23,  -24,   -2,
	},
	// queen
	{
		  -4,   13,   41,   43,
		  -6,  -30,   11,  -14,
		  15,   16,   12,    6,
		  -7,  -22,   -2,  -13,
		  -8,  -10,  -10,  -13,
		 -12,    4,   -7,   -8,
		 -24,   -8,   12,   -3,
		  -7,  -18,  -15,    3,
	},
	// rook
	{
		  26,   37,   11,   57,
		  18,   24,   64,   64,
		  -9,   22,   22,   17,
		 -27,  -14,    5,   10,
		 -34,  -20,  -20,   -8,
		 -42,  -22,  -20,  -18,
		 -53,  -19,  -20,  -15,
		 -26,  -26,  -11,    1,
	},
	// bishop
	{
		 -21,   -4,  -66,  -36,
		 -37,   10,    7,    2,
		 -12,   26,   32,   26,
		  -6,   -3,   18,   31,
		  -9,    2,    4,   18,
		  -2,    7,   10,    5,
		  -1,   13,    8,   -4,
		 -33,  -14,  -15,  -20,
	},
	// knight
	{
		-128,  -60,  -59,    0,
		 -46,  -16,   57,   18,
		  -2,   60,   47,   64,
		  12,   14,   32,   33,
		  -9,   10,   14,   15,
		 -13,    6,   12,   12,
		 -18,  -29,   -2,    0,
		 -51,  -13,  -30,  -21,
	},
	// pawn
	{
		 -13,  -13,  -13,  -13,
		  21,   61,   60,   77,
		 -25,   -2,   25,   30,
		 -26,    0,   -4,    7,
		 -33,  -11,  -14,    2,
		 -27,   -4,  -12,  -12,
		 -35,   -2,  -12,  -26,
		 -13,  -13,  -13,  -13,
	},
};

const int psqtHalfEG[6][32] = {
	{
		 -35,  -26,   -9,  -16,
		   1,   10,   11,   -1,
		   3,   13,   12,    4,
		  -1,   16,   22,   20,
		  -6,    6,   22,   28,
		  -9,    2,   14,   22,
		 -23,  -10,    5,   14,
		 -50,  -30,  -14,  -28,
	},
	{
		  -6,    0,   -6,    0,
		 -14,   20,   18,   41,
		 -18,  -10,   10,   38,
		   6,   34,   17,   40,
		  -9,   21,   17,   33,
		  -6,  -24,    7,    2,
		 -26,  -30,  -42,  -15,
		 -40,  -28,  -30,  -44,
	},
	{
		   2,   -1,    9,    0,
		   3,    2,   -6,   -6,
		   1,   -2,   -2,    0,
		   2,   -1,    4,   -2,
		  -2,   -1,    2,   -2,
		  -6,   -4,   -6,   -4,
		  -2,   -7,   -4,   -3,
		 -11,    1,   -2,   -3,
	},
	{
		 -12,  -12,    2,    0,
		   0,   -3,   -1,   -4,
		   5,   -4,    2,   -2,
		   2,    9,    9,    9,
		  -2,    3,   11,   12,
		  -7,   -2,    6,   12,
		 -17,  -12,   -6,    5,
		 -11,   -5,  -16,   -3,
	},
	{
		 -38,  -22,    0,  -10,
		 -13,    1,  -11,    8,
		 -14,   -8,   16,   11,
		  -4,   15,   26,   30,
		  -4,   11,   24,   28,
		  -9,    1,    8,   20,
		 -22,   -5,   -1,    6,
		 -24,  -32,   -6,   -4,
	},
	{
		 -26,  -26,  -26,  -26,
		 127,  113,   92,   79,
		  48,   50,   25,   19,
		  -7,  -12,  -20,  -28,
		 -23,  -23,  -32,  -35,
		 -30,  -25,  -32,  -27,
		 -25,  -23,  -24,  -19,
		 -26,  -26,  -26,  -26,
	},
};

void initPSQT()
{
	for (int i = 0; i < 6; i++)
	{
		for (int y = 0; y < 8; y++)
		{
			for (int x = 0; x < 4; x++)
			{
				psqtMG[i + 1][y * 8 + x] = psqtHalfMG[i][y * 4 + x];
				psqtMG[i + 1][y * 8 + x + 4] = psqtHalfMG[i][y * 4 + 3 - x];

				psqtEG[i + 1][y * 8 + x] = psqtHalfEG[i][y * 4 + x];
				psqtEG[i + 1][y * 8 + x + 4] = psqtHalfEG[i][y * 4 + 3 - x];
			}
		}
	}
}

int getPSQTMG(PieceType piece, int square)
{
	// static constexpr int* psqt = psqtMG[0];
	return psqtMG[static_cast<int>(piece)][square];
	// return psqt[64 * static_cast<int>(piece) + square];
}

int getPSQTEG(PieceType piece, int square)
{
	// static constexpr int* psqt = psqtEG[0];
	return psqtEG[static_cast<int>(piece)][square];
	// return psqt[64 * static_cast<int>(piece) + square];
}

}