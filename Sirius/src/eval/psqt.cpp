#include "psqt.h"

namespace eval
{

int psqtMG[6][64];
int psqtEG[6][64];

const int psqtHalfMG[6][32] = {
	// king
	{
		-30,-40,-40,-50,
		-30,-40,-40,-50,
		-30,-40,-40,-50,
		-30,-40,-40,-50,
		-20,-30,-30,-40,
		-10,-20,-20,-20,
		 20, 20,  0,  0,
		 20, 30, 10,  0
	},
	// queen
	{
		-20,-10,-10, -5,
		-10,  0,  0,  0,
		-10,  0,  5,  5,
		 -5,  0,  5,  5,
		  0,  0,  5,  5,
		-10,  5,  5,  5,
		-10,  0,  5,  0,
		-20,-10,-10, -5
	},
	// rook
	{
		  0,  0,  0,  0,
		  5, 10, 10, 10,
		 -5,  0,  0,  0,
		 -5,  0,  0,  0,
		 -5,  0,  0,  0,
		 -5,  0,  0,  0,
		 -5,  0,  0,  0,
		  0,  0,  0,  5
	},
	// bishop
	{
		-20,-10,-10,-10,
		-10,  0,  0,  0,
		-10,  0,  5, 10,
		-10,  5,  5, 10,
		-10,  0, 10, 10,
		-10, 10, 10, 10,
		-10,  5,  0,  0,
		-20,-10,-10,-10
	},
	// knight
	{
		-50,-40,-30,-30,
		-40,-20,  0,  0,
		-30,  0, 10, 15,
		-30,  5, 15, 20,
		-30,  0, 15, 20,
		-30,  5, 10, 15,
		-40,-20,  0,  5,
		-50,-40,-30,-30
	},
	// pawn
	{
		 0,  0,  0,  0,
		50, 50, 50, 50,
		10, 10, 20, 30,
		 5,  5, 10, 25,
		 0,  0,  0, 20,
		 5, -5,-10,  0,
		 5, 10, 10,-20,
		 0,  0,  0,  0
	}
};

const int psqtHalfEG[6][32] = {
	// king
	{
		-50,-40,-30,-20,
		-30,-20,-10,  0,
		-30,-10, 20, 30,
		-30,-10, 30, 40,
		-30,-10, 30, 40,
		-30,-10, 20, 30,
		-30,-30,  0,  0,
		-50,-30,-30,-30
	},
	// queen
	{
		-20,-10,-10, -5,
		-10,  0,  0,  0,
		-10,  0,  5,  5,
		 -5,  0,  5,  5,
		  0,  0,  5,  5,
		-10,  5,  5,  5,
		-10,  0,  5,  0,
		-20,-10,-10, -5
	},
	// rook
	{
		  0,  0,  0,  0,
		  5, 10, 10, 10,
		 -5,  0,  0,  0,
		 -5,  0,  0,  0,
		 -5,  0,  0,  0,
		 -5,  0,  0,  0,
		 -5,  0,  0,  0,
		  0,  0,  0,  5
	},
	// bishop
	{
		-20,-10,-10,-10,
		-10,  0,  0,  0,
		-10,  0,  5, 10,
		-10,  5,  5, 10,
		-10,  0, 10, 10,
		-10, 10, 10, 10,
		-10,  5,  0,  0,
		-20,-10,-10,-10
	},
	// knight
	{
		-50,-40,-30,-30,
		-40,-20,  0,  0,
		-30,  0, 10, 15,
		-30,  5, 15, 20,
		-30,  0, 15, 20,
		-30,  5, 10, 15,
		-40,-20,  0,  5,
		-50,-40,-30,-30
	},
	// pawn
	{
		 0,  0,  0,  0,
		50, 50, 50, 50,
		10, 10, 20, 30,
		 5,  5, 10, 25,
		 0,  0,  0, 20,
		 5, -5,-10,  0,
		 5, 10, 10,-20,
		 0,  0,  0,  0
	}
};

void initPSQT()
{
	for (int i = 0; i < 6; i++)
	{
		for (int y = 0; y < 8; y++)
		{
			for (int x = 0; x < 4; x++)
			{
				psqtMG[i][y * 8 + x] = psqtHalfMG[i][y * 4 + x];
				psqtMG[i][y * 8 + x + 4] = psqtHalfMG[i][y * 4 + 3 - x];
				
				psqtEG[i][y * 8 + x] = psqtHalfEG[i][y * 4 + x];
				psqtEG[i][y * 8 + x + 4] = psqtHalfEG[i][y * 4 + 3 - x];
			}
		}
	}
}

int getPSQTMG(PieceType piece, int square)
{
	const int* psqt = psqtMG[0];
	psqt -= 64;
	return psqt[64 * static_cast<int>(piece) + square];
}

int getPSQTEG(PieceType piece, int square)
{
	const int* psqt = psqtEG[0];
	psqt -= 64;
	return psqt[64 * static_cast<int>(piece) + square];
}

}