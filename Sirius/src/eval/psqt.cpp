#include "psqt.h"

namespace eval
{

int psqtMG[7][64];
int psqtEG[7][64];

const int psqtHalfMG[6][32] = {
	// king
	{
		   8,  140,   38,  -12,
		 -41,   18,   39,   96,
		   0,  133,  146,   51,
		 -85,  -27,  -47,  -87,
		-159,  -98, -132, -202,
		 -69,  -54, -119, -158,
		  32,    9,  -79, -149,
		  35,   62,  -55,   -1,
	},
	// queen
	{
		  -9,   39,  109,  106,
		 -14,  -67,   42,  -24,
		  40,   46,   34,   24,
		 -13,  -50,   -1,  -27,
		 -15,  -22,  -21,  -27,
		 -26,   15,  -14,  -16,
		 -57,  -14,   33,   -4,
		 -17,  -42,  -34,   12,
	},
	// rook
	{
		  65,   87,   33,  136,
		  49,   63,  145,  154,
		 -20,   58,   55,   45,
		 -58,  -30,   12,   29,
		 -77,  -41,  -45,  -15,
		 -99,  -51,  -46,  -42,
		-126,  -45,  -46,  -38,
		 -60,  -62,  -24,    6,
	},
	// bishop
	{
		 -49,   -1, -157,  -83,
		 -86,   30,   27,   14,
		 -26,   71,   88,   76,
		 -12,   -5,   49,   81,
		 -19,    8,   13,   43,
		  -2,   21,   29,   16,
		   0,   36,   22,   -6,
		 -79,  -34,  -34,  -46,
	},
	// knight
	{
		-312, -141, -129,   28,
		-110,  -28,  149,   59,
		   3,  158,  126,  167,
		  29,   39,   84,   86,
		 -18,   32,   40,   41,
		 -28,   20,   35,   34,
		 -42,  -67,    0,    5,
		-121,  -27,  -67,  -51,
	},
	// pawn
	{
		 -29,  -29,  -29,  -29,
		  52,  151,  166,  202,
		 -50,    0,   67,   79,
		 -59,    3,   -7,   21,
		 -74,  -23,  -32,    8,
		 -61,   -7,  -26,  -26,
		 -81,    0,  -26,  -60,
		 -29,  -29,  -29,  -29,
	}
};

const int psqtHalfEG[6][32] = {
	// king
	{
		 -76,  -56,  -18,  -39,
		   6,   26,   34,    4,
		  11,   39,   35,   15,
		  -1,   44,   56,   55,
		 -15,   16,   55,   73,
		 -20,    8,   39,   58,
		 -52,  -19,   17,   38,
		-121,  -71,  -32,  -65,
	},
	// queen
	{
		  -8,    4,  -15,    9,
		 -25,   51,   44,  101,
		 -39,  -21,   33,   98,
		  16,   84,   47,  107,
		 -19,   60,   46,   86,
		 -11,  -57,   19,   10,
		 -61,  -72, -100,  -37,
		-100,  -66,  -69, -107,
	},
	// rook
	{
		  11,    2,   26,    6,
		  12,   10,   -7,  -11,
		   9,   -1,   -1,    3,
		   9,    2,   14,   -1,
		  -2,    1,    9,    0,
		 -10,   -3,  -12,   -6,
		  -1,  -13,   -5,   -4,
		 -23,    7,    0,   -3,
	},
	// bishop
	{
		 -26,  -28,    8,    3,
		   1,   -4,    1,   -5,
		  13,   -9,    4,   -1,
		   9,   26,   26,   26,
		  -3,   12,   30,   35,
		 -14,   -1,   17,   33,
		 -36,  -27,  -11,   17,
		 -22,   -6,  -37,   -4,
	},
	// knight
	{
		 -94,  -53,    0,  -28,
		 -31,    3,  -25,   19,
		 -34,  -16,   40,   28,
		  -6,   38,   64,   73,
		  -5,   31,   64,   74,
		 -19,    7,   24,   53,
		 -51,   -7,    1,   19,
		 -61,  -78,  -12,   -5,
	},
	// pawn
	{
		 -60,  -60,  -60,  -60,
		 320,  287,  228,  195,
		 120,  128,   67,   50,
		 -14,  -26,  -46,  -66,
		 -54,  -53,  -76,  -83,
		 -71,  -59,  -76,  -63,
		 -59,  -53,  -55,  -44,
		 -60,  -60,  -60,  -60,
	}
};

void initPSQT()
{
	for (int i = 0; i < 6; i++)
	{
		for (int y = 0; y < 8; y++)
		{
			for (int x = 0; x < 4; x++)
			{
				psqtMG[i + 1][y * 8 + x] = psqtHalfMG[i][y * 4 + x];
				psqtMG[i + 1][y * 8 + x + 4] = psqtHalfMG[i][y * 4 + 3 - x];

				psqtEG[i + 1][y * 8 + x] = psqtHalfEG[i][y * 4 + x];
				psqtEG[i + 1][y * 8 + x + 4] = psqtHalfEG[i][y * 4 + 3 - x];
			}
		}
	}
}

int getPSQTMG(PieceType piece, int square)
{
	// static constexpr int* psqt = psqtMG[0];
	return psqtMG[static_cast<int>(piece)][square];
	// return psqt[64 * static_cast<int>(piece) + square];
}

int getPSQTEG(PieceType piece, int square)
{
	// static constexpr int* psqt = psqtEG[0];
	return psqtEG[static_cast<int>(piece)][square];
	// return psqt[64 * static_cast<int>(piece) + square];
}

}