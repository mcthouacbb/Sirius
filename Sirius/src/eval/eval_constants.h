#pragma once

#include "../defs.h"

namespace eval
{

// clang-format off
#define S(mg, eg) ScorePair(mg, eg)

constexpr ScorePair MATERIAL[6] = {S(  66,  134), S( 321,  452), S( 337,  471), S( 431,  806), S( 910, 1893), S(0, 0)};

constexpr ScorePair PSQT[6][64] = {
    {
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  82,   94), S(  20,  114), S(  34,  125), S(  45,  104), S(  73,   75), S(  58,   73), S(  46,  107), S(  91,   94),
        S(   6,   11), S( -10,   23), S(   2,    2), S(   4,   -8), S(  -5,  -17), S(  -3,   -6), S( -15,   18), S(  -3,    9),
        S(   5,    9), S(   3,   19), S(  10,   -6), S(  11,  -17), S(   3,  -17), S(   0,  -10), S(  -2,   12), S(  -8,    9),
        S(  -6,   -4), S(  -9,   16), S(  17,  -27), S(  18,  -18), S(  13,  -18), S(   3,  -13), S( -14,   12), S( -15,   -5),
        S( -11,   -6), S(  11,    8), S(   3,    3), S(   7,   -1), S(  -3,    0), S(  -8,   -2), S( -17,   12), S( -23,   -6),
        S(  -3,   -7), S(  24,    9), S(  24,   60), S(   4,    8), S(  -3,    0), S(  -4,   -1), S(  -8,   11), S( -18,   -3),
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
    },
    {
        S( -61, -118), S( -82,   13), S(-119,   47), S(  -4,   14), S( -18,   14), S( -56,    3), S(-107,    7), S( -93,  -64),
        S(   0,   -3), S( -12,   23), S(  23,   11), S(  36,   14), S(  24,   19), S(  23,   -6), S( -23,   18), S(  -9,  -10),
        S(  17,   -6), S(  10,   13), S(  36,   12), S(  28,   16), S(  21,   16), S(  22,    8), S(   9,   10), S(   9,  -11),
        S(  31,    7), S(  29,   12), S(  34,   17), S(  29,   26), S(  34,   22), S(  17,   18), S(  19,    6), S(  12,    6),
        S(  21,    6), S(  28,    7), S(  25,   16), S(  18,   30), S(  17,   22), S(  18,   16), S(  17,    2), S(   8,    3),
        S(   4,   -6), S(  19,    0), S(  15,    0), S(  15,   15), S(  12,   11), S(  -1,   -1), S(   5,   -6), S(  -8,   -8),
        S(  10,  -10), S(   2,    2), S(   8,  -13), S(  11,   -1), S(   3,    0), S(   1,  -12), S(  -6,   -5), S( -15,  -23),
        S( -25,  -22), S( -11,  -21), S(   2,  -16), S(   5,   -7), S(   0,   -5), S(   1,  -22), S( -17,  -22), S( -22,  -36),
    },
    {
        S( -30,  -35), S( -58,   21), S( -93,   24), S( -71,   22), S( -75,   25), S( -67,   20), S( -57,   23), S( -33,  -12),
        S( -15,   -3), S( -39,    4), S( -14,   10), S( -28,   13), S( -19,   16), S( -14,   12), S( -12,  -11), S( -10,   -1),
        S(  22,  -10), S(   7,   12), S(  20,    7), S(  23,   11), S(  19,   13), S(   8,    2), S(  16,    4), S(   5,   -3),
        S(   7,   -3), S(  11,   15), S(  13,   19), S(  16,   29), S(  26,   25), S(  16,   14), S(  13,    9), S(   6,   -9),
        S(  19,  -10), S(   5,    7), S(  10,   17), S(  21,   15), S(  20,   18), S(  13,   11), S(   7,    6), S(  13,   -8),
        S(  19,  -10), S(  23,   -5), S(  13,   -7), S(  14,   12), S(  12,    5), S(   7,   -9), S(  30,   -7), S(  13,  -12),
        S(  22,  -15), S(  28,  -30), S(  25,  -14), S(  10,   -5), S(   1,   -5), S(  10,  -14), S(   9,  -27), S(  22,  -10),
        S(  10,  -33), S(  18,  -12), S( -12,   -9), S(   7,  -14), S(   4,  -12), S(  -5,   -6), S(  14,  -16), S(   8,  -20),
    },
    {
        S(  19,   15), S(  34,   12), S(  27,   13), S(  13,   27), S(  24,   15), S(  15,   21), S(  21,   20), S(  25,   18),
        S(  25,   12), S(  11,   22), S(  19,   21), S(  12,   24), S(  21,   25), S(  12,   25), S(  11,   23), S(  17,   23),
        S( -18,   19), S(   8,   13), S(  14,   11), S(  16,    9), S(  10,   10), S(   7,   15), S(   6,   17), S(  -3,   22),
        S( -18,   12), S(  -7,   16), S(  -2,   12), S(  -8,   11), S(  -3,    9), S(  -1,   11), S(  -3,   15), S(  -5,   12),
        S( -24,   -1), S( -11,    5), S( -13,   10), S( -10,    7), S( -11,    3), S( -14,    9), S( -15,   11), S( -12,    1),
        S( -17,  -24), S(   6,  -26), S(  -8,   -8), S(   0,  -18), S(  -1,  -19), S( -14,   -9), S(  -4,  -18), S( -18,  -14),
        S( -52,  -26), S(  -6,  -35), S(   4,  -25), S(   0,  -24), S(  -2,  -23), S(  -6,  -20), S( -12,  -25), S( -19,  -22),
        S( -16,  -35), S( -22,  -18), S(   6,  -23), S(  14,  -30), S(   6,  -27), S(  -1,  -21), S(   0,  -26), S(  -1,  -23),
    },
    {
        S(  11,   28), S(  45,    1), S(  21,   31), S(  10,   38), S(  19,   28), S(  28,   12), S(  15,   11), S( -20,   37),
        S(  34,   -5), S(  29,   -2), S(  11,   21), S( -18,   45), S(   8,   33), S(  14,    5), S(  17,   -7), S(  10,    3),
        S(   8,    9), S(  13,    8), S(  -4,   25), S( -20,   38), S(  -1,   33), S(  13,    4), S(  27,  -25), S(  20,  -11),
        S(  -3,   11), S( -13,   23), S( -11,   21), S( -24,   40), S( -20,   38), S(   6,   10), S(  -2,   23), S(   2,    1),
        S( -15,   26), S( -10,   20), S( -14,   19), S( -18,   31), S( -20,   44), S(  -8,   24), S(  -1,   11), S(  -5,    5),
        S(  -6,  -15), S(  -1,  -15), S(  -8,    1), S( -18,   14), S( -11,   15), S(  -6,    8), S(   6,   -7), S(   3,  -11),
        S(  -4,  -56), S(   8,  -84), S(   1,  -50), S(  -4,  -20), S(  -8,  -12), S(   5,  -33), S(   0,  -30), S(   1,  -20),
        S(  -1,  -55), S( -20,  -69), S( -16,  -51), S(  -9,  -43), S(  -4,  -35), S( -10,  -34), S( -13,  -30), S( -14,  -16),
    },
    {
        S(  47, -153), S(  11,   74), S(  -5,   21), S( -18,    5), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  22,   15), S(   3,  104), S( -41,   65), S( -60,   44), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  46,   45), S(   2,  112), S( -51,   55), S(-131,   13), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S( -27,   50), S( -44,   97), S( -66,   39), S(-135,    4), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S( -62,   42), S( -57,   76), S( -85,   23), S(-110,  -14), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  -1,   18), S(  -6,   46), S( -39,    1), S( -59,  -37), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  59,  -10), S(  46,   17), S(  18,  -35), S(  -8,  -72), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  59,  -42), S(  58,   -7), S(  20,  -58), S(  18, -115), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
    },
};

constexpr ScorePair MOBILITY[4][28] = {
    {S(  -8,  -22), S( -36,  -55), S( -22,  -18), S( -11,   -1), S(   0,    8), S(   5,   18), S(  13,   22), S(  21,   25), S(  31,   16), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S(  -4,  -32), S( -41,  -58), S( -24,  -32), S( -13,  -11), S(  -6,   -1), S(  -2,    9), S(   0,   16), S(   3,   19), S(   2,   22), S(   5,   22), S(   4,   23), S(  11,   15), S(  15,   14), S(  41,  -12), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S( -24,  -65), S( -54,  -64), S( -18,  -42), S( -11,  -25), S(  -3,  -15), S(   3,   -4), S(   1,    6), S(   4,   11), S(   5,   14), S(   7,   20), S(   9,   27), S(  10,   34), S(  10,   39), S(  13,   39), S(  39,   18), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S( -13,   41), S( -32,    2), S( -16,  -67), S( -41, -117), S( -17, -134), S( -14,  -65), S(  -6,  -47), S(  -2,  -31), S(  -3,  -12), S(  -2,    2), S(   0,    8), S(   0,   19), S(   2,   25), S(   2,   34), S(   4,   38), S(   5,   39), S(   3,   44), S(   4,   43), S(   5,   45), S(   7,   40), S(  11,   37), S(  14,   24), S(  15,   24), S(  20,   12), S(  13,   20), S(  16,    2), S(  28,  -33), S( -15,   -9)}
};

constexpr ScorePair THREAT_BY_PAWN[6] = {S(  -5,  -22), S(  73,   41), S(  66,   70), S(  72,   48), S(  56,   24), S(   0,    0)};
constexpr ScorePair THREAT_BY_KNIGHT[2][6] = {
    {S(   6,   36), S(   7,   79), S(  51,   31), S(  85,   13), S(  40,   13), S(   0,    0)},
    {S(  -8,   11), S(   3,   74), S(  39,   29), S(  72,   43), S(  50,   49), S(   0,    0)}
};
constexpr ScorePair THREAT_BY_BISHOP[2][6] = {
    {S(   3,   33), S(  37,   44), S(   8,   32), S(  58,   36), S(  63,   48), S(   0,    0)},
    {S(  -5,    4), S(  19,   21), S(  -1,    2), S(  54,   75), S(  65,   72), S(   0,    0)}
};
constexpr ScorePair THREAT_BY_ROOK[2][6] = {
    {S(  -2,   50), S(  37,   49), S(  46,   47), S(   5,  -73), S(  70,  -19), S(   0,    0)},
    {S( -10,    9), S(   8,   14), S(  19,    4), S(  20, -104), S(  53,   94), S(   0,    0)}
};
constexpr ScorePair THREAT_BY_QUEEN[2][6] = {
    {S(   7,   23), S(  25,   28), S(  21,   54), S(  16,   12), S(   1,  -52), S( 152,   66)},
    {S(  -6,   18), S(   1,    5), S(  -8,   26), S(  -4,   -7), S( -13,  -47), S( 107,  197)}
};
constexpr ScorePair THREAT_BY_KING[6] = {S(  50,   14), S(  26,   40), S(  98,   31), S(  86,    5), S(   0,    0), S(   0,    0)};
constexpr ScorePair KNIGHT_HIT_QUEEN = S(   7,    0);
constexpr ScorePair BISHOP_HIT_QUEEN = S(  16,   14);
constexpr ScorePair ROOK_HIT_QUEEN = S(  20,   -3);
constexpr ScorePair PUSH_THREAT = S(  13,   18);
constexpr ScorePair RESTRICTED_SQUARES = S(   2,    3);

constexpr ScorePair ISOLATED_PAWN[8] = {S(  -4,    3), S(  -4,  -16), S( -10,  -12), S( -10,  -15), S( -15,  -14), S(  -9,   -8), S(  -6,  -12), S(  -9,    1)};
constexpr ScorePair DOUBLED_PAWN[8] = {S(   1,  -54), S(   6,  -41), S(  -2,  -26), S(  -6,  -15), S( -16,    2), S(  -6,  -18), S(   5,  -40), S(   7,  -45)};
constexpr ScorePair BACKWARDS_PAWN[8] = {S(   0,    0), S(  -8,  -13), S(   0,  -15), S(  -7,  -14), S(   8,  -22), S(  10,   25), S(   0,    0), S(   0,    0)};
constexpr ScorePair PAWN_PHALANX[8] = {S(   0,    0), S(   5,   -6), S(  12,   -2), S(  19,   10), S(  40,   35), S(  74,  141), S( 113,  196), S(   0,    0)};
constexpr ScorePair DEFENDED_PAWN[8] = {S(   0,    0), S(   0,    0), S(  18,    5), S(  11,    9), S(  18,   24), S(  42,   57), S(  74,  121), S(   0,    0)};
constexpr ScorePair CANDIDATE_PASSER[2][8] = {
    {S(   0,    0), S( -22,  -14), S(  -5,  -15), S(  -2,    3), S(  17,   23), S(  41,   81), S(   0,    0), S(   0,    0)},
    {S(   0,    0), S( -15,  -10), S(  -9,    9), S(  -4,   24), S(   9,   36), S(  48,   94), S(   0,    0), S(   0,    0)}
};

constexpr ScorePair PASSED_PAWN[2][2][8] = {
    {
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -33,  -26), S( -10,   27), S(  29,  132), S( 111,  187), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -24,  -38), S(  -1,  -11), S(  31,   57), S(  59,   57), S(   0,    0)}
    },
    {
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -26,  -40), S(  -6,   -8), S(  29,   56), S(  24,   30), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -28,  -50), S(  -3,  -26), S(  18,   31), S( -10,    0), S(   0,    0)}
    }
};
constexpr ScorePair OUR_PASSER_PROXIMITY[8] = {S(  79,  106), S( 112,   68), S(  45,   67), S(  -4,   58), S(  -2,   33), S(   1,   22), S(  15,   10), S(  -3,   20)};
constexpr ScorePair THEIR_PASSER_PROXIMITY[8] = {S( -51,    6), S(   4,   -3), S(  27,   -1), S(  22,   24), S(  12,   59), S(  16,   72), S(  21,   75), S(  21,   60)};
constexpr ScorePair PASSER_DEFENDED_PUSH[8] = {S(   0,    0), S(   0,    0), S(   0,    0), S(   8,    7), S(   9,   20), S(  36,   32), S(  59,  101), S(   0,    0)};

constexpr ScorePair PAWN_STORM[2][4][8] = {
    {
        {S(  29,   25), S( -86,  -67), S(   3,  -32), S(  45,    9), S(  20,   22), S(   4,   23), S(  -3,   27), S(   0,    0)},
        {S(  24,   19), S(  58,  -92), S(  77,  -48), S(  34,    1), S(  10,   18), S( -24,   21), S(   2,   19), S(   0,    0)},
        {S(   8,   15), S(  52,  -69), S( 105,  -43), S(  66,   -4), S(   8,   16), S( -18,   19), S(  -5,   17), S(   0,    0)},
        {S(   9,    0), S( 133,  -85), S( 117,  -47), S(  57,   -3), S(   5,    7), S( -25,    3), S( -25,    5), S(   0,    0)}
    },
    {
        {S(   0,    0), S(   0,    0), S(  74,   39), S(  -6,   26), S(  -3,   31), S(  10,   40), S(  31,   30), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S( 142,   32), S( -28,   27), S( -12,   32), S( -18,   44), S(   3,   30), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S( 133,   12), S(  13,   19), S(  -8,   30), S(  -5,   35), S(  54,   13), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S( 135,    2), S(  13,   15), S( -20,   15), S( -10,   14), S( -22,   -7), S(   0,    0)}
    }
};
constexpr ScorePair PAWN_SHIELD[4][8] = {
    {S(  56,   28), S(   0,   40), S( -14,   32), S(  31,   27), S(  38,   19), S(   5,   13), S( -22,   19), S(   0,    0)},
    {S(  42,   20), S( -32,   26), S(   5,   20), S(  40,   13), S(  38,    4), S(  -4,    0), S( -34,  -18), S(   0,    0)},
    {S(  24,   15), S(   8,   53), S(   5,   10), S(  37,   -7), S(  32,   -7), S(   6,   -3), S( -68,    8), S(   0,    0)},
    {S(  12,    9), S( -25,    0), S(   4,   -4), S(  27,  -10), S(  21,   -8), S(  25,   -1), S( -33,    4), S(   0,    0)}
};
constexpr ScorePair SAFE_KNIGHT_CHECK = S( 100,    1);
constexpr ScorePair SAFE_BISHOP_CHECK = S(  69,   16);
constexpr ScorePair SAFE_ROOK_CHECK = S( 107,    9);
constexpr ScorePair SAFE_QUEEN_CHECK = S(  63,   20);
constexpr ScorePair UNSAFE_KNIGHT_CHECK = S(  17,    0);
constexpr ScorePair UNSAFE_BISHOP_CHECK = S(  35,    6);
constexpr ScorePair UNSAFE_ROOK_CHECK = S(  41,    2);
constexpr ScorePair UNSAFE_QUEEN_CHECK = S(  20,    4);
constexpr ScorePair QUEENLESS_ATTACK = S(-108,  376);
constexpr ScorePair KING_ATTACKER_WEIGHT[4] = {S(  57,   -3), S(  23,   -1), S(  25,   -9), S(   6,  -15)};
constexpr ScorePair KING_ATTACKS = S(   7,    0);
constexpr ScorePair WEAK_KING_RING = S(   5,    0);
constexpr ScorePair KING_FLANK_ATTACKS[2] = {S(  13,   -4), S(   4,    0)};
constexpr ScorePair KING_FLANK_DEFENSES[2] = {S(  -8,    0), S(  -6,    3)};
constexpr ScorePair SAFETY_OFFSET = S(  75,  174);

constexpr ScorePair MINOR_BEHIND_PAWN = S(   2,   10);
constexpr ScorePair KNIGHT_OUTPOST = S(  18,   16);
constexpr ScorePair BISHOP_PAWNS[7] = {S(  11,    5), S(   5,   13), S(   3,    8), S(   1,    3), S(  -4,   -3), S(  -7,  -10), S( -10,  -19)};
constexpr ScorePair BISHOP_PAIR = S(  22,   66);
constexpr ScorePair LONG_DIAG_BISHOP = S(  11,   12);
constexpr ScorePair ROOK_OPEN[2] = {S(  31,    0), S(  19,    2)};

constexpr ScorePair TEMPO = S(  29,   19);

constexpr ScorePair COMPLEXITY_PAWNS = S(   0,   10);
constexpr ScorePair COMPLEXITY_PAWNS_BOTH_SIDES = S(   0,  125);
constexpr ScorePair COMPLEXITY_PAWN_ENDGAME = S(   0,  131);
constexpr ScorePair COMPLEXITY_OFFSET = S(   0, -206);

#undef S
// clang-format on

}
