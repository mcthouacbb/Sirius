#pragma once

#include "../defs.h"

namespace eval
{

#define S(mg, eg) PackedScore(mg, eg)

constexpr PackedScore MATERIAL[6] = {S(  55,  129), S( 263,  455), S( 288,  465), S( 350,  839), S( 760, 1513), S(0, 0)};

constexpr PackedScore PSQT[6][64] = {
	{
		S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
		S(  62,   89), S(  34,   93), S(  33,  104), S(  51,   84), S(  65,   70), S(  33,  100), S(  33,  105), S(  62,   93),
		S(  23,   26), S(  27,   46), S(  28,   14), S(  51,  -21), S(  38,  -15), S(  22,    7), S(   2,   36), S(   9,   31),
		S(  16,   18), S(   8,   13), S(  10,   -6), S(  17,  -18), S(   6,  -18), S(   0,   -3), S(  -5,   13), S( -10,   22),
		S(   6,    5), S(   6,   10), S(   5,  -19), S(  12,  -14), S(   7,  -14), S(  -4,   -7), S( -12,   10), S( -15,    7),
		S(   0,    1), S(   8,   -2), S(   1,  -25), S(  -2,    1), S(  -7,    0), S( -14,   -7), S( -21,    3), S( -27,    5),
		S(  13,    4), S(  29,   -1), S(  17,   -9), S(   7,   10), S(  -5,    3), S(  -7,   -2), S( -12,   12), S( -17,   12),
		S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
	},
	{
		S( -65,  -85), S( -74,  -17), S( -22,  -18), S(  13,  -13), S( -31,    5), S( -64,   11), S( -99,   15), S( -76,  -42),
		S(  -6,   -9), S(  21,   -1), S(  31,   -7), S(   9,    4), S(  11,    8), S(   3,   12), S(  -3,   20), S(  -8,   10),
		S(  14,   -7), S(  13,   -4), S(  53,  -19), S(  36,    1), S(  19,    8), S(  12,    6), S(   3,    6), S(  -5,    5),
		S(  32,    4), S(  34,    6), S(  44,    6), S(  34,   14), S(  28,   17), S(  28,    8), S(  18,    5), S(   7,   18),
		S(   9,   16), S(  19,   12), S(  26,    9), S(  18,   22), S(  23,   14), S(  19,   14), S(  20,    3), S(   2,   13),
		S(   2,    0), S(  16,   -3), S(   8,   -9), S(  16,    9), S(   6,    9), S(   0,   -4), S(   0,   -4), S( -12,    0),
		S(   3,    6), S(   6,   -6), S(   5,   -7), S(   4,   -1), S(   5,   -1), S(  -6,   -5), S( -11,   -2), S( -17,    0),
		S( -11,   -1), S( -10,    0), S(  -3,   -8), S(  -1,    5), S(  -8,    1), S( -20,   -5), S( -13,   -2), S( -45,   13),
	},
	{
		S( -36,   -3), S( -34,    7), S( -13,    0), S( -67,   11), S( -67,   19), S( -51,    5), S( -26,    8), S( -14,   15),
		S( -23,   -5), S( -34,   12), S( -13,    0), S(  -4,   -2), S( -20,    8), S(   0,   -2), S(  -2,   -1), S(  -2,   -7),
		S(  18,   10), S(  12,   -3), S(  38,    5), S(   8,    4), S(  13,   -2), S(   6,    3), S(   7,    3), S(   6,    2),
		S(  -3,    4), S(   7,    8), S(   5,   12), S(  16,   14), S(  16,   19), S(  11,    4), S(   4,    9), S(  -7,    7),
		S(  12,   -6), S(   2,    7), S(   4,    6), S(   7,   11), S(  14,    9), S(  -4,   12), S(  -2,    5), S(   0,    1),
		S(  19,  -12), S(  20,  -11), S(  11,   -4), S(   3,    6), S(  -4,    2), S(   5,    3), S(   9,    1), S(   0,   -7),
		S(  21,  -21), S(  28,  -25), S(  19,  -16), S(   4,   -7), S(  -4,   -2), S(   7,  -20), S(   6,  -18), S(  12,   -7),
		S(  33,  -32), S(  18,  -22), S(  -4,   -1), S(  13,   -5), S(   0,   -3), S(   1,    7), S(  10,   -1), S(  12,   -8),
	},
	{
		S(  11,    8), S( -28,   40), S( -13,   27), S( -10,   14), S( -26,   25), S( -26,   32), S(  -8,   21), S(  -6,   19),
		S(  28,   -3), S(  26,    6), S(  15,   11), S(   5,   12), S(  16,   13), S(   0,   28), S(  -1,   22), S(   0,   15),
		S(  11,    2), S(  36,    2), S(  29,   -1), S(  23,    5), S(   3,   15), S(  -1,   24), S(  12,   19), S(  -8,   23),
		S(   3,    9), S(   4,   14), S(  13,   11), S(  11,    4), S(   3,   13), S(   6,   18), S(   5,   19), S(  -9,   22),
		S(  -7,   -1), S(  11,    3), S(  -3,    8), S(   7,    1), S(  -4,    5), S(  -7,    9), S( -10,   10), S( -13,   10),
		S(  10,  -29), S(  19,  -30), S(   1,  -16), S(   2,  -17), S(  -9,  -10), S( -13,  -11), S( -12,  -12), S( -17,   -9),
		S(  -3,  -34), S(  21,  -42), S(   4,  -26), S(   4,  -26), S(  -3,  -21), S(  -4,  -19), S( -13,  -15), S( -16,  -20),
		S(  -7,  -37), S(  -5,  -18), S(  -1,  -22), S(   6,  -29), S(   0,  -26), S(  -7,  -17), S(  -7,  -22), S(  -7,  -18),
	},
	{
		S(   7,  -28), S(  38,  -47), S(  -9,   13), S( -22,   19), S(   9,  -17), S( -22,   10), S( -39,    4), S( -16,   -8),
		S(  35,    1), S(  -2,    9), S( -19,   30), S( -37,   60), S( -26,   42), S(  -8,    9), S(  -5,  -11), S(   7,  -12),
		S(  13,    6), S(  11,    4), S(   4,   17), S(  -8,   29), S(   2,   22), S(   9,   12), S(   7,   -5), S(  17,   -6),
		S(  11,   17), S(   8,   38), S(   7,   13), S( -10,   32), S(  -5,   31), S(   6,    8), S(   5,   16), S(   2,   12),
		S(  11,   10), S(  15,   15), S(   2,   26), S(   1,   28), S(  -4,   30), S(  -4,   24), S(   3,   17), S(  -1,   10),
		S(  14,  -23), S(  13,   -7), S(   4,    7), S(  -6,   22), S(  -6,   14), S(  -5,   17), S(   4,   -4), S(   4,  -13),
		S(  13,  -57), S(  18,  -71), S(   9,  -41), S(   5,   -5), S(   3,    0), S(   4,  -18), S(   3,  -22), S(  11,  -39),
		S(   8,  -57), S(  -6,  -56), S( -15,  -22), S(  -6,  -16), S(  -6,  -11), S( -10,   -6), S( -12,  -15), S( -12,  -12),
	},
	{
		S(  14,  -75), S(   0,    4), S( -21,   -8), S( -23,   -9), S(   6,   -5), S(   6,   -5), S(   6,   -5), S(   6,   -5),
		S( -47,   32), S(   0,   62), S(  -6,   47), S(  37,   14), S(   6,   -5), S(   6,   -5), S(   6,   -5), S(   6,   -5),
		S( -11,   22), S(  24,   55), S(  30,   42), S(   2,   43), S(   6,   -5), S(   6,   -5), S(   6,   -5), S(   6,   -5),
		S( -51,   22), S( -25,   50), S( -21,   41), S( -42,   34), S(   6,   -5), S(   6,   -5), S(   6,   -5), S(   6,   -5),
		S( -68,   12), S( -35,   33), S( -23,   20), S( -44,   18), S(   6,   -5), S(   6,   -5), S(   6,   -5), S(   6,   -5),
		S( -22,   -9), S(   2,   10), S( -11,   -1), S( -16,   -3), S(   6,   -5), S(   6,   -5), S(   6,   -5), S(   6,   -5),
		S(  27,  -31), S(  28,   -6), S(   9,  -15), S(  -5,  -18), S(   6,   -5), S(   6,   -5), S(   6,   -5), S(   6,   -5),
		S(  17,  -66), S(  19,  -27), S(   1,  -31), S(  11,  -52), S(   6,   -5), S(   6,   -5), S(   6,   -5), S(   6,   -5),
	},
};

constexpr PackedScore MOBILITY[4][28] = {
	{S( -11,  -19), S( -37,  -64), S( -14,  -30), S(  -7,   -4), S(   3,    9), S(   5,   20), S(  12,   27), S(  20,   34), S(  28,   34), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -20,  -33), S( -48,  -98), S( -28,  -38), S( -22,  -16), S( -11,   -3), S(  -5,    7), S(  -1,   18), S(   4,   23), S(   6,   28), S(  11,   30), S(  13,   32), S(  24,   22), S(  25,   27), S(  41,    7), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -24,  -42), S(  12,  -74), S( -23,  -53), S( -12,  -32), S(  -6,  -24), S(  -2,   -6), S(   0,    0), S(  -5,   10), S(  -1,   13), S(   2,   19), S(   5,   27), S(   6,   36), S(   8,   42), S(  15,   43), S(  21,   42), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -35,   14), S( -48,  -83), S( -88,  -86), S( -63, -274), S( -68, -100), S( -28,  -37), S( -21,  -10), S( -14,   -6), S(  -7,   -2), S(  -7,   21), S(  -5,   29), S(  -2,   38), S(   0,   43), S(   4,   46), S(   6,   48), S(   9,   50), S(  10,   52), S(   9,   58), S(  10,   60), S(  11,   60), S(  19,   52), S(  25,   38), S(  28,   35), S(  48,    8), S(  52,    1), S(  62,  -14), S(  60,  -28), S(   8,  -14)}
};

constexpr PackedScore THREAT_BY_PAWN[6] = {S(   8,  -16), S(  59,   32), S(  58,   64), S(  73,   31), S(  71,  -12), S(   0,    0)};
constexpr PackedScore THREAT_BY_KNIGHT[2][6] = {
	{S(   7,   30), S(  24,   38), S(  35,   45), S(  69,   10), S(  44,  -24), S(   0,    0)},
	{S(  -4,   11), S(  12,   37), S(  27,   32), S(  58,   35), S(  52,    2), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_BISHOP[2][6] = {
	{S(   1,   39), S(  39,   36), S(  -8,   35), S(  65,   16), S(  63,   66), S(   0,    0)},
	{S(   0,    8), S(  20,   24), S( -20,  -17), S(  40,   49), S(  43,  127), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_ROOK[2][6] = {
	{S(   1,   44), S(  17,   66), S(  25,   60), S(  13,  -51), S(  70,    8), S(   0,    0)},
	{S(  -8,    7), S(   2,   17), S(  13,    2), S(  13,  -94), S(  60,   44), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_QUEEN[2][6] = {
	{S(   6,   11), S(  22,   22), S(   8,   54), S(  13,    7), S(  11,  -62), S(  81,   38)},
	{S(  -1,   10), S(   0,    7), S(  -6,   20), S(  -5,    3), S( -16,  -76), S(  99,   64)}
};
constexpr PackedScore THREAT_BY_KING[6] = {S( -33,   51), S(   0,   51), S(  19,   44), S(  77,   17), S(   0,    0), S(   0,    0)};
constexpr PackedScore PUSH_THREAT = S(  14,   21);

constexpr PackedScore ISOLATED_PAWN[8] = {S(  -6,   -2), S(  -4,  -12), S( -10,  -10), S( -10,  -16), S( -10,  -15), S(  -6,   -7), S(  -1,  -11), S(  -8,   -1)};
constexpr PackedScore PAWN_PHALANX[8] = {S(   0,    0), S(   5,   -3), S(  11,    4), S(  18,   16), S(  43,   63), S( 104,  228), S( -63,  386), S(   0,    0)};
constexpr PackedScore DEFENDED_PAWN[8] = {S(   0,    0), S(   0,    0), S(  19,   10), S(  12,    9), S(  12,   19), S(  19,   58), S( 123,   77), S(   0,    0)};

constexpr PackedScore PASSED_PAWN[2][2][8] = {
	{
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -29,  -38), S( -15,   27), S( -26,  163), S(   5,  258), S(   0,    0)},
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -17,  -53), S(  10,  -26), S(  13,   16), S(  52,   35), S(   0,    0)}
	},
	{
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -24,  -60), S(   0,  -29), S(  13,    1), S(  53,   -1), S(   0,    0)},
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -25,  -67), S(   1,  -39), S(  -7,  -21), S(  -6,  -22), S(   0,    0)}
	}
};
constexpr PackedScore OUR_PASSER_PROXIMITY[8] = {S(   0,    0), S(  39,   88), S(  -1,   72), S(  -1,   44), S(   2,   32), S(   8,   24), S(  16,   23), S(  11,   22)};
constexpr PackedScore THEIR_PASSER_PROXIMITY[8] = {S(   0,    0), S( -37,    7), S(  20,   -2), S(  12,   27), S(  16,   48), S(   8,   84), S(  11,   85), S(  13,   74)};

constexpr PackedScore PAWN_STORM[2][4][8] = {
	{
		{S(  13,   14), S(-123,  -52), S(  -1,   -9), S(   4,  -13), S(   0,    1), S(  -5,   10), S(  -3,    9), S(   0,    0)},
		{S(  10,    2), S( -12, -101), S(  51,  -45), S(   9,  -10), S(   2,   -4), S( -10,    7), S(  -7,   11), S(   0,    0)},
		{S(  -3,    6), S(  53, -103), S(  66,  -48), S(  17,  -18), S(   3,   -1), S(  -7,    8), S(  -8,   12), S(   0,    0)},
		{S(   8,   -7), S(  98,  -91), S(  37,  -22), S(  13,   -1), S(  -2,    5), S(  -8,    1), S(  -3,    2), S(   0,    0)}
	},
	{
		{S(   0,    0), S(  -3,  -25), S( -33,  136), S(  16,  -55), S(  -2,    8), S(  -1,    6), S(  -4,   10), S(   0,    0)},
		{S(   0,    0), S(   5,  -88), S(   5,   48), S(  47,  -36), S(   3,    2), S(  -7,    7), S(  -7,   10), S(   0,    0)},
		{S(   0,    0), S(  -9,   13), S( -56, -108), S(  19,  -30), S(   2,    4), S(  -2,    7), S(  -8,   11), S(   0,    0)},
		{S(   0,    0), S( -12,  -57), S(  57,    1), S(  21,   -2), S(   0,   10), S(   0,   -9), S(   0,    6), S(   0,    0)}
	}
};
constexpr PackedScore PAWN_SHIELD[4][8] = {
	{S(  14,    5), S(  -7,   27), S( -14,   17), S(  -3,    9), S(   4,   -2), S( -29,  -27), S( -64,  -40), S(   0,    0)},
	{S(  17,    3), S( -14,   12), S( -10,    3), S(  12,   -2), S(  10,  -10), S(  -1,  -16), S( -40,  -30), S(   0,    0)},
	{S(   5,   15), S( -11,    9), S(   4,  -10), S(   2,   -1), S(   1,    1), S(  11,  -14), S(  -3,  -39), S(   0,    0)},
	{S(  13,   -3), S(   5,   -1), S(  -3,    0), S(   0,   -5), S(   8,   -9), S(  28,  -22), S(  -7,  -25), S(   0,    0)}
};
constexpr PackedScore SAFE_KNIGHT_CHECK = S(  76,   -3);
constexpr PackedScore SAFE_BISHOP_CHECK = S(  22,   12);
constexpr PackedScore SAFE_ROOK_CHECK = S(  55,    5);
constexpr PackedScore SAFE_QUEEN_CHECK = S(  21,   21);
constexpr PackedScore UNSAFE_KNIGHT_CHECK = S(   7,    1);
constexpr PackedScore UNSAFE_BISHOP_CHECK = S(  11,   12);
constexpr PackedScore UNSAFE_ROOK_CHECK = S(  19,    0);
constexpr PackedScore UNSAFE_QUEEN_CHECK = S(   5,   13);
constexpr PackedScore KING_ATTACKER_WEIGHT[4] = {S(  18,    2), S(  15,    2), S(  16,  -14), S(   4,    3)};
constexpr PackedScore KING_ATTACKS[14] = {S( -36,   21), S( -42,   14), S( -49,    9), S( -53,   11), S( -52,    7), S( -46,    2), S( -31,   -3), S( -14,  -12), S(  13,  -22), S(  36,  -18), S(  54,  -28), S(  63,   13), S(  83,  -20), S(  75,   24)};

constexpr PackedScore MINOR_BEHIND_PAWN = S(   7,   15);
constexpr PackedScore KNIGHT_OUTPOST = S(  24,   19);
constexpr PackedScore BISHOP_PAWNS[7] = {S(   3,   24), S(   5,   22), S(   3,   13), S(   0,    4), S(  -3,   -6), S(  -3,  -20), S(  -8,  -35)};
constexpr PackedScore BISHOP_PAIR = S(  18,   64);
constexpr PackedScore ROOK_OPEN[2] = {S(  24,    2), S(  14,    4)};

constexpr PackedScore TEMPO = S(  29,   37);

constexpr PackedScore COMPLEXITY_PAWNS = S(   0,    4);
constexpr PackedScore COMPLEXITY_PASSERS = S(   0,    1);
constexpr PackedScore COMPLEXITY_PAWNS_BOTH_SIDES = S(   0,   69);
constexpr PackedScore COMPLEXITY_PAWN_ENDGAME = S(   0,   64);
constexpr PackedScore COMPLEXITY_OFFSET = S(   0,  -97);

#undef S


}