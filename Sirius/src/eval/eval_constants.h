#pragma once

#include "../defs.h"

namespace eval
{

#define S(mg, eg) PackedScore(mg, eg)

constexpr PackedScore MATERIAL[6] = {S(  60,  129), S( 290,  445), S( 313,  454), S( 386,  813), S( 793, 1504), S(0, 0)};

constexpr PackedScore PSQT[6][64] = {
	{
		S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
		S(  63,   85), S(  29,   92), S(  33,   96), S(  56,   74), S(  64,   67), S(  31,   96), S(  31,  101), S(  62,   91),
		S(  23,   27), S(  28,   44), S(  28,   13), S(  55,  -21), S(  38,  -13), S(  23,    7), S(   1,   34), S(   9,   32),
		S(  15,   18), S(   9,   13), S(  10,   -5), S(  18,  -17), S(   5,  -17), S(  -2,   -2), S(  -5,   12), S( -12,   22),
		S(   6,    4), S(   7,   10), S(   6,  -17), S(  11,  -13), S(   6,  -12), S(  -5,   -7), S( -13,    9), S( -17,    7),
		S(   0,    0), S(  10,   -3), S(   1,  -23), S(  -2,    1), S(  -8,    0), S( -15,   -7), S( -23,    3), S( -28,    5),
		S(  15,    3), S(  34,   -2), S(  15,   -9), S(   8,   10), S(  -6,    3), S(  -8,   -2), S( -12,   11), S( -18,   11),
		S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
	},
	{
		S( -65,  -89), S( -76,  -24), S( -25,  -19), S(  17,  -16), S( -32,    3), S( -69,    8), S(-111,   14), S( -79,  -45),
		S(  -3,  -12), S(  22,   -1), S(  32,   -5), S(  13,    4), S(  15,    5), S(   0,   13), S(  -3,   18), S( -10,   10),
		S(  20,   -9), S(  11,   -2), S(  56,  -16), S(  38,    3), S(  21,   10), S(  11,    8), S(   1,    6), S(  -7,    7),
		S(  38,    1), S(  36,    7), S(  48,    8), S(  34,   16), S(  30,   19), S(  29,   10), S(  18,    5), S(   8,   16),
		S(  12,   13), S(  21,   11), S(  25,    9), S(  18,   22), S(  23,   15), S(  17,   15), S(  20,    3), S(   3,   11),
		S(   3,   -2), S(  16,   -3), S(   5,   -7), S(  13,   10), S(   2,   10), S(  -4,   -3), S(  -2,   -4), S( -13,   -2),
		S(   4,    4), S(   8,   -5), S(   4,   -6), S(   2,   -1), S(   2,   -1), S(  -9,   -4), S(  -7,   -3), S( -17,   -1),
		S( -10,   -9), S( -11,   -1), S(  -3,   -9), S(  -1,    2), S(  -8,    0), S( -21,   -7), S( -14,   -3), S( -47,    5),
	},
	{
		S( -38,   -5), S( -37,    6), S( -16,    1), S( -75,   13), S( -72,   17), S( -55,    3), S( -29,    7), S( -15,   13),
		S( -25,   -5), S( -35,   11), S(  -7,   -3), S(  -2,   -1), S( -22,    9), S(   1,   -2), S(  -1,    0), S(  -4,   -6),
		S(  19,   10), S(  14,   -1), S(  44,    5), S(  12,    4), S(  16,    0), S(   7,    4), S(   7,    6), S(   5,    2),
		S(  -5,    4), S(   8,    8), S(   8,   12), S(  20,   14), S(  20,   19), S(  13,    5), S(   4,    9), S(  -9,    8),
		S(  14,   -7), S(   1,    7), S(   5,    7), S(   9,   12), S(  17,   10), S(  -4,   13), S(  -3,    6), S(  -1,    1),
		S(  20,  -12), S(  22,  -10), S(  12,   -2), S(   4,    7), S(  -4,    3), S(   6,    4), S(  10,    2), S(  -1,   -7),
		S(  22,  -20), S(  30,  -24), S(  20,  -14), S(   3,   -6), S(  -5,    0), S(   8,  -18), S(   6,  -17), S(  14,   -8),
		S(  36,  -32), S(  19,  -20), S(  -4,    0), S(  13,   -4), S(  -1,   -3), S(   2,    7), S(  12,   -2), S(  14,   -6),
	},
	{
		S(  10,    9), S( -24,   36), S(  -2,   23), S( -13,   16), S( -28,   25), S( -21,   27), S( -12,   22), S(  -7,   19),
		S(  26,    1), S(  34,    4), S(  23,    9), S(   5,   13), S(  16,   15), S(   0,   27), S(  -2,   22), S(   1,   14),
		S(   9,    3), S(  46,    0), S(  35,    0), S(  28,    3), S(   4,   14), S(   0,   24), S(  13,   19), S(  -7,   21),
		S(   3,   10), S(   6,   15), S(  19,    9), S(  11,    5), S(   2,   14), S(   6,   19), S(   6,   18), S( -10,   21),
		S(  -7,   -1), S(  13,    4), S(  -2,    7), S(   6,    3), S(  -6,    7), S(  -8,   10), S( -11,   10), S( -14,   10),
		S(  10,  -27), S(  20,  -27), S(   2,  -16), S(   2,  -16), S( -11,   -8), S( -15,   -9), S( -14,  -10), S( -19,   -7),
		S(  -5,  -31), S(  20,  -38), S(   5,  -25), S(   3,  -24), S(  -5,  -19), S(  -5,  -18), S( -16,  -13), S( -18,  -19),
		S(  -9,  -36), S(  -7,  -17), S(  -2,  -21), S(   6,  -28), S(  -2,  -24), S(  -9,  -16), S(  -9,  -21), S( -10,  -17),
	},
	{
		S(   3,  -25), S(  39,  -45), S(   2,    8), S(  -3,   -2), S(  13,  -20), S( -15,   -2), S( -39,   -2), S( -20,  -12),
		S(  35,    2), S(  -4,   12), S(   1,   21), S( -37,   53), S( -26,   35), S(  -7,    7), S(  -6,  -12), S(   6,  -13),
		S(  13,    2), S(  16,    8), S(   9,   16), S(  -3,   27), S(   4,   19), S(   8,   15), S(   8,   -7), S(  18,   -9),
		S(  10,   19), S(   9,   42), S(   9,   15), S( -11,   35), S(  -7,   34), S(   6,    8), S(   4,   18), S(   2,    9),
		S(  12,    9), S(  15,   19), S(   3,   28), S(   0,   31), S(  -5,   31), S(  -5,   24), S(   1,   19), S(  -1,    7),
		S(  13,  -23), S(  13,   -4), S(   4,   10), S(  -7,   23), S(  -6,   16), S(  -7,   19), S(   3,   -2), S(   2,  -12),
		S(  11,  -57), S(  17,  -68), S(   8,  -38), S(   4,   -4), S(   2,    2), S(   3,  -16), S(   2,  -20), S(   9,  -38),
		S(   3,  -51), S( -15,  -51), S( -18,  -23), S(  -8,  -17), S(  -8,  -10), S( -12,   -5), S( -16,  -13), S( -16,  -11),
	},
	{
		S(   4,  -66), S(   2,    0), S( -29,   -7), S( -24,   -8), S(   8,   -6), S(   8,   -6), S(   8,   -6), S(   8,   -6),
		S( -57,   32), S(   1,   58), S(  -9,   46), S(  30,   18), S(   8,   -6), S(   8,   -6), S(   8,   -6), S(   8,   -6),
		S( -25,   24), S(  27,   51), S(  32,   41), S(   2,   42), S(   8,   -6), S(   8,   -6), S(   8,   -6), S(   8,   -6),
		S( -64,   24), S( -22,   45), S( -17,   37), S( -46,   33), S(   8,   -6), S(   8,   -6), S(   8,   -6), S(   8,   -6),
		S( -80,   11), S( -34,   29), S( -23,   18), S( -46,   16), S(   8,   -6), S(   8,   -6), S(   8,   -6), S(   8,   -6),
		S( -38,   -5), S(   7,    7), S(  -9,   -3), S( -16,   -4), S(   8,   -6), S(   8,   -6), S(   8,   -6), S(   8,   -6),
		S(  24,  -28), S(  35,   -9), S(  13,  -16), S(  -3,  -19), S(   8,   -6), S(   8,   -6), S(   8,   -6), S(   8,   -6),
		S(  19,  -63), S(  24,  -28), S(   4,  -32), S(  14,  -52), S(   8,   -6), S(   8,   -6), S(   8,   -6), S(   8,   -6),
	},
};

constexpr PackedScore MOBILITY[4][28] = {
	{S( -12,  -22), S( -46,  -62), S( -19,  -27), S( -10,   -3), S(   3,    8), S(   8,   19), S(  17,   24), S(  24,   32), S(  36,   27), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -21,  -35), S( -53,  -91), S( -31,  -38), S( -21,  -15), S( -11,   -4), S(  -2,    6), S(   2,   18), S(   7,   21), S(   9,   26), S(  13,   26), S(  15,   28), S(  25,   20), S(  29,   22), S(  49,    3), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -25,  -46), S( -12,  -69), S( -23,  -53), S( -13,  -31), S(  -6,  -23), S(  -1,   -6), S(   1,    0), S(  -4,    9), S(   0,   13), S(   5,   18), S(   9,   26), S(  10,   34), S(  12,   40), S(  19,   42), S(  25,   40), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -35,    3), S( -56,  -79), S(-103,  -78), S( -53, -281), S( -44,  -89), S( -26,  -11), S( -19,  -15), S( -12,   -2), S(  -7,   13), S(  -7,   29), S(  -3,   31), S(   0,   35), S(   2,   40), S(   5,   43), S(   8,   44), S(   9,   48), S(  12,   48), S(  11,   53), S(  13,   53), S(  15,   51), S(  24,   41), S(  29,   28), S(  33,   26), S(  48,    5), S(  48,    6), S(  65,  -20), S(  41,   -5), S(   2,  -26)}
};

constexpr PackedScore THREAT_BY_PAWN[6] = {S(   9,  -18), S(  65,   32), S(  63,   63), S(  79,   29), S(  74,   -8), S(   0,    0)};
constexpr PackedScore THREAT_BY_KNIGHT[2][6] = {
	{S(   7,   29), S(  25,   35), S(  37,   44), S(  74,   12), S(  47,  -23), S(   0,    0)},
	{S(  -6,    9), S(  12,   36), S(  30,   30), S(  64,   34), S(  57,   -2), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_BISHOP[2][6] = {
	{S(   1,   37), S(  42,   35), S(  -8,   34), S(  70,   16), S(  67,   66), S(   0,    0)},
	{S(  -1,    6), S(  21,   23), S( -21,  -19), S(  45,   45), S(  47,  122), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_ROOK[2][6] = {
	{S(   0,   43), S(  18,   64), S(  28,   58), S(  10,  -51), S(  75,   12), S(   0,    0)},
	{S(  -9,    7), S(   1,   16), S(  13,    2), S(  10,  -94), S(  64,   47), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_QUEEN[2][6] = {
	{S(   6,    9), S(  23,   23), S(   9,   50), S(  14,    9), S(  10,  -55), S(  98,   29)},
	{S(  -2,    9), S(   0,    7), S(  -7,   19), S(  -6,    3), S( -18,  -70), S( 111,   64)}
};
constexpr PackedScore THREAT_BY_KING[6] = {S( -33,   48), S(   0,   50), S(  20,   42), S(  83,   17), S(   0,    0), S(   0,    0)};
constexpr PackedScore PUSH_THREAT = S(  15,   21);

constexpr PackedScore ISOLATED_PAWN[8] = {S(  -5,   -3), S(  -5,  -12), S( -10,  -11), S( -10,  -16), S( -10,  -14), S(  -7,   -7), S(  -2,  -11), S(  -7,   -2)};
constexpr PackedScore PAWN_PHALANX[8] = {S(   0,    0), S(   6,   -3), S(  12,    3), S(  21,   15), S(  49,   60), S( 111,  226), S( -36,  361), S(   0,    0)};
constexpr PackedScore DEFENDED_PAWN[8] = {S(   0,    0), S(   0,    0), S(  21,   10), S(  12,    9), S(  13,   18), S(  21,   58), S( 131,   80), S(   0,    0)};

constexpr PackedScore PASSED_PAWN[2][2][8] = {
	{
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -32,  -36), S( -14,   25), S( -20,  152), S(  28,  242), S(   0,    0)},
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -20,  -49), S(  11,  -24), S(  16,   15), S(  59,   37), S(   0,    0)}
	},
	{
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -27,  -57), S(   0,  -27), S(  16,    1), S(  65,   -2), S(   0,    0)},
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -28,  -61), S(   1,  -37), S(  -6,  -20), S(  -5,  -17), S(   0,    0)}
	}
};
constexpr PackedScore OUR_PASSER_PROXIMITY[8] = {S(   0,    0), S(  46,   82), S(   2,   68), S(   0,   42), S(   3,   31), S(   9,   24), S(  19,   22), S(  11,   21)};
constexpr PackedScore THEIR_PASSER_PROXIMITY[8] = {S(   0,    0), S( -39,    6), S(  21,   -2), S(  13,   26), S(  17,   46), S(  10,   79), S(  12,   80), S(  12,   69)};

constexpr PackedScore PAWN_STORM[2][4][8] = {
	{
		{S(  15,   13), S(-131,  -52), S(   1,   -9), S(   6,  -12), S(   0,    1), S(  -5,   10), S(  -4,    9), S(   0,    0)},
		{S(  11,    2), S(  -6, -104), S(  55,  -42), S(  10,  -10), S(   2,   -4), S( -10,    6), S(  -7,   10), S(   0,    0)},
		{S(  -2,    5), S(  62, -102), S(  72,  -45), S(  18,  -17), S(   2,   -1), S(  -8,    8), S(  -9,   12), S(   0,    0)},
		{S(   8,   -7), S( 103,  -85), S(  38,  -21), S(  13,   -1), S(  -2,    4), S(  -8,    0), S(  -3,    1), S(   0,    0)}
	},
	{
		{S(   0,    0), S(  -3,  -27), S( -29,  112), S(  14,  -54), S(  -1,    8), S(  -1,    6), S(  -5,   10), S(   0,    0)},
		{S(   0,    0), S(  -5,  -81), S(   4,   65), S(  52,  -36), S(   2,    3), S(  -7,    6), S(  -8,   10), S(   0,    0)},
		{S(   0,    0), S(  -8,   13), S( -57, -107), S(  19,  -30), S(   2,    4), S(  -2,    7), S(  -9,   11), S(   0,    0)},
		{S(   0,    0), S( -12,  -55), S(  66,   -9), S(  22,   -2), S(   1,    9), S(   0,   -9), S(   0,    7), S(   0,    0)}
	}
};
constexpr PackedScore PAWN_SHIELD[4][8] = {
	{S(  16,    3), S(  -7,   26), S( -15,   15), S(  -2,    7), S(   2,   -1), S( -31,  -26), S( -81,  -33), S(   0,    0)},
	{S(  19,    2), S( -15,   12), S( -11,    2), S(  12,   -2), S(   9,   -9), S(  -3,  -16), S( -43,  -29), S(   0,    0)},
	{S(   8,   14), S( -15,    9), S(   6,   -9), S(   3,   -1), S(   2,    1), S(   9,  -13), S(  -7,  -37), S(   0,    0)},
	{S(  14,   -3), S(   5,   -1), S(  -4,    0), S(  -1,   -5), S(   8,   -9), S(  31,  -21), S( -12,  -21), S(   0,    0)}
};
constexpr PackedScore SAFE_KNIGHT_CHECK = S(  82,   -2);
constexpr PackedScore SAFE_BISHOP_CHECK = S(  24,   12);
constexpr PackedScore SAFE_ROOK_CHECK = S(  60,    5);
constexpr PackedScore SAFE_QUEEN_CHECK = S(  24,   21);
constexpr PackedScore UNSAFE_KNIGHT_CHECK = S(   6,    1);
constexpr PackedScore UNSAFE_BISHOP_CHECK = S(  12,   12);
constexpr PackedScore UNSAFE_ROOK_CHECK = S(  21,    0);
constexpr PackedScore UNSAFE_QUEEN_CHECK = S(   6,   14);
constexpr PackedScore KING_ATTACKER_WEIGHT[4] = {S(  20,    2), S(  16,    2), S(  18,  -13), S(   6,    0)};
constexpr PackedScore KING_ATTACKS[14] = {S( -44,   29), S( -52,   23), S( -59,   17), S( -64,   19), S( -63,   15), S( -56,   11), S( -40,    5), S( -20,   -4), S(  18,  -22), S(  40,  -21), S(  72,  -35), S(  83,   -9), S( 119,  -93), S(  79,   63)};

constexpr PackedScore MINOR_BEHIND_PAWN = S(   8,   14);
constexpr PackedScore KNIGHT_OUTPOST = S(  26,   18);
constexpr PackedScore BISHOP_PAWNS[7] = {S(   5,   22), S(   7,   20), S(   5,   12), S(   1,    4), S(  -2,   -5), S(  -3,  -18), S(  -7,  -31)};
constexpr PackedScore BISHOP_PAIR = S(  20,   62);
constexpr PackedScore ROOK_OPEN[2] = {S(  25,    2), S(  15,    3)};

constexpr PackedScore TEMPO = S(  32,   36);

constexpr PackedScore COMPLEXITY_PAWNS = S(   0,    8);
constexpr PackedScore COMPLEXITY_PASSERS = S(   0,    1);
constexpr PackedScore COMPLEXITY_PAWNS_BOTH_SIDES = S(   0,   70);
constexpr PackedScore COMPLEXITY_PAWN_ENDGAME = S(   0,   62);
constexpr PackedScore COMPLEXITY_OFFSET = S(   0, -132);

#undef S


}