#pragma once

#include "../defs.h"

namespace eval
{

// clang-format off
#define S(mg, eg) ScorePair(mg, eg)

constexpr ScorePair MATERIAL[6] = {S(  66,  137), S( 315,  454), S( 327,  472), S( 424,  809), S( 877, 1844), S(0, 0)};

constexpr ScorePair PSQT[6][64] = {
    {
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  70,   83), S(  17,   96), S(  27,  113), S(  40,   85), S(  66,   57), S(  46,   58), S(  37,   89), S(  85,   76),
        S(  10,   14), S(  -5,   27), S(   6,    7), S(   8,   -7), S(   1,  -17), S(   0,   -6), S( -13,   19), S(   1,   11),
        S(   7,   10), S(   4,   18), S(  10,   -6), S(  11,  -18), S(   5,  -18), S(   2,  -10), S(  -3,   11), S(  -5,   10),
        S(  -4,   -4), S(  -8,   13), S(  17,  -27), S(  17,  -19), S(  14,  -20), S(   3,  -14), S( -15,   10), S( -13,   -4),
        S( -11,   -6), S(  12,    5), S(   2,    3), S(   6,   -2), S(  -3,   -2), S(  -8,   -3), S( -18,   10), S( -21,   -6),
        S(  -3,   -6), S(  25,    7), S(  23,   55), S(   5,    7), S(  -1,   -1), S(  -4,   -1), S(  -9,   10), S( -17,   -2),
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
    },
    {
        S( -59, -120), S( -89,   14), S(-112,   45), S(  -4,   13), S( -23,   15), S( -62,    7), S(-102,    8), S( -89,  -67),
        S(  -1,   -3), S( -10,   21), S(  22,   11), S(  35,   15), S(  26,   18), S(  22,   -5), S( -20,   16), S(  -7,  -11),
        S(  14,   -5), S(  11,   12), S(  36,   10), S(  27,   15), S(  21,   15), S(  24,    6), S(  10,    9), S(  10,  -12),
        S(  30,    5), S(  29,   12), S(  34,   16), S(  28,   24), S(  33,   21), S(  19,   16), S(  19,    5), S(  11,    6),
        S(  20,    6), S(  27,    6), S(  24,   16), S(  17,   30), S(  18,   22), S(  18,   16), S(  17,    3), S(   8,    3),
        S(   4,   -6), S(  18,   -1), S(  15,    0), S(  14,   15), S(  11,   10), S(  -1,   -1), S(   4,   -7), S(  -8,   -8),
        S(  10,  -11), S(   2,    1), S(   7,  -13), S(  11,   -1), S(   4,   -1), S(   2,  -12), S(  -6,   -5), S( -15,  -22),
        S( -28,  -23), S( -11,  -21), S(  -1,  -14), S(   4,   -9), S(  -1,   -4), S( -11,  -17), S( -16,  -23), S( -29,  -40),
    },
    {
        S( -28,  -35), S( -52,   20), S( -85,   21), S( -68,   22), S( -76,   26), S( -68,   20), S( -53,   21), S( -32,  -12),
        S( -13,   -6), S( -37,    3), S( -10,    9), S( -28,   13), S( -18,   15), S( -13,   11), S( -12,  -11), S(  -9,   -1),
        S(  22,  -10), S(  10,   10), S(  21,    5), S(  24,   12), S(  19,   13), S(  10,    1), S(  17,    3), S(   7,   -4),
        S(   8,   -4), S(  13,   15), S(  15,   18), S(  17,   29), S(  27,   25), S(  18,   14), S(  14,    9), S(   7,  -10),
        S(  19,  -10), S(   7,    7), S(  11,   17), S(  21,   16), S(  21,   19), S(  14,   11), S(   8,    6), S(  14,  -10),
        S(  20,  -10), S(  24,   -5), S(  13,   -7), S(  15,   11), S(  13,    5), S(   7,   -9), S(  28,   -6), S(  14,  -12),
        S(  23,  -18), S(  28,  -30), S(  26,  -13), S(  12,   -5), S(   3,   -6), S(  13,  -16), S(   9,  -27), S(  19,   -9),
        S(  10,  -40), S(  -8,    0), S( -10,   -9), S(  10,  -15), S(   6,  -12), S(  -3,   -7), S(   6,  -11), S(   5,  -25),
    },
    {
        S(  18,   15), S(  33,   12), S(  27,   14), S(  13,   26), S(  23,   16), S(  14,   21), S(  19,   22), S(  23,   20),
        S(  23,   12), S(  13,   21), S(  19,   20), S(  16,   22), S(  22,   26), S(  12,   26), S(  12,   23), S(  19,   22),
        S( -18,   18), S(  10,   13), S(  14,   11), S(  15,   10), S(  12,    9), S(   8,   15), S(   7,   18), S(  -3,   22),
        S( -17,   11), S(  -6,   15), S(  -2,   12), S(  -9,   11), S(  -3,    8), S(   0,   11), S(  -3,   16), S(  -5,   12),
        S( -23,   -2), S(  -9,    5), S( -13,   10), S( -10,    8), S( -11,    4), S( -15,   10), S( -15,   11), S( -13,    2),
        S( -16,  -25), S(   6,  -25), S(  -7,   -9), S(   0,  -17), S(   0,  -18), S( -13,   -8), S(  -4,  -16), S( -18,  -14),
        S( -50,  -27), S(  -6,  -34), S(   3,  -24), S(  -1,  -23), S(  -1,  -23), S(  -6,  -19), S( -12,  -24), S( -18,  -23),
        S( -15,  -36), S( -18,  -19), S(   7,  -23), S(  14,  -30), S(   7,  -28), S(  -1,  -21), S(   1,  -26), S(  -1,  -23),
    },
    {
        S(  10,   28), S(  40,    6), S(  27,   25), S(  13,   34), S(  18,   27), S(  28,   14), S(  16,   10), S( -18,   35),
        S(  36,   -8), S(  33,   -7), S(  11,   23), S( -14,   40), S(   9,   31), S(  17,    2), S(  19,   -8), S(  12,    2),
        S(   8,    9), S(  13,    9), S(  -2,   24), S( -19,   37), S(  -4,   38), S(  14,    2), S(  27,  -21), S(  21,  -11),
        S(  -2,   10), S( -12,   22), S( -11,   22), S( -23,   40), S( -20,   39), S(   6,   10), S(   1,   22), S(   4,    0),
        S( -13,   24), S(  -8,   17), S( -13,   18), S( -17,   32), S( -20,   43), S(  -7,   24), S(   0,   11), S(  -4,    5),
        S(  -5,  -14), S(   1,  -16), S(  -7,    2), S( -16,   14), S( -10,   15), S(  -4,    6), S(   8,   -7), S(   4,   -7),
        S(  -1,  -59), S(   8,  -82), S(   2,  -48), S(  -3,  -21), S(  -6,  -13), S(   7,  -33), S(   2,  -28), S(   3,  -21),
        S( -16,  -35), S( -21,  -70), S( -15,  -52), S(  -6,  -46), S(  -2,  -36), S(  -9,  -33), S( -11,  -32), S( -19,   -6),
    },
    {
        S(  53, -151), S(  22,   72), S(   1,   18), S( -22,    7), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  29,   12), S(  -1,  104), S( -40,   62), S( -57,   46), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  38,   49), S(   4,  110), S( -53,   54), S(-131,   17), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S( -24,   48), S( -45,   97), S( -67,   37), S(-133,    6), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S( -62,   41), S( -56,   75), S( -84,   21), S(-110,  -11), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(   0,   17), S(  -6,   45), S( -38,   -2), S( -59,  -34), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  59,  -11), S(  46,   16), S(  17,  -36), S(  -9,  -69), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  59,  -43), S(  58,   -8), S(  21,  -61), S(  17, -112), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
    },
};

constexpr ScorePair MOBILITY[4][28] = {
    {S(  -7,  -22), S( -35,  -55), S( -21,  -18), S( -10,   -1), S(   0,    8), S(   6,   18), S(  15,   22), S(  22,   26), S(  33,   17), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S( -11,  -31), S( -41,  -62), S( -21,  -32), S( -10,  -12), S(  -4,   -1), S(   0,    9), S(   2,   16), S(   5,   19), S(   5,   21), S(   8,   22), S(   7,   22), S(  13,   15), S(  18,   14), S(  41,  -11), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S( -26,  -63), S( -50,  -62), S( -18,  -42), S( -11,  -25), S(  -3,  -15), S(   2,   -4), S(   1,    6), S(   3,   11), S(   4,   15), S(   6,   21), S(   8,   27), S(   8,   34), S(  10,   38), S(  13,   39), S(  40,   18), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S( -14,   42), S( -41,    7), S( -61,  -12), S( -41, -124), S( -26, -105), S( -13,  -68), S(  -5,  -51), S(  -1,  -32), S(  -1,  -15), S(   0,   -1), S(   3,    7), S(   3,   16), S(   5,   22), S(   5,   30), S(   7,   34), S(   8,   35), S(   6,   40), S(   8,   39), S(   9,   41), S(  11,   35), S(  16,   31), S(  20,   17), S(  19,   17), S(  27,    4), S(  20,   11), S(  22,   -8), S(  24,  -39), S( -35,    7)}
};

constexpr ScorePair THREAT_BY_PAWN[6] = {S(  -6,  -20), S(  73,   41), S(  65,   70), S(  73,   48), S(  57,   23), S(   0,    0)};
constexpr ScorePair THREAT_BY_KNIGHT[2][6] = {
    {S(   6,   36), S(   7,   81), S(  50,   32), S(  84,   13), S(  42,    7), S(   0,    0)},
    {S(  -8,   10), S(   3,   76), S(  39,   28), S(  71,   44), S(  50,   46), S(   0,    0)}
};
constexpr ScorePair THREAT_BY_BISHOP[2][6] = {
    {S(   3,   33), S(  37,   44), S(   2,   31), S(  58,   36), S(  61,   48), S(   0,    0)},
    {S(  -5,    4), S(  20,   21), S(  -6,    2), S(  55,   76), S(  63,   74), S(   0,    0)}
};
constexpr ScorePair THREAT_BY_ROOK[2][6] = {
    {S(  -3,   50), S(  36,   49), S(  46,   47), S(   7,  -72), S(  69,  -18), S(   0,    0)},
    {S( -10,    9), S(   8,   14), S(  19,    4), S(  21, -103), S(  54,   91), S(   0,    0)}
};
constexpr ScorePair THREAT_BY_QUEEN[2][6] = {
    {S(   8,   23), S(  25,   28), S(  21,   56), S(  17,   11), S(   1,  -54), S( 151,   63)},
    {S(  -5,   17), S(   2,    5), S(  -8,   26), S(  -4,   -7), S( -16,  -45), S( 100,  212)}
};
constexpr ScorePair THREAT_BY_KING[6] = {S(  50,   13), S(  26,   40), S(  98,   31), S(  85,    6), S(   0,    0), S(   0,    0)};
constexpr ScorePair KNIGHT_HIT_QUEEN = S(   7,    0);
constexpr ScorePair BISHOP_HIT_QUEEN = S(  16,   14);
constexpr ScorePair ROOK_HIT_QUEEN = S(  19,   -3);
constexpr ScorePair PUSH_THREAT = S(  13,   18);
constexpr ScorePair RESTRICTED_SQUARES = S(   2,    2);

constexpr ScorePair ISOLATED_PAWN[4] = {S(  -5,    5), S(  -3,  -10), S(  -8,   -6), S( -10,  -10)};
constexpr ScorePair ISOLATED_EXPOSED = S(  -5,   -7);
constexpr ScorePair DOUBLED_PAWN[4] = {S(   1,  -50), S(   3,  -40), S(  -5,  -24), S( -12,   -7)};
constexpr ScorePair BACKWARDS_PAWN[8] = {S(   0,    0), S(  -3,   -8), S(   4,  -11), S(  -4,  -10), S(  10,  -17), S(   6,   24), S(   0,    0), S(   0,    0)};
constexpr ScorePair BACKWARDS_EXPOSED = S( -13,   -6);
constexpr ScorePair PAWN_PHALANX[8] = {S(   0,    0), S(   5,   -6), S(  11,    0), S(  18,   11), S(  38,   37), S(  73,  134), S( 110,  188), S(   0,    0)};
constexpr ScorePair DEFENDED_PAWN[8] = {S(   0,    0), S(   0,    0), S(  17,    6), S(  11,   10), S(  18,   24), S(  41,   55), S(  76,  113), S(   0,    0)};
constexpr ScorePair CANDIDATE_PASSER[2][8] = {
    {S(   0,    0), S( -21,  -17), S(  -8,  -16), S(  -3,    1), S(  15,   22), S(  37,   79), S(   0,    0), S(   0,    0)},
    {S(   0,    0), S(  -9,  -12), S(  -6,   -1), S(  -5,   23), S(  10,   33), S(  57,   61), S(   0,    0), S(   0,    0)}
};

constexpr ScorePair PASSED_PAWN[2][2][8] = {
    {
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -32,  -30), S( -11,   23), S(  24,  129), S( 118,  200), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -24,  -42), S(  -2,  -14), S(  26,   54), S(  65,   74), S(   0,    0)}
    },
    {
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -27,  -41), S(  -7,   -9), S(  22,   55), S(  30,   46), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -28,  -48), S(  -5,  -25), S(  10,   31), S(  -2,   14), S(   0,    0)}
    }
};
constexpr ScorePair OUR_PASSER_PROXIMITY[8] = {S(  73,  109), S( 107,   74), S(  44,   70), S(  -5,   61), S(  -1,   34), S(   2,   23), S(  17,   11), S(   0,   21)};
constexpr ScorePair THEIR_PASSER_PROXIMITY[8] = {S( -53,    5), S(   3,   -2), S(  25,    0), S(  21,   25), S(  12,   60), S(  15,   74), S(  21,   78), S(  21,   63)};
constexpr ScorePair PASSER_DEFENDED_PUSH[8] = {S(   0,    0), S(   0,    0), S(   0,    0), S(   8,    5), S(  10,   20), S(  36,   31), S(  59,  102), S(   0,    0)};

constexpr ScorePair PAWN_STORM[2][4][8] = {
    {
        {S(  29,   29), S( -82,  -78), S(   7,  -38), S(  43,    8), S(  20,   23), S(   3,   25), S(  -4,   28), S(   0,    0)},
        {S(  22,   17), S(  58, -109), S(  78,  -61), S(  33,   -3), S(   8,   16), S( -26,   20), S(   1,   18), S(   0,    0)},
        {S(   8,   16), S(  51,  -81), S( 108,  -51), S(  68,   -6), S(   9,   17), S( -16,   20), S(  -4,   17), S(   0,    0)},
        {S(   9,   -2), S( 127,  -97), S( 116,  -56), S(  56,   -5), S(   6,    5), S( -25,    2), S( -25,    3), S(   0,    0)}
    },
    {
        {S(   0,    0), S(   0,    0), S(  74,   42), S(  -5,   28), S(  -3,   33), S(   7,   42), S(  32,   31), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S( 138,   32), S( -27,   27), S( -15,   31), S( -21,   44), S(   4,   27), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S( 130,   14), S(  13,   21), S(  -9,   33), S(  -3,   37), S(  51,   16), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S( 130,    1), S(  13,   15), S( -21,   16), S( -11,   13), S( -19,  -12), S(   0,    0)}
    }
};
constexpr ScorePair PAWN_SHIELD[4][8] = {
    {S(  55,   29), S(   0,   42), S( -14,   33), S(  31,   27), S(  39,   19), S(   4,   15), S( -22,   25), S(   0,    0)},
    {S(  42,   20), S( -27,   25), S(   8,   19), S(  42,   11), S(  40,    1), S(  -2,    0), S( -34,  -20), S(   0,    0)},
    {S(  23,   13), S(   5,   53), S(   4,    7), S(  33,  -10), S(  31,  -10), S(   6,   -4), S( -58,   12), S(   0,    0)},
    {S(  12,    8), S( -26,   -2), S(   4,   -6), S(  27,  -12), S(  21,  -10), S(  27,   -1), S( -31,    3), S(   0,    0)}
};
constexpr ScorePair SAFE_KNIGHT_CHECK = S( 100,    1);
constexpr ScorePair SAFE_BISHOP_CHECK = S(  69,   18);
constexpr ScorePair SAFE_ROOK_CHECK = S( 107,   10);
constexpr ScorePair SAFE_QUEEN_CHECK = S(  64,   21);
constexpr ScorePair UNSAFE_KNIGHT_CHECK = S(  17,    0);
constexpr ScorePair UNSAFE_BISHOP_CHECK = S(  35,    7);
constexpr ScorePair UNSAFE_ROOK_CHECK = S(  41,    2);
constexpr ScorePair UNSAFE_QUEEN_CHECK = S(  20,    5);
constexpr ScorePair QUEENLESS_ATTACK = S(-112,  337);
constexpr ScorePair KING_ATTACKER_WEIGHT[4] = {S(  57,   -3), S(  24,   -2), S(  24,  -10), S(   6,  -17)};
constexpr ScorePair KING_ATTACKS = S(   6,    0);
constexpr ScorePair WEAK_KING_RING = S(   4,    1);
constexpr ScorePair KING_FLANK_ATTACKS[2] = {S(  13,   -4), S(   3,    0)};
constexpr ScorePair KING_FLANK_DEFENSES[2] = {S(  -8,    0), S(  -6,    3)};
constexpr ScorePair SAFETY_OFFSET = S(  78,  149);

constexpr ScorePair MINOR_BEHIND_PAWN = S(   2,   10);
constexpr ScorePair KNIGHT_OUTPOST = S(  18,   17);
constexpr ScorePair BISHOP_PAWNS[7] = {S(  12,    6), S(   6,   15), S(   4,   10), S(   1,    4), S(  -3,   -2), S(  -6,  -10), S(  -9,  -18)};
constexpr ScorePair BISHOP_PAIR = S(  22,   66);
constexpr ScorePair LONG_DIAG_BISHOP = S(  13,   12);
constexpr ScorePair ROOK_OPEN[2] = {S(  31,    0), S(  19,    2)};

constexpr ScorePair TEMPO = S(  29,   20);

constexpr ScorePair COMPLEXITY_PAWNS = S(   0,   10);
constexpr ScorePair COMPLEXITY_PAWNS_BOTH_SIDES = S(   0,  125);
constexpr ScorePair COMPLEXITY_PAWN_ENDGAME = S(   0,  129);
constexpr ScorePair COMPLEXITY_OFFSET = S(   0, -207);

#undef S
// clang-format on

}
