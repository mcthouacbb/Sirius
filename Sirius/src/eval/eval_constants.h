#pragma once

#include "../defs.h"

namespace eval
{

#define S(mg, eg) PackedScore(mg, eg)

constexpr PackedScore MATERIAL[6] = {S(  65,  144), S( 309,  470), S( 333,  482), S( 444,  856), S( 868, 1598), S(0, 0)};

constexpr PackedScore PSQT[6][64] = {
	{
		S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
		S(  62,   63), S(  30,   92), S(  45,   68), S(  70,   65), S(  74,   62), S(  59,   78), S(  31,  101), S(  68,   65),
		S(   5,   38), S(  26,   44), S(  24,   22), S(  53,   -6), S(  41,   -4), S(  25,   20), S(  10,   41), S( -10,   40),
		S(  18,   17), S(  13,   12), S(   5,   -6), S(  25,  -20), S(  17,  -21), S(   5,   -2), S(  -5,   16), S(  -7,   20),
		S(   1,    7), S(   5,   10), S(   4,  -17), S(  16,  -17), S(  13,  -17), S(  -1,   -5), S( -10,   12), S( -13,    7),
		S(  -9,    5), S(   7,    0), S(   0,  -16), S(  -1,   -2), S(  -7,   -3), S( -14,   -3), S( -18,    6), S( -22,    3),
		S(   7,    5), S(  30,    0), S(   8,  -12), S(   1,   11), S(  -7,    8), S( -13,    3), S( -11,   10), S( -15,    8),
		S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
	},
	{
		S( -79,  -68), S( -94,    4), S( -60,   17), S(  -6,    3), S( -29,    7), S(-104,   30), S( -95,    9), S(-107,  -28),
		S(   7,  -13), S(   4,    2), S(  37,   -8), S(  34,   13), S(  33,   11), S(  21,    1), S(  -7,    8), S(  -6,   -7),
		S(  -5,   -2), S(  30,   -4), S(  50,    7), S(  40,   15), S(  28,   16), S(  27,   14), S(  11,   -2), S( -15,   -6),
		S(  17,    5), S(  35,   14), S(  51,   17), S(  35,   31), S(  34,   31), S(  37,   13), S(  21,    4), S(   7,   -2),
		S(  14,   12), S(  26,   13), S(  27,   21), S(  25,   29), S(  32,   23), S(  23,   16), S(  19,    6), S(   0,    3),
		S(   3,  -12), S(  16,   -4), S(  11,    1), S(  13,   13), S(  13,   11), S(   1,    2), S(   0,  -14), S( -15,  -18),
		S(  10,    7), S(  -2,   -3), S(   3,  -12), S(   4,    2), S(   5,    1), S(  -7,  -13), S( -17,   -6), S( -16,  -16),
		S( -27,  -27), S(  -2,   -9), S(  -1,  -15), S(  -6,   -2), S(  -8,   -4), S( -12,  -24), S( -11,  -12), S( -36,  -38),
	},
	{
		S( -32,   13), S( -40,    8), S( -55,   15), S( -81,   24), S( -94,   27), S( -77,   11), S( -32,   11), S( -27,   19),
		S( -25,    3), S( -29,   17), S( -20,   12), S( -22,    6), S( -22,    9), S(  -2,    6), S(  -9,   11), S( -27,    9),
		S(   7,   14), S(  23,   10), S(  29,   12), S(  26,    4), S(  21,    1), S(  24,    6), S(  13,    8), S(   5,    4),
		S(  -5,   12), S(  10,   12), S(   8,   12), S(  18,   18), S(  31,   15), S(  15,    3), S(  15,    6), S(  -4,    9),
		S(   8,   -6), S(  13,    0), S(  11,    7), S(  14,   11), S(  14,    8), S(  11,    9), S(  13,   -5), S(   0,   -4),
		S(  28,  -14), S(  24,  -12), S(  19,   -6), S(   7,   -1), S(   6,   -4), S(   8,   -5), S(  15,   -6), S(   7,  -10),
		S(  25,  -29), S(  36,  -36), S(  18,  -23), S(  10,  -10), S(   2,   -8), S(   7,  -20), S(   9,  -30), S(  21,  -21),
		S(  36,  -34), S(   2,  -21), S(  11,  -14), S(   6,  -10), S(   5,   -7), S(   9,    3), S(   5,  -11), S(  20,  -21),
	},
	{
		S(  42,   16), S(  14,   34), S(   5,   36), S(   1,   33), S(  10,   28), S(  -3,   36), S(  21,   24), S(  20,   23),
		S(  15,   15), S(  15,   21), S(  15,   20), S(  15,   22), S(  21,   22), S(  10,   27), S(  -6,   31), S(  -1,   25),
		S(   5,   17), S(  45,    1), S(  29,    9), S(  35,    4), S(  32,    7), S(  10,   18), S(  30,    9), S(  -9,   26),
		S(  -3,   16), S(  20,    9), S(  23,    7), S(  33,   -1), S(  34,    2), S(  17,   10), S(  15,   11), S(  -6,   19),
		S( -19,   -2), S(   1,    3), S(  -9,   10), S(  -2,    0), S(  -2,    1), S( -10,    7), S( -10,   11), S( -19,    2),
		S( -26,  -33), S(  -6,  -18), S( -15,  -19), S( -10,  -20), S( -12,  -19), S( -20,  -15), S( -11,  -13), S( -26,  -19),
		S( -69,  -33), S( -15,  -36), S( -11,  -31), S(  -8,  -30), S(  -9,  -30), S( -13,  -27), S( -18,  -27), S( -30,  -30),
		S( -24,  -31), S( -17,  -16), S(  -7,  -21), S(  -4,  -29), S(  -7,  -27), S( -11,  -21), S( -13,  -22), S( -15,  -23),
	},
	{
		S(  38,  -14), S(  44,  -13), S(   6,   20), S(  -4,   32), S(   9,    7), S(   9,    3), S(  10,   -8), S(   6,  -15),
		S(  15,   22), S( -22,   28), S( -13,   29), S( -39,   60), S( -39,   50), S(  -7,    6), S( -34,   24), S(   3,   -7),
		S(  -1,   24), S(   5,   19), S(   3,   22), S(  -7,   26), S(  -4,   25), S(  -4,   13), S(  -3,   -2), S(  -1,   10),
		S(   2,   27), S(   5,   53), S(  -3,   26), S( -11,   47), S(  -8,   42), S(  -2,    9), S(   5,   23), S(  -2,   11),
		S(  13,    6), S(  17,   14), S(  -1,   25), S(  -5,   40), S(  -7,   37), S(  -2,   15), S(  13,    6), S(   6,   -3),
		S(   7,  -23), S(  13,  -16), S(   2,    4), S(  -3,    4), S(   0,   -1), S(   1,    2), S(  12,  -15), S(   6,  -27),
		S( -17,  -31), S(  -1,  -47), S(  10,  -63), S(  11,  -17), S(   9,  -15), S(  12,  -45), S(   7,  -37), S(   7,  -36),
		S(  -9,  -58), S( -14,  -60), S(  -6,  -51), S(   1,  -28), S(   4,  -25), S(  -2,  -35), S(  -5,  -37), S(   2,  -45),
	},
	{
		S( -23, -101), S(   9,  -15), S( -18,  -20), S(  12,  -29), S(  -2,   -2), S(  -2,   -2), S(  -2,   -2), S(  -2,   -2),
		S( -32,    4), S(  10,   58), S(  32,   25), S(  52,   -1), S(  -2,   -2), S(  -2,   -2), S(  -2,   -2), S(  -2,   -2),
		S(   3,   24), S(  57,   54), S(  69,   33), S(  38,   21), S(  -2,   -2), S(  -2,   -2), S(  -2,   -2), S(  -2,   -2),
		S( -48,   30), S(  20,   45), S(  25,   38), S(  -8,   32), S(  -2,   -2), S(  -2,   -2), S(  -2,   -2), S(  -2,   -2),
		S( -48,    2), S(  11,   28), S(  18,   24), S(  -9,   26), S(  -2,   -2), S(  -2,   -2), S(  -2,   -2), S(  -2,   -2),
		S( -32,   -1), S(  -5,   14), S(   8,    7), S(   2,    9), S(  -2,   -2), S(  -2,   -2), S(  -2,   -2), S(  -2,   -2),
		S(  15,  -19), S(   5,    5), S(  -9,   -1), S( -22,   -5), S(  -2,   -2), S(  -2,   -2), S(  -2,   -2), S(  -2,   -2),
		S(   0,  -67), S(  -1,  -22), S( -19,  -24), S( -10,  -50), S(  -2,   -2), S(  -2,   -2), S(  -2,   -2), S(  -2,   -2),
	},
};

constexpr PackedScore MOBILITY[4][28] = {
	{S(   1,   14), S( -40,  -88), S( -19,  -38), S(  -8,   -3), S(   2,    9), S(   5,   22), S(  12,   28), S(  21,   32), S(  32,   25), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -22,    9), S( -71, -129), S( -32,  -62), S( -21,  -26), S( -10,   -9), S(  -4,    7), S(   0,   21), S(   3,   27), S(   5,   36), S(  10,   38), S(  13,   39), S(  31,   27), S(  36,   32), S(  68,   -3), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S(  -6,   -8), S(   9,  -70), S( -30,  -71), S( -23,  -52), S( -13,  -31), S( -10,   -9), S( -10,    5), S( -11,   17), S(  -6,   21), S(   0,   25), S(   4,   33), S(   7,   41), S(  12,   45), S(  21,   41), S(  58,   20), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S(  -2,   56), S( -13,   47), S( -43,   73), S( -78, -113), S( -58, -200), S( -29, -132), S( -20,  -72), S( -17,  -26), S( -13,   -5), S( -11,   17), S(  -6,   26), S(  -3,   36), S(   0,   41), S(   3,   43), S(   6,   45), S(   7,   46), S(   8,   47), S(   9,   47), S(   7,   48), S(   9,   44), S(  17,   34), S(  21,   23), S(  26,   15), S(  42,  -10), S(  48,  -24), S(  58,  -46), S(  42,  -35), S(  15,  -14)}
};

constexpr PackedScore THREAT_BY_PAWN[6] = {S(   2,  -16), S(  52,   54), S(  58,   77), S(  52,   43), S(  49,   15), S( -53,   16)};
constexpr PackedScore THREAT_BY_KNIGHT[2][6] = {
	{S(   5,   34), S(  12,   -5), S(  28,   37), S(  51,   19), S(  36,    8), S(  92,   20)},
	{S(  -2,    9), S(   4,    2), S(  21,   40), S(  46,   41), S(  41,   27), S(  44,   46)}
};
constexpr PackedScore THREAT_BY_BISHOP[2][6] = {
	{S(   3,   34), S(  32,   36), S( -30,  -20), S(  49,   20), S(  43,   40), S(   4,   26)},
	{S(   3,    5), S(  24,   38), S( -29,  -22), S(  43,   39), S(  31,   72), S(  -8,   47)}
};
constexpr PackedScore THREAT_BY_ROOK[2][6] = {
	{S(   0,   39), S(  14,   65), S(  20,   58), S(  -2,  -47), S(  48,    6), S( -17,   47)},
	{S(  -6,    6), S(   0,   19), S(   5,    9), S(  -2,  -46), S(  40,   35), S(   3,   45)}
};
constexpr PackedScore THREAT_BY_QUEEN[2][6] = {
	{S(   6,   26), S(  22,   26), S(  13,   50), S(   5,    1), S(  -4,  -31), S(  22,  139)},
	{S(  -1,    6), S(   3,    2), S(  -4,   16), S(  -3,   11), S(  -8,  -25), S(  30,  143)}
};
constexpr PackedScore THREAT_BY_KING[6] = {S(  11,   41), S(  14,   33), S(  33,   42), S(  63,   19), S(  -4,   -1), S(   0,    0)};
constexpr PackedScore PUSH_THREAT = S(  16,   24);

constexpr PackedScore ISOLATED_PAWN[8] = {S(  -7,   -2), S(  -6,  -11), S(  -8,  -11), S( -11,  -15), S( -11,  -14), S(  -9,  -10), S(  -4,  -11), S(  -7,   -2)};
constexpr PackedScore PAWN_PHALANX[8] = {S(   0,    0), S(   9,   -5), S(  15,    2), S(  16,   14), S(  45,   73), S( 114,  175), S(  78,  301), S(   0,    0)};
constexpr PackedScore DEFENDED_PAWN[8] = {S(   0,    0), S(   0,    0), S(  22,    6), S(  14,    4), S(  16,   14), S(  44,   53), S( 155,   60), S(   0,    0)};

constexpr PackedScore PASSED_PAWN[2][2][8] = {
	{
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -36,  -30), S( -17,   30), S(  -4,  143), S(  10,  229), S(   0,    0)},
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -26,  -45), S(   7,  -21), S(  24,   26), S( 107,   48), S(   0,    0)}
	},
	{
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -34,  -50), S(  -7,  -20), S(  25,    5), S(  83,   18), S(   0,    0)},
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -34,  -69), S(   8,  -58), S(   7,  -46), S(  20,  -16), S(   0,    0)}
	}
};
constexpr PackedScore OUR_PASSER_PROXIMITY[8] = {S(   0,    0), S(  53,   76), S(   2,   68), S(   0,   46), S(   7,   32), S(   9,   23), S(  23,   13), S(  25,   -2)};
constexpr PackedScore THEIR_PASSER_PROXIMITY[8] = {S(   0,    0), S( -19,  -20), S(  20,    1), S(  15,   25), S(  17,   46), S(  15,   75), S(  20,   84), S(  26,   85)};

constexpr PackedScore PAWN_STORM[2][4][8] = {
	{
		{S(   9,   15), S(-123,  -48), S(  22,  -25), S(   0,   -6), S(  -2,    7), S(  -4,   10), S(  -2,    7), S(   0,    0)},
		{S(  11,    1), S(  -7,  -86), S(  57,  -48), S(  10,   -9), S(   3,   -3), S( -11,    5), S(  -5,    9), S(   0,    0)},
		{S(  -6,    4), S(  40,  -74), S(  64,  -41), S(  22,  -13), S(   2,    2), S(  -8,    7), S(  -6,   11), S(   0,    0)},
		{S(   9,   -7), S( 110,  -70), S(  55,  -24), S(  16,    1), S(   3,    4), S(  -5,    1), S(   2,   -2), S(   0,    0)}
	},
	{
		{S(   0,    0), S(  19,    9), S(  -1,    5), S( -21,  -33), S(  -8,   10), S(  -5,    7), S(  -5,    5), S(   0,    0)},
		{S(   0,    0), S( -38,  -67), S(  30,    5), S(  28,  -23), S(  -6,    5), S( -12,    6), S(  -8,    8), S(   0,    0)},
		{S(   0,    0), S( -32,  -41), S(  30,  -59), S(  15,  -18), S(  -1,    5), S( -10,    6), S(  -7,    8), S(   0,    0)},
		{S(   0,    0), S(  30,   -5), S(  10,    6), S(  22,    2), S(  -1,    9), S(   0,   -3), S(   1,    0), S(   0,    0)}
	}
};
constexpr PackedScore PAWN_SHIELD[4][8] = {
	{S(  18,   -2), S(  -9,   27), S( -14,   16), S(  -6,   10), S(   3,   -3), S(  -3,  -18), S( -28,  -16), S(   0,    0)},
	{S(  15,    3), S( -11,    8), S( -14,    3), S(   4,   -2), S(  10,   -8), S( -12,  -16), S( -44,  -14), S(   0,    0)},
	{S(   9,   16), S( -12,   -3), S(   4,   -7), S(   3,    2), S(   1,    4), S(  -1,   -5), S( -28,  -13), S(   0,    0)},
	{S(  14,    2), S(  -2,   -4), S(  -1,   -6), S(   4,   -7), S(   9,   -8), S(  31,  -18), S(  25,  -14), S(   0,    0)}
};
constexpr PackedScore SAFE_KNIGHT_CHECK = S(  63,   -6);
constexpr PackedScore SAFE_BISHOP_CHECK = S(  14,    6);
constexpr PackedScore SAFE_ROOK_CHECK = S(  36,    3);
constexpr PackedScore SAFE_QUEEN_CHECK = S(  21,   24);
constexpr PackedScore UNSAFE_KNIGHT_CHECK = S(   2,   -2);
constexpr PackedScore UNSAFE_BISHOP_CHECK = S(   6,    7);
constexpr PackedScore UNSAFE_ROOK_CHECK = S(  11,   -2);
constexpr PackedScore UNSAFE_QUEEN_CHECK = S(   2,   10);
constexpr PackedScore KING_ATTACKER_WEIGHT[4] = {S(  22,    1), S(  13,    1), S(  17,  -11), S(   5,   12)};
constexpr PackedScore KING_ATTACKS[14] = {S( -97,   -5), S(-104,   -8), S(-106,  -10), S(-100,  -11), S( -88,  -15), S( -69,  -17), S( -45,  -15), S( -12,  -17), S(  27,  -21), S(  64,  -22), S( 103,  -23), S( 124,   32), S( 142,   42), S( 165,   93)};

constexpr PackedScore MINOR_BEHIND_PAWN = S(   7,   22);
constexpr PackedScore KNIGHT_OUTPOST = S(  29,   23);
constexpr PackedScore BISHOP_PAWNS[7] = {S(   4,   23), S(   3,   24), S(   3,   13), S(   1,    4), S(  -1,   -7), S(  -3,  -19), S(  -3,  -36)};
constexpr PackedScore BISHOP_PAIR = S(  17,   74);
constexpr PackedScore ROOK_OPEN[2] = {S(  29,    3), S(  11,    5)};

constexpr PackedScore TEMPO = S(  22,   25);

constexpr PackedScore COMPLEXITY_PAWNS = S(   0,    8);
constexpr PackedScore COMPLEXITY_PASSERS = S(   0,    2);
constexpr PackedScore COMPLEXITY_PAWNS_BOTH_SIDES = S(   0,   85);
constexpr PackedScore COMPLEXITY_PAWN_ENDGAME = S(   0,   82);
constexpr PackedScore COMPLEXITY_OFFSET = S(   0, -162);

#undef S


}