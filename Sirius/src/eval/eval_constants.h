#pragma once

#include "../defs.h"

namespace eval
{

// clang-format off
#define S(mg, eg) ScorePair(mg, eg)

constexpr ScorePair MATERIAL[6] = {S(  76,  123), S( 331,  383), S( 352,  379), S( 413,  732), S( 791, 1532), S(0, 0)};

constexpr ScorePair PSQT[6][64] = {
    {
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  77,  124), S(  -5,  105), S(  11,   84), S(  77,   89), S(  85,   72), S(  57,   98), S(  60,   74), S(  12,  126),
        S( -18,   24), S( -27,   25), S( -11,   20), S(  -5,    3), S( -16,  -11), S(   3,   12), S(  -8,    9), S(  -6,   27),
        S( -14,   19), S(   6,    6), S(   2,   -5), S(   1,  -12), S(  -7,  -10), S( -17,    0), S(  -2,   10), S( -13,   13),
        S( -13,    4), S(  -1,    3), S(  18,  -38), S(  15,  -10), S(   5,  -18), S(  -2,   -5), S( -14,    7), S( -18,   -5),
        S( -11,   -2), S(  40,    0), S(   2,  -10), S(  21,    7), S(   4,    7), S(   1,    1), S(   2,   -1), S( -10,   -4),
        S( -10,    3), S(  34,    6), S(  25,    8), S(   7,   19), S(   1,   11), S( -12,   12), S(   2,   15), S( -17,   -2),
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
    },
    {
        S(-110,  -25), S( -56,   70), S( -62,   44), S(  -4,    9), S(  37,   24), S(-144,   29), S( -38,  -12), S(-119,  -36),
        S( -75,   37), S(  -4,   -4), S(   3,   13), S(  24,    0), S(  32,   15), S(  43,   -2), S(  14,  -22), S(  36,  -27),
        S( -29,   25), S( -11,   23), S(  10,   33), S(   9,   37), S(  34,    6), S(  27,    5), S(  19,  -11), S( -30,    7),
        S(  48,   -3), S(  16,   12), S(  15,   23), S(  20,   20), S(  24,   17), S(   9,   13), S(  25,   -4), S(  -7,   -3),
        S(  18,    7), S(  11,   18), S(  25,    5), S(  20,   16), S(  16,   15), S(  14,   16), S(  34,   -3), S(  23,   -2),
        S(   3,   -9), S(  19,  -13), S(   9,    2), S(  14,   12), S(   5,    2), S(   4,   -6), S(  23,   -8), S(  -2,  -29),
        S(  16,  -12), S(  24,    4), S(  26,  -15), S(  10,   -3), S(   5,   -8), S(   1,  -12), S( -10,   18), S(  -1,  -38),
        S(  32, -122), S(  -7,  -17), S(  11,  -34), S(  -8,    5), S(   9,  -37), S(  -4,  -10), S(  -7,  -18), S( -34,  -17),
    },
    {
        S( -17,   -2), S(  38,  -25), S(-114,   24), S( -31,    4), S(-138,   44), S( -92,    6), S( -89,   33), S(  -1,  -21),
        S(  28,  -26), S( -53,   10), S( -15,   12), S( -10,    6), S(  45,    8), S(   5,   -1), S(  -5,  -11), S(  -8,   -4),
        S(  18,  -19), S(  21,   -3), S(  -3,   26), S(  44,   26), S(  13,   14), S(  19,   -3), S(   0,   25), S(   5,  -19),
        S(  -1,  -15), S(   0,   19), S(   2,   18), S(  -5,   39), S(  16,   31), S(  22,   16), S(  14,   13), S( -21,   12),
        S( -19,   19), S(  11,    6), S(   7,   16), S(  17,   23), S(  19,   25), S(  11,   19), S(   6,    3), S(  20,  -10),
        S(  17,  -16), S(  23,  -12), S(  13,    0), S(   9,    9), S(  10,   16), S(   0,    6), S(  20,   13), S(   9,   -9),
        S(  27,  -12), S(  22,  -35), S(  25,  -29), S(  10,  -17), S(  -1,   -8), S(  22,  -28), S(   5,  -25), S(  29,  -29),
        S(  17,  -57), S(  25,  -57), S( -12,  -23), S(  17,  -17), S(  -6,  -12), S( -12,    2), S(   3,   -3), S(  16,    5),
    },
    {
        S(  24,   13), S( -13,   25), S(  56,   15), S(   2,   20), S( -10,   20), S( -12,   39), S(  56,   25), S(  14,   24),
        S( -33,   33), S(  15,   16), S(  27,   13), S(  33,   19), S(  21,   23), S(  26,   24), S(  11,   26), S(  -4,   29),
        S( -34,   20), S( -32,   26), S(  -5,   21), S( -34,   43), S(  28,   19), S( -29,   40), S(  -6,   31), S( -18,   43),
        S(  -8,    6), S( -50,   43), S( -39,   30), S( -31,   32), S(  -3,   17), S( -13,   38), S( -17,   29), S(   2,   22),
        S( -21,  -10), S(  14,  -27), S( -41,   18), S(  25,  -22), S(  25,   -5), S(  10,   -5), S( -10,   -5), S(   2,   -7),
        S( -30,  -19), S(   3,  -15), S(  -7,  -12), S(  13,  -35), S(   5,  -16), S( -12,  -28), S(  11,  -23), S( -22,  -18),
        S( -38,  -39), S( -22,  -33), S(  17,  -33), S(  -1,  -20), S(  29,  -42), S(  14,  -30), S(   4,  -36), S(  17,  -44),
        S(   2,  -46), S( -21,  -22), S(  28,  -50), S(  41,  -43), S(  22,  -40), S(  19,  -33), S(  16,  -37), S(  26,  -38),
    },
    {
        S(  19,   18), S(  56,   -4), S(  78,  -23), S(  53,    2), S(  79,  -31), S(  -5,   18), S(   2,   22), S( -21,   57),
        S(  42,    2), S(   6,    2), S(  33,   -7), S(   9,   18), S(   1,    3), S(   4,   12), S(  30,  -40), S(   9,    6),
        S(  44,  -50), S(  -9,   62), S(  30,   -1), S( -10,   36), S(   8,  -10), S(  12,   -1), S(  -1,   -5), S(  50,  -52),
        S(  -8,   34), S( -31,   57), S(  -1,   60), S( -27,   53), S( -13,    5), S( -17,   44), S( -35,   82), S( -12,  -35),
        S( -26,   57), S(  -9,   23), S( -10,   24), S( -14,   24), S( -22,   37), S( -20,   21), S(  18,    8), S(  -6,    1),
        S( -11,  -23), S(  -8,   -8), S(   8,  -32), S( -16,   10), S(  -6,   -8), S( -13,    6), S(  15,  -26), S( -19,   41),
        S( -17,  -11), S(   1,  -63), S(   4,  -43), S(  -2,  -37), S(  -9,  -12), S(  13,  -30), S(  -7,    2), S(  15,  -41),
        S( -57,   38), S( -75,  -24), S( -35,  -41), S( -17,    9), S(   5,  -56), S(   1,  -74), S(  -4,  -35), S( -29,  -19),
    },
    {
        S(-187,  -63), S( 161,   50), S(  78,  -18), S(  21,  -35), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  54,  -28), S( -59,  112), S(-105,   70), S(  94,   14), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S( -23,   24), S(  40,   62), S( -33,   41), S(-147,   13), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  19,   30), S( -33,   83), S( -94,   41), S(-133,    6), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  25,   12), S( -45,   61), S( -94,   18), S(-111,  -10), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S( -13,   21), S( -27,   41), S( -43,   -4), S( -66,  -24), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  39,  -15), S(  44,    7), S(   7,  -37), S(  -4,  -58), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  57,  -13), S(  51,   -3), S(  18,  -52), S(  20,  -92), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
    },
};

constexpr ScorePair MOBILITY[4][28] = {
    {S(  -6,  -23), S( -23,  -40), S( -13,  -24), S(  -8,   -3), S(  -1,   10), S(   6,   14), S(  13,   22), S(  20,   27), S(  20,   11), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S( -11,   -4), S( -27,  -51), S( -10,  -30), S(  -4,   -4), S(   3,    5), S(   4,   16), S(   6,   17), S(   6,   21), S(   6,   21), S(   7,   17), S(  20,   11), S(  14,   -2), S( -16,   19), S(   4,  -41), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S( -41,  -35), S( -46,  -49), S( -14,  -36), S( -10,  -32), S(  -2,  -19), S(   0,   -5), S(  -3,    6), S(  -1,    9), S(   2,   12), S(   2,   19), S(   9,   23), S(   9,   29), S(   6,   37), S(  28,   28), S(  64,    2), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S( -13,  101), S( -12,   -3), S( -11,  -56), S( -81, -172), S( -19, -159), S( -15,  -16), S(  -8,   -7), S(  -5,    8), S(  -6,    8), S(  -3,    3), S(  -6,   16), S(  -5,   25), S(  -7,   39), S(  -5,   44), S(  -4,   40), S(  -2,   43), S(  -2,   47), S(   3,   33), S(   5,   36), S(   2,   56), S(   4,   41), S(  39,  -20), S(  49,   15), S( 101,  -64), S(  39,   10), S(  26,  -43), S( -26,  -49), S( -13,    8)}
};

constexpr ScorePair THREAT_BY_PAWN[6] = {S(  -8,  -45), S(  54,   34), S(  53,   63), S(  49,   54), S(  37,   48), S(   0,    0)};
constexpr ScorePair THREAT_BY_KNIGHT[2][6] = {
    {S(  11,   33), S(  21,   53), S(  39,   29), S(  81,    5), S(  33,   21), S(   0,    0)},
    {S(  -7,   11), S(  31,   31), S(  31,   22), S(  59,   44), S(  48,   45), S(   0,    0)}
};
constexpr ScorePair THREAT_BY_BISHOP[2][6] = {
    {S(   7,   33), S(  33,   25), S( -27,    8), S(  37,   28), S(  41,   56), S(   0,    0)},
    {S(  -2,    6), S(  14,   20), S( -16,  -22), S(  34,   76), S(  33,  108), S(   0,    0)}
};
constexpr ScorePair THREAT_BY_ROOK[2][6] = {
    {S(   7,   39), S(  32,   38), S(  42,   32), S(  17,  -71), S(  56,   -3), S(   0,    0)},
    {S(  -4,    2), S(  18,    4), S(  18,   -8), S(  39, -118), S(  52,   60), S(   0,    0)}
};
constexpr ScorePair THREAT_BY_QUEEN[2][6] = {
    {S(   6,   32), S(   9,   73), S(  33,   36), S(  17,   10), S(   6,  -33), S( 148,  159)},
    {S(  -4,   19), S(   0,    8), S( -12,   29), S( -10,    8), S( -21,  -21), S( 132,  164)}
};
constexpr ScorePair THREAT_BY_KING[6] = {S(  96,   -5), S(  72,   11), S(  96,   26), S(  81,    6), S(   0,    0), S(   0,    0)};
constexpr ScorePair KNIGHT_HIT_QUEEN = S(   7,    3);
constexpr ScorePair BISHOP_HIT_QUEEN = S(  13,   24);
constexpr ScorePair ROOK_HIT_QUEEN = S(  18,    1);
constexpr ScorePair PUSH_THREAT = S(  12,   18);
constexpr ScorePair RESTRICTED_SQUARES = S(   2,    3);

constexpr ScorePair ISOLATED_PAWN[8] = {S(  -2,   -2), S( -18,   -8), S( -14,   -6), S( -11,  -10), S( -20,   -7), S(  -3,   -5), S(  -6,   -7), S(  -4,    6)};
constexpr ScorePair DOUBLED_PAWN[8] = {S(  -1,  -48), S( -22,  -28), S( -16,  -25), S( -22,  -10), S( -32,  -11), S(   5,  -25), S(   6,  -70), S(   7,  -41)};
constexpr ScorePair BACKWARDS_PAWN[8] = {S(   0,    0), S(  -7,  -18), S( -10,   -5), S(  -2,   -7), S(  24,    1), S(  48, -235), S(   0,    0), S(   0,    0)};
constexpr ScorePair PAWN_PHALANX[8] = {S(   0,    0), S(   0,  -12), S(  -1,   -3), S(  17,   19), S(  54,   27), S( 107,  112), S( 162,  317), S(   0,    0)};
constexpr ScorePair DEFENDED_PAWN[8] = {S(   0,    0), S(   0,    0), S(   5,    7), S(   9,   10), S(  28,   12), S(  86,   24), S( 138,  -19), S(   0,    0)};
constexpr ScorePair CANDIDATE_PASSER[2][8] = {
    {S(   0,    0), S( -84,   32), S( -17,  -15), S(   2,    5), S(  -2,   58), S(   2,   77), S(   0,    0), S(   0,    0)},
    {S(   0,    0), S( -41,    5), S( -11,   -2), S(  -6,   27), S(  14,   18), S(  16,   90), S(   0,    0), S(   0,    0)}
};

constexpr ScorePair PASSED_PAWN[2][2][8] = {
    {
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -13,  -32), S(   0,   16), S(   9,  120), S( -25,  250), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -17,  -37), S(   4,  -19), S(  20,   43), S( 131,    1), S(   0,    0)}
    },
    {
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -18,  -43), S(  19,  -15), S(  15,   52), S(  60,    0), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -30,  -47), S(  14,  -41), S(   9,   16), S( -39,  -12), S(   0,    0)}
    }
};
constexpr ScorePair OUR_PASSER_PROXIMITY[8] = {S(  93,  136), S( 178,   48), S(  70,   64), S(  -6,   57), S( -10,   33), S(  -2,   12), S(   6,    4), S(  -8,   12)};
constexpr ScorePair THEIR_PASSER_PROXIMITY[8] = {S(   6,  -20), S(  49,  -23), S(  37,   -2), S(  16,   31), S(   7,   61), S(  16,   78), S(   3,   85), S( -17,   78)};
constexpr ScorePair PASSER_DEFENDED_PUSH[8] = {S(   0,    0), S(   0,    0), S(   0,    0), S(   0,   15), S(   4,   31), S(  36,   34), S(  44,  111), S(   0,    0)};

constexpr ScorePair PAWN_STORM[2][4][8] = {
    {
        {S(  21,   33), S(  61, -602), S(  78, -115), S(  57,   -8), S(  -1,   31), S(   2,   49), S(  -8,   57), S(   0,    0)},
        {S(  22,    4), S( 140, -180), S(  91, -151), S(   7,  -31), S(  30,    5), S( -23,   16), S(  15,   -8), S(   0,    0)},
        {S(  19,    6), S( 151,  -92), S(  79, -117), S(  67,  -32), S(  -2,   13), S( -33,   15), S(  -5,    1), S(   0,    0)},
        {S(  10,  -11), S( 153, -140), S(  95, -116), S(  77,  -43), S(   7,    2), S( -32,  -17), S( -41,   -5), S(   0,    0)}
    },
    {
        {S(   0,    0), S(   0,    0), S( 101,   37), S( -40,   22), S(  -8,   61), S( -21,   74), S( 152,  -27), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S( 255,  -86), S( -88,   58), S(-121,   59), S(-105,   98), S(  21,   17), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S( 144,    5), S(   0,   20), S( -42,   30), S(  13,   18), S(  39,   47), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S( 131,   39), S( -33,   18), S(  -5,    6), S( -43,   23), S(  -9,  -72), S(   0,    0)}
    }
};
constexpr ScorePair PAWN_SHIELD[4][8] = {
    {S(  54,   12), S(  10,   35), S(  11,   24), S(  46,   16), S(  48,    2), S( -98,   66), S( -49,  105), S(   0,    0)},
    {S(  32,   23), S( -37,   17), S(  20,    5), S(  54,   -2), S(  42,  -51), S(   7,  -24), S(-148,  -19), S(   0,    0)},
    {S(  38,   37), S( -13,   16), S( -27,   -6), S(  47,  -19), S(  41,   -9), S(  18,  -15), S( -16, -118), S(   0,    0)},
    {S(  12,    5), S( -31,  -23), S(   7,  -17), S(   2,  -18), S(  12,  -39), S(  18,  -40), S(  27,  -47), S(   0,    0)}
};
constexpr ScorePair SAFE_KNIGHT_CHECK = S(  77,   -7);
constexpr ScorePair SAFE_BISHOP_CHECK = S(  53,   11);
constexpr ScorePair SAFE_ROOK_CHECK = S(  92,    5);
constexpr ScorePair SAFE_QUEEN_CHECK = S(  53,   20);
constexpr ScorePair UNSAFE_KNIGHT_CHECK = S(  21,   -6);
constexpr ScorePair UNSAFE_BISHOP_CHECK = S(  21,    9);
constexpr ScorePair UNSAFE_ROOK_CHECK = S(  46,   -2);
constexpr ScorePair UNSAFE_QUEEN_CHECK = S(  14,   22);
constexpr ScorePair QUEENLESS_ATTACK = S( -69,  311);
constexpr ScorePair KING_ATTACKER_WEIGHT[4] = {S(  36,   -7), S(  25,    4), S(  19,   -8), S(  -5,  -24)};
constexpr ScorePair KING_ATTACKS = S(   4,    2);
constexpr ScorePair WEAK_KING_RING = S(   6,    2);
constexpr ScorePair KING_FLANK_ATTACKS[2] = {S(  12,   -9), S(   3,   -1)};
constexpr ScorePair KING_FLANK_DEFENSES[2] = {S(  -6,    0), S(  -4,   -2)};
constexpr ScorePair SAFETY_OFFSET = S(  66,   13);

constexpr ScorePair MINOR_BEHIND_PAWN = S(   0,   14);
constexpr ScorePair KNIGHT_OUTPOST = S(  13,   18);
constexpr ScorePair BISHOP_PAWNS[7] = {S(  -6,   14), S(   3,   22), S(   4,   15), S(   5,    5), S(   4,   -6), S(  -2,  -22), S(  -8,  -30)};
constexpr ScorePair BISHOP_PAIR = S(  19,   65);
constexpr ScorePair LONG_DIAG_BISHOP = S(   3,   10);
constexpr ScorePair ROOK_OPEN[2] = {S(  28,   -7), S(  15,    5)};

constexpr ScorePair TEMPO = S(  19,   14);

constexpr ScorePair COMPLEXITY_PAWNS = S(   0,   17);
constexpr ScorePair COMPLEXITY_PAWNS_BOTH_SIDES = S(   0,  141);
constexpr ScorePair COMPLEXITY_PAWN_ENDGAME = S(   0,  173);
constexpr ScorePair COMPLEXITY_OFFSET = S(   0, -255);

#undef S
// clang-format on

}
