#pragma once

#include "../defs.h"

namespace eval
{

// clang-format off
#define S(mg, eg) ScorePair(mg, eg)

constexpr ScorePair MATERIAL[6] = {S(  65,  134), S( 315,  454), S( 328,  472), S( 424,  809), S( 876, 1841), S(0, 0)};

constexpr ScorePair PSQT[6][64] = {
    {
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  71,   80), S(  16,   97), S(  30,  100), S(  40,   86), S(  65,   59), S(  46,   60), S(  38,   93), S(  83,   78),
        S(   6,   11), S(  -8,   24), S(   4,    1), S(   5,   -7), S(  -5,  -16), S(  -4,   -6), S( -15,   19), S(  -4,   10),
        S(   6,    9), S(   4,   19), S(  11,   -6), S(  11,  -17), S(   4,  -17), S(   1,  -10), S(  -2,   12), S(  -7,    9),
        S(  -5,   -4), S(  -8,   15), S(  18,  -25), S(  18,  -17), S(  13,  -18), S(   4,  -13), S( -14,   12), S( -15,   -5),
        S( -11,   -6), S(  11,    7), S(   4,    3), S(   7,   -1), S(  -3,    0), S(  -8,   -2), S( -17,   12), S( -22,   -6),
        S(  -3,   -7), S(  24,    8), S(  24,   55), S(   5,    8), S(  -2,    0), S(  -4,    0), S(  -8,   11), S( -18,   -3),
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
    },
    {
        S( -58, -120), S( -92,   18), S(-112,   45), S(  -3,   11), S( -22,   15), S( -62,    7), S(-103,    8), S( -89,  -67),
        S(   0,   -3), S( -10,   21), S(  23,   11), S(  36,   14), S(  27,   17), S(  23,   -6), S( -19,   15), S(  -7,  -11),
        S(  15,   -5), S(  11,   12), S(  37,   11), S(  28,   15), S(  21,   15), S(  25,    7), S(  10,    9), S(  11,  -12),
        S(  30,    6), S(  30,   12), S(  35,   16), S(  29,   24), S(  34,   21), S(  20,   16), S(  20,    4), S(  12,    6),
        S(  21,    6), S(  28,    6), S(  25,   16), S(  18,   30), S(  19,   22), S(  19,   15), S(  17,    3), S(   9,    2),
        S(   4,   -7), S(  19,   -1), S(  16,    0), S(  15,   15), S(  12,   10), S(  -1,   -2), S(   4,   -7), S(  -7,   -8),
        S(  11,  -11), S(   3,    0), S(   8,  -13), S(  12,   -1), S(   4,   -1), S(   2,  -13), S(  -5,   -6), S( -14,  -22),
        S( -27,  -23), S( -10,  -21), S(  -1,  -15), S(   5,   -9), S(  -1,   -5), S( -10,  -18), S( -15,  -23), S( -29,  -40),
    },
    {
        S( -28,  -36), S( -53,   21), S( -85,   22), S( -67,   22), S( -76,   26), S( -67,   20), S( -52,   21), S( -31,  -13),
        S( -12,   -5), S( -37,    4), S( -10,    9), S( -28,   14), S( -18,   16), S( -12,   11), S( -11,  -11), S(  -9,   -1),
        S(  22,   -9), S(  10,   11), S(  21,    6), S(  24,   12), S(  19,   13), S(  10,    1), S(  17,    4), S(   7,   -4),
        S(   8,   -3), S(  13,   15), S(  15,   19), S(  17,   29), S(  27,   25), S(  18,   15), S(  14,    9), S(   7,   -9),
        S(  19,   -9), S(   7,    6), S(  11,   17), S(  21,   16), S(  22,   19), S(  14,   11), S(   8,    6), S(  14,  -10),
        S(  20,  -10), S(  24,   -5), S(  14,   -7), S(  15,   12), S(  13,    5), S(   8,   -9), S(  29,   -6), S(  14,  -12),
        S(  23,  -17), S(  29,  -30), S(  27,  -13), S(  12,   -5), S(   3,   -5), S(  13,  -15), S(  10,  -27), S(  19,   -9),
        S(  10,  -40), S(  -7,    0), S( -10,   -8), S(  11,  -15), S(   7,  -12), S(  -3,   -6), S(   6,  -10), S(   5,  -24),
    },
    {
        S(  18,   14), S(  32,   13), S(  27,   14), S(  12,   27), S(  22,   17), S(  14,   21), S(  19,   21), S(  23,   20),
        S(  21,   13), S(  11,   22), S(  19,   20), S(  15,   23), S(  20,   26), S(  11,   26), S(  11,   24), S(  18,   22),
        S( -18,   18), S(   8,   13), S(  14,   10), S(  15,    9), S(  12,    9), S(   7,   15), S(   6,   17), S(  -4,   22),
        S( -18,   12), S(  -8,   16), S(  -3,   12), S(  -9,   11), S(  -3,    8), S(  -1,   11), S(  -3,   16), S(  -6,   12),
        S( -23,   -1), S( -11,    5), S( -14,   11), S( -10,    8), S( -12,    5), S( -16,   11), S( -16,   11), S( -13,    2),
        S( -17,  -24), S(   5,  -25), S(  -8,   -8), S(   0,  -17), S(  -2,  -18), S( -14,   -8), S(  -4,  -16), S( -19,  -14),
        S( -51,  -27), S(  -7,  -34), S(   3,  -24), S(  -1,  -23), S(  -2,  -23), S(  -7,  -18), S( -12,  -25), S( -19,  -23),
        S( -16,  -35), S( -19,  -19), S(   6,  -23), S(  13,  -30), S(   7,  -28), S(  -1,  -21), S(   0,  -26), S(  -1,  -23),
    },
    {
        S(   9,   29), S(  41,    6), S(  25,   26), S(  14,   33), S(  18,   26), S(  27,   14), S(  16,    9), S( -18,   34),
        S(  37,   -8), S(  32,   -7), S(  11,   22), S( -15,   41), S(   8,   31), S(  16,    2), S(  19,   -9), S(  12,    1),
        S(   8,   10), S(  12,    9), S(  -2,   24), S( -20,   38), S(  -3,   36), S(  14,    1), S(  26,  -22), S(  20,  -10),
        S(  -3,   11), S( -12,   22), S( -11,   22), S( -24,   40), S( -19,   38), S(   7,    9), S(   0,   21), S(   3,   -1),
        S( -14,   24), S(  -8,   17), S( -13,   17), S( -17,   31), S( -20,   43), S(  -7,   23), S(   0,   10), S(  -4,    4),
        S(  -5,  -13), S(   0,  -16), S(  -7,    1), S( -17,   14), S( -10,   15), S(  -4,    6), S(   7,   -7), S(   3,   -6),
        S(  -1,  -59), S(   8,  -83), S(   2,  -49), S(  -3,  -21), S(  -6,  -13), S(   6,  -33), S(   1,  -29), S(   2,  -21),
        S( -16,  -36), S( -21,  -71), S( -15,  -53), S(  -6,  -47), S(  -2,  -36), S(  -9,  -34), S( -12,  -31), S( -19,   -7),
    },
    {
        S(  52, -154), S(  21,   70), S(  -4,   21), S( -24,    9), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  30,   10), S(   0,  103), S( -39,   63), S( -61,   49), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  36,   48), S(   2,  111), S( -54,   55), S(-133,   18), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S( -24,   47), S( -46,   96), S( -67,   38), S(-134,    7), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S( -62,   40), S( -56,   74), S( -85,   22), S(-111,  -10), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  -1,   17), S(  -6,   44), S( -38,   -1), S( -59,  -33), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  59,  -12), S(  46,   16), S(  17,  -35), S(  -9,  -69), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  59,  -43), S(  58,   -8), S(  21,  -60), S(  18, -111), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
    },
};

constexpr ScorePair MOBILITY[4][28] = {
    {S(  -7,  -22), S( -36,  -54), S( -21,  -18), S( -10,   -1), S(   0,    8), S(   6,   18), S(  14,   22), S(  22,   26), S(  32,   17), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S( -11,  -31), S( -41,  -62), S( -21,  -32), S( -10,  -12), S(  -4,   -1), S(   0,    9), S(   2,   16), S(   5,   19), S(   4,   21), S(   8,   21), S(   6,   22), S(  13,   15), S(  17,   14), S(  41,  -11), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S( -25,  -62), S( -49,  -62), S( -18,  -42), S( -10,  -26), S(  -2,  -15), S(   3,   -5), S(   2,    6), S(   4,   11), S(   5,   15), S(   7,   21), S(   9,   27), S(   9,   35), S(  10,   39), S(  14,   40), S(  40,   18), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S( -14,   42), S( -41,    8), S( -60,  -14), S( -42, -123), S( -26, -105), S( -12,  -68), S(  -4,  -52), S(   0,  -33), S(   0,  -15), S(   1,   -1), S(   3,    6), S(   3,   16), S(   6,   21), S(   6,   30), S(   7,   34), S(   9,   35), S(   7,   40), S(   8,   39), S(  10,   40), S(  12,   35), S(  16,   32), S(  20,   17), S(  19,   17), S(  26,    5), S(  21,   10), S(  22,   -8), S(  25,  -40), S( -33,    5)}
};

constexpr ScorePair THREAT_BY_UNSAFE_PAWN = S(  47,   52);
constexpr ScorePair THREAT_BY_SAFE_PAWN[6] = {S(   0,    0), S(  78,   41), S(  81,   67), S(  75,   51), S(  58,   25), S(   0,    0)};
constexpr ScorePair THREAT_BY_KNIGHT[2][6] = {
    {S(   6,   36), S(   7,   82), S(  50,   32), S(  84,   13), S(  42,    7), S(   0,    0)},
    {S(  -8,   10), S(   3,   76), S(  39,   28), S(  71,   44), S(  50,   47), S(   0,    0)}
};
constexpr ScorePair THREAT_BY_BISHOP[2][6] = {
    {S(   3,   33), S(  37,   44), S(   2,   32), S(  58,   36), S(  61,   48), S(   0,    0)},
    {S(  -5,    3), S(  20,   21), S(  -6,    2), S(  56,   76), S(  63,   75), S(   0,    0)}
};
constexpr ScorePair THREAT_BY_ROOK[2][6] = {
    {S(  -2,   50), S(  36,   50), S(  46,   47), S(   6,  -72), S(  70,  -19), S(   0,    0)},
    {S( -10,    9), S(   8,   14), S(  19,    4), S(  20, -102), S(  55,   90), S(   0,    0)}
};
constexpr ScorePair THREAT_BY_QUEEN[2][6] = {
    {S(   8,   23), S(  25,   28), S(  21,   55), S(  17,   11), S(   0,  -53), S( 152,   61)},
    {S(  -5,   18), S(   2,    5), S(  -8,   26), S(  -4,   -7), S( -17,  -44), S( 102,  209)}
};
constexpr ScorePair THREAT_BY_KING[6] = {S(  49,   14), S(  26,   40), S(  98,   31), S(  85,    6), S(   0,    0), S(   0,    0)};
constexpr ScorePair KNIGHT_HIT_QUEEN = S(   7,    0);
constexpr ScorePair BISHOP_HIT_QUEEN = S(  16,   14);
constexpr ScorePair ROOK_HIT_QUEEN = S(  19,   -3);
constexpr ScorePair PUSH_THREAT = S(  13,   18);
constexpr ScorePair RESTRICTED_SQUARES = S(   2,    2);

constexpr ScorePair ISOLATED_PAWN[8] = {S(  -4,    3), S(  -4,  -17), S( -10,  -11), S( -10,  -16), S( -14,  -14), S(  -9,   -8), S(  -6,  -12), S(  -8,    2)};
constexpr ScorePair DOUBLED_PAWN[8] = {S(   1,  -53), S(   5,  -41), S(  -2,  -26), S(  -6,  -16), S( -16,    1), S(  -7,  -18), S(   3,  -39), S(   7,  -45)};
constexpr ScorePair BACKWARDS_PAWN[8] = {S(   0,    0), S(  -8,  -13), S(   0,  -15), S(  -7,  -14), S(   7,  -21), S(  12,   21), S(   0,    0), S(   0,    0)};
constexpr ScorePair PAWN_PHALANX[8] = {S(   0,    0), S(   5,   -6), S(  12,   -2), S(  18,   10), S(  39,   36), S(  75,  137), S( 110,  192), S(   0,    0)};
constexpr ScorePair DEFENDED_PAWN[8] = {S(   0,    0), S(   0,    0), S(  18,    6), S(  11,    9), S(  18,   23), S(  41,   57), S(  76,  117), S(   0,    0)};
constexpr ScorePair CANDIDATE_PASSER[2][8] = {
    {S(   0,    0), S( -20,  -14), S(  -7,  -14), S(  -2,    2), S(  16,   24), S(  43,   81), S(   0,    0), S(   0,    0)},
    {S(   0,    0), S( -14,  -10), S(  -9,    9), S(  -4,   25), S(  10,   36), S(  48,   96), S(   0,    0), S(   0,    0)}
};

constexpr ScorePair PASSED_PAWN[2][2][8] = {
    {
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -33,  -28), S( -12,   25), S(  27,  131), S( 117,  199), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -25,  -40), S(  -2,  -12), S(  30,   55), S(  65,   71), S(   0,    0)}
    },
    {
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -27,  -41), S(  -7,   -9), S(  27,   54), S(  31,   43), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -28,  -51), S(  -5,  -27), S(  16,   30), S(  -1,   12), S(   0,    0)}
    }
};
constexpr ScorePair OUR_PASSER_PROXIMITY[8] = {S(  74,  109), S( 111,   70), S(  45,   69), S(  -4,   59), S(   0,   34), S(   2,   23), S(  16,   11), S(   0,   21)};
constexpr ScorePair THEIR_PASSER_PROXIMITY[8] = {S( -52,    7), S(   4,   -3), S(  26,    0), S(  21,   25), S(  12,   59), S(  15,   73), S(  21,   76), S(  20,   62)};
constexpr ScorePair PASSER_DEFENDED_PUSH[8] = {S(   0,    0), S(   0,    0), S(   0,    0), S(   8,    6), S(  10,   20), S(  36,   31), S(  57,  103), S(   0,    0)};

constexpr ScorePair PAWN_STORM[2][4][8] = {
    {
        {S(  29,   27), S( -87,  -78), S(   4,  -38), S(  43,    8), S(  20,   22), S(   3,   25), S(  -3,   28), S(   0,    0)},
        {S(  23,   17), S(  57, -110), S(  76,  -60), S(  33,   -3), S(   7,   15), S( -26,   19), S(   1,   17), S(   0,    0)},
        {S(   9,   16), S(  51,  -81), S( 107,  -50), S(  68,   -6), S(   8,   17), S( -16,   20), S(  -5,   17), S(   0,    0)},
        {S(   9,   -2), S( 126,  -96), S( 115,  -56), S(  57,   -5), S(   6,    5), S( -25,    1), S( -25,    3), S(   0,    0)}
    },
    {
        {S(   0,    0), S(   0,    0), S(  75,   41), S(  -5,   27), S(  -3,   33), S(   9,   43), S(  33,   33), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S( 138,   32), S( -27,   27), S( -14,   31), S( -19,   45), S(   5,   29), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S( 130,   13), S(  13,   20), S(  -8,   33), S(  -1,   37), S(  50,   14), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S( 131,    0), S(  12,   15), S( -20,   15), S(  -9,   13), S( -18,  -11), S(   0,    0)}
    }
};
constexpr ScorePair PAWN_SHIELD[4][8] = {
    {S(  56,   30), S(   1,   42), S( -13,   33), S(  31,   27), S(  38,   18), S(   4,   13), S( -23,   20), S(   0,    0)},
    {S(  43,   20), S( -28,   25), S(   7,   19), S(  42,   11), S(  40,    1), S(  -4,   -4), S( -36,  -24), S(   0,    0)},
    {S(  23,   13), S(   5,   52), S(   4,    7), S(  34,  -10), S(  31,  -11), S(   5,   -8), S( -63,   -1), S(   0,    0)},
    {S(  13,    8), S( -25,   -2), S(   4,   -6), S(  28,  -12), S(  20,  -11), S(  26,   -2), S( -34,    3), S(   0,    0)}
};
constexpr ScorePair SAFE_KNIGHT_CHECK = S( 100,    1);
constexpr ScorePair SAFE_BISHOP_CHECK = S(  69,   18);
constexpr ScorePair SAFE_ROOK_CHECK = S( 107,   10);
constexpr ScorePair SAFE_QUEEN_CHECK = S(  64,   21);
constexpr ScorePair UNSAFE_KNIGHT_CHECK = S(  17,    0);
constexpr ScorePair UNSAFE_BISHOP_CHECK = S(  35,    7);
constexpr ScorePair UNSAFE_ROOK_CHECK = S(  41,    2);
constexpr ScorePair UNSAFE_QUEEN_CHECK = S(  20,    5);
constexpr ScorePair QUEENLESS_ATTACK = S(-112,  338);
constexpr ScorePair KING_ATTACKER_WEIGHT[4] = {S(  57,   -3), S(  23,   -2), S(  24,  -10), S(   6,  -18)};
constexpr ScorePair KING_ATTACKS = S(   7,    0);
constexpr ScorePair WEAK_KING_RING = S(   4,    1);
constexpr ScorePair KING_FLANK_ATTACKS[2] = {S(  13,   -4), S(   3,    0)};
constexpr ScorePair KING_FLANK_DEFENSES[2] = {S(  -8,    0), S(  -6,    3)};
constexpr ScorePair SAFETY_OFFSET = S(  79,  142);

constexpr ScorePair MINOR_BEHIND_PAWN = S(   2,   10);
constexpr ScorePair KNIGHT_OUTPOST = S(  18,   17);
constexpr ScorePair BISHOP_PAWNS[7] = {S(  11,    6), S(   5,   15), S(   3,   10), S(   1,    4), S(  -3,   -2), S(  -6,   -9), S(  -9,  -18)};
constexpr ScorePair BISHOP_PAIR = S(  22,   66);
constexpr ScorePair LONG_DIAG_BISHOP = S(  13,   13);
constexpr ScorePair ROOK_OPEN[2] = {S(  31,    0), S(  19,    2)};

constexpr ScorePair TEMPO = S(  29,   20);

constexpr ScorePair COMPLEXITY_PAWNS = S(   0,   10);
constexpr ScorePair COMPLEXITY_PAWNS_BOTH_SIDES = S(   0,  125);
constexpr ScorePair COMPLEXITY_PAWN_ENDGAME = S(   0,  130);
constexpr ScorePair COMPLEXITY_OFFSET = S(   0, -207);

#undef S
// clang-format on

}
