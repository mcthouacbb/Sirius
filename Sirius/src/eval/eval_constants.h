#pragma once

#include "../defs.h"

namespace eval
{

#define S(mg, eg) PackedScore(mg, eg)

constexpr PackedScore MATERIAL[6] = {S(  57,  129), S( 272,  445), S( 296,  453), S( 365,  813), S( 762, 1489), S(0, 0)};

constexpr PackedScore PSQT[6][64] = {
	{
		S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
		S(  63,   69), S(  28,   77), S(  32,   81), S(  52,   62), S(  60,   53), S(  28,   84), S(  29,   88), S(  61,   75),
		S(  24,   26), S(  29,   43), S(  28,   16), S(  51,  -20), S(  37,  -13), S(  23,    7), S(   3,   34), S(   9,   31),
		S(  17,   18), S(   9,   13), S(  10,   -4), S(  16,  -16), S(   6,  -16), S(  -1,   -2), S(  -5,   13), S( -11,   22),
		S(   6,    5), S(   7,   10), S(   5,  -18), S(  12,  -13), S(   6,  -12), S(  -5,   -6), S( -12,    9), S( -16,    7),
		S(   0,    1), S(   9,   -3), S(   1,  -22), S(  -2,    1), S(  -8,    0), S( -15,   -7), S( -22,    3), S( -27,    5),
		S(  14,    4), S(  31,   -1), S(  13,  -22), S(   7,   11), S(  -6,    4), S(  -8,   -2), S( -12,   12), S( -18,   12),
		S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
	},
	{
		S( -65,  -85), S( -76,  -19), S( -27,  -14), S(  17,  -14), S( -30,    5), S( -66,   10), S(-111,   19), S( -80,  -40),
		S(  -5,   -8), S(  20,    1), S(  33,   -4), S(  12,    5), S(  16,    6), S(   1,   13), S(  -5,   20), S( -11,   12),
		S(  18,   -8), S(  14,   -4), S(  56,  -18), S(  38,    1), S(  21,    9), S(  12,    5), S(   2,    6), S(  -7,    7),
		S(  33,    3), S(  34,    7), S(  46,    6), S(  33,   15), S(  30,   18), S(  27,    9), S(  17,    5), S(   5,   18),
		S(   9,   16), S(  20,   11), S(  26,    9), S(  20,   21), S(  23,   14), S(  18,   14), S(  19,    4), S(   1,   14),
		S(   1,   -1), S(  16,   -4), S(   7,   -9), S(  15,    8), S(   6,    8), S(  -1,   -4), S(  -1,   -5), S( -14,   -1),
		S(   2,    6), S(   4,   -5), S(   4,   -6), S(   3,   -2), S(   4,   -2), S(  -7,   -6), S( -12,   -2), S( -18,    0),
		S( -12,   -3), S( -12,    0), S(  -4,   -8), S(  -2,    4), S(  -9,    1), S( -21,   -6), S( -15,   -2), S( -47,   11),
	},
	{
		S( -36,   -4), S( -36,    8), S( -13,    0), S( -69,   11), S( -67,   18), S( -51,    4), S( -26,    8), S( -15,   16),
		S( -22,   -5), S( -33,   10), S(  -6,   -3), S(  -1,   -1), S( -19,    7), S(   1,   -2), S(  -2,    0), S(  -3,   -5),
		S(  18,   12), S(  14,   -2), S(  40,    5), S(  10,    4), S(  14,   -1), S(   6,    4), S(   6,    5), S(   6,    3),
		S(  -3,    5), S(   8,    8), S(   7,   11), S(  17,   13), S(  16,   19), S(  12,    4), S(   4,    9), S(  -7,    8),
		S(  13,   -5), S(   2,    8), S(   5,    6), S(   7,   11), S(  15,    8), S(  -4,   12), S(  -2,    5), S(   0,    3),
		S(  20,  -11), S(  21,  -10), S(  11,   -3), S(   3,    7), S(  -4,    3), S(   6,    3), S(   9,    2), S(   1,   -6),
		S(  21,  -19), S(  28,  -24), S(  19,  -14), S(   4,   -6), S(  -4,   -1), S(   7,  -18), S(   6,  -17), S(  13,   -7),
		S(  33,  -31), S(  18,  -19), S(  -4,    0), S(  13,   -3), S(   0,   -2), S(   1,    7), S(  11,   -1), S(  12,   -6),
	},
	{
		S(   6,   10), S( -25,   36), S(  -2,   22), S( -11,   14), S( -27,   24), S( -23,   28), S( -11,   21), S(  -6,   18),
		S(  24,    1), S(  30,    5), S(  22,    9), S(   5,   12), S(  14,   14), S(   1,   26), S(  -2,   21), S(   0,   14),
		S(   7,    4), S(  41,    2), S(  32,   -1), S(  25,    3), S(   3,   14), S(  -1,   24), S(  11,   19), S(  -8,   21),
		S(   1,   10), S(   5,   14), S(  16,    9), S(  10,    4), S(   1,   14), S(   5,   18), S(   4,   18), S( -10,   20),
		S(  -8,   -2), S(  11,    3), S(  -2,    6), S(   5,    1), S(  -6,    5), S(  -9,    8), S( -11,    9), S( -14,    8),
		S(   8,  -28), S(  17,  -28), S(   2,  -18), S(   1,  -17), S( -11,  -10), S( -15,  -10), S( -13,  -11), S( -19,   -9),
		S(  -6,  -31), S(  18,  -38), S(   4,  -26), S(   2,  -25), S(  -5,  -20), S(  -6,  -18), S( -15,  -14), S( -17,  -20),
		S(  -9,  -36), S(  -7,  -17), S(  -2,  -22), S(   5,  -28), S(  -2,  -25), S(  -9,  -17), S(  -8,  -21), S(  -9,  -17),
	},
	{
		S(   5,  -25), S(  39,  -44), S(   4,    5), S(  -2,   -2), S(  12,  -19), S( -13,   -3), S( -36,   -3), S( -15,  -13),
		S(  33,    4), S(  -4,   12), S(  -1,   22), S( -35,   52), S( -26,   36), S(  -8,    8), S(  -6,  -12), S(   6,  -11),
		S(  11,    7), S(  15,    6), S(   7,   16), S(  -4,   26), S(   3,   18), S(   6,   15), S(   6,   -6), S(  16,   -7),
		S(   9,   21), S(   8,   40), S(   8,   14), S( -12,   34), S(  -7,   32), S(   5,    7), S(   4,   16), S(   2,   10),
		S(  11,   11), S(  14,   19), S(   2,   27), S(  -1,   29), S(  -6,   31), S(  -5,   23), S(   1,   19), S(  -2,    8),
		S(  12,  -21), S(  11,   -3), S(   3,    9), S(  -8,   23), S(  -7,   15), S(  -7,   17), S(   2,   -3), S(   2,  -12),
		S(  11,  -56), S(  16,  -67), S(   7,  -39), S(   3,   -4), S(   1,    2), S(   3,  -16), S(   1,  -20), S(   8,  -35),
		S(   3,  -47), S( -13,  -51), S( -17,  -22), S(  -7,  -17), S(  -7,  -10), S( -11,   -5), S( -14,  -14), S( -14,  -12),
	},
	{
		S(   1,  -65), S(   4,   -2), S( -31,   -7), S( -23,   -8), S(   8,   -6), S(   8,   -6), S(   8,   -6), S(   8,   -6),
		S( -55,   32), S(  -2,   59), S( -10,   45), S(  28,   19), S(   8,   -6), S(   8,   -6), S(   8,   -6), S(   8,   -6),
		S( -23,   24), S(  24,   52), S(  30,   40), S(   3,   42), S(   8,   -6), S(   8,   -6), S(   8,   -6), S(   8,   -6),
		S( -62,   23), S( -23,   46), S( -19,   37), S( -44,   33), S(   8,   -6), S(   8,   -6), S(   8,   -6), S(   8,   -6),
		S( -78,   12), S( -34,   30), S( -24,   18), S( -44,   17), S(   8,   -6), S(   8,   -6), S(   8,   -6), S(   8,   -6),
		S( -36,   -5), S(   7,    7), S(  -9,   -3), S( -13,   -4), S(   8,   -6), S(   8,   -6), S(   8,   -6), S(   8,   -6),
		S(  24,  -28), S(  34,   -9), S(  13,  -17), S(  -1,  -19), S(   8,   -6), S(   8,   -6), S(   8,   -6), S(   8,   -6),
		S(  18,  -63), S(  23,  -28), S(   4,  -33), S(  15,  -52), S(   8,   -6), S(   8,   -6), S(   8,   -6), S(   8,   -6),
	},
};

constexpr PackedScore MOBILITY[4][28] = {
	{S( -11,  -20), S( -36,  -65), S( -13,  -33), S(  -6,   -6), S(   3,    7), S(   6,   18), S(  13,   26), S(  20,   33), S(  28,   33), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -20,  -33), S( -48,  -99), S( -28,  -39), S( -22,  -17), S( -11,   -4), S(  -4,    6), S(   0,   17), S(   5,   22), S(   8,   27), S(  12,   29), S(  14,   30), S(  26,   22), S(  29,   24), S(  47,    6), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -25,  -43), S(  13,  -72), S( -23,  -52), S( -12,  -31), S(  -6,  -23), S(  -2,   -5), S(   0,    0), S(  -5,   10), S(  -1,   13), S(   2,   19), S(   5,   26), S(   6,   35), S(   9,   40), S(  15,   42), S(  22,   41), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -34,    8), S( -53,  -74), S( -92,  -78), S( -71, -260), S( -68, -102), S( -27,  -43), S( -21,  -10), S( -14,   -5), S(  -7,   -4), S(  -6,   21), S(  -5,   28), S(  -2,   38), S(   1,   42), S(   4,   45), S(   6,   48), S(   9,   49), S(  11,   51), S(  10,   56), S(  11,   56), S(  12,   57), S(  20,   50), S(  27,   33), S(  31,   30), S(  48,    9), S(  58,   -3), S(  59,   -6), S(  51,  -13), S(  18,  -26)}
};

constexpr PackedScore THREAT_BY_PAWN[6] = {S(   7,  -18), S(  59,   32), S(  58,   64), S(  74,   31), S(  70,   -8), S(   0,    0)};
constexpr PackedScore THREAT_BY_KNIGHT[2][6] = {
	{S(   7,   29), S(  25,   35), S(  35,   44), S(  69,   13), S(  43,  -19), S(   0,    0)},
	{S(  -4,   10), S(  12,   35), S(  27,   32), S(  59,   34), S(  52,    3), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_BISHOP[2][6] = {
	{S(   1,   38), S(  40,   36), S(  -6,   33), S(  66,   17), S(  63,   67), S(   0,    0)},
	{S(   0,    8), S(  20,   25), S( -19,  -18), S(  41,   47), S(  44,  126), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_ROOK[2][6] = {
	{S(   1,   43), S(  17,   64), S(  26,   58), S(  13,  -50), S(  69,   13), S(   0,    0)},
	{S(  -8,    7), S(   2,   16), S(  12,    3), S(  13,  -93), S(  60,   48), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_QUEEN[2][6] = {
	{S(   6,   10), S(  22,   22), S(   8,   50), S(  13,    9), S(  10,  -55), S(  97,   27)},
	{S(  -1,    9), S(   0,    7), S(  -6,   19), S(  -5,    4), S( -17,  -69), S( 105,   68)}
};
constexpr PackedScore THREAT_BY_KING[6] = {S( -31,   48), S(   0,   49), S(  19,   42), S(  78,   18), S(   0,    0), S(   0,    0)};
constexpr PackedScore PUSH_THREAT = S(  15,   21);

constexpr PackedScore ISOLATED_PAWN[8] = {S(  -5,   -3), S(  -4,  -12), S(  -9,  -11), S(  -9,  -16), S(  -9,  -14), S(  -6,   -7), S(  -1,  -11), S(  -6,   -2)};
constexpr PackedScore PAWN_PHALANX[8] = {S(   0,    0), S(   5,   -3), S(  12,    4), S(  18,   16), S(  44,   61), S( 106,  225), S( -38,  356), S(   0,    0)};
constexpr PackedScore DEFENDED_PAWN[8] = {S(   0,    0), S(   0,    0), S(  19,   10), S(  12,    9), S(  12,   18), S(  19,   58), S( 125,   81), S(   0,    0)};

constexpr PackedScore PASSED_PAWN[2][2][8] = {
	{
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -30,  -37), S( -13,   24), S( -21,  151), S(  21,  255), S(   0,    0)},
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -18,  -50), S(  11,  -25), S(  14,   14), S(  56,   51), S(   0,    0)}
	},
	{
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -25,  -57), S(   0,  -28), S(  14,    0), S(  61,   13), S(   0,    0)},
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -26,  -63), S(   1,  -37), S(  -7,  -20), S(  -5,   -4), S(   0,    0)}
	}
};
constexpr PackedScore OUR_PASSER_PROXIMITY[8] = {S(   0,    0), S(  43,   84), S(   1,   69), S(   0,   43), S(   3,   32), S(   9,   25), S(  19,   24), S(  11,   23)};
constexpr PackedScore THEIR_PASSER_PROXIMITY[8] = {S(   0,    0), S( -36,    5), S(  21,   -2), S(  13,   26), S(  16,   46), S(   8,   79), S(  11,   80), S(  10,   69)};

constexpr PackedScore PAWN_STORM[4][8] = {
	{S(  13,   15), S(-130,  -46), S(  -2,   -6), S(   3,   -9), S(  -1,    4), S(  -5,   12), S(  -4,   11), S(   0,    0)},
	{S(   6,    3), S( -11, -103), S(  47,  -39), S(   5,   -8), S(  -2,   -2), S( -13,    8), S( -11,   12), S(   0,    0)},
	{S(  -3,    7), S(  59,  -99), S(  67,  -42), S(  16,  -15), S(   1,    3), S(  -8,   11), S(  -9,   14), S(   0,    0)},
	{S(   7,   -6), S( 102,  -84), S(  38,  -20), S(  12,    0), S(  -2,    7), S(  -8,    1), S(  -4,    3), S(   0,    0)}
};
constexpr PackedScore PAWN_SHIELD[4][8] = {
	{S(  15,    3), S(  -7,   26), S( -13,   14), S(  -2,    8), S(   3,    0), S( -28,  -27), S( -75,  -35), S(   0,    0)},
	{S(  18,    2), S( -14,   11), S( -10,    2), S(  11,   -2), S(   9,  -10), S(  -2,  -16), S( -39,  -32), S(   0,    0)},
	{S(   8,   16), S( -14,   -3), S(   5,   -7), S(   2,    1), S(   1,    4), S(   9,   -9), S(  -5,  -36), S(   0,    0)},
	{S(  12,   -3), S(   3,   -1), S(  -4,    0), S(  -2,   -4), S(   6,   -8), S(  27,  -20), S( -14,  -20), S(   0,    0)}
};
constexpr PackedScore SAFE_KNIGHT_CHECK = S(  79,   -2);
constexpr PackedScore SAFE_BISHOP_CHECK = S(  22,   12);
constexpr PackedScore SAFE_ROOK_CHECK = S(  58,    6);
constexpr PackedScore SAFE_QUEEN_CHECK = S(  22,   22);
constexpr PackedScore UNSAFE_KNIGHT_CHECK = S(   6,    2);
constexpr PackedScore UNSAFE_BISHOP_CHECK = S(  11,   12);
constexpr PackedScore UNSAFE_ROOK_CHECK = S(  20,    0);
constexpr PackedScore UNSAFE_QUEEN_CHECK = S(   5,   14);
constexpr PackedScore KING_ATTACKER_WEIGHT[4] = {S(  18,    2), S(  15,    3), S(  17,  -13), S(   5,    0)};
constexpr PackedScore KING_ATTACKS[14] = {S( -44,   27), S( -51,   20), S( -58,   15), S( -62,   17), S( -61,   13), S( -54,    9), S( -39,    4), S( -20,   -5), S(  17,  -22), S(  40,  -22), S(  67,  -28), S(  81,   -7), S( 115,  -87), S(  77,   64)};

constexpr PackedScore MINOR_BEHIND_PAWN = S(   7,   14);
constexpr PackedScore KNIGHT_OUTPOST = S(  25,   19);
constexpr PackedScore BISHOP_PAWNS[7] = {S(   4,   24), S(   6,   22), S(   4,   13), S(   0,    4), S(  -3,   -5), S(  -4,  -20), S(  -8,  -34)};
constexpr PackedScore BISHOP_PAIR = S(  19,   63);
constexpr PackedScore ROOK_OPEN[2] = {S(  24,    3), S(  14,    3)};

constexpr PackedScore TEMPO = S(  29,   36);

constexpr PackedScore COMPLEXITY_PAWNS = S(   1,    8);
constexpr PackedScore COMPLEXITY_PASSERS = S(  -1,    1);
constexpr PackedScore COMPLEXITY_PAWNS_BOTH_SIDES = S(   1,   70);
constexpr PackedScore COMPLEXITY_PAWN_ENDGAME = S(   0,   62);
constexpr PackedScore COMPLEXITY_OFFSET = S(   1, -131);

#undef S


}