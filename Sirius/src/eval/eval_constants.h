#pragma once

#include "../defs.h"

namespace eval
{

#define S(mg, eg) PackedScore(mg, eg)

constexpr PackedScore MATERIAL[6] = {S(  65,   94), S( 297,  381), S( 290,  387), S( 414,  706), S( 845, 1300), S(0, 0)};

constexpr PackedScore PSQT[6][64] = {
	{
		S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
		S( -12,  101), S(  -2,  103), S(  47,   90), S(  63,   45), S(  60,   35), S(  31,   53), S(  12,   78), S(   1,   74),
		S(  46,   39), S(  56,   54), S(  82,    7), S(  54,  -18), S(  45,  -21), S(  37,    0), S(   4,   47), S(   3,   35),
		S(  22,    8), S(  13,   24), S(  30,   -5), S(  21,   -9), S(   6,   -9), S(   2,   -2), S(  -8,   23), S( -10,   19),
		S(   9,   -8), S(   3,   15), S(  16,  -10), S(   8,   -6), S(   3,   -8), S(  -4,   -6), S( -18,   18), S( -19,    2),
		S(  13,  -20), S(  16,   -2), S(  -1,   -6), S(  -2,   -2), S( -11,   -1), S( -17,   -8), S( -30,    9), S( -34,   -2),
		S(  25,  -23), S(  46,   -4), S(  34,   -8), S(   0,   11), S( -14,    2), S( -15,    0), S( -25,   18), S( -28,    5),
		S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
	},
	{
		S( -71,  -67), S( -59,  -27), S(  -9,  -24), S(  18,  -15), S( -28,    3), S( -67,    9), S(-108,   15), S( -88,  -33),
		S(   2,  -12), S(  28,   -6), S(  27,  -13), S(  11,   -5), S(  12,    1), S(   0,    3), S(  -6,   18), S( -12,    9),
		S(  27,  -11), S(  12,   -6), S(  58,  -21), S(  30,   -3), S(  16,    3), S(  13,    1), S(   2,    3), S(  -5,    2),
		S(  39,    0), S(  34,    5), S(  48,    2), S(  33,   12), S(  35,   12), S(  29,    5), S(  17,    3), S(   7,   17),
		S(  10,   16), S(  26,    7), S(  27,    7), S(  23,   21), S(  27,   14), S(  18,   14), S(  21,    3), S(   0,   14),
		S(   0,    2), S(  15,   -5), S(   4,  -10), S(  17,   10), S(   4,   12), S(  -5,   -4), S(  -6,   -2), S( -17,    2),
		S(   2,   16), S(   6,    3), S(   8,   -5), S(   1,   -1), S(   1,   -2), S( -12,   -1), S( -15,    4), S( -21,   10),
		S( -18,   19), S( -13,    4), S(  -2,   -4), S(  -5,    4), S( -12,    0), S( -24,   -3), S( -16,    0), S( -56,   24),
	},
	{
		S( -42,   -6), S( -39,    5), S( -18,   -4), S( -71,    5), S( -74,   12), S( -60,    3), S( -35,    6), S( -13,    7),
		S( -37,   -2), S( -58,   13), S( -16,   -3), S( -10,   -8), S( -26,    2), S(  -4,   -6), S(  -8,   -4), S( -12,   -4),
		S(  17,    9), S(  22,   -2), S(  33,    6), S(   8,    3), S(  15,   -8), S(   4,    1), S(  10,    1), S(   4,    4),
		S(   4,    1), S(   9,    6), S(  14,    9), S(  15,   13), S(  24,   14), S(  13,    3), S(   5,    8), S(  -8,    7),
		S(  20,  -11), S(   7,    5), S(  10,    4), S(  17,   10), S(  16,   10), S(   3,   12), S(  -2,    8), S(   1,    4),
		S(  20,   -8), S(  23,  -11), S(  11,   -3), S(   7,    8), S(  -1,    7), S(   4,    5), S(  12,    3), S(  -1,   -3),
		S(  25,   -9), S(  31,  -18), S(  25,  -13), S(   4,   -3), S(  -4,    1), S(  11,  -15), S(   5,  -14), S(  21,    0),
		S(  34,  -23), S(  21,   -8), S(  -2,    6), S(  14,   -6), S(   0,   -4), S(   4,    5), S(  16,    5), S(  10,   -4),
	},
	{
		S(  22,    6), S( -20,   30), S(  -2,   25), S( -13,   18), S( -33,   31), S( -27,   31), S( -13,   22), S( -14,   22),
		S(  42,   -6), S(  42,    3), S(  27,    8), S(   9,   10), S(  22,   10), S(   4,   21), S(  -2,   19), S(  -6,   16),
		S(  24,   -9), S(  56,   -8), S(  42,   -9), S(  23,    1), S(   6,    6), S(   2,   14), S(  14,    9), S( -11,   15),
		S(  14,   -5), S(  17,    1), S(  22,   -2), S(  16,   -2), S(   5,    6), S(   8,    9), S(   8,    8), S( -10,   14),
		S(  -5,   -4), S(  21,   -4), S(   1,    3), S(   8,    1), S(  -3,    4), S(  -8,    8), S( -12,    9), S( -17,    8),
		S(   5,  -21), S(  21,  -23), S(  -1,  -12), S(   1,  -12), S( -14,   -3), S( -18,   -6), S( -17,   -7), S( -24,   -3),
		S( -14,  -19), S(  19,  -28), S(   6,  -19), S(  -2,  -16), S(  -9,  -12), S( -11,   -9), S( -21,   -6), S( -26,   -7),
		S( -21,  -16), S( -14,   -7), S(  -6,  -11), S(   0,  -19), S(  -8,  -15), S( -16,   -9), S( -15,  -13), S( -16,   -7),
	},
	{
		S(   5,  -16), S(  58,  -48), S(  -1,   20), S(  -5,   17), S(   3,    8), S( -29,   26), S( -48,   20), S( -27,    8),
		S(  50,   -9), S(   2,    8), S(   7,   29), S( -32,   63), S( -22,   43), S(  -7,   15), S( -11,   -6), S(   2,   -8),
		S(  20,    3), S(  27,   -3), S(   2,   22), S(  -8,   36), S(  -2,   27), S(   2,   15), S(   4,   -6), S(  15,  -12),
		S(  19,   13), S(   7,   36), S(  12,   21), S( -13,   32), S(  -7,   27), S(   8,    4), S(   5,   12), S(   4,    3),
		S(  16,    7), S(  19,    8), S(   5,   23), S(   7,   25), S(  -5,   20), S(   0,   14), S(   3,   13), S(  -1,    8),
		S(  16,  -25), S(  13,  -11), S(   3,    3), S(  -6,   20), S(  -6,   13), S(  -8,    6), S(   2,   -6), S(   1,  -11),
		S(  13,  -56), S(  17,  -66), S(  10,  -41), S(   3,   -8), S(   0,   -6), S(   2,  -19), S(  -1,  -29), S(   8,  -37),
		S(   3,  -53), S( -17,  -50), S( -21,  -18), S( -11,  -16), S( -10,  -15), S( -14,  -14), S( -16,  -19), S( -17,  -25),
	},
	{
		S(  94,  -72), S(  55,  -15), S(  28,   -9), S(  22,  -10), S(   7,   -3), S(   7,   -3), S(   7,   -3), S(   7,   -3),
		S( -88,   35), S(  11,   34), S(  17,   26), S(  92,   -4), S(   7,   -3), S(   7,   -3), S(   7,   -3), S(   7,   -3),
		S( -77,   28), S(  37,   24), S(  60,   14), S(  41,   10), S(   7,   -3), S(   7,   -3), S(   7,   -3), S(   7,   -3),
		S(-112,   17), S( -40,   16), S( -34,   15), S( -38,    5), S(   7,   -3), S(   7,   -3), S(   7,   -3), S(   7,   -3),
		S(-132,   11), S( -61,   11), S( -46,    7), S( -52,    6), S(   7,   -3), S(   7,   -3), S(   7,   -3), S(   7,   -3),
		S( -78,   10), S( -16,    4), S( -28,    6), S( -18,    2), S(   7,   -3), S(   7,   -3), S(   7,   -3), S(   7,   -3),
		S(   4,   -6), S(  23,   -2), S(   8,    2), S(   0,   -1), S(   7,   -3), S(   7,   -3), S(   7,   -3), S(   7,   -3),
		S(  17,  -35), S(  23,  -12), S(  -4,    1), S(   5,  -15), S(   7,   -3), S(   7,   -3), S(   7,   -3), S(   7,   -3),
	},
};

constexpr PackedScore MOBILITY[4][28] = {
	{S(  -5,    4), S( -32,  -47), S(  -8,  -13), S(   2,   13), S(  12,   26), S(  16,   39), S(  25,   45), S(  34,   52), S(  42,   51), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S(  -3,  -24), S( -39,  -91), S( -15,  -36), S(  -9,  -12), S(   3,    1), S(  11,   11), S(  16,   22), S(  21,   28), S(  24,   33), S(  28,   36), S(  28,   40), S(  38,   32), S(  31,   39), S(  46,   27), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -35,   -5), S(  10,  -34), S( -21,  -20), S( -12,   -5), S(  -5,    1), S(   0,   16), S(   4,   23), S(  -1,   30), S(   5,   32), S(   8,   37), S(  13,   41), S(  15,   47), S(  19,   52), S(  27,   53), S(  34,   49), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -42,   76), S( -59,   -6), S(-111,    9), S( -69, -217), S( -77,  -44), S( -32,   20), S( -23,   46), S( -14,   47), S(  -7,   54), S(  -5,   80), S(  -3,   88), S(   0,   99), S(   4,  105), S(   8,  107), S(  11,  111), S(  14,  115), S(  16,  117), S(  16,  123), S(  17,  126), S(  18,  129), S(  26,  123), S(  32,  111), S(  36,  112), S(  62,   84), S(  70,   83), S( 118,   42), S( 119,   40), S(  79,   35)}
};

constexpr PackedScore THREAT_BY_PAWN[6] = {S(   8,  -17), S(  67,   30), S(  67,   60), S(  93,   10), S(  78,  -17), S(   0,    0)};
constexpr PackedScore THREAT_BY_KNIGHT[2][6] = {
	{S(   8,   28), S(  32,   23), S(  38,   40), S(  79,    5), S(  45,  -24), S(   0,    0)},
	{S(  -4,   12), S(  14,   45), S(  31,   33), S(  64,   31), S(  55,   -3), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_BISHOP[2][6] = {
	{S(   5,   35), S(  51,   25), S(  -0,   35), S(  74,    8), S(  73,   42), S(   0,    0)},
	{S(   1,   10), S(  23,   25), S( -14,    9), S(  46,   43), S(  52,  128), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_ROOK[2][6] = {
	{S(  -1,   45), S(  30,   52), S(  29,   51), S(  14,  -31), S(  76,   -0), S(   0,    0)},
	{S(  -8,   15), S(   5,   19), S(  17,    7), S(   8,  -60), S(  60,   55), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_QUEEN[2][6] = {
	{S(  12,    6), S(  38,    8), S(  19,   44), S(  26,   -9), S(  13,  -69), S( 139,  -35)},
	{S(  -1,   16), S(   1,    8), S(  -4,   23), S(  -4,    3), S( -20,  -59), S( 116,   47)}
};
constexpr PackedScore THREAT_BY_KING[6] = {S( -16,   44), S(  33,   43), S(  33,   49), S( 105,    8), S(   0,    0), S(   0,    0)};
constexpr PackedScore PUSH_THREAT = S(  20,   18);

constexpr PackedScore PASSED_PAWN[8] = {S(   0,    0), S( -21,  -72), S( -17,  -57), S( -15,  -21), S(  11,   18), S(   1,   91), S(  51,  105), S(   0,    0)};
constexpr PackedScore ISOLATED_PAWN[8] = {S(  -8,    9), S(  -2,  -12), S( -10,   -5), S(  -7,  -15), S( -10,  -12), S(  -7,   -4), S(  -2,  -11), S( -11,    7)};
constexpr PackedScore PAWN_PHALANX[8] = {S(   0,    0), S(   3,   -1), S(  13,    7), S(  19,   16), S(  48,   58), S( 121,  197), S(-153,  482), S(   0,    0)};
constexpr PackedScore DEFENDED_PAWN[8] = {S(   0,    0), S(   0,    0), S(  18,   11), S(  13,    8), S(  15,   16), S(  31,   40), S( 189,   26), S(   0,    0)};
constexpr PackedScore OUR_PASSER_PROXIMITY[8] = {S(   0,    0), S(   7,   53), S(  -7,   42), S(  -5,   26), S(  -1,   15), S(   2,   14), S(  18,   12), S(   7,   11)};
constexpr PackedScore THEIR_PASSER_PROXIMITY[8] = {S(   0,    0), S( -98,    3), S(   1,   -0), S(  -3,   29), S(   7,   39), S(  10,   47), S(  15,   52), S(  -3,   50)};

constexpr PackedScore PAWN_STORM[3][8] = {
	{S(  54,  -37), S(  29,  -20), S(  19,   -6), S(  10,   -1), S(   3,    2), S(  -1,    7), S(  -0,    7), S(  12,  -12)},
	{S(   0,    0), S(  14,  -29), S(  22,   -1), S(   3,    1), S(  -5,    7), S(  -8,   14), S(  -7,   14), S(  10,   -3)},
	{S(   1,   -1), S(  -8,    7), S(   3,    9), S(   1,   10), S(   2,    9), S(   2,   11), S(   3,   10), S(  -6,   -5)}
};
constexpr PackedScore PAWN_SHIELD[3][8] = {
	{S(  15,  -18), S(  -0,  -10), S(  -3,  -12), S(  -5,   -9), S(   8,  -10), S(  21,  -22), S(  31,  -23), S(  -3,    3)},
	{S(   0,    0), S(  -8,    0), S( -11,   -3), S(   1,   -0), S(  15,   -6), S(  34,  -24), S(  53,  -32), S(  11,    3)},
	{S(  -7,   -7), S(  -6,   -4), S(  -0,   -5), S(   3,   -1), S(   6,   -0), S(   4,   -1), S(  23,    3), S(  -3,    7)}
};
constexpr PackedScore SAFE_KNIGHT_CHECK = S(  82,   -4);
constexpr PackedScore SAFE_BISHOP_CHECK = S(  16,   -7);
constexpr PackedScore SAFE_ROOK_CHECK = S(  58,   -3);
constexpr PackedScore SAFE_QUEEN_CHECK = S(  31,   13);
constexpr PackedScore KING_ATTACKER_WEIGHT[4] = {S(  16,   -5), S(   9,   -1), S(  11,  -20), S(   1,    8)};
constexpr PackedScore KING_ATTACKS[14] = {S( -25,    9), S( -28,    6), S( -30,    3), S( -29,    8), S( -21,    4), S(  -6,    2), S(  18,   -6), S(  47,  -18), S(  94,  -39), S( 125,  -45), S( 163,  -61), S( 193,  -52), S( 231, -144), S( 189,    9)};

constexpr PackedScore KNIGHT_OUTPOST = S(  25,   19);
constexpr PackedScore BISHOP_PAWNS[7] = {S(  29,   42), S(  31,   37), S(  28,   29), S(  23,   21), S(  19,   12), S(  16,   -1), S(  10,  -14)};
constexpr PackedScore BISHOP_PAIR = S(  21,   63);
constexpr PackedScore ROOK_OPEN[2] = {S(  23,   11), S(  14,   10)};

constexpr PackedScore TEMPO = S(  31,   32);

#undef S


}
