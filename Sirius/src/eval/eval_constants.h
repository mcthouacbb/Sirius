#pragma once

#include "../defs.h"

namespace eval
{

#define S(mg, eg) PackedScore(mg, eg)

constexpr PackedScore MATERIAL[6] = {S(  61,  133), S( 288,  444), S( 316,  451), S( 389,  813), S( 797, 1495), S(0, 0)};

constexpr PackedScore PSQT[6][64] = {
	{
		S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
		S(  67,   75), S(  28,   96), S(  31,   95), S(  55,   76), S(  66,   67), S(  33,   95), S(  31,  107), S(  67,   81),
		S(  24,   14), S(  28,   43), S(  28,    8), S(  54,  -26), S(  39,  -19), S(  24,    2), S(   0,   36), S(   7,   21),
		S(  18,   10), S(   7,   16), S(   9,   -7), S(  17,  -22), S(   6,  -21), S(  -1,   -7), S(  -6,   15), S( -11,   13),
		S(   9,    0), S(   5,   17), S(   8,  -14), S(  13,  -14), S(   8,  -13), S(  -3,   -8), S( -15,   15), S( -15,    2),
		S(   3,   -3), S(   9,   13), S(  13,   -3), S(  -2,    2), S(  -8,    1), S( -15,   -4), S( -25,   13), S( -27,    0),
		S(  17,   -3), S(  30,    8), S(  15,   -8), S(   7,    7), S(  -6,    2), S(  -8,   -3), S( -16,   18), S( -17,    4),
		S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
	},
	{
		S( -68,  -86), S( -78,  -19), S( -28,  -12), S(  12,  -12), S( -39,    8), S( -68,   10), S(-111,   18), S( -80,  -43),
		S( -10,   -9), S(  22,    1), S(  30,   -6), S(   5,    3), S(   7,    9), S(   1,   12), S(  -5,   20), S( -11,   10),
		S(  13,   -7), S(  11,   -3), S(  55,  -19), S(  36,    2), S(  20,    9), S(  12,    6), S(   3,    5), S(  -8,    6),
		S(  33,    4), S(  34,    8), S(  45,    6), S(  34,   14), S(  30,   18), S(  30,    8), S(  19,    4), S(   7,   16),
		S(  11,   17), S(  20,   12), S(  30,    9), S(  20,   22), S(  25,   15), S(  21,   13), S(  20,    3), S(   2,   12),
		S(   3,    1), S(  18,   -2), S(  10,   -8), S(  17,    9), S(   7,    9), S(  -1,   -4), S(   0,   -5), S( -14,   -1),
		S(   5,    7), S(   5,   -4), S(   6,   -7), S(   4,   -2), S(   5,   -2), S(  -7,   -5), S( -12,   -3), S( -18,    0),
		S(  -9,   -6), S( -11,    0), S(  -1,   -9), S(  -1,    4), S(  -8,    1), S( -22,   -6), S( -15,   -3), S( -49,   11),
	},
	{
		S( -37,   -4), S( -33,    5), S(  -9,    0), S( -71,   10), S( -70,   19), S( -50,    2), S( -24,    7), S( -15,   15),
		S( -23,   -6), S( -36,   11), S( -14,   -1), S(  -6,   -3), S( -23,    9), S(   1,   -3), S(  -1,    0), S(  -4,   -4),
		S(  17,   12), S(  14,   -1), S(  40,    5), S(   7,    5), S(  14,    0), S(   6,    4), S(   6,    5), S(   5,    4),
		S(  -7,    5), S(   5,    8), S(   5,   11), S(  16,   12), S(  17,   19), S(  11,    5), S(   3,    9), S(  -9,    6),
		S(  12,   -4), S(   1,    8), S(   5,    6), S(   9,   10), S(  14,    8), S(  -5,   12), S(  -4,    5), S(  -1,    1),
		S(  21,  -10), S(  23,  -10), S(  12,   -3), S(   3,    8), S(  -5,    4), S(   5,    3), S(   9,    2), S(  -1,   -6),
		S(  23,  -19), S(  30,  -23), S(  20,  -14), S(   4,   -5), S(  -5,    0), S(   7,  -18), S(   6,  -18), S(  13,   -8),
		S(  35,  -29), S(  19,  -19), S(  -5,    1), S(  14,   -3), S(  -1,   -1), S(   0,    8), S(  10,   -1), S(  12,   -9),
	},
	{
		S(  14,    9), S( -16,   35), S(  -1,   24), S(   1,   14), S( -13,   23), S( -14,   29), S(  -5,   23), S(   3,   18),
		S(  32,    2), S(  36,    8), S(  20,   14), S(   8,   14), S(  17,   17), S(   2,   29), S(  -1,   25), S(   1,   17),
		S(  11,    2), S(  38,    3), S(  23,    2), S(  20,    3), S(  -1,   13), S(  -4,   23), S(   8,   18), S( -12,   20),
		S(   5,    7), S(   7,   13), S(  10,   10), S(   9,    2), S(   1,   11), S(   4,   16), S(   3,   16), S( -10,   18),
		S(  -6,   -2), S(  14,    2), S(  -7,    7), S(   4,    1), S(  -7,    5), S( -10,    8), S( -12,    8), S( -16,    7),
		S(  10,  -27), S(  22,  -28), S(  -2,  -16), S(   0,  -17), S( -12,  -10), S( -16,  -10), S( -15,  -11), S( -21,   -9),
		S(  -5,  -29), S(  24,  -39), S(   3,  -24), S(   2,  -24), S(  -5,  -20), S(  -6,  -17), S( -16,  -14), S( -19,  -19),
		S( -10,  -34), S(  -6,  -16), S(  -3,  -21), S(   4,  -28), S(  -3,  -24), S( -10,  -16), S( -10,  -20), S( -11,  -17),
	},
	{
		S(   7,  -14), S(  46,  -43), S(  -5,   21), S(  -8,   14), S(  16,  -13), S(  -9,    0), S( -31,    1), S( -11,   -5),
		S(  41,    1), S(   0,   14), S( -20,   28), S( -40,   55), S( -24,   31), S(  -9,    7), S(  -4,  -15), S(   7,  -12),
		S(  20,    4), S(  12,    6), S(   9,   15), S( -17,   22), S(  -3,   15), S(   7,    5), S(   7,  -16), S(  19,  -16),
		S(  11,   17), S(   4,   35), S(   4,   13), S( -11,   32), S(  -8,   30), S(   5,    3), S(   4,   10), S(   2,    1),
		S(  10,   15), S(  15,   15), S(  -2,   23), S(   4,   27), S(  -5,   32), S(  -6,   22), S(   1,   13), S(  -1,    3),
		S(  17,  -17), S(  15,   -2), S(   2,   10), S(  -8,   23), S(  -7,   16), S(  -7,   18), S(   3,   -6), S(   2,  -15),
		S(  16,  -48), S(  19,  -56), S(   8,  -33), S(   4,   -1), S(   1,    2), S(   4,  -14), S(   3,  -18), S(  10,  -36),
		S(   6,  -45), S(  -6,  -47), S( -18,  -19), S(  -8,  -16), S(  -8,  -13), S( -12,  -11), S( -14,  -15), S( -15,  -10),
	},
	{
		S(   0,  -65), S(   3,   -1), S( -28,   -7), S( -17,  -11), S(   6,   -5), S(   6,   -5), S(   6,   -5), S(   6,   -5),
		S( -52,   30), S(  -3,   58), S( -16,   48), S(  28,   18), S(   6,   -5), S(   6,   -5), S(   6,   -5), S(   6,   -5),
		S(  -5,   21), S(  30,   53), S(  37,   42), S(   7,   43), S(   6,   -5), S(   6,   -5), S(   6,   -5), S(   6,   -5),
		S( -43,   18), S( -19,   46), S( -11,   37), S( -38,   33), S(   6,   -5), S(   6,   -5), S(   6,   -5), S(   6,   -5),
		S( -63,    9), S( -33,   31), S( -20,   19), S( -41,   17), S(   6,   -5), S(   6,   -5), S(   6,   -5), S(   6,   -5),
		S( -21,  -10), S(   1,    9), S( -13,   -1), S( -16,   -3), S(   6,   -5), S(   6,   -5), S(   6,   -5), S(   6,   -5),
		S(  30,  -30), S(  28,   -6), S(  10,  -15), S(  -6,  -19), S(   6,   -5), S(   6,   -5), S(   6,   -5), S(   6,   -5),
		S(  17,  -62), S(  18,  -25), S(  -1,  -30), S(  10,  -50), S(   6,   -5), S(   6,   -5), S(   6,   -5), S(   6,   -5),
	},
};

constexpr PackedScore MOBILITY[4][28] = {
	{S( -11,  -24), S( -40,  -62), S( -15,  -31), S(  -6,   -5), S(   4,    8), S(   6,   19), S(  14,   25), S(  22,   32), S(  31,   32), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -23,  -38), S( -51,  -95), S( -29,  -37), S( -22,  -15), S( -11,   -3), S(  -4,    6), S(   1,   17), S(   6,   22), S(   8,   27), S(  13,   28), S(  14,   31), S(  27,   22), S(  28,   25), S(  46,    7), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -31,  -37), S(  13,  -64), S( -24,  -54), S( -12,  -33), S(  -6,  -25), S(  -1,   -7), S(   1,   -1), S(  -4,    8), S(   0,   12), S(   3,   17), S(   7,   23), S(   7,   32), S(   9,   38), S(  17,   40), S(  24,   37), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -38,    8), S( -53,  -77), S(-101,  -75), S( -74, -246), S( -72,  -92), S( -28,  -34), S( -20,  -10), S( -11,   -6), S(  -3,   -5), S(  -3,   22), S(  -1,   29), S(   2,   39), S(   5,   42), S(   8,   45), S(  11,   47), S(  13,   49), S(  15,   49), S(  15,   54), S(  16,   54), S(  18,   53), S(  26,   43), S(  33,   27), S(  37,   24), S(  54,    3), S(  58,   -4), S(  58,  -12), S(  31,   -1), S(   0,  -26)}
};

constexpr PackedScore THREAT_BY_PAWN[6] = {S(   9,  -17), S(  64,   32), S(  62,   62), S(  79,   28), S(  75,   -5), S(   0,    0)};
constexpr PackedScore THREAT_BY_KNIGHT[2][6] = {
	{S(   9,   30), S(  27,   31), S(  42,   44), S(  74,   15), S(  57,  -26), S(   0,    0)},
	{S(  -4,   10), S(  13,   29), S(  30,   31), S(  64,   34), S(  57,    3), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_BISHOP[2][6] = {
	{S(   2,   38), S(  43,   36), S(  -8,   32), S(  70,   16), S(  69,   64), S(   0,    0)},
	{S(   0,    8), S(  22,   24), S( -22,  -19), S(  44,   48), S(  48,  125), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_ROOK[2][6] = {
	{S(   2,   44), S(  19,   64), S(  29,   58), S(  10,  -29), S(  75,   17), S(   0,    0)},
	{S(  -8,    8), S(   2,   16), S(  14,    3), S(   6,  -75), S(  66,   49), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_QUEEN[2][6] = {
	{S(   7,   12), S(  24,   23), S(  10,   52), S(  19,   14), S(  11,  -52), S( 101,   35)},
	{S(  -1,   10), S(   0,    6), S(  -6,   18), S(  -6,    6), S( -17,  -74), S( 115,   70)}
};
constexpr PackedScore THREAT_BY_KING[6] = {S( -26,   49), S(   4,   51), S(  30,   44), S(  70,   12), S(   0,    0), S(   0,    0)};
constexpr PackedScore PUSH_THREAT = S(  16,   20);

constexpr PackedScore ISOLATED_PAWN[8] = {S(  -8,    6), S(  -4,  -16), S( -11,   -9), S( -11,  -17), S( -11,  -16), S(  -7,   -8), S(  -2,  -15), S(  -9,    7)};
constexpr PackedScore DOUBLED_PAWN[8] = {S(  -3,  -64), S(   9,  -38), S(  -1,  -30), S(  -3,  -21), S(  -6,  -15), S( -16,  -19), S(   7,  -43), S(   2,  -76)};
constexpr PackedScore BACKWARDS_PAWN[8] = {S(   0,    0), S(  -6,  -12), S(  -1,  -14), S( -10,  -12), S(   1,  -21), S(  22,   -9), S(   0,    0), S(   0,    0)};
constexpr PackedScore PAWN_PHALANX[8] = {S(   0,    0), S(   5,   -5), S(  12,   -1), S(  19,   14), S(  48,   62), S( 116,  221), S( -21,  350), S(   0,    0)};
constexpr PackedScore DEFENDED_PAWN[8] = {S(   0,    0), S(   0,    0), S(  20,    7), S(  12,    8), S(  15,   21), S(  19,   65), S( 132,   78), S(   0,    0)};

constexpr PackedScore PASSED_PAWN[2][2][8] = {
	{
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -32,  -40), S( -12,   24), S( -18,  154), S(  31,  238), S(   0,    0)},
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -20,  -52), S(  12,  -23), S(  17,   18), S(  62,   35), S(   0,    0)}
	},
	{
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -29,  -57), S(   0,  -25), S(  17,    4), S(  67,   -2), S(   0,    0)},
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -29,  -61), S(   1,  -34), S(  -6,  -16), S(  -3,  -21), S(   0,    0)}
	}
};
constexpr PackedScore OUR_PASSER_PROXIMITY[8] = {S(   0,    0), S(  49,   83), S(   1,   68), S(   0,   42), S(   5,   30), S(  10,   23), S(  20,   20), S(  13,   20)};
constexpr PackedScore THEIR_PASSER_PROXIMITY[8] = {S(   0,    0), S( -30,    5), S(  24,   -1), S(  13,   26), S(  16,   46), S(  10,   78), S(  13,   79), S(  15,   67)};

constexpr PackedScore PAWN_STORM[2][4][8] = {
	{
		{S(  17,   13), S(-135,  -49), S(  -2,  -10), S(   5,  -13), S(   0,   -1), S(  -5,    9), S(  -4,    8), S(   0,    0)},
		{S(  11,    3), S( -13, -102), S(  53,  -42), S(   8,  -11), S(   2,   -5), S( -11,    7), S(  -7,    9), S(   0,    0)},
		{S(  -3,    6), S(  60,  -99), S(  69,  -45), S(  19,  -18), S(   2,   -1), S(  -6,    7), S(  -8,   12), S(   0,    0)},
		{S(   7,   -7), S( 105,  -87), S(  38,  -21), S(  14,   -1), S(  -1,    4), S(  -8,    0), S(  -3,    0), S(   0,    0)}
	},
	{
		{S(   0,    0), S(  -3,  -26), S( -20,  121), S(  20,  -48), S(  -2,    7), S(  -2,    5), S(  -5,    9), S(   0,    0)},
		{S(   0,    0), S(   5,  -85), S(   1,   88), S(  56,  -38), S(   2,    3), S(  -7,    6), S(  -8,    8), S(   0,    0)},
		{S(   0,    0), S(  -7,   15), S( -59, -110), S(  22,  -28), S(   1,    4), S(  -1,    5), S(  -9,   11), S(   0,    0)},
		{S(   0,    0), S( -10,  -52), S(  69,  -12), S(  23,   -2), S(   1,    8), S(   1,   -9), S(   0,    5), S(   0,    0)}
	}
};
constexpr PackedScore PAWN_SHIELD[4][8] = {
	{S(  17,    1), S(  -8,   26), S( -15,   17), S(  -3,    9), S(   3,    2), S( -32,  -27), S( -75,  -39), S(   0,    0)},
	{S(  19,   -1), S( -15,   12), S( -10,    8), S(  12,   -3), S(   8,  -11), S(  -3,  -19), S( -48,  -31), S(   0,    0)},
	{S(   5,    8), S( -15,    8), S(  15,    5), S(   2,   -1), S(  -1,   -1), S(   6,  -19), S( -13,  -43), S(   0,    0)},
	{S(  13,   -3), S(   6,   -3), S(  -3,   -1), S(   0,   -6), S(   8,   -9), S(  30,  -21), S( -18,  -21), S(   0,    0)}
};
constexpr PackedScore SAFE_KNIGHT_CHECK = S( 110,   -5);
constexpr PackedScore SAFE_BISHOP_CHECK = S(  30,   17);
constexpr PackedScore SAFE_ROOK_CHECK = S(  85,    3);
constexpr PackedScore SAFE_QUEEN_CHECK = S(  37,   24);
constexpr PackedScore UNSAFE_KNIGHT_CHECK = S(   8,    0);
constexpr PackedScore UNSAFE_BISHOP_CHECK = S(  14,   12);
constexpr PackedScore UNSAFE_ROOK_CHECK = S(  23,    1);
constexpr PackedScore UNSAFE_QUEEN_CHECK = S(   6,   13);
constexpr PackedScore KING_ATTACKER_WEIGHT[4] = {S(  15,   -2), S(  11,   -1), S(  12,  -14), S(   1,    6)};
constexpr PackedScore KING_ATTACKS[14] = {S( -60,    5), S( -63,    1), S( -66,   -2), S( -66,    1), S( -62,   -1), S( -52,   -3), S( -33,   -4), S( -12,  -11), S(  21,  -19), S(  50,  -14), S(  70,  -18), S(  80,   28), S( 108,   -8), S(  98,   43)};

constexpr PackedScore MINOR_BEHIND_PAWN = S(   7,   14);
constexpr PackedScore KNIGHT_OUTPOST = S(  26,   18);
constexpr PackedScore BISHOP_PAWNS[7] = {S(   5,   22), S(   6,   21), S(   4,   13), S(   0,    5), S(  -3,   -5), S(  -4,  -19), S(  -8,  -34)};
constexpr PackedScore BISHOP_PAIR = S(  20,   63);
constexpr PackedScore ROOK_OPEN[2] = {S(  26,    3), S(  15,    4)};

constexpr PackedScore TEMPO = S(  32,   35);

constexpr PackedScore COMPLEXITY_PAWNS = S(   0,    8);
constexpr PackedScore COMPLEXITY_PASSERS = S(   0,    1);
constexpr PackedScore COMPLEXITY_PAWNS_BOTH_SIDES = S(   0,   68);
constexpr PackedScore COMPLEXITY_PAWN_ENDGAME = S(   0,   65);
constexpr PackedScore COMPLEXITY_OFFSET = S(   0, -131);

#undef S


}