#pragma once

#include "../defs.h"

namespace eval
{

#define S(mg, eg) PackedScore(mg, eg)


constexpr PackedScore MATERIAL[6] = {S(  61,  130), S( 285,  429), S( 306,  442), S( 386,  785), S( 748, 1623), S(0, 0)};

constexpr PackedScore PSQT[6][64] = {
    {
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  56,   76), S(  28,   92), S(  19,  106), S(  53,   78), S(  68,   67), S(  47,   82), S(  35,  100), S(  60,   82),
        S(  17,    6), S(  -7,   37), S(   8,    1), S(  17,  -22), S(  10,  -20), S(   8,   -9), S( -16,   28), S(   0,   13),
        S(  14,    5), S(  -5,   12), S(  14,  -20), S(  11,  -24), S(  -1,  -23), S(  -1,  -13), S(  -9,   11), S(  -9,    8),
        S(   6,   -2), S(  -5,   15), S(  14,  -26), S(  16,  -17), S(  10,  -16), S(  -1,  -11), S( -14,   12), S( -12,   -1),
        S(  -1,   -5), S(   7,    8), S(   5,   -4), S(   2,   -2), S(  -7,   -2), S(  -9,   -7), S( -22,   11), S( -23,   -3),
        S(   9,   -6), S(  25,    9), S(  32,  115), S(  10,    1), S(  -1,   -9), S(  -5,   -6), S( -14,   14), S( -14,    1),
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
    },
    {
        S( -67,  -99), S( -75,  -26), S( -28,  -17), S(  -3,   -7), S( -30,    2), S( -57,    5), S(-101,    5), S( -85,  -57),
        S( -17,  -13), S(  12,    3), S(  22,    2), S(  -2,   10), S(   3,   12), S(   4,   12), S(   0,   13), S( -10,   -1),
        S(   4,   -6), S( -10,    8), S(  30,   -1), S(  20,   17), S(   7,   25), S(  14,   16), S(   6,    4), S(  -6,    1),
        S(  27,    5), S(  23,   17), S(  37,   19), S(  21,   27), S(  23,   27), S(  29,   15), S(  22,    3), S(  12,   10),
        S(  11,   16), S(  15,   17), S(  21,   20), S(  20,   29), S(  21,   21), S(  20,   18), S(  24,    0), S(  11,    1),
        S(  16,   -1), S(  17,    4), S(  18,    3), S(  17,   16), S(   7,   15), S(   5,   -1), S(   8,   -7), S(  -5,   -8),
        S(  11,   -1), S(  12,   -5), S(  10,   -4), S(  14,    0), S(   9,   -1), S(  -1,   -4), S(  -1,   -8), S( -12,  -10),
        S(  -2,  -17), S(  -3,  -12), S(   5,  -11), S(   9,    0), S(   2,   -3), S( -14,  -10), S(  -7,  -16), S( -40,  -10),
    },
    {
        S( -46,  -15), S( -28,    4), S(  -6,   -5), S( -72,   11), S( -66,   17), S( -56,    3), S( -30,    7), S( -32,    4),
        S( -22,  -10), S( -43,    3), S( -12,    2), S( -10,    3), S( -24,   13), S(   1,   -2), S( -13,   -7), S(  -3,   -8),
        S(  10,   12), S(  -2,    8), S(  21,    6), S(   4,   11), S(  15,    6), S(   1,   -1), S(  10,    5), S(   6,    0),
        S( -11,    5), S(   2,   12), S(   2,   16), S(  18,   18), S(  23,   22), S(  19,    8), S(   6,   10), S(  -4,    1),
        S(  16,   -6), S(  -3,   13), S(   8,   12), S(  15,   13), S(  22,   12), S(   6,   12), S(   4,    5), S(   5,   -3),
        S(  19,   -9), S(  22,   -3), S(   4,   -3), S(  10,   11), S(   1,    7), S(   5,   -4), S(  20,    0), S(   6,  -10),
        S(  26,  -19), S(  25,  -26), S(  27,   -9), S(   7,   -4), S(  -1,   -1), S(  12,  -17), S(   6,  -27), S(  16,  -13),
        S(  27,  -38), S(  21,  -16), S(  -4,   -4), S(  19,   -6), S(   1,   -4), S(   1,    0), S(  11,   -4), S(   6,  -18),
    },
    {
        S(  15,   12), S( -21,   36), S( -12,   28), S( -22,   25), S( -10,   22), S( -11,   29), S(   9,   17), S(   9,   18),
        S(  26,    3), S(  31,    8), S(  13,   16), S(  -5,   20), S(  25,   13), S(  11,   24), S(   8,   20), S(  11,   12),
        S(  -8,    8), S(  25,    5), S(   4,    9), S(   7,   10), S(   5,    9), S(   2,   17), S(  16,   12), S(  -5,   14),
        S(  -9,   10), S( -15,   20), S(  -6,   17), S(  -7,   11), S(  -2,   10), S(   6,   12), S(   5,   11), S(  -6,   13),
        S( -18,    3), S(   1,    8), S( -19,   14), S(  -8,    9), S(  -7,    3), S( -10,    6), S(  -8,    4), S(  -9,    3),
        S(   4,  -21), S(  23,  -25), S(  -1,  -13), S(  -2,  -13), S(  -6,  -12), S(  -8,  -13), S(  -4,  -16), S( -11,  -13),
        S(  -6,  -28), S(  27,  -37), S(   6,  -23), S(   2,  -20), S(   3,  -22), S(   1,  -19), S(  -7,  -19), S( -10,  -23),
        S(  -5,  -40), S(  -2,  -20), S(   2,  -20), S(   7,  -24), S(   5,  -25), S(  -2,  -19), S(  -1,  -24), S(  -1,  -23),
    },
    {
        S(  13,   -9), S(  57,  -35), S( -16,   44), S( -17,   29), S(  19,    3), S(  -9,   19), S( -23,    8), S( -18,   13),
        S(  35,   11), S(  17,    9), S(  -7,   28), S( -33,   58), S(  -3,   33), S(  15,    3), S(  26,  -21), S(  17,   -6),
        S(   4,   15), S(   1,    4), S(  -8,   23), S( -16,   19), S(  10,   12), S(  21,    4), S(  21,  -16), S(  29,  -15),
        S(  -4,   17), S( -15,   36), S( -10,   16), S( -16,   28), S(  -3,   25), S(  13,    3), S(  11,    5), S(   8,   -2),
        S(  -4,   14), S(  -2,   13), S( -13,   19), S(  -8,   27), S( -10,   33), S(  -1,   16), S(   6,   12), S(   3,    3),
        S(   4,  -13), S(   6,   -7), S(  -6,    7), S( -13,   16), S(  -7,   12), S(  -2,   11), S(  13,  -12), S(  11,  -20),
        S(   3,  -44), S(  11,  -62), S(   2,  -30), S(   0,  -13), S(   0,   -6), S(   3,  -18), S(   4,  -25), S(  10,  -39),
        S(  11,  -62), S( -16,  -42), S( -17,  -25), S(  -9,  -22), S(  -6,  -22), S( -10,  -16), S( -13,  -20), S( -11,  -19),
    },
    {
        S(  45,  -67), S(  26,    5), S( -51,  -13), S( -63,    1), S(   8,   -6), S(   8,   -6), S(   8,   -6), S(   8,   -6),
        S( -15,   30), S(  37,   58), S(  -7,   33), S(  -1,   28), S(   8,   -6), S(   8,   -6), S(   8,   -6), S(   8,   -6),
        S(  37,   20), S(  57,   55), S(  36,   31), S( -21,   50), S(   8,   -6), S(   8,   -6), S(   8,   -6), S(   8,   -6),
        S( -18,   21), S( -13,   55), S( -37,   31), S( -85,   47), S(   8,   -6), S(   8,   -6), S(   8,   -6), S(   8,   -6),
        S( -55,   12), S( -53,   43), S( -51,   12), S( -86,   27), S(   8,   -6), S(   8,   -6), S(   8,   -6), S(   8,   -6),
        S( -17,   -5), S( -11,   19), S( -33,  -11), S( -53,    4), S(   8,   -6), S(   8,   -6), S(   8,   -6), S(   8,   -6),
        S(  36,  -27), S(  29,   -2), S(   3,  -31), S( -25,  -19), S(   8,   -6), S(   8,   -6), S(   8,   -6), S(   8,   -6),
        S(  35,  -59), S(  35,  -23), S(   9,  -51), S(  -1,  -49), S(   8,   -6), S(   8,   -6), S(   8,   -6), S(   8,   -6),
    },
};

constexpr PackedScore MOBILITY[4][28] = {
    {S(  -4,  -29), S( -38,  -44), S( -17,  -15), S(  -8,    1), S(   2,    9), S(   6,   18), S(  13,   22), S(  20,   26), S(  30,   19), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S( -10,  -46), S( -29,  -61), S( -17,  -32), S( -11,  -14), S(  -3,   -4), S(   2,    7), S(   3,   15), S(   6,   19), S(   6,   22), S(   9,   22), S(  10,   23), S(  15,   17), S(  13,   24), S(  18,    4), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S( -14,  -41), S( -29,  -69), S( -14,  -53), S(  -2,  -32), S(   0,  -17), S(  -1,   -7), S(  -1,    1), S(   2,    7), S(   3,   11), S(   6,   17), S(   4,   27), S(   5,   34), S(   7,   38), S(  11,   39), S(  17,   37), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S(  -3,    9), S( -34,  -77), S( -62, -121), S( -16, -207), S( -22,  -65), S( -14,  -14), S(  -5,  -26), S(  -3,   -6), S(  -2,   12), S(   1,   20), S(   3,   24), S(   7,   26), S(   7,   37), S(  11,   36), S(  11,   42), S(  13,   44), S(  13,   46), S(  16,   47), S(  16,   46), S(  22,   39), S(  26,   31), S(  33,   14), S(  28,   22), S(  35,    0), S(  33,   -1), S(   7,    2), S( -16,   -3), S(-113,   14)}
};

constexpr PackedScore THREAT_BY_PAWN[6] = {S(   5,  -18), S(  66,   27), S(  59,   59), S(  80,   24), S(  71,   -2), S(   0,    0)};
constexpr PackedScore THREAT_BY_KNIGHT[2][6] = {
    {S(   5,   29), S(  15,   38), S(  38,   44), S(  73,   14), S(  60,  -30), S(   0,    0)},
    {S(  -8,    9), S(   7,   36), S(  28,   29), S(  64,   33), S(  61,   -3), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_BISHOP[2][6] = {
    {S(  -2,   34), S(  39,   32), S( -13,   34), S(  67,   14), S(  69,   43), S(   0,    0)},
    {S(  -4,    5), S(  17,   22), S( -25,  -12), S(  44,   43), S(  47,  110), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_ROOK[2][6] = {
    {S(  -1,   41), S(  14,   60), S(  25,   54), S( -11,  -24), S(  56,   23), S(   0,    0)},
    {S(  -7,    7), S(   1,   16), S(  13,    3), S( -13,  -64), S(  36,   68), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_QUEEN[2][6] = {
    {S(   6,    8), S(  24,   23), S(   9,   49), S(  19,   14), S(  10,  -54), S(  94,   49)},
    {S(  -3,   11), S(   1,    8), S(  -5,   14), S(  -4,    3), S( -16,  -73), S( 111,   52)}
};
constexpr PackedScore THREAT_BY_KING[6] = {S( -26,   45), S(   8,   48), S(  27,   40), S(  87,    6), S(   0,    0), S(   0,    0)};
constexpr PackedScore KNIGHT_HIT_QUEEN = S(  11,    2);
constexpr PackedScore BISHOP_HIT_QUEEN = S(  17,   11);
constexpr PackedScore ROOK_HIT_QUEEN = S(  19,   -2);
constexpr PackedScore PUSH_THREAT = S(  14,   17);

constexpr PackedScore ISOLATED_PAWN[8] = {S(  -9,    6), S(  -4,  -15), S( -12,   -8), S( -10,  -16), S( -12,  -15), S(  -8,   -8), S(  -4,  -13), S( -12,    7)};
constexpr PackedScore DOUBLED_PAWN[8] = {S(   0,  -61), S(  14,  -37), S(   0,  -27), S(  -2,  -17), S(  -5,  -11), S(  -7,  -19), S(   6,  -38), S(   8,  -73)};
constexpr PackedScore BACKWARDS_PAWN[8] = {S(   0,    0), S(  -7,  -14), S(  -2,  -14), S(  -8,  -11), S(   1,  -17), S(  28,   -1), S(   0,    0), S(   0,    0)};
constexpr PackedScore PAWN_PHALANX[8] = {S(   0,    0), S(   5,   -4), S(  11,   -2), S(  20,    7), S(  40,   40), S( 114,  213), S( -11,  358), S(   0,    0)};
constexpr PackedScore DEFENDED_PAWN[8] = {S(   0,    0), S(   0,    0), S(  18,    6), S(  11,    7), S(  17,   20), S(  31,   61), S( 146,   69), S(   0,    0)};
constexpr PackedScore CANDIDATE_PASSER[2][8] = {
    {S(   0,    0), S( -33,  -17), S( -18,   -7), S(  -1,   26), S(  26,   53), S(  59,   87), S(   0,    0), S(   0,    0)},
    {S(   0,    0), S( -19,   -7), S(  -9,   14), S(  -5,   28), S(  19,   41), S(  29,  153), S(   0,    0), S(   0,    0)}
};

constexpr PackedScore PASSED_PAWN[2][2][8] = {
    {
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -40,  -40), S( -15,   24), S(   4,  151), S(  60,  223), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -26,  -53), S(   7,  -23), S(  30,   20), S(  59,   31), S(   0,    0)}
    },
    {
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -31,  -56), S(   1,  -24), S(  37,    9), S(  60,   -2), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -31,  -62), S(   0,  -34), S(  11,  -10), S( -26,  -10), S(   0,    0)}
    }
};
constexpr PackedScore OUR_PASSER_PROXIMITY[8] = {S(   0,    0), S(  57,   81), S(  10,   68), S(   2,   44), S(   4,   32), S(  11,   24), S(  18,   21), S(  15,   19)};
constexpr PackedScore THEIR_PASSER_PROXIMITY[8] = {S(   0,    0), S( -57,    8), S(  17,    1), S(  16,   26), S(  21,   45), S(  18,   77), S(  21,   78), S(  24,   67)};

constexpr PackedScore PAWN_STORM[2][4][8] = {
    {
        {S(  43,   35), S(-126,  -46), S( -19,   12), S(  31,   11), S(  18,   23), S(  -1,   30), S(  -8,   29), S(   0,    0)},
        {S(  33,    8), S(  43, -123), S(  82,  -45), S(  36,   -4), S(   9,    4), S( -26,   11), S(   2,    8), S(   0,    0)},
        {S(  12,   21), S( 110,  -97), S( 101,  -21), S(  53,    6), S(  12,   20), S( -11,   24), S( -12,   26), S(   0,    0)},
        {S(  19,    6), S( 166,  -79), S( 101,  -18), S(  42,   11), S(   0,   18), S( -17,   11), S( -20,   19), S(   0,    0)}
    },
    {
        {S(   0,    0), S(   0,    0), S(  33,   41), S( -24,   26), S(  -3,   29), S(  22,   31), S(  -6,   29), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(  90,   -1), S(   2,    8), S( -12,   18), S(  -3,   16), S(   2,    8), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(  83,    8), S(   0,   13), S(   0,   25), S(  26,   25), S(   3,   23), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(  35,    1), S(  19,   18), S( -28,   16), S(  -4,   10), S(  -2,   12), S(   0,    0)}
    }
};
constexpr PackedScore PAWN_SHIELD[4][8] = {
    {S(  48,   31), S( -15,   48), S( -11,   40), S(  30,   33), S(  35,   27), S( -24,   -2), S( -74,  -18), S(   0,    0)},
    {S(  49,    6), S( -22,   17), S(   6,    7), S(  48,    1), S(  36,   -7), S(  -2,  -15), S( -49,  -28), S(   0,    0)},
    {S(  22,   -1), S(  19,  114), S(   7,   -2), S(  28,  -22), S(  25,  -20), S(  -1,  -24), S( -67,  -28), S(   0,    0)},
    {S(  18,   14), S(   9,   11), S(  -3,   11), S(  21,    7), S(  28,    5), S(  10,    6), S( -89,   11), S(   0,    0)}
};
constexpr PackedScore SAFE_KNIGHT_CHECK = S( 111,    5);
constexpr PackedScore SAFE_BISHOP_CHECK = S(  63,   16);
constexpr PackedScore SAFE_ROOK_CHECK = S( 104,   17);
constexpr PackedScore SAFE_QUEEN_CHECK = S(  53,   25);
constexpr PackedScore UNSAFE_KNIGHT_CHECK = S(  17,    2);
constexpr PackedScore UNSAFE_BISHOP_CHECK = S(  39,   10);
constexpr PackedScore UNSAFE_ROOK_CHECK = S(  39,    2);
constexpr PackedScore UNSAFE_QUEEN_CHECK = S(  16,    3);
constexpr PackedScore QUEENLESS_ATTACK = S(-139,  159);
constexpr PackedScore KING_ATTACKER_WEIGHT[4] = {S(  56,   -5), S(  22,    0), S(  28,  -13), S(   3,  -10)};
constexpr PackedScore KING_ATTACKS = S(   7,    0);
constexpr PackedScore WEAK_KING_RING = S(   7,    0);
constexpr PackedScore KING_FLANK_ATTACKS[2] = {S(  12,   -4), S(   6,    1)};
constexpr PackedScore KING_FLANK_DEFENSES[2] = {S(  -6,    0), S( -10,    2)};
constexpr PackedScore SAFETY_OFFSET = S(  72,  203);

constexpr PackedScore MINOR_BEHIND_PAWN = S(   6,   12);
constexpr PackedScore KNIGHT_OUTPOST = S(  22,   16);
constexpr PackedScore BISHOP_PAWNS[7] = {S(   4,   21), S(   5,   20), S(   4,   12), S(   1,    5), S(  -1,   -5), S(  -2,  -18), S(  -5,  -31)};
constexpr PackedScore BISHOP_PAIR = S(  18,   60);
constexpr PackedScore LONG_DIAG_BISHOP = S(  15,    9);
constexpr PackedScore ROOK_OPEN[2] = {S(  24,    3), S(  13,    4)};
constexpr PackedScore ROOK_ON_QUEEN_FILE = S(   8,   -8);

constexpr PackedScore TEMPO = S(  32,   34);

constexpr PackedScore COMPLEXITY_PAWNS = S(   0,    9);
constexpr PackedScore COMPLEXITY_PASSERS = S(   0,   -1);
constexpr PackedScore COMPLEXITY_PAWNS_BOTH_SIDES = S(   0,   66);
constexpr PackedScore COMPLEXITY_PAWN_ENDGAME = S(   0,   79);
constexpr PackedScore COMPLEXITY_OFFSET = S(   0, -128);

#undef S


}