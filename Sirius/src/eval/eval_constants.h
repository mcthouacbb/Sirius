#pragma once

#include "../defs.h"

namespace eval
{

#define S(mg, eg) PackedScore(mg, eg)

constexpr PackedScore MATERIAL[6] = {S(  56,  104), S( 275,  444), S( 299,  452), S( 367,  810), S( 775, 1475), S(0, 0)};

constexpr PackedScore PSQT[6][64] = {
	{
		S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
		S(  29,   93), S(  42,   94), S(  85,   94), S(  83,   67), S(  90,   54), S(  52,   73), S(  33,   92), S(  14,   88),
		S(  43,   21), S(  59,   43), S(  75,    6), S(  48,  -12), S(  37,  -10), S(  32,   -2), S(   4,   38), S(  -1,   24),
		S(  16,    3), S(  10,   24), S(  29,   -7), S(  16,  -10), S(   4,   -9), S(   0,   -3), S(  -9,   24), S( -12,   14),
		S(   8,  -13), S(   2,   17), S(  12,  -10), S(   8,   -7), S(   1,   -7), S(  -6,   -6), S( -17,   19), S( -17,   -2),
		S(  13,  -21), S(  13,    5), S(  -2,   -2), S(  -5,    2), S( -12,    1), S( -17,   -7), S( -27,   11), S( -28,   -7),
		S(  28,  -26), S(  43,    3), S(  28,   -3), S(   2,   12), S( -14,    5), S( -12,    0), S( -19,   20), S( -20,   -1),
		S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
	},
	{
		S( -59,  -86), S( -64,  -22), S( -12,  -18), S(  17,  -12), S( -26,    4), S( -62,   10), S(-102,   13), S( -82,  -40),
		S(  -1,   -8), S(  27,   -3), S(  31,   -7), S(  12,    4), S(  14,    7), S(  -3,   14), S(  -6,   21), S( -13,   12),
		S(  18,   -8), S(  11,   -2), S(  55,  -19), S(  34,    3), S(  18,    8), S(  10,    4), S(  -1,    6), S(  -8,    6),
		S(  33,    3), S(  33,    8), S(  45,    5), S(  32,   14), S(  28,   17), S(  27,    7), S(  16,    5), S(   5,   17),
		S(  10,   16), S(  21,   10), S(  26,    8), S(  20,   21), S(  22,   14), S(  17,   13), S(  19,    2), S(   0,   12),
		S(   0,    0), S(  15,   -4), S(   6,   -9), S(  14,    7), S(   3,    9), S(  -3,   -4), S(  -3,   -4), S( -15,   -1),
		S(   0,    9), S(   3,   -4), S(   4,   -7), S(   2,   -2), S(   2,   -1), S(  -9,   -6), S( -14,   -2), S( -20,    0),
		S( -13,   -3), S( -14,   -1), S(  -5,   -7), S(  -3,    5), S(  -9,    0), S( -22,   -6), S( -16,   -5), S( -50,   12),
	},
	{
		S( -35,   -5), S( -35,    8), S( -10,   -2), S( -73,   13), S( -66,   15), S( -51,    5), S( -28,    7), S( -15,   14),
		S( -26,   -2), S( -37,   12), S( -10,    0), S(  -3,   -3), S( -21,    7), S(  -1,   -2), S(  -4,    1), S(  -7,   -1),
		S(  20,    9), S(  13,    0), S(  40,    5), S(   8,    5), S(  13,   -2), S(   3,    5), S(   5,    3), S(   3,    5),
		S(  -2,    4), S(  11,    6), S(   9,   10), S(  17,   13), S(  15,   18), S(  12,    4), S(   4,   10), S(  -8,    6),
		S(  19,   -7), S(   5,    6), S(   9,    4), S(   9,   10), S(  15,    9), S(  -3,   13), S(  -1,    5), S(   0,    3),
		S(  18,   -8), S(  20,   -9), S(  11,   -2), S(   3,    7), S(  -5,    4), S(   4,    3), S(   8,    3), S(  -1,   -4),
		S(  19,  -18), S(  26,  -23), S(  18,  -13), S(   2,   -4), S(  -5,    0), S(   6,  -18), S(   5,  -17), S(  12,   -7),
		S(  31,  -28), S(  19,  -19), S(  -7,    3), S(  13,   -3), S(   0,   -1), S(   2,    6), S(  10,   -2), S(  11,   -6),
	},
	{
		S(   8,   10), S( -15,   32), S(  -1,   24), S( -11,   15), S( -27,   25), S( -25,   30), S( -11,   21), S( -10,   21),
		S(  24,    2), S(  27,   10), S(  20,   12), S(   4,   13), S(  16,   14), S(   0,   27), S(  -3,   23), S(  -3,   16),
		S(  14,    0), S(  39,    3), S(  28,    3), S(  22,    6), S(   2,   13), S(  -2,   24), S(  10,   19), S( -10,   21),
		S(   5,    8), S(   5,   16), S(  16,   10), S(  10,    5), S(   2,   13), S(   5,   17), S(   4,   18), S(  -9,   19),
		S(  -4,   -4), S(  14,    2), S(  -1,    5), S(   7,    1), S(  -5,    5), S(  -9,    9), S( -11,    9), S( -14,    9),
		S(   8,  -28), S(  18,  -29), S(   3,  -18), S(   2,  -17), S( -10,   -9), S( -15,  -11), S( -13,  -11), S( -18,  -11),
		S(  -9,  -32), S(  18,  -39), S(   7,  -27), S(   2,  -24), S(  -4,  -20), S(  -5,  -18), S( -14,  -14), S( -16,  -21),
		S( -16,  -31), S( -10,  -16), S(  -1,  -22), S(   4,  -28), S(  -2,  -25), S(  -9,  -18), S(  -8,  -22), S(  -8,  -18),
	},
	{
		S(   3,  -22), S(  34,  -39), S(  -1,   11), S(  -8,    5), S(  10,  -16), S( -10,   -4), S( -41,    3), S( -22,   -5),
		S(  36,    3), S(  -3,   10), S(   0,   20), S( -32,   46), S( -29,   38), S( -10,    8), S(  -9,  -10), S(   1,   -8),
		S(  15,    1), S(  18,   -1), S(   8,   13), S(  -4,   24), S(   1,   18), S(   4,   17), S(   6,  -10), S(  14,   -7),
		S(  13,   16), S(  11,   37), S(  10,   13), S(  -8,   29), S(  -8,   31), S(   5,    7), S(   4,   14), S(   2,    7),
		S(  14,   10), S(  19,   14), S(   7,   22), S(   2,   28), S(  -5,   30), S(  -3,   22), S(   2,   19), S(   0,    9),
		S(  13,  -21), S(  13,   -5), S(   4,    9), S(  -7,   23), S(  -7,   16), S(  -7,   19), S(   1,    0), S(   2,  -11),
		S(  13,  -54), S(  18,  -69), S(   8,  -38), S(   3,   -2), S(   1,    3), S(   2,  -14), S(   1,  -19), S(   8,  -33),
		S(   3,  -50), S( -13,  -50), S( -18,  -19), S(  -8,  -16), S(  -8,   -9), S( -11,   -4), S( -15,  -11), S( -14,  -10),
	},
	{
		S(  -2,  -52), S(   9,   -3), S( -11,    1), S(  23,   -8), S(  -1,   -3), S(  -1,   -3), S(  -1,   -3), S(  -1,   -3),
		S( -63,   42), S(   7,   51), S(  22,   40), S(  79,    9), S(  -1,   -3), S(  -1,   -3), S(  -1,   -3), S(  -1,   -3),
		S( -39,   30), S(  37,   35), S(  67,   25), S(  69,   17), S(  -1,   -3), S(  -1,   -3), S(  -1,   -3), S(  -1,   -3),
		S( -55,   16), S(   2,   20), S(  17,   20), S(  20,    6), S(  -1,   -3), S(  -1,   -3), S(  -1,   -3), S(  -1,   -3),
		S( -82,   11), S( -21,   14), S(   3,    8), S(  -5,    4), S(  -1,   -3), S(  -1,   -3), S(  -1,   -3), S(  -1,   -3),
		S( -48,    3), S(   5,    0), S(  -5,    3), S(   0,   -2), S(  -1,   -3), S(  -1,   -3), S(  -1,   -3), S(  -1,   -3),
		S(  10,  -14), S(  24,   -9), S(   5,   -4), S(  -8,   -8), S(  -1,   -3), S(  -1,   -3), S(  -1,   -3), S(  -1,   -3),
		S(   5,  -46), S(   8,  -20), S( -22,   -6), S( -17,  -24), S(  -1,   -3), S(  -1,   -3), S(  -1,   -3), S(  -1,   -3),
	},
};

constexpr PackedScore MOBILITY[4][28] = {
	{S( -11,  -18), S( -36,  -67), S( -14,  -33), S(  -6,   -6), S(   3,    7), S(   5,   18), S(  13,   25), S(  21,   33), S(  28,   33), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -17,  -32), S( -49,  -97), S( -28,  -40), S( -22,  -18), S( -11,   -5), S(  -4,    5), S(   0,   16), S(   6,   21), S(   8,   26), S(  12,   28), S(  14,   30), S(  26,   22), S(  29,   24), S(  46,    7), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -28,  -43), S(  13,  -77), S( -25,  -49), S( -14,  -29), S(  -9,  -21), S(  -3,   -5), S(   0,    0), S(  -5,   10), S(  -1,   13), S(   2,   19), S(   6,   25), S(   7,   34), S(   9,   40), S(  15,   42), S(  20,   40), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -34,    9), S( -49,  -82), S( -89,  -78), S( -66, -254), S( -70,  -98), S( -28,  -37), S( -20,  -12), S( -14,   -7), S(  -6,   -6), S(  -5,   19), S(  -4,   27), S(  -1,   37), S(   2,   42), S(   4,   45), S(   7,   48), S(  10,   50), S(  11,   51), S(  11,   56), S(  12,   57), S(  13,   58), S(  21,   49), S(  29,   32), S(  34,   27), S(  48,   10), S(  56,    2), S(  52,    3), S(  45,   -7), S(  22,  -29)}
};

constexpr PackedScore THREAT_BY_PAWN[6] = {S(   7,  -13), S(  60,   34), S(  60,   65), S(  72,   34), S(  69,   -5), S(   0,    0)};
constexpr PackedScore THREAT_BY_KNIGHT[2][6] = {
	{S(   7,   31), S(  27,   38), S(  34,   45), S(  72,   12), S(  43,  -21), S(   0,    0)},
	{S(  -3,   12), S(  13,   49), S(  28,   33), S(  61,   35), S(  52,    3), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_BISHOP[2][6] = {
	{S(   4,   38), S(  46,   30), S(  -3,   31), S(  70,   13), S(  64,   58), S(   0,    0)},
	{S(   1,   10), S(  21,   26), S( -16,    0), S(  41,   48), S(  44,  135), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_ROOK[2][6] = {
	{S(  -1,   45), S(  25,   58), S(  24,   55), S(  16,  -54), S(  71,    6), S(   0,    0)},
	{S(  -6,    8), S(   3,   17), S(  14,    5), S(  12,  -90), S(  56,   57), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_QUEEN[2][6] = {
	{S(  10,    8), S(  31,   18), S(  15,   49), S(  17,    5), S(  11,  -62), S( 104,    5)},
	{S(  -1,   13), S(   1,    8), S(  -5,   22), S(  -5,    5), S( -17,  -67), S( 100,   67)}
};
constexpr PackedScore THREAT_BY_KING[6] = {S(  -9,   45), S(  25,   47), S(  23,   45), S(  91,   16), S(   0,    0), S(   0,    0)};
constexpr PackedScore PUSH_THREAT = S(  17,   19);

constexpr PackedScore ISOLATED_PAWN[8] = {S(  -6,   11), S(  -1,  -15), S( -10,   -6), S(  -8,  -14), S( -10,  -11), S(  -6,   -4), S(  -1,  -13), S( -10,   12)};
constexpr PackedScore PAWN_PHALANX[8] = {S(   0,    0), S(   4,   -4), S(  12,    4), S(  17,   15), S(  43,   60), S( 102,  221), S( -29,  394), S(   0,    0)};
constexpr PackedScore DEFENDED_PAWN[8] = {S(   0,    0), S(   0,    0), S(  18,   10), S(  12,    9), S(  13,   19), S(  20,   59), S( 146,   65), S(   0,    0)};

constexpr PackedScore PASSED_PAWN[2][2][8] = {
	{
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -29,  -41), S( -15,   24), S( -29,  158), S(  45,  240), S(   0,    0)},
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -19,  -54), S(  10,  -27), S(  12,   14), S(  73,   25), S(   0,    0)}
	},
	{
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -28,  -54), S(  -3,  -20), S(  11,    9), S(  72,   -7), S(   0,    0)},
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -28,  -58), S(  -1,  -31), S(  -6,  -16), S(  -6,  -44), S(   0,    0)}
	}
};
constexpr PackedScore OUR_PASSER_PROXIMITY[8] = {S(   0,    0), S(  30,   89), S(  -4,   69), S(   1,   40), S(   5,   28), S(   8,   20), S(  15,   20), S(   9,   20)};
constexpr PackedScore THEIR_PASSER_PROXIMITY[8] = {S(   0,    0), S( -44,   10), S(  22,   -4), S(   9,   27), S(  13,   48), S(   9,   82), S(  17,   81), S(  17,   69)};

constexpr PackedScore PAWN_STORM[3][8] = {
	{S(  54,  -30), S(  28,  -17), S(  21,    0), S(  11,    1), S(   2,    5), S(  -4,    9), S(  -6,    9), S(   6,  -14)},
	{S(   0,    0), S(  17,  -26), S(  24,    6), S(   6,    3), S(  -4,    6), S(  -9,   13), S( -10,   13), S(   4,   -9)},
	{S(  15,    1), S(   4,    8), S(   9,   11), S(   6,   10), S(   5,    9), S(   2,   10), S(   2,    9), S(  -8,   -6)}
};
constexpr PackedScore PAWN_SHIELD[3][8] = {
	{S(  11,  -15), S(  -1,   -9), S(  -4,  -10), S(  -5,   -7), S(   6,   -9), S(  23,  -27), S(  37,  -16), S(  -7,    8)},
	{S(   0,    0), S(  -9,    0), S( -10,   -1), S(  -1,    0), S(  12,   -3), S(  34,  -25), S(  52,  -26), S(   7,    8)},
	{S(  -6,   -3), S(  -5,   -2), S(   0,   -2), S(   1,    1), S(   4,    4), S(   5,    0), S(  17,   -5), S(  -5,   12)}
};
constexpr PackedScore SAFE_KNIGHT_CHECK = S(  78,   -2);
constexpr PackedScore SAFE_BISHOP_CHECK = S(  22,   12);
constexpr PackedScore SAFE_ROOK_CHECK = S(  57,    5);
constexpr PackedScore SAFE_QUEEN_CHECK = S(  21,   23);
constexpr PackedScore UNSAFE_KNIGHT_CHECK = S(   5,    2);
constexpr PackedScore UNSAFE_BISHOP_CHECK = S(  11,   11);
constexpr PackedScore UNSAFE_ROOK_CHECK = S(  19,   -1);
constexpr PackedScore UNSAFE_QUEEN_CHECK = S(   5,   13);
constexpr PackedScore KING_ATTACKER_WEIGHT[4] = {S(  18,    2), S(  13,    4), S(  16,  -13), S(   5,    0)};
constexpr PackedScore KING_ATTACKS[14] = {S( -50,   30), S( -57,   22), S( -63,   17), S( -66,   19), S( -64,   15), S( -55,   10), S( -39,    4), S( -19,   -5), S(  19,  -23), S(  42,  -23), S(  70,  -30), S(  83,   -2), S( 116,  -84), S(  84,   46)};

constexpr PackedScore MINOR_BEHIND_PAWN = S(   6,   15);
constexpr PackedScore KNIGHT_OUTPOST = S(  25,   19);
constexpr PackedScore BISHOP_PAWNS[7] = {S(   4,   22), S(   5,   20), S(   3,   12), S(   0,    4), S(  -4,   -5), S(  -5,  -18), S(  -9,  -32)};
constexpr PackedScore BISHOP_PAIR = S(  19,   63);
constexpr PackedScore ROOK_OPEN[2] = {S(  24,    5), S(  14,    8)};

constexpr PackedScore TEMPO = S(  29,   35);

constexpr PackedScore COMPLEXITY_PAWNS = S(   1,    8);
constexpr PackedScore COMPLEXITY_PASSERS = S(  -1,    1);
constexpr PackedScore COMPLEXITY_PAWNS_BOTH_SIDES = S(   1,   68);
constexpr PackedScore COMPLEXITY_PAWN_ENDGAME = S(   0,   65);
constexpr PackedScore COMPLEXITY_OFFSET = S(   1, -130);

#undef S


}