#pragma once

#include "../defs.h"

namespace eval
{

#define S(mg, eg) PackedScore(mg, eg)

constexpr PackedScore MATERIAL[6] = {S(  69,  106), S( 311,  408), S( 336,  413), S( 422,  744), S( 862, 1378), S(0, 0)};

constexpr PackedScore PSQT[6][64] = {
	{
		S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
		S(  10,   94), S(  26,   93), S(  70,   94), S(  72,   68), S(  81,   54), S(  43,   66), S(  19,   90), S(   8,   81),
		S(  47,   23), S(  62,   44), S(  82,    4), S(  49,   -7), S(  39,   -6), S(  35,   -2), S(   7,   37), S(   3,   23),
		S(  19,    3), S(  12,   22), S(  28,   -8), S(  16,  -10), S(   2,   -8), S(  -2,   -4), S( -10,   23), S( -11,   13),
		S(   8,   -9), S(   3,   18), S(  14,  -11), S(   7,   -6), S(   0,   -6), S(  -7,   -6), S( -19,   19), S( -19,   -2),
		S(  14,  -19), S(  16,    6), S(  -2,   -3), S(  -4,    1), S( -13,    1), S( -20,   -8), S( -29,   11), S( -32,   -7),
		S(  28,  -25), S(  50,    0), S(  32,   -7), S(   1,   11), S( -16,    5), S( -14,   -1), S( -22,   18), S( -24,   -1),
		S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
	},
	{
		S( -74,  -63), S( -65,  -19), S( -16,  -16), S(  16,  -11), S( -32,    6), S( -69,   12), S(-110,   17), S( -88,  -31),
		S(  -1,   -5), S(  26,   -1), S(  29,  -10), S(  10,    0), S(  11,    6), S(  -3,    7), S(  -8,   21), S( -16,   13),
		S(  23,   -5), S(  14,   -4), S(  59,  -18), S(  31,   -1), S(  16,    5), S(  13,    4), S(   1,    5), S(  -7,    6),
		S(  39,    3), S(  35,    7), S(  50,    3), S(  33,   12), S(  37,   12), S(  29,    6), S(  17,    4), S(   7,   18),
		S(  10,   15), S(  25,    6), S(  27,    6), S(  25,   18), S(  26,   12), S(  19,   11), S(  21,    1), S(   0,   13),
		S(  -1,    0), S(  15,   -7), S(   3,  -13), S(  17,    7), S(   4,    8), S(  -5,   -6), S(  -6,   -5), S( -16,    0),
		S(   4,   11), S(   8,   -1), S(   6,   -8), S(   2,   -4), S(   2,   -6), S( -11,   -6), S( -14,    0), S( -20,    4),
		S( -15,    7), S( -14,    4), S(  -3,   -8), S(  -4,    1), S( -11,   -4), S( -23,   -8), S( -16,   -1), S( -54,   15),
	},
	{
		S( -39,   -6), S( -35,    4), S( -12,   -5), S( -75,   10), S( -73,   14), S( -59,    4), S( -36,    7), S( -15,   11),
		S( -32,   -1), S( -47,   12), S( -14,   -1), S(  -9,   -3), S( -25,    5), S(  -4,   -3), S(  -7,    0), S( -13,   -2),
		S(  23,   11), S(  22,   -1), S(  46,    4), S(  10,    4), S(  14,   -5), S(   5,    5), S(   7,    3), S(   4,    6),
		S(   3,    4), S(  10,    8), S(  13,   10), S(  19,   13), S(  24,   16), S(  11,    5), S(   4,   10), S(  -8,    7),
		S(  20,  -10), S(   7,    6), S(   9,    4), S(  13,   11), S(  17,    9), S(   1,   12), S(  -2,    6), S(   1,    4),
		S(  20,   -9), S(  21,  -11), S(  11,   -3), S(   5,    7), S(  -4,    5), S(   4,    3), S(  11,    2), S(  -1,   -4),
		S(  25,  -14), S(  32,  -19), S(  22,  -14), S(   3,   -4), S(  -5,   -1), S(  10,  -19), S(   5,  -16), S(  20,   -5),
		S(  37,  -29), S(  21,  -11), S(  -3,    5), S(  14,   -8), S(  -1,   -6), S(   3,    5), S(  14,    1), S(  11,   -7),
	},
	{
		S(  17,    8), S( -19,   30), S(  -4,   25), S( -15,   18), S( -37,   32), S( -31,   33), S( -15,   25), S( -15,   25),
		S(  40,   -3), S(  40,    5), S(  27,    9), S(   7,   12), S(  20,   13), S(   1,   25), S(  -3,   22), S(  -7,   18),
		S(  23,   -4), S(  58,   -6), S(  43,   -6), S(  24,    5), S(   5,   11), S(   1,   19), S(  13,   14), S( -13,   20),
		S(  11,    2), S(  14,    7), S(  22,    2), S(  14,    3), S(   4,   10), S(   7,   14), S(   6,   13), S( -12,   19),
		S(  -6,   -1), S(  20,    0), S(   0,    5), S(   8,    2), S(  -4,    6), S(  -9,    9), S( -12,    9), S( -17,    9),
		S(   6,  -23), S(  21,  -25), S(   0,  -15), S(   1,  -14), S( -13,   -6), S( -17,   -9), S( -16,  -10), S( -23,   -6),
		S( -12,  -27), S(  20,  -34), S(   6,  -24), S(  -1,  -21), S(  -7,  -18), S(  -9,  -15), S( -18,  -12), S( -23,  -15),
		S( -20,  -22), S( -12,  -11), S(  -3,  -17), S(   3,  -24), S(  -5,  -21), S( -13,  -14), S( -12,  -19), S( -13,  -13),
	},
	{
		S(   5,  -20), S(  58,  -53), S(   0,   14), S( -12,   13), S(   5,   -3), S( -31,   20), S( -54,   15), S( -27,    1),
		S(  47,   -8), S(   3,    6), S(   8,   23), S( -29,   58), S( -22,   42), S(  -8,   16), S( -12,   -3), S(  -1,   -6),
		S(  20,    6), S(  24,    1), S(  11,   26), S(  -3,   37), S(   1,   31), S(   3,   23), S(   1,    1), S(  14,   -4),
		S(  14,   18), S(  10,   40), S(   9,   21), S( -11,   40), S(  -6,   35), S(   7,    9), S(   4,   17), S(   1,   11),
		S(  13,    8), S(  22,   13), S(   5,   23), S(   1,   29), S(  -6,   27), S(  -2,   19), S(   3,   18), S(  -2,   11),
		S(  13,  -25), S(  14,  -11), S(   4,    1), S(  -7,   17), S(  -7,    9), S(  -8,   10), S(   2,   -4), S(   2,  -11),
		S(  13,  -57), S(  18,  -73), S(   9,  -46), S(   4,  -12), S(   1,   -9), S(   2,  -25), S(   0,  -29), S(   9,  -40),
		S(   2,  -53), S( -16,  -51), S( -19,  -24), S(  -8,  -20), S(  -9,  -15), S( -13,  -13), S( -16,  -21), S( -15,  -20),
	},
	{
		S(  72,  -66), S(  38,  -10), S(  17,   -7), S(  18,  -13), S(   7,   -3), S(   7,   -3), S(   7,   -3), S(   7,   -3),
		S( -90,   40), S(  19,   37), S(  16,   32), S(  98,   -4), S(   7,   -3), S(   7,   -3), S(   7,   -3), S(   7,   -3),
		S( -71,   29), S(  34,   26), S(  61,   17), S(  43,   12), S(   7,   -3), S(   7,   -3), S(   7,   -3), S(   7,   -3),
		S(-113,   22), S( -39,   20), S( -31,   20), S( -32,    8), S(   7,   -3), S(   7,   -3), S(   7,   -3), S(   7,   -3),
		S(-133,   19), S( -57,   16), S( -35,   11), S( -41,    7), S(   7,   -3), S(   7,   -3), S(   7,   -3), S(   7,   -3),
		S( -67,    9), S(  -5,    3), S( -19,    6), S(  -9,    0), S(   7,   -3), S(   7,   -3), S(   7,   -3), S(   7,   -3),
		S(  10,   -7), S(  32,   -4), S(  12,    0), S(   4,   -4), S(   7,   -3), S(   7,   -3), S(   7,   -3), S(   7,   -3),
		S(  13,  -37), S(  21,  -13), S(  -9,    0), S(   1,  -18), S(   7,   -3), S(   7,   -3), S(   7,   -3), S(   7,   -3),
	},
};

constexpr PackedScore MOBILITY[4][28] = {
	{S( -16,  -13), S( -42,  -68), S( -18,  -33), S(  -8,   -7), S(   3,    6), S(   6,   19), S(  15,   25), S(  24,   33), S(  32,   31), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -20,  -27), S( -56,  -94), S( -31,  -39), S( -24,  -16), S( -12,   -3), S(  -4,    6), S(   1,   17), S(   7,   21), S(  10,   26), S(  15,   27), S(  15,   30), S(  29,   20), S(  27,   24), S(  50,    7), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -32,  -33), S(  11,  -73), S( -26,  -44), S( -17,  -28), S( -11,  -22), S(  -5,   -7), S(   0,   -1), S(  -6,    9), S(  -1,   13), S(   3,   18), S(   7,   24), S(   9,   32), S(  13,   37), S(  20,   40), S(  26,   35), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -48,   27), S( -67,  -64), S(-118,  -47), S( -79, -271), S( -85,  -93), S( -39,  -33), S( -29,  -11), S( -22,   -9), S( -14,   -6), S( -12,   20), S( -10,   28), S(  -7,   39), S(  -4,   45), S(   0,   48), S(   3,   51), S(   6,   53), S(   8,   56), S(   8,   60), S(   9,   61), S(  10,   62), S(  19,   53), S(  28,   37), S(  33,   34), S(  61,    2), S(  72,   -4), S( 113,  -42), S( 122,  -60), S(  66,  -53)}
};

constexpr PackedScore THREAT_BY_PAWN[6] = {S(   8,  -17), S(  67,   32), S(  68,   62), S(  83,   27), S(  77,  -13), S(   0,    0)};
constexpr PackedScore THREAT_BY_KNIGHT[2][6] = {
	{S(   7,   30), S(  32,   31), S(  38,   42), S(  79,    6), S(  46,  -27), S(   0,    0)},
	{S(  -4,   12), S(  14,   48), S(  32,   33), S(  65,   31), S(  56,   -6), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_BISHOP[2][6] = {
	{S(   5,   37), S(  51,   26), S(   0,   34), S(  78,    9), S(  73,   49), S(   0,    0)},
	{S(   1,   10), S(  23,   25), S( -15,    7), S(  46,   45), S(  52,  133), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_ROOK[2][6] = {
	{S(  -1,   46), S(  30,   56), S(  29,   54), S(  19,  -44), S(  77,   -3), S(   0,    0)},
	{S(  -7,   12), S(   5,   19), S(  17,    6), S(  14,  -73), S(  61,   53), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_QUEEN[2][6] = {
	{S(  12,    6), S(  36,   13), S(  18,   47), S(  26,   -6), S(  11,  -66), S( 125,  -13)},
	{S(   0,   14), S(   2,    9), S(  -4,   24), S(  -4,    4), S( -20,  -66), S( 120,   39)}
};
constexpr PackedScore THREAT_BY_KING[6] = {S( -13,   43), S(  31,   43), S(  32,   46), S( 101,    7), S(   0,    0), S(   0,    0)};
constexpr PackedScore PUSH_THREAT = S(  20,   18);

constexpr PackedScore ISOLATED_PAWN[8] = {S(  -6,   10), S(  -2,  -15), S( -11,   -4), S(  -8,  -14), S( -10,  -13), S(  -6,   -4), S(  -1,  -12), S(  -9,   12)};
constexpr PackedScore PAWN_PHALANX[8] = {S(   0,    0), S(   3,   -1), S(  14,    4), S(  20,   15), S(  49,   59), S( 124,  193), S(-118,  427), S(   0,    0)};
constexpr PackedScore DEFENDED_PAWN[8] = {S(   0,    0), S(   0,    0), S(  20,   10), S(  14,    7), S(  15,   18), S(  25,   55), S( 160,   51), S(   0,    0)};
constexpr PackedScore DOUBLED_PAWN[8] = {S(  -9,  -36), S(   8,  -24), S(   0,  -17), S(  -1,  -10), S(  -6,   -2), S(  -4,  -10), S(  -8,  -22), S( -10,  -50)};

constexpr PackedScore PASSED_PAWN[2][2][8] = {
	{
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -27,  -45), S( -13,   18), S( -34,  144), S(  11,  227), S(   0,    0)},
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -15,  -56), S(  17,  -30), S(  19,    8), S(  94,   22), S(   0,    0)}
	},
	{
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -24,  -61), S(   2,  -27), S(  20,   -2), S(  92,  -13), S(   0,    0)},
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -26,  -65), S(   2,  -39), S(  -2,  -28), S(  19,  -51), S(   0,    0)}
	}
};
constexpr PackedScore OUR_PASSER_PROXIMITY[8] = {S(   0,    0), S(  16,   86), S(  -9,   64), S(  -1,   37), S(   4,   25), S(   9,   17), S(  18,   18), S(  12,   16)};
constexpr PackedScore THEIR_PASSER_PROXIMITY[8] = {S(   0,    0), S( -74,   23), S(  17,    2), S(   7,   31), S(  11,   51), S(   5,   82), S(  11,   82), S(   9,   73)};

constexpr PackedScore PAWN_STORM[3][8] = {
	{S(  51,  -35), S(  23,  -22), S(  16,   -5), S(   8,   -2), S(   2,    1), S(  -2,    6), S(  -1,    7), S(  12,  -10)},
	{S(   0,    0), S(  19,  -27), S(  19,    2), S(   2,   -1), S(  -6,    5), S(  -8,   13), S(  -7,   13), S(  10,   -3)},
	{S(  -1,   -3), S(  -9,    4), S(   1,    8), S(   1,    8), S(   2,    7), S(   3,   10), S(   4,    9), S(  -6,   -2)}
};
constexpr PackedScore PAWN_SHIELD[3][8] = {
	{S(  17,  -15), S(   2,   -8), S(  -2,  -10), S(  -7,   -8), S(   4,   -9), S(  17,  -23), S(  30,  -18), S(  -7,    2)},
	{S(   0,    0), S(  -7,    1), S(  -9,   -1), S(   0,   -1), S(  11,   -6), S(  32,  -22), S(  53,  -26), S(  10,    2)},
	{S(  -4,   -5), S(  -3,   -2), S(   0,   -4), S(   1,    0), S(   2,    1), S(   0,   -2), S(   9,   -5), S(  -5,    5)}
};
constexpr PackedScore SAFE_KNIGHT_CHECK = S(  83,   -2);
constexpr PackedScore SAFE_BISHOP_CHECK = S(  20,   11);
constexpr PackedScore SAFE_ROOK_CHECK = S(  59,    0);
constexpr PackedScore SAFE_QUEEN_CHECK = S(  23,   18);
constexpr PackedScore KING_ATTACKER_WEIGHT[4] = {S(  18,   -1), S(  12,    0), S(  14,  -15), S(   2,    3)};
constexpr PackedScore KING_ATTACKS[14] = {S( -81,   37), S( -86,   33), S( -90,   28), S( -89,   32), S( -83,   28), S( -69,   23), S( -46,   14), S( -19,    2), S(  27,  -20), S(  58,  -26), S(  96,  -43), S( 119,  -25), S( 158, -118), S( 118,   35)};

constexpr PackedScore KNIGHT_OUTPOST = S(  26,   18);
constexpr PackedScore BISHOP_PAWNS[7] = {S(   6,   23), S(   8,   20), S(   5,   12), S(   0,    5), S(  -5,   -4), S(  -7,  -18), S( -13,  -32)};
constexpr PackedScore BISHOP_PAIR = S(  21,   64);
constexpr PackedScore ROOK_OPEN[2] = {S(  25,    5), S(  16,    4)};

constexpr PackedScore TEMPO = S(  31,   34);

#undef S


}
