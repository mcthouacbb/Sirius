#pragma once

#include "../defs.h"

namespace eval
{

#define S(mg, eg) PackedScore(mg, eg)

constexpr PackedScore MATERIAL[6] = {S(  50,   79), S( 273,  342), S( 279,  358), S( 387,  629), S( 823, 1178), S(0, 0)};

constexpr PackedScore PSQT[6][64] = {
	{
		S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
		S(  33,   73), S(  41,   73), S(  24,   81), S(  62,   42), S(  46,   47), S(  38,   52), S( -24,   92), S( -22,   82),
		S(  10,   38), S(   5,   55), S(  30,   14), S(  39,  -13), S(  47,  -15), S(  78,   -7), S(  40,   37), S(  24,   27),
		S( -10,   22), S(  -4,   25), S(   3,    2), S(   4,   -9), S(  24,   -9), S(  25,  -12), S(   9,   15), S(  10,    0),
		S( -17,    5), S( -12,   20), S(  -3,   -4), S(   6,   -8), S(   9,   -7), S(  13,  -11), S(   1,    9), S(  -2,  -13),
		S( -25,   -2), S( -19,   10), S( -10,   -6), S(  -8,   -3), S(   2,   -2), S(  -3,   -7), S(   4,    0), S(  -6,  -18),
		S( -16,    3), S(  -8,   16), S(  -2,    1), S(  -2,   -2), S(   6,    8), S(  29,   -6), S(  20,    4), S(  -1,  -16),
		S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
	},
	{
		S(-102,  -30), S( -97,   -5), S( -64,    8), S( -22,   -5), S(   4,   -2), S( -47,  -21), S( -82,   -1), S( -74,  -47),
		S( -16,    1), S(  -2,    6), S(   4,    2), S(  19,    2), S(  13,   -5), S(  33,  -14), S(  14,   -2), S(   6,  -12),
		S(   0,   -4), S(   8,    0), S(  18,    3), S(  22,    4), S(  35,   -2), S(  60,  -22), S(  18,  -11), S(  22,  -14),
		S(   5,    9), S(  10,    2), S(  26,    5), S(  37,    8), S(  33,    8), S(  40,    1), S(  25,    0), S(  32,   -3),
		S(  -1,    8), S(   9,   -1), S(  14,   11), S(  23,   11), S(  16,   20), S(  19,    3), S(  15,    1), S(   3,    9),
		S( -11,    2), S(  -1,    0), S(   5,    2), S(   6,   14), S(  19,   12), S(   7,   -4), S(  17,   -4), S(   3,    3),
		S( -15,    5), S( -12,    8), S(  -4,   -1), S(  10,    2), S(   8,    0), S(   7,   -3), S(   9,   -2), S(   5,   19),
		S( -45,   15), S(  -7,   -2), S( -22,   -1), S( -11,    1), S(  -6,    4), S(   2,   -7), S(  -4,    5), S( -18,   12),
	},
	{
		S( -17,    6), S( -46,   10), S( -40,    4), S( -78,   12), S( -69,   11), S( -60,    1), S( -29,    3), S( -55,   -1),
		S( -13,   -8), S( -12,   -2), S( -12,   -4), S( -17,    0), S( -11,   -7), S( -15,   -5), S( -41,    6), S( -28,   -2),
		S(   5,    7), S(  15,   -1), S(   7,    1), S(  15,   -6), S(   8,   -2), S(  34,    2), S(  23,    0), S(  21,    8),
		S(  -8,    5), S(   3,    8), S(   6,    3), S(  19,   12), S(   6,    6), S(   8,    8), S(  -4,    8), S(  -4,    4),
		S(   1,    4), S(  -8,    7), S(   4,    6), S(  11,    7), S(  10,    4), S(   0,    2), S(  -1,    5), S(   6,   -4),
		S(   3,    4), S(  16,    3), S(   8,    1), S(  11,    3), S(  12,    8), S(  12,   -1), S(  15,   -4), S(  20,   -3),
		S(  25,    8), S(  13,  -11), S(  21,  -12), S(   5,   -2), S(  14,    0), S(  21,   -9), S(  33,  -10), S(  25,   -7),
		S(  15,   -5), S(  25,    4), S(  11,   -2), S(   3,   -1), S(  10,   -5), S(   6,    7), S(  22,  -10), S(  33,  -17),
	},
	{
		S( -12,   18), S( -11,   20), S( -16,   29), S( -23,   27), S( -12,   20), S(   8,   15), S(  10,   18), S(  23,   12),
		S(  -9,   14), S(  -3,   20), S(  10,   21), S(  26,   11), S(  12,   11), S(  22,    7), S(  29,    2), S(  32,   -1),
		S( -16,   11), S(  15,    7), S(   6,   10), S(   7,    6), S(  26,   -3), S(  37,  -10), S(  61,  -11), S(  21,   -9),
		S( -15,   12), S(   2,    6), S(   0,   11), S(   2,    6), S(   7,   -5), S(  15,   -9), S(  15,   -5), S(   7,   -9),
		S( -22,    6), S( -22,    7), S( -15,    5), S(  -7,    3), S(  -7,    0), S( -14,    1), S(   4,   -7), S( -10,   -8),
		S( -25,    2), S( -21,   -2), S( -16,   -4), S( -12,   -2), S(  -5,   -6), S(  -3,  -12), S(  16,  -23), S(   3,  -23),
		S( -26,   -5), S( -20,   -3), S( -10,   -5), S(  -8,   -7), S(  -4,  -12), S(   0,  -15), S(   7,  -21), S( -19,  -15),
		S(  -9,    1), S(  -8,   -4), S(  -4,    1), S(   3,   -6), S(   9,  -12), S(   5,   -7), S(   1,   -9), S(  -9,   -9),
	},
	{
		S( -22,    0), S( -30,    8), S( -20,   30), S(  -5,   27), S( -10,   28), S(   1,   16), S(  53,  -35), S(  -2,    3),
		S(  -4,  -16), S( -20,   -1), S( -21,   34), S( -32,   53), S( -37,   69), S(  -3,   29), S(  -6,   10), S(  32,    8),
		S(   3,  -12), S(  -1,   -4), S(  -8,   24), S(  -6,   31), S(   0,   39), S(   7,   14), S(  25,   -6), S(  19,    0),
		S(  -8,    3), S(  -2,   11), S(  -5,   15), S(  -9,   29), S( -16,   32), S(   0,   20), S(  -1,   30), S(   6,   10),
		S(   2,   -5), S(  -8,   18), S(  -5,   18), S(  -6,   23), S(  -1,   24), S(  -1,   17), S(   7,    8), S(  12,    3),
		S(   0,  -18), S(   4,   -1), S(  -5,    9), S(  -2,   11), S(   1,   15), S(   5,    4), S(  14,  -15), S(  14,  -24),
		S(   7,  -27), S(   1,  -27), S(   9,  -22), S(  11,  -17), S(  10,  -12), S(  15,  -38), S(  20,  -67), S(  33,  -81),
		S(  -2,  -32), S(   2,  -28), S(   4,  -23), S(  10,  -10), S(   9,  -26), S(  -3,  -35), S(   4,  -49), S(  12,  -49),
	},
	{
		S(  53,  -60), S(  56,  -30), S( 104,  -32), S(  34,   -8), S(  56,  -32), S( -14,    0), S(  31,    6), S( 108,  -73),
		S( -97,   22), S(  12,   22), S(  23,   12), S( 143,  -17), S(  91,  -12), S(  36,   25), S(  24,   38), S( -60,   41),
		S(-101,   20), S(  46,   14), S(  31,    7), S(  40,    2), S(  80,   -3), S(  94,    9), S(   6,   35), S( -60,   27),
		S( -57,   -3), S( -19,    6), S( -12,    6), S( -17,    2), S( -25,   -2), S( -30,   14), S( -63,   22), S(-140,   24),
		S( -70,  -12), S( -31,   -1), S( -30,    3), S( -34,    4), S( -39,    3), S( -38,    5), S( -65,   12), S(-145,   18),
		S( -44,   -8), S(   7,   -2), S( -20,    4), S(  -4,    2), S(  -5,    1), S( -22,    7), S( -14,    5), S( -71,   12),
		S(  32,  -14), S(  24,    0), S(  20,    0), S(   4,   -2), S(   0,    1), S(   7,    4), S(  24,    1), S(  16,   -6),
		S(  15,  -31), S(  47,  -21), S(  25,   -7), S( -30,    0), S(   9,  -17), S( -29,    7), S(  28,  -10), S(  24,  -34),
	},
};

constexpr PackedScore MOBILITY[4][28] = {
	{S(-125, -102), S( -35,  -55), S( -13,  -27), S(  -4,   -5), S(   5,    7), S(   8,   17), S(  16,   22), S(  25,   26), S(  34,   25), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -25, -159), S( -44,  -83), S( -16,  -38), S(  -7,  -17), S(   5,   -5), S(  12,    4), S(  18,   14), S(  23,   20), S(  26,   26), S(  31,   29), S(  32,   34), S(  43,   28), S(  43,   34), S(  52,   25), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -47, -110), S( -30,  -87), S( -20,  -33), S( -13,  -18), S(  -7,  -10), S(  -4,   -2), S(  -2,    2), S(  -1,    8), S(   2,   10), S(   6,   12), S(   8,   17), S(  10,   21), S(  13,   23), S(  15,   24), S(  16,   21), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S(   0,    0), S(   0,    0), S(-159,  -36), S( -33, -228), S( -49,  -87), S( -17,  -78), S( -12,  -54), S( -10,  -33), S(  -6,  -18), S(  -4,    4), S(  -0,    8), S(   4,   12), S(   8,   18), S(  12,   16), S(  14,   18), S(  16,   24), S(  17,   25), S(  17,   29), S(  19,   31), S(  20,   30), S(  27,   29), S(  39,   12), S(  52,    7), S(  67,   -9), S(  65,   -4), S( 175,  -71), S(  84,  -38), S(  23,  -24)}
};

constexpr PackedScore THREATS[6][6] = {
	{S(  18,   -9), S(  39,    1), S(  41,   35), S(  67,  -18), S(  44,  -45), S(   0,    0)},
	{S(  -5,    8), S(   0,    0), S(  20,   21), S(  50,  -13), S(  24,  -45), S(   0,    0)},
	{S(   2,   13), S(  20,   21), S(   0,    0), S(  31,   -1), S(  36,   55), S(   0,    0)},
	{S(  -9,   13), S(   2,   18), S(  10,   12), S(   0,    0), S(  45,  -11), S(   0,    0)},
	{S(  -2,    6), S(   1,    9), S(  -2,   23), S(   3,   -5), S(   0,    0), S(   0,    0)},
	{S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)}
};

constexpr PackedScore PASSED_PAWN[8] = {S(   0,    0), S( -15,  -61), S( -14,  -46), S( -11,  -13), S(  12,   20), S(   5,   85), S(  47,   89), S(   0,    0)};
constexpr PackedScore ISOLATED_PAWN[8] = {S(  -3,    7), S(  -3,  -10), S( -10,   -5), S(  -6,  -12), S( -10,  -13), S(  -8,   -3), S(  -1,  -11), S( -11,    8)};
constexpr PackedScore PAWN_PHALANX[8] = {S(   0,    0), S(   5,   -2), S(  12,    6), S(  22,   17), S(  48,   57), S( 133,  179), S(-151,  414), S(   0,    0)};
constexpr PackedScore DEFENDED_PAWN[8] = {S(   0,    0), S(   0,    0), S(  17,   10), S(  12,    8), S(  13,   16), S(  25,   39), S( 163,   29), S(   0,    0)};
constexpr PackedScore OUR_PASSER_PROXIMITY[8] = {S(   0,    0), S(   7,   49), S(  -4,   36), S(  -5,   20), S(  -2,   10), S(   2,    8), S(  17,    6), S(   7,    4)};
constexpr PackedScore THEIR_PASSER_PROXIMITY[8] = {S(   0,    0), S( -69,   -4), S(   6,   -1), S(  -0,   23), S(   4,   33), S(   5,   41), S(   6,   45), S( -12,   46)};

constexpr PackedScore PAWN_STORM[3][8] = {
	{S(  44,  -32), S(  26,  -17), S(  18,   -3), S(  10,    0), S(   4,    2), S(  -0,    6), S(   2,    5), S(   9,  -11)},
	{S(   0,    0), S(   7,  -28), S(  24,    1), S(   2,    0), S(  -6,    7), S(  -8,   12), S(  -8,   13), S(   7,   -3)},
	{S(   2,   -2), S(  -4,    5), S(   5,    9), S(   3,    9), S(   4,    9), S(   4,    9), S(   3,    9), S(  -8,   -4)}
};
constexpr PackedScore PAWN_SHIELD[3][8] = {
	{S(   2,  -14), S(  -8,   -7), S(  -5,  -11), S(  -0,  -10), S(  11,  -13), S(  15,  -25), S(  35,  -28), S(   9,    1)},
	{S(   0,    0), S( -17,    2), S( -11,   -5), S(   7,   -3), S(  17,  -10), S(  30,  -27), S(  57,  -36), S(  20,    3)},
	{S(  -1,   -9), S(  -2,   -6), S(   0,   -5), S(   0,   -0), S(   4,    1), S(   5,    1), S(  24,    3), S(  -6,    7)}
};
constexpr PackedScore SAFE_KNIGHT_CHECK = S(  72,   -3);
constexpr PackedScore SAFE_BISHOP_CHECK = S(  15,   -6);
constexpr PackedScore SAFE_ROOK_CHECK = S(  51,   -2);
constexpr PackedScore SAFE_QUEEN_CHECK = S(  28,   12);
constexpr PackedScore KING_ATTACKER_WEIGHT[4] = {S(  14,   -4), S(  10,   -0), S(   9,  -14), S(   0,   15)};
constexpr PackedScore KING_ATTACKS[14] = {S( -24,   11), S( -29,    8), S( -31,    6), S( -30,   11), S( -20,    8), S(  -3,    4), S(  23,   -8), S(  57,  -23), S( 103,  -44), S( 139,  -60), S( 188,  -76), S( 260, -118), S( 263,  -94), S( 252,  -84)};

constexpr PackedScore KNIGHT_OUTPOST = S(  32,   22);
constexpr PackedScore BISHOP_PAIR = S(  21,   58);
constexpr PackedScore ROOK_OPEN[2] = {S(  27,    9), S(  15,    9)};

#undef S


}
