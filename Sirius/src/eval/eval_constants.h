#pragma once

#include "../defs.h"

namespace eval
{

#define S(mg, eg) PackedScore(mg, eg)

constexpr PackedScore MATERIAL[6] = {S(  61,  131), S( 288,  430), S( 309,  441), S( 389,  784), S( 739, 1618), S(0, 0)};

constexpr PackedScore PSQT[6][64] = {
    {
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  56,   74), S(  27,   92), S(  20,  105), S(  54,   76), S(  69,   65), S(  48,   81), S(  36,   99), S(  59,   81),
        S(  17,    5), S(  -7,   36), S(   7,    0), S(  17,  -23), S(  10,  -20), S(   7,   -9), S( -16,   27), S(  -1,   13),
        S(  14,    4), S(  -5,   11), S(  14,  -21), S(  11,  -24), S(  -1,  -23), S(  -1,  -14), S(  -9,   10), S( -10,    8),
        S(   6,   -3), S(  -5,   14), S(  14,  -27), S(  16,  -18), S(   9,  -16), S(  -1,  -12), S( -15,   11), S( -13,   -2),
        S(  -2,   -6), S(   7,    8), S(   4,   -4), S(   1,   -3), S(  -8,   -3), S( -10,   -8), S( -23,   10), S( -24,   -3),
        S(   9,   -7), S(  24,    9), S(  31,  112), S(   9,    0), S(  -2,   -9), S(  -6,   -7), S( -15,   13), S( -15,    0),
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
    },
    {
        S( -67, -100), S( -72,  -29), S( -27,  -18), S(   0,   -9), S( -30,    1), S( -58,    4), S( -99,    4), S( -85,  -58),
        S( -16,  -14), S(  13,    2), S(  23,    1), S(  -2,    9), S(   3,   11), S(   4,   11), S(   1,   12), S(  -7,   -3),
        S(   5,   -8), S( -10,    7), S(  30,   -2), S(  21,   15), S(  10,   23), S(  15,   15), S(   8,    3), S(  -5,   -1),
        S(  26,    4), S(  23,   15), S(  36,   19), S(  24,   25), S(  24,   27), S(  31,   13), S(  22,    2), S(  13,    8),
        S(  10,   16), S(  15,   16), S(  21,   19), S(  20,   28), S(  22,   20), S(  19,   17), S(  24,    0), S(  11,    0),
        S(  14,   -2), S(  15,    4), S(  16,    3), S(  15,   16), S(   5,   15), S(   3,   -1), S(   7,   -7), S(  -5,   -9),
        S(   9,   -2), S(  10,   -5), S(   8,   -5), S(  12,    0), S(   7,   -1), S(  -3,   -4), S(  -2,   -9), S( -13,  -11),
        S(  -4,  -18), S(  -5,  -12), S(   3,  -11), S(   8,   -1), S(   1,   -4), S( -15,  -11), S(  -8,  -17), S( -41,  -11),
    },
    {
        S( -45,  -15), S( -27,    4), S(  -5,   -5), S( -72,   11), S( -68,   19), S( -55,    3), S( -31,    7), S( -32,    5),
        S( -21,  -10), S( -43,    3), S( -12,    1), S( -10,    3), S( -23,   12), S(   1,   -2), S( -13,   -7), S(  -2,   -9),
        S(  10,   12), S(  -1,    8), S(  20,    6), S(   3,   12), S(  15,    6), S(   0,   -1), S(  10,    5), S(   6,    0),
        S( -11,    5), S(   2,   12), S(   1,   16), S(  17,   18), S(  21,   22), S(  19,    8), S(   5,   11), S(  -4,    1),
        S(  16,   -6), S(  -4,   13), S(   7,   12), S(  15,   14), S(  22,   11), S(   4,   13), S(   4,    5), S(   4,   -3),
        S(  19,   -9), S(  22,   -3), S(   3,   -3), S(  10,   11), S(   0,    7), S(   5,   -4), S(  18,    0), S(   6,  -10),
        S(  26,  -20), S(  23,  -25), S(  27,   -9), S(   6,   -4), S(  -1,   -1), S(  11,  -17), S(   6,  -28), S(  15,  -13),
        S(  27,  -38), S(  20,  -16), S(  -5,   -3), S(  20,   -7), S(   1,   -3), S(   1,    0), S(  11,   -4), S(   7,  -19),
    },
    {
        S(  13,   13), S( -21,   37), S( -13,   29), S( -24,   26), S( -12,   24), S( -12,   29), S(   7,   19), S(   8,   19),
        S(  25,    4), S(  32,    8), S(  13,   17), S(  -6,   21), S(  24,   13), S(  11,   25), S(   7,   20), S(   9,   13),
        S(  -7,    8), S(  25,    6), S(   6,    9), S(   9,   10), S(   7,    9), S(   4,   17), S(  17,   12), S(  -4,   14),
        S(  -9,   10), S( -15,   20), S(  -4,   17), S(  -6,   11), S(   0,   10), S(   7,   12), S(   5,   12), S(  -6,   13),
        S( -17,    4), S(   0,    9), S( -18,   14), S(  -6,    9), S(  -5,    3), S(  -8,    6), S(  -8,    4), S(  -9,    4),
        S(   5,  -21), S(  22,  -24), S(   0,  -13), S(   0,  -14), S(  -3,  -13), S(  -7,  -13), S(  -4,  -15), S( -11,  -13),
        S(  -6,  -27), S(  26,  -36), S(   6,  -22), S(   3,  -20), S(   4,  -22), S(   2,  -19), S(  -7,  -19), S( -11,  -23),
        S(  -6,  -39), S(  -3,  -19), S(   2,  -19), S(   8,  -24), S(   6,  -25), S(  -1,  -20), S(  -1,  -23), S(  -3,  -22),
    },
    {
        S(  12,   -7), S(  57,  -37), S( -19,   46), S( -23,   34), S(  16,    5), S( -12,   22), S( -25,   10), S( -16,   14),
        S(  36,   11), S(   4,   20), S( -19,   37), S( -49,   69), S( -20,   46), S(   2,   11), S(   8,   -5), S(  13,   -2),
        S(   2,   17), S(  -7,    8), S( -17,   30), S( -27,   26), S(   0,   19), S(   9,   15), S(  13,  -10), S(  24,  -10),
        S(  -2,   14), S( -16,   33), S(  -9,   16), S( -26,   36), S( -14,   35), S(   9,    6), S(  10,    6), S(  11,   -5),
        S(   1,   10), S(  -1,   12), S( -11,   17), S(  -5,   26), S(  -8,   34), S(  -1,   17), S(   7,   13), S(   8,   -2),
        S(  10,  -19), S(   9,  -10), S(   0,    4), S(  -8,   13), S(  -2,   10), S(   2,    9), S(  17,  -14), S(  18,  -23),
        S(  10,  -48), S(  17,  -67), S(  10,  -36), S(   9,  -19), S(   7,  -10), S(  11,  -23), S(  13,  -29), S(  18,  -45),
        S(  17,  -63), S(  -7,  -49), S( -10,  -29), S(  -1,  -27), S(   2,  -28), S(  -2,  -22), S(  -4,  -26), S(  -3,  -23),
    },
    {
        S(  44,  -68), S(  26,    4), S( -51,  -12), S( -66,    4), S(   9,   -6), S(   9,   -6), S(   9,   -6), S(   9,   -6),
        S( -17,   30), S(  34,   58), S(  -7,   34), S(  -2,   29), S(   9,   -6), S(   9,   -6), S(   9,   -6), S(   9,   -6),
        S(  35,   20), S(  55,   55), S(  33,   32), S( -21,   51), S(   9,   -6), S(   9,   -6), S(   9,   -6), S(   9,   -6),
        S( -19,   21), S( -15,   55), S( -37,   32), S( -85,   48), S(   9,   -6), S(   9,   -6), S(   9,   -6), S(   9,   -6),
        S( -56,   12), S( -53,   43), S( -50,   12), S( -86,   28), S(   9,   -6), S(   9,   -6), S(   9,   -6), S(   9,   -6),
        S( -17,   -6), S( -11,   18), S( -31,  -10), S( -52,    4), S(   9,   -6), S(   9,   -6), S(   9,   -6), S(   9,   -6),
        S(  36,  -27), S(  30,   -3), S(   5,  -30), S( -24,  -18), S(   9,   -6), S(   9,   -6), S(   9,   -6), S(   9,   -6),
    },
};

constexpr PackedScore MOBILITY[4][28] = {
    {S(  -4,  -27), S( -39,  -44), S( -18,  -15), S(  -9,    1), S(   1,    9), S(   6,   18), S(  14,   21), S(  22,   25), S(  32,   18), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S( -13,  -43), S( -31,  -60), S( -19,  -32), S( -13,  -13), S(  -4,   -4), S(   1,    7), S(   3,   15), S(   6,   19), S(   7,   22), S(  10,   22), S(  12,   22), S(  17,   17), S(  16,   24), S(  20,    4), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S( -16,  -42), S( -31,  -69), S( -16,  -52), S(  -4,  -31), S(  -2,  -16), S(  -3,   -6), S(  -2,    2), S(   1,    8), S(   2,   12), S(   6,   17), S(   4,   27), S(   6,   34), S(   9,   38), S(  13,   39), S(  21,   36), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S(  -8,   13), S( -40,  -71), S( -61, -122), S( -11, -212), S( -16,  -72), S(  -9,  -18), S(   0,  -30), S(   2,   -9), S(   2,    9), S(   4,   19), S(   6,   22), S(   9,   25), S(   9,   36), S(  12,   35), S(  12,   42), S(  12,   45), S(  12,   48), S(  14,   49), S(  13,   49), S(  19,   41), S(  22,   34), S(  29,   17), S(  24,   25), S(  33,    1), S(  29,    3), S(   7,    1), S( -18,   -2), S(-118,   19)}
};

constexpr PackedScore THREAT_BY_PAWN[6] = {S(   4,  -18), S(  66,   27), S(  61,   60), S(  80,   24), S(  72,    1), S(   0,    0)};
constexpr PackedScore THREAT_BY_KNIGHT[2][6] = {
    {S(   6,   28), S(   7,   23), S(  40,   42), S(  74,   14), S(  58,  -30), S(   0,    0)},
    {S(  -8,    9), S(  -4,   21), S(  28,   29), S(  65,   33), S(  58,   -4), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_BISHOP[2][6] = {
    {S(  -3,   34), S(  41,   31), S( -15,   27), S(  67,   14), S(  69,   50), S(   0,    0)},
    {S(  -4,    5), S(  17,   22), S( -29,  -18), S(  44,   44), S(  45,  117), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_ROOK[2][6] = {
    {S(   0,   40), S(  17,   59), S(  27,   54), S(   3,  -34), S(  75,    8), S(   0,    0)},
    {S(  -8,    7), S(   1,   16), S(  12,    4), S(   1,  -74), S(  61,   47), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_QUEEN[2][6] = {
    {S(   6,    8), S(  23,   19), S(   9,   48), S(  18,   16), S(  10,  -54), S(  97,   47)},
    {S(  -3,   12), S(   0,    6), S(  -8,   16), S(  -5,    4), S( -18,  -74), S( 116,   42)}
};
constexpr PackedScore THREAT_BY_KING[6] = {S( -25,   45), S(   9,   47), S(  28,   40), S(  85,    6), S(   0,    0), S(   0,    0)};
constexpr PackedScore PUSH_THREAT = S(  14,   17);
constexpr PackedScore PINNED_THREAT = S(  20,   13);

constexpr PackedScore ISOLATED_PAWN[8] = {S(  -9,    6), S(  -3,  -15), S( -12,   -8), S( -10,  -16), S( -12,  -15), S(  -8,   -7), S(  -4,  -13), S( -12,    7)};
constexpr PackedScore DOUBLED_PAWN[8] = {S(   1,  -61), S(  14,  -37), S(   1,  -27), S(  -1,  -18), S(  -5,  -11), S(  -6,  -19), S(   6,  -38), S(   8,  -73)};
constexpr PackedScore BACKWARDS_PAWN[8] = {S(   0,    0), S(  -7,  -14), S(  -2,  -14), S(  -8,  -11), S(   1,  -17), S(  25,    1), S(   0,    0), S(   0,    0)};
constexpr PackedScore PAWN_PHALANX[8] = {S(   0,    0), S(   5,   -4), S(  11,   -2), S(  20,    8), S(  40,   40), S( 112,  214), S( -12,  358), S(   0,    0)};
constexpr PackedScore DEFENDED_PAWN[8] = {S(   0,    0), S(   0,    0), S(  19,    6), S(  11,    7), S(  16,   20), S(  30,   62), S( 145,   69), S(   0,    0)};
constexpr PackedScore CANDIDATE_PASSER[2][8] = {
    {S(   0,    0), S( -33,  -16), S( -19,   -7), S(   0,   26), S(  27,   52), S(  60,   86), S(   0,    0), S(   0,    0)},
    {S(   0,    0), S( -19,   -7), S(  -9,   14), S(  -4,   28), S(  19,   41), S(  28,  154), S(   0,    0), S(   0,    0)}
};

constexpr PackedScore PASSED_PAWN[2][2][8] = {
    {
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -40,  -40), S( -15,   24), S(   4,  150), S(  57,  224), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -26,  -53), S(   7,  -23), S(  31,   20), S(  59,   31), S(   0,    0)}
    },
    {
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -32,  -56), S(   1,  -24), S(  38,    9), S(  61,   -3), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -32,  -62), S(   0,  -34), S(  11,  -10), S( -25,  -10), S(   0,    0)}
    }
};
constexpr PackedScore OUR_PASSER_PROXIMITY[8] = {S(   0,    0), S(  58,   81), S(  10,   68), S(   2,   44), S(   4,   32), S(  11,   23), S(  18,   21), S(  15,   19)};
constexpr PackedScore THEIR_PASSER_PROXIMITY[8] = {S(   0,    0), S( -56,    8), S(  17,    1), S(  16,   26), S(  21,   45), S(  19,   77), S(  21,   78), S(  24,   68)};

constexpr PackedScore PAWN_STORM[2][4][8] = {
    {
        {S(  44,   35), S(-127,  -48), S( -20,   11), S(  30,   11), S(  17,   23), S(  -2,   30), S(  -9,   29), S(   0,    0)},
        {S(  33,    8), S(  43, -127), S(  83,  -46), S(  37,   -5), S(  10,    3), S( -26,   11), S(   2,    8), S(   0,    0)},
        {S(  12,   21), S( 107, -100), S( 102,  -22), S(  52,    6), S(  11,   20), S( -11,   24), S( -12,   26), S(   0,    0)},
        {S(  20,    5), S( 165,  -80), S( 100,  -18), S(  42,   12), S(   1,   18), S( -17,   11), S( -20,   19), S(   0,    0)}
    },
    {
        {S(   0,    0), S(   0,    0), S(  33,   41), S( -25,   25), S(  -4,   29), S(  20,   31), S(  -8,   29), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(  92,   -2), S(   4,    8), S( -11,   18), S(  -3,   16), S(   3,    8), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(  85,    7), S(  -1,   13), S(  -1,   25), S(  26,   25), S(   3,   22), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(  36,    0), S(  19,   18), S( -27,   16), S(  -4,   10), S(   0,   12), S(   0,    0)}
    }
};
constexpr PackedScore PAWN_SHIELD[4][8] = {
    {S(  46,   31), S( -16,   48), S( -13,   40), S(  29,   33), S(  34,   27), S( -25,   -3), S( -72,  -21), S(   0,    0)},
    {S(  50,    6), S( -21,   17), S(   7,    7), S(  49,    1), S(  37,   -8), S(  -1,  -16), S( -49,  -28), S(   0,    0)},
    {S(  21,   -1), S(  19,  113), S(   7,   -2), S(  28,  -22), S(  25,  -20), S(  -2,  -24), S( -65,  -28), S(   0,    0)},
    {S(  18,   14), S(   9,   10), S(  -3,   11), S(  21,    7), S(  28,    5), S(  10,    6), S( -89,   11), S(   0,    0)}
};
constexpr PackedScore SAFE_KNIGHT_CHECK = S( 112,    5);
constexpr PackedScore SAFE_BISHOP_CHECK = S(  62,   17);
constexpr PackedScore SAFE_ROOK_CHECK = S( 103,   17);
constexpr PackedScore SAFE_QUEEN_CHECK = S(  53,   25);
constexpr PackedScore UNSAFE_KNIGHT_CHECK = S(  17,    2);
constexpr PackedScore UNSAFE_BISHOP_CHECK = S(  37,   10);
constexpr PackedScore UNSAFE_ROOK_CHECK = S(  38,    3);
constexpr PackedScore UNSAFE_QUEEN_CHECK = S(  16,    3);
constexpr PackedScore QUEENLESS_ATTACK = S(-140,  154);
constexpr PackedScore KING_ATTACKER_WEIGHT[4] = {S(  54,   -6), S(  21,   -1), S(  26,  -14), S(   2,  -10)};
constexpr PackedScore KING_ATTACKS = S(   7,    0);
constexpr PackedScore WEAK_KING_RING = S(   7,    0);
constexpr PackedScore KING_FLANK_ATTACKS[2] = {S(  12,   -4), S(   7,    1)};
constexpr PackedScore KING_FLANK_DEFENSES[2] = {S(  -6,    0), S( -11,    2)};
constexpr PackedScore SAFETY_OFFSET = S(  71,  199);

constexpr PackedScore MINOR_BEHIND_PAWN = S(   6,   12);
constexpr PackedScore KNIGHT_OUTPOST = S(  23,   16);
constexpr PackedScore BISHOP_PAWNS[7] = {S(   4,   21), S(   6,   20), S(   4,   12), S(   1,    5), S(  -2,   -4), S(  -2,  -18), S(  -6,  -30)};
constexpr PackedScore BISHOP_PAIR = S(  19,   60);
constexpr PackedScore LONG_DIAG_BISHOP = S(  15,    9);
constexpr PackedScore ROOK_OPEN[2] = {S(  25,    3), S(  13,    4)};

constexpr PackedScore TEMPO = S(  32,   34);

constexpr PackedScore COMPLEXITY_PAWNS = S(   0,    9);
constexpr PackedScore COMPLEXITY_PASSERS = S(   0,   -1);
constexpr PackedScore COMPLEXITY_PAWNS_BOTH_SIDES = S(   0,   66);
constexpr PackedScore COMPLEXITY_PAWN_ENDGAME = S(   0,   79);
constexpr PackedScore COMPLEXITY_OFFSET = S(   0, -128);

#undef S


}