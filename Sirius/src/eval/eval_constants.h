#pragma once

#include "../defs.h"

namespace eval
{

// clang-format off
#define S(mg, eg) ScorePair(mg, eg)

constexpr ScorePair MATERIAL[6] = {S(  62,  137), S( 317,  455), S( 333,  476), S( 423,  823), S( 899, 1738), S(0, 0)};

constexpr ScorePair PSQT[6][64] = {
    {
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  77,   84), S(   8,   99), S(  47,   79), S(  59,   76), S(  70,   55), S(  43,   69), S(  37,   93), S(  88,   77),
        S(   1,   14), S(  -8,   21), S(  11,    8), S(   8,   -6), S(  -7,  -13), S(  -6,   -5), S( -11,   15), S(   0,    8),
        S(   3,   11), S(   9,   14), S(  13,  -13), S(  11,  -18), S(   4,  -16), S(  -1,   -9), S(   1,   11), S(  -9,   11),
        S(  -9,   -1), S(  -8,   15), S(  18,  -24), S(  19,  -19), S(  13,  -18), S(   3,  -11), S( -12,   11), S( -15,   -5),
        S( -14,   -2), S(  11,    8), S(   4,    2), S(   9,    1), S(  -2,    1), S(  -8,    0), S( -14,   11), S( -23,   -7),
        S(  -5,   -7), S(  23,   11), S(  25,   39), S(   7,    9), S(  -2,    2), S(  -3,    1), S(  -5,   10), S( -18,   -4),
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
    },
    {
        S( -78, -110), S( -93,   19), S(-113,   46), S( -10,   17), S( -44,   24), S( -56,    4), S(-100,    5), S( -90,  -69),
        S(  -5,   -1), S( -13,   12), S(  30,   10), S(  41,   15), S(  28,   24), S(  17,    0), S( -17,    5), S(  -9,  -12),
        S(  18,   -9), S(   7,   15), S(  39,   13), S(  34,   16), S(  19,   18), S(  27,   12), S(  14,    3), S(  13,  -16),
        S(  35,    0), S(  30,   12), S(  34,   17), S(  28,   28), S(  35,   23), S(  18,   19), S(  19,    6), S(  14,    2),
        S(  19,    7), S(  31,    4), S(  25,   17), S(  21,   30), S(  19,   24), S(  17,   18), S(  21,   -1), S(   5,    4),
        S(   3,   -8), S(  20,   -2), S(  15,    3), S(  17,   16), S(  13,   14), S(  -1,    2), S(   4,   -6), S(  -9,   -6),
        S(  12,   -8), S(   8,    1), S(   8,  -13), S(  12,    0), S(   2,    4), S(   0,   -8), S( -11,    1), S( -28,  -18),
        S( -30,  -25), S( -11,  -18), S(   6,  -18), S(   3,   -7), S(   3,  -10), S(  12,  -27), S( -15,  -19), S( -23,  -36),
    },
    {
        S( -39,  -27), S( -62,   21), S( -88,   19), S( -58,   10), S( -80,   23), S( -72,   15), S( -66,   29), S( -32,   -8),
        S( -14,   -1), S( -43,   15), S( -10,   11), S( -29,   16), S( -23,   22), S( -12,    7), S( -10,  -16), S(  -7,   -3),
        S(  22,   -6), S(  12,    4), S(  22,    9), S(  19,   15), S(  19,   11), S(  11,    2), S(  17,    4), S(  12,   -6),
        S(   5,   -1), S(  15,   13), S(  12,   18), S(  14,   33), S(  25,   28), S(  18,   12), S(  18,    7), S(   9,   -9),
        S(  15,   -6), S(   5,    8), S(  13,   16), S(  26,   13), S(  24,   19), S(  18,   10), S(   9,    3), S(  18,  -12),
        S(  21,   -8), S(  23,   -3), S(  15,   -7), S(  14,   14), S(  14,    5), S(   5,   -7), S(  27,   -5), S(  17,  -12),
        S(  21,  -19), S(  27,  -28), S(  24,  -15), S(  13,   -5), S(   1,   -5), S(  12,  -13), S(   8,  -23), S(  29,   -9),
        S(   7,  -29), S(  16,  -12), S( -11,   -9), S(  12,  -22), S(   6,  -13), S(  -5,   -4), S(   8,  -16), S(   7,  -22),
    },
    {
        S(  22,    9), S(  40,    4), S(  20,   15), S(  11,   27), S(  23,   15), S(   6,   26), S(  18,   23), S(  22,   20),
        S(  21,   15), S(  14,   19), S(  25,   18), S(  14,   24), S(  28,   26), S(  16,   25), S(  14,   25), S(  20,   22),
        S( -23,   23), S(  16,    9), S(  13,   12), S(  13,   13), S(  10,   13), S(   4,   19), S(   4,   20), S(  -1,   24),
        S( -16,   13), S(  -9,   22), S(  -2,   16), S(  -8,   12), S(  -6,   12), S(   0,   10), S(  -3,   16), S( -10,   17),
        S( -22,   -7), S(  -9,    3), S( -13,   11), S(  -4,    6), S(  -8,    3), S( -13,    8), S( -13,   10), S( -11,    2),
        S( -22,  -24), S(   4,  -28), S(  -8,   -9), S(   0,  -16), S(  -2,  -19), S( -10,  -12), S(  -1,  -18), S( -17,  -14),
        S( -60,  -26), S( -15,  -30), S(   4,  -27), S(   4,  -27), S(   2,  -28), S(  -8,  -18), S( -12,  -26), S( -18,  -25),
        S( -17,  -35), S( -24,  -17), S(   8,  -25), S(  16,  -32), S(   7,  -29), S(   2,  -24), S(   1,  -27), S(   1,  -25),
    },
    {
        S(   5,   27), S(  37,   15), S(  20,   31), S(  12,   30), S(  18,   31), S(  37,    5), S(  30,   -8), S( -21,   39),
        S(  39,  -12), S(  22,    8), S(  11,   20), S( -20,   44), S(  11,   25), S(  16,   -3), S(  17,   -8), S(  12,   -3),
        S(   7,    9), S(  16,   11), S(   1,   15), S( -20,   43), S(   0,   30), S(  18,   -5), S(  21,   -9), S(  16,  -10),
        S(   1,    4), S( -10,   20), S( -10,   17), S( -19,   32), S( -19,   35), S(   1,   15), S(   0,   21), S(   1,    6),
        S( -17,   30), S(  -9,   18), S( -14,   18), S( -16,   29), S( -22,   45), S( -10,   31), S(   5,   -1), S(  -4,   10),
        S(  -7,   -9), S(   1,  -18), S(  -6,   -5), S( -19,   17), S(  -7,   12), S(  -7,   16), S(   8,   -3), S(   5,   -5),
        S(  -2,  -60), S(   5,  -70), S(  -2,  -40), S(  -5,  -16), S(  -8,   -7), S(   7,  -30), S(  -1,  -24), S(  -3,  -14),
        S(   5,  -61), S(  -7,  -89), S( -17,  -46), S( -11,  -39), S(  -2,  -36), S( -10,  -32), S( -17,  -20), S( -10,  -14),
    },
    {
        S(  20, -163), S(  32,   48), S( -21,   64), S( -22,   59), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  14,  -11), S(   0,   88), S( -10,   66), S( -36,   73), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  36,   31), S(   1,   95), S( -41,   57), S(-140,   31), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S( -21,   26), S( -29,   74), S( -65,   46), S(-142,   21), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S( -49,   22), S( -40,   53), S( -75,   28), S(-110,    9), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(   3,    4), S(   0,   28), S( -33,    6), S( -58,  -14), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  59,  -23), S(  47,    3), S(  18,  -26), S( -11,  -47), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  60,  -56), S(  59,  -22), S(  18,  -50), S(  15,  -90), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
    },
};

constexpr ScorePair MOBILITY[4][28] = {
    {S(  -6,  -25), S( -30,  -62), S( -21,  -15), S(  -9,    1), S(   0,   12), S(   6,   22), S(  14,   25), S(  21,   28), S(  32,   17), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S(  -5,  -33), S( -43,  -59), S( -23,  -32), S( -13,  -10), S(  -6,    0), S(  -1,   11), S(   0,   18), S(   4,   21), S(   3,   24), S(   7,   23), S(   5,   26), S(  13,   14), S(  20,   15), S(  41,  -19), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S( -29,  -61), S( -58,  -64), S( -18,  -44), S( -10,  -27), S(  -2,  -16), S(   3,   -4), S(   3,    7), S(   5,   13), S(   5,   17), S(   8,   23), S(  10,   31), S(  10,   38), S(  10,   44), S(  14,   44), S(  49,   13), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S(  -7,   37), S( -21,  -11), S( -16, -107), S( -43, -129), S( -25, -119), S( -14,  -64), S(  -6,  -51), S(  -5,  -24), S(  -5,   -9), S(  -4,    7), S(  -3,   16), S(  -1,   22), S(   1,   29), S(   2,   36), S(   3,   41), S(   2,   47), S(   3,   45), S(   4,   46), S(   8,   43), S(   8,   42), S(  13,   37), S(  21,   20), S(  13,   31), S(  28,    7), S(  21,    9), S(  21,   -7), S(  12,  -12), S( -32,   36)}
};

constexpr ScorePair THREAT_BY_PAWN[6] = {S( -17,   -3), S(  75,   39), S(  64,   74), S(  73,   53), S(  58,   19), S(   0,    0)};
constexpr ScorePair THREAT_BY_KNIGHT[2][6] = {
    {S(   5,   37), S(   9,   62), S(  48,   33), S(  91,    7), S(  51,    3), S(   0,    0)},
    {S(  -8,   10), S(  12,   52), S(  37,   32), S(  73,   41), S(  52,   41), S(   0,    0)}
};
constexpr ScorePair THREAT_BY_BISHOP[2][6] = {
    {S(   2,   35), S(  35,   45), S(  14,   24), S(  53,   39), S(  54,   66), S(   0,    0)},
    {S(  -7,    4), S(  18,   22), S(  -4,    6), S(  58,   67), S(  51,   99), S(   0,    0)}
};
constexpr ScorePair THREAT_BY_ROOK[2][6] = {
    {S(  -3,   52), S(  34,   57), S(  47,   47), S( -10,  -57), S(  69,   -8), S(   0,    0)},
    {S( -12,    9), S(   7,   16), S(  18,    5), S(   8,  -96), S(  62,   84), S(   0,    0)}
};
constexpr ScorePair THREAT_BY_QUEEN[2][6] = {
    {S(   6,   27), S(  24,   34), S(  17,   64), S(  12,   19), S(   6,  -60), S( 160,   98)},
    {S(  -6,   20), S(   2,    5), S( -10,   31), S(  -1,   -9), S( -14,  -47), S( 108,  182)}
};
constexpr ScorePair THREAT_BY_KING[6] = {S(  58,    9), S(  25,   41), S( 105,   29), S(  83,    5), S(   0,    0), S(   0,    0)};
constexpr ScorePair KNIGHT_HIT_QUEEN = S(   8,   -1);
constexpr ScorePair BISHOP_HIT_QUEEN = S(  16,   16);
constexpr ScorePair ROOK_HIT_QUEEN = S(  21,   -6);
constexpr ScorePair PUSH_THREAT = S(  13,   19);
constexpr ScorePair RESTRICTED_SQUARES = S(   2,    3);

constexpr ScorePair ISOLATED_PAWN[8] = {S(  -2,    2), S(  -5,  -16), S(  -6,  -15), S( -10,  -15), S( -14,  -15), S(  -9,   -8), S(  -6,  -10), S(  -6,    0)};
constexpr ScorePair DOUBLED_PAWN[8] = {S(   1,  -54), S(   3,  -39), S(  -3,  -25), S(  -9,  -11), S( -15,    1), S(  -4,  -21), S(   8,  -44), S(   7,  -47)};
constexpr ScorePair BACKWARDS_PAWN[8] = {S(   0,    0), S(  -7,  -14), S(   1,  -16), S(  -6,  -13), S(   7,  -23), S(  11,   25), S(   0,    0), S(   0,    0)};
constexpr ScorePair PAWN_PHALANX[8] = {S(   0,    0), S(   4,   -6), S(  12,   -3), S(  18,   11), S(  39,   35), S(  70,  138), S(  17,  190), S(   0,    0)};
constexpr ScorePair DEFENDED_PAWN[8] = {S(   0,    0), S(   0,    0), S(  17,    4), S(  11,    9), S(  18,   23), S(  42,   59), S(  80,  122), S(   0,    0)};
constexpr ScorePair CANDIDATE_PASSER[2][8] = {
    {S(   0,    0), S( -24,   -7), S(  -9,  -13), S(   1,    4), S(  17,   25), S(  46,   75), S(   0,    0), S(   0,    0)},
    {S(   0,    0), S( -14,   -8), S(  -9,   12), S(  -4,   23), S(   7,   38), S(  30,  128), S(   0,    0), S(   0,    0)}
};

constexpr ScorePair PASSED_PAWN[2][2][8] = {
    {
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -36,  -27), S( -14,   26), S(  25,  134), S( 138,  201), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -28,  -39), S(  -3,  -13), S(  33,   48), S(  76,   75), S(   0,    0)}
    },
    {
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -28,  -43), S(  -9,  -10), S(  28,   53), S(  36,   41), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -27,  -56), S(  -7,  -29), S(  17,   21), S(  -1,   14), S(   0,    0)}
    }
};
constexpr ScorePair OUR_PASSER_PROXIMITY[8] = {S(  78,  117), S( 136,   64), S(  51,   68), S(  -1,   59), S(  -1,   36), S(   2,   23), S(  17,   12), S(   2,   18)};
constexpr ScorePair THEIR_PASSER_PROXIMITY[8] = {S( -53,    7), S(   7,   -4), S(  29,   -1), S(  23,   25), S(  13,   60), S(  13,   76), S(  20,   78), S(  17,   66)};
constexpr ScorePair PASSER_DEFENDED_PUSH[8] = {S(   0,    0), S(   0,    0), S(   0,    0), S(   8,    7), S(  10,   22), S(  34,   35), S(  67,   90), S(   0,    0)};

constexpr ScorePair PAWN_STORM[2][4][8] = {
    {
        {S(  29,   18), S( -70, -177), S(   1,  -74), S(  37,   -5), S(  19,   16), S(   4,   15), S(  -2,   24), S(   0,    0)},
        {S(  20,    8), S(  54, -198), S(  66, -105), S(  23,  -13), S(   8,    5), S( -23,   11), S(   3,    7), S(   0,    0)},
        {S(   5,    3), S(  32, -175), S( 101, -100), S(  60,  -21), S(   7,    6), S( -16,    7), S(  -4,    3), S(   0,    0)},
        {S(   5,  -11), S( 111, -160), S( 116, -102), S(  56,  -17), S(  10,   -3), S( -25,   -8), S( -28,   -7), S(   0,    0)}
    },
    {
        {S(   0,    0), S(   0,    0), S(  76,   36), S(  -7,   23), S(   3,   28), S(  13,   33), S(  26,   25), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S( 144,   40), S( -26,   21), S( -11,   30), S(  -4,   41), S(  16,   29), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S( 134,    4), S(  14,   15), S(  -3,   24), S(  -5,   32), S(  64,    1), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S( 133,  -23), S(  17,   16), S( -18,   16), S(  -3,    6), S( -39,  -22), S(   0,    0)}
    }
};
constexpr ScorePair PAWN_SHIELD[4][8] = {
    {S(  53,   14), S(   7,   29), S( -13,   20), S(  28,   13), S(  36,    2), S(   3,    0), S(   3,   -6), S(   0,    0)},
    {S(  41,   11), S( -28,   21), S(   7,   11), S(  39,   -3), S(  36,  -19), S(   0,  -26), S( -33,  -50), S(   0,    0)},
    {S(  24,    5), S(   9,   38), S(   3,   -9), S(  34,  -31), S(  30,  -35), S(   6,  -21), S( -64,  -45), S(   0,    0)},
    {S(  11,    1), S( -25,  -16), S(   7,  -23), S(  27,  -32), S(  21,  -28), S(  32,  -16), S( -43,    0), S(   0,    0)}
};
constexpr ScorePair SAFE_KNIGHT_CHECK = S( 101,   -2);
constexpr ScorePair SAFE_BISHOP_CHECK = S(  74,   22);
constexpr ScorePair SAFE_ROOK_CHECK = S( 114,    9);
constexpr ScorePair SAFE_QUEEN_CHECK = S(  70,   29);
constexpr ScorePair UNSAFE_KNIGHT_CHECK = S(  18,    0);
constexpr ScorePair UNSAFE_BISHOP_CHECK = S(  39,    9);
constexpr ScorePair UNSAFE_ROOK_CHECK = S(  43,    1);
constexpr ScorePair UNSAFE_QUEEN_CHECK = S(  20,   19);
constexpr ScorePair QUEENLESS_ATTACK = S( -93,  383);
constexpr ScorePair KING_ATTACKER_WEIGHT[4] = {S(  55,   -4), S(  21,    0), S(  21,  -12), S(   5,  -89)};
constexpr ScorePair KING_ATTACKS = S(   8,   -1);
constexpr ScorePair WEAK_KING_RING = S(   4,    1);
constexpr ScorePair KING_FLANK_ATTACKS[2] = {S(  13,   -5), S(   3,    0)};
constexpr ScorePair KING_FLANK_DEFENSES[2] = {S(  -8,    0), S(  -6,    4)};
constexpr ScorePair SAFETY_OFFSET = S(  75,  -21);

constexpr ScorePair MINOR_BEHIND_PAWN = S(   2,   10);
constexpr ScorePair KNIGHT_OUTPOST = S(  17,   18);
constexpr ScorePair BISHOP_PAWNS[7] = {S(  11,    3), S(   3,   14), S(   2,   10), S(   0,    3), S(  -3,   -2), S(  -7,   -8), S( -10,  -19)};
constexpr ScorePair BISHOP_PAIR = S(  21,   69);
constexpr ScorePair LONG_DIAG_BISHOP = S(  14,   10);
constexpr ScorePair ROOK_OPEN[2] = {S(  33,   -2), S(  20,    0)};

constexpr ScorePair TEMPO = S(  25,   17);

constexpr ScorePair COMPLEXITY_PAWNS = S(   0,   10);
constexpr ScorePair COMPLEXITY_PAWNS_BOTH_SIDES = S(   0,  147);
constexpr ScorePair COMPLEXITY_PAWN_ENDGAME = S(   0,  146);
constexpr ScorePair COMPLEXITY_OFFSET = S(   0, -232);

#undef S
// clang-format on

}
