#pragma once

#include "../defs.h"

namespace eval
{

#define S(mg, eg) PackedScore(mg, eg)

constexpr PackedScore MATERIAL[6] = {S(  61,  131), S( 290,  427), S( 313,  436), S( 394,  780), S( 748, 1616), S(0, 0)};

constexpr PackedScore PSQT[6][64] = {
    {
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  54,   77), S(  31,   90), S(  30,   99), S(  64,   71), S(  69,   65), S(  42,   85), S(  31,  102), S(  56,   84),
        S(  20,    4), S(  -4,   34), S(  17,   -5), S(  25,  -28), S(  12,  -23), S(   6,  -10), S( -19,   29), S(   0,   12),
        S(  14,    5), S(  -4,   12), S(  16,  -22), S(  15,  -27), S(   1,  -25), S(  -1,  -13), S( -10,   10), S( -10,    8),
        S(   5,   -2), S(  -7,   16), S(  13,  -25), S(  18,  -19), S(  11,  -18), S(  -1,  -11), S( -15,   12), S( -13,   -1),
        S(  -1,   -5), S(   7,    9), S(   4,   -3), S(   1,   -3), S(  -6,   -4), S( -10,   -7), S( -23,   10), S( -25,   -2),
        S(   9,   -6), S(  23,    9), S(  32,  133), S(   9,    0), S(  -3,   -8), S(  -5,   -7), S( -15,   14), S( -16,    1),
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
    },
    {
        S( -75,  -95), S( -79,  -25), S( -29,  -17), S(   2,  -11), S( -32,    1), S( -61,    4), S(-107,    7), S( -95,  -51),
        S( -18,  -13), S(  17,    1), S(  28,   -3), S(   2,    5), S(   4,   10), S(   1,   11), S(  -3,   14), S( -13,    1),
        S(   6,   -5), S(   3,    1), S(  48,  -12), S(  31,    9), S(  18,   16), S(  16,   12), S(   4,    5), S(  -8,    2),
        S(  28,    3), S(  27,   13), S(  44,   12), S(  26,   21), S(  27,   24), S(  31,   12), S(  19,    4), S(   9,   11),
        S(  10,   16), S(  14,   16), S(  23,   16), S(  19,   27), S(  24,   19), S(  19,   17), S(  21,    2), S(   7,    4),
        S(  15,   -2), S(  20,    0), S(  19,   -1), S(  15,   15), S(   7,   14), S(   3,   -1), S(   4,   -6), S(  -8,   -6),
        S(   8,    0), S(  13,   -7), S(   9,   -4), S(  11,    0), S(   5,    0), S(  -5,   -4), S(  -5,   -7), S( -17,   -7),
        S(  -6,  -14), S( -10,   -8), S(  -1,  -10), S(   3,    2), S(  -3,   -1), S( -19,   -8), S( -13,  -13), S( -47,   -4),
    },
    {
        S( -51,  -11), S( -33,    7), S(  -5,   -5), S( -71,    9), S( -66,   16), S( -53,    4), S( -26,    6), S( -33,    6),
        S( -19,   -8), S( -47,    7), S( -10,    2), S(  -4,   -1), S( -19,    9), S(   2,    0), S( -14,   -5), S(  -4,   -5),
        S(  13,   12), S(   9,    5), S(  30,    2), S(   9,    9), S(  18,    3), S(  -1,   -1), S(   9,    7), S(   4,    2),
        S( -11,    6), S(   5,   10), S(   8,   13), S(  18,   17), S(  18,   23), S(  17,    8), S(   3,   11), S(  -9,    5),
        S(  18,   -7), S(   2,   10), S(   9,   10), S(  13,   14), S(  20,   12), S(  -1,   16), S(   1,    6), S(   0,    0),
        S(  22,   -9), S(  26,   -6), S(   7,   -5), S(  10,   11), S(   2,    6), S(   2,   -2), S(  15,    2), S(   2,   -7),
        S(  30,  -18), S(  22,  -23), S(  27,   -8), S(   6,   -3), S(   0,    0), S(  11,  -16), S(   3,  -25), S(  12,  -10),
        S(  29,  -34), S(  18,  -14), S(  -8,    0), S(  18,   -4), S(   1,   -3), S(   0,    2), S(  13,   -4), S(   5,  -16),
    },
    {
        S(  17,    8), S( -20,   33), S(   1,   21), S(  -6,   16), S( -19,   23), S( -17,   29), S(  -4,   20), S(   1,   17),
        S(  28,    2), S(  32,    8), S(  16,   16), S(   8,   13), S(  16,   16), S(   2,   28), S(  -2,   23), S(   0,   17),
        S(  -2,    5), S(  28,    4), S(  11,    7), S(  19,    4), S(   1,   10), S(  -4,   20), S(   8,   15), S( -12,   18),
        S(   1,    6), S(  -3,   15), S(   7,   10), S(   9,    1), S(   2,    9), S(   5,   12), S(   2,   13), S( -10,   15),
        S( -10,    1), S(   9,    5), S( -11,   10), S(   6,    1), S(  -4,    2), S(  -9,    6), S( -11,    7), S( -12,    5),
        S(   7,  -22), S(  21,  -23), S(   0,  -12), S(   3,  -16), S(  -9,  -10), S( -13,  -10), S( -12,  -10), S( -17,   -9),
        S(  -8,  -25), S(  20,  -34), S(   4,  -20), S(   4,  -21), S(  -3,  -17), S(  -4,  -15), S( -14,  -13), S( -17,  -19),
        S(  -8,  -37), S(  -5,  -16), S(   0,  -16), S(   8,  -24), S(   1,  -21), S(  -7,  -14), S(  -7,  -18), S(  -8,  -17),
    },
    {
        S(  -1,   -5), S(  35,  -29), S( -29,   44), S( -15,   28), S(   7,    3), S( -28,   28), S( -42,   15), S( -32,   16),
        S(  38,    6), S(  -8,   22), S( -14,   35), S( -40,   70), S( -25,   48), S(  -4,   14), S(  -2,   -7), S(   6,   -6),
        S(   5,   20), S(   7,   11), S(  -2,   32), S( -17,   34), S(  -1,   21), S(   4,   13), S(   5,  -10), S(  16,  -14),
        S(   5,   19), S(  -3,   35), S(   5,   20), S( -13,   40), S( -12,   37), S(   9,    6), S(   7,    5), S(   5,   -3),
        S(  10,   10), S(  11,   12), S(  -1,   20), S(   4,   28), S(  -5,   34), S(  -3,   17), S(   5,   10), S(   5,   -5),
        S(  16,  -20), S(  14,  -10), S(   7,    2), S(  -4,   14), S(  -1,    7), S(   1,    5), S(  12,  -20), S(  14,  -30),
        S(   9,  -48), S(  14,  -66), S(  11,  -37), S(   9,  -19), S(   7,  -12), S(   8,  -27), S(   8,  -33), S(  12,  -49),
        S(  12,  -57), S(  -9,  -53), S( -14,  -29), S(   0,  -28), S(   1,  -28), S(  -4,  -23), S(  -7,  -26), S(  -8,  -24),
    },
    {
        S( -32,  -51), S( -34,   11), S( -92,   -5), S(-104,   19), S(   7,   -6), S(   7,   -6), S(   7,   -6), S(   7,   -6),
        S( -57,   33), S(   0,   58), S( -27,   35), S( -15,   36), S(   7,   -6), S(   7,   -6), S(   7,   -6), S(   7,   -6),
        S(  27,   16), S(  66,   44), S(  53,   24), S(   3,   49), S(   7,   -6), S(   7,   -6), S(   7,   -6), S(   7,   -6),
        S( -17,   15), S(  13,   40), S(  -2,   20), S( -42,   40), S(   7,   -6), S(   7,   -6), S(   7,   -6), S(   7,   -6),
        S( -42,    5), S( -14,   27), S(  -9,    2), S( -43,   25), S(   7,   -6), S(   7,   -6), S(   7,   -6), S(   7,   -6),
        S(  -2,  -13), S(  19,    5), S(  -2,  -17), S( -21,    5), S(   7,   -6), S(   7,   -6), S(   7,   -6), S(   7,   -6),
        S(  32,  -27), S(  33,   -6), S(  10,  -29), S( -15,  -10), S(   7,   -6), S(   7,   -6), S(   7,   -6), S(   7,   -6),
        S(  20,  -54), S(  25,  -18), S(  -3,  -40), S(  -9,  -32), S(   7,   -6), S(   7,   -6), S(   7,   -6), S(   7,   -6),
    },
};

constexpr PackedScore MOBILITY[4][28] = {
    {S( -33,  -57), S( -36,  -43), S( -15,  -13), S(  -6,    3), S(   4,   11), S(   9,   21), S(  17,   24), S(  26,   28), S(  36,   20), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S( -45,  -94), S( -33,  -56), S( -20,  -26), S( -13,   -8), S(  -3,    1), S(   3,   11), S(   5,   19), S(   9,   23), S(  10,   25), S(  13,   26), S(  15,   26), S(  21,   20), S(  22,   26), S(  29,    6), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S( -60,  -67), S( -30,  -78), S( -15,  -48), S(  -3,  -27), S(  -1,  -11), S(  -2,   -1), S(  -1,    6), S(   2,   12), S(   5,   14), S(   9,   19), S(   8,   28), S(  10,   34), S(  14,   38), S(  21,   37), S(  31,   34), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S( -28,  120), S( -56,   28), S( -79,  -40), S( -24, -187), S( -22,  -82), S( -15,  -31), S(  -6,  -42), S(  -4,  -20), S(  -3,   -1), S(  -1,    8), S(   2,   12), S(   5,   15), S(   5,   26), S(   9,   25), S(   9,   32), S(  11,   34), S(  11,   37), S(  13,   39), S(  13,   38), S(  18,   31), S(  25,   22), S(  33,    4), S(  29,   13), S(  39,  -10), S(  41,  -13), S(  23,  -16), S(  16,  -30), S( -78,   -8)}
};

constexpr PackedScore THREAT_BY_PAWN[6] = {S(   5,  -19), S(  66,   28), S(  61,   58), S(  79,   26), S(  73,    3), S(   0,    0)};
constexpr PackedScore THREAT_BY_KNIGHT[2][6] = {
    {S(   7,   29), S(  20,   39), S(  41,   43), S(  74,   14), S(  58,  -32), S(   0,    0)},
    {S(  -7,    8), S(   9,   38), S(  28,   29), S(  65,   32), S(  58,   -4), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_BISHOP[2][6] = {
    {S(  -1,   35), S(  41,   32), S(   2,   47), S(  69,   14), S(  70,   53), S(   0,    0)},
    {S(  -4,    5), S(  18,   22), S( -13,    2), S(  44,   44), S(  46,  119), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_ROOK[2][6] = {
    {S(   0,   41), S(  18,   59), S(  27,   55), S(  12,  -14), S(  74,   14), S(   0,    0)},
    {S(  -8,    7), S(   2,   15), S(  13,    3), S(   9,  -55), S(  67,   43), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_QUEEN[2][6] = {
    {S(   6,    7), S(  24,   20), S(  10,   48), S(  18,   18), S(  12,  -57), S(  92,   47)},
    {S(  -3,   11), S(   0,    5), S(  -6,   15), S(  -5,    5), S( -15,  -80), S( 119,   37)}
};
constexpr PackedScore THREAT_BY_KING[6] = {S( -25,   46), S(   9,   50), S(  31,   39), S(  84,    8), S(   0,    0), S(   0,    0)};
constexpr PackedScore PUSH_THREAT = S(  14,   19);

constexpr PackedScore ISOLATED_PAWN[8] = {S(  -9,    6), S(  -3,  -15), S( -12,   -8), S( -10,  -16), S( -12,  -15), S(  -8,   -7), S(  -3,  -13), S( -12,    7)};
constexpr PackedScore DOUBLED_PAWN[8] = {S(   2,  -61), S(  15,  -37), S(   1,  -28), S(   0,  -19), S(  -4,  -13), S(  -4,  -21), S(  10,  -41), S(  10,  -74)};
constexpr PackedScore BACKWARDS_PAWN[8] = {S(   0,    0), S(  -8,  -13), S(  -2,  -13), S(  -9,  -11), S(   0,  -17), S(  28,    0), S(   0,    0), S(   0,    0)};
constexpr PackedScore PAWN_PHALANX[8] = {S(   0,    0), S(   5,   -3), S(  11,   -2), S(  20,    7), S(  42,   40), S( 113,  213), S( -15,  355), S(   0,    0)};
constexpr PackedScore DEFENDED_PAWN[8] = {S(   0,    0), S(   0,    0), S(  19,    7), S(  11,    7), S(  16,   21), S(  28,   61), S( 136,   73), S(   0,    0)};
constexpr PackedScore CANDIDATE_PASSER[2][8] = {
    {S(   0,    0), S( -34,  -14), S( -20,   -6), S(   0,   27), S(  28,   52), S(  62,   87), S(   0,    0), S(   0,    0)},
    {S(   0,    0), S( -20,   -7), S( -10,   14), S(  -5,   29), S(  19,   41), S(  32,  154), S(   0,    0), S(   0,    0)}
};

constexpr PackedScore PASSED_PAWN[2][2][8] = {
    {
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -40,  -40), S( -16,   25), S(   2,  152), S(  52,  226), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -27,  -54), S(   7,  -23), S(  32,   21), S(  61,   29), S(   0,    0)}
    },
    {
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -32,  -56), S(   1,  -24), S(  39,    9), S(  66,   -3), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -32,  -61), S(   0,  -35), S(  13,  -10), S( -20,  -10), S(   0,    0)}
    }
};
constexpr PackedScore OUR_PASSER_PROXIMITY[8] = {S(   0,    0), S(  56,   83), S(  16,   67), S(   2,   44), S(   3,   31), S(  10,   23), S(  17,   20), S(  12,   19)};
constexpr PackedScore THEIR_PASSER_PROXIMITY[8] = {S(   0,    0), S( -63,    8), S(  18,    1), S(  18,   26), S(  22,   46), S(  18,   78), S(  22,   79), S(  24,   69)};

constexpr PackedScore PAWN_STORM[2][4][8] = {
    {
        {S(  30,   41), S(-112,  -51), S( -33,   15), S(  26,   14), S(  11,   26), S( -10,   34), S( -17,   34), S(   0,    0)},
        {S(  20,   14), S(  63, -126), S(  91,  -42), S(  44,   -4), S(  12,    4), S( -29,   13), S(  -9,   13), S(   0,    0)},
        {S(   3,   28), S( 118,  -91), S( 109,  -16), S(  54,   10), S(  10,   23), S( -17,   29), S( -27,   34), S(   0,    0)},
        {S(  10,   13), S( 162,  -67), S( 102,  -11), S(  42,   17), S(  -2,   24), S( -24,   18), S( -33,   28), S(   0,    0)}
    },
    {
        {S(   0,    0), S(   0,    0), S(  19,   45), S( -29,   27), S( -10,   32), S(  11,   34), S( -16,   33), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S( 102,    3), S(   9,    8), S(  -8,   18), S(  -7,   19), S(  -8,   13), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(  89,   11), S(   3,   16), S(   0,   29), S(  17,   30), S( -11,   31), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(  37,   10), S(  21,   23), S( -28,   21), S( -11,   17), S(  -7,   20), S(   0,    0)}
    }
};
constexpr PackedScore PAWN_SHIELD[4][8] = {
    {S(  39,   35), S( -24,   51), S( -28,   44), S(  10,   39), S(  20,   32), S( -30,    1), S( -79,  -16), S(   0,    0)},
    {S(  49,    9), S( -29,   20), S(  -7,   12), S(  28,    7), S(  27,   -3), S(  -3,  -15), S( -34,  -32), S(   0,    0)},
    {S(  12,    2), S(   5,  133), S(  -7,    3), S(   8,  -16), S(   8,  -17), S(  -2,  -25), S( -53,  -36), S(   0,    0)},
    {S(  15,   21), S(   2,   18), S( -14,   20), S(   9,   16), S(  18,   13), S(  13,   11), S( -78,   12), S(   0,    0)}
};
constexpr PackedScore SAFE_KNIGHT_CHECK = S( 116,    6);
constexpr PackedScore SAFE_BISHOP_CHECK = S(  59,   19);
constexpr PackedScore SAFE_ROOK_CHECK = S( 102,   19);
constexpr PackedScore SAFE_QUEEN_CHECK = S(  53,   23);
constexpr PackedScore UNSAFE_KNIGHT_CHECK = S(  15,    3);
constexpr PackedScore UNSAFE_BISHOP_CHECK = S(  35,   11);
constexpr PackedScore UNSAFE_ROOK_CHECK = S(  38,    3);
constexpr PackedScore UNSAFE_QUEEN_CHECK = S(  18,    1);
constexpr PackedScore QUEENLESS_ATTACK = S(-169,  132);
constexpr PackedScore KING_ATTACKER_WEIGHT[4] = {S(  52,   -4), S(  24,   -2), S(  25,  -12), S(   6,  -12)};
constexpr PackedScore KING_ATTACKS = S(  16,   -2);
constexpr PackedScore WEAK_KING_RING = S(  16,   -2);
constexpr PackedScore SAFETY_PINNED[5] = {S(  30,   -4), S( -50,  -37), S( -67,  -68), S( -73,  -56), S( -14,  159)};
constexpr PackedScore SAFETY_DISCOVERED = S(  10,   11);
constexpr PackedScore SAFETY_OFFSET = S(  21,  203);

constexpr PackedScore MINOR_BEHIND_PAWN = S(   6,   12);
constexpr PackedScore KNIGHT_OUTPOST = S(  23,   15);
constexpr PackedScore BISHOP_PAWNS[7] = {S(   4,   20), S(   6,   18), S(   4,   11), S(   1,    4), S(  -3,   -5), S(  -3,  -18), S(  -8,  -30)};
constexpr PackedScore BISHOP_PAIR = S(  20,   60);
constexpr PackedScore LONG_DIAG_BISHOP = S(  16,    8);
constexpr PackedScore ROOK_OPEN[2] = {S(  26,    4), S(  13,    5)};

constexpr PackedScore TEMPO = S(  32,   34);

constexpr PackedScore COMPLEXITY_PAWNS = S(   0,    9);
constexpr PackedScore COMPLEXITY_PASSERS = S(   0,   -1);
constexpr PackedScore COMPLEXITY_PAWNS_BOTH_SIDES = S(   0,   66);
constexpr PackedScore COMPLEXITY_PAWN_ENDGAME = S(   0,   78);
constexpr PackedScore COMPLEXITY_OFFSET = S(   0, -128);

#undef S


}