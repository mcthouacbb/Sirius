#pragma once

#include "../defs.h"

namespace eval
{

// clang-format off
#define S(mg, eg) ScorePair(mg, eg)

constexpr ScorePair MATERIAL[6] = {S(  91,  134), S( 388,  412), S( 422,  417), S( 514,  801), S( 986, 1504), S(0, 0)};

constexpr ScorePair PSQT[6][64] = {
    {
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S( 101,   75), S(  14,   67), S(  52,   49), S(  76,   69), S(  68,   37), S(  43,   55), S(  37,   69), S(  99,   55),
        S(   4,    3), S(  29,   -1), S(  -4,  -17), S(  18,  -22), S( -13,  -28), S( -23,  -11), S(  -3,  -14), S(  -1,   -1),
        S(   0,   18), S(  10,   13), S(   5,   -8), S(   8,  -17), S(   9,  -21), S(   5,    3), S(   0,    8), S(  -8,    8),
        S(  -9,    3), S(  -1,    9), S(  18,  -22), S(  14,  -11), S(  12,  -12), S(   7,   -1), S( -10,   16), S( -16,    3),
        S( -14,    4), S(  26,   -2), S( -10,   -8), S(   1,    6), S( -10,   10), S(  -6,    8), S(  -9,   15), S( -19,    5),
        S(  -4,    1), S(  32,   -7), S(  21,  -35), S(  -2,    7), S(  -7,   13), S(  -6,    7), S(   3,    6), S( -18,    6),
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
    },
    {
        S(-141,  -26), S(  -3,   15), S( -95,   42), S(  38,   27), S(  57,    6), S( -31,   -5), S( -88,  -40), S(-119,  -49),
        S( -26,    0), S( -45,   31), S(  24,   13), S(   5,   34), S(  32,   28), S(  27,   15), S(  -5,    5), S(  -6,   -3),
        S(  25,   19), S(   3,   14), S(  45,   12), S(  36,   23), S(  15,   30), S(  40,   10), S(  17,    3), S(   1,  -13),
        S(  30,   -7), S(  24,   21), S(  31,   24), S(  23,   31), S(  31,   28), S(  14,   31), S(  24,    6), S(  32,  -12),
        S(  11,   -1), S(  20,   19), S(  21,   12), S(  13,   38), S(  16,   25), S(  17,   27), S(  16,   -1), S(   5,   -5),
        S(  -1,  -10), S(  18,  -13), S(  14,    0), S(  17,   15), S(   9,   12), S(  -1,    6), S(   3,   -3), S(  -6,  -24),
        S(   5,    1), S(   6,  -27), S(   6,  -16), S(   5,   -7), S(   1,    2), S(  -3,  -25), S( -15,  -12), S(   2,  -60),
        S( -79,  -35), S( -13,  -28), S( -10,  -14), S(   4,  -25), S(  -1,  -23), S(   0,  -36), S( -16,  -31), S( -35,  -55),
    },
    {
        S( -45,   -5), S( -33,   42), S( -64,   25), S(  21,   -3), S(  -5,    6), S( -48,    4), S( -61,   29), S( -57,  -16),
        S( -21,    5), S( -39,   14), S(   3,   21), S( -44,   30), S(  -2,   15), S(  -4,    8), S( -14,  -15), S( -23,   10),
        S(  17,    0), S(  13,    3), S(  13,   -3), S(  11,   14), S(  20,   18), S(  11,  -14), S(   6,   -2), S(  -1,   -6),
        S(   2,    0), S(   1,   14), S(  15,   15), S(  22,   20), S(  21,   28), S(   7,   25), S(  13,    7), S(   7,   -3),
        S(  12,   -7), S(   4,    5), S(   3,   23), S(  12,   15), S(  11,   23), S(  11,   15), S(   5,   22), S(  11,    1),
        S(   7,    2), S(  11,    1), S(   2,  -17), S(   6,   13), S(   7,   -4), S(   9,   -4), S(  18,    9), S(   5,    2),
        S(  20,  -15), S(  17,  -35), S(  25,  -26), S(   3,  -11), S(  -3,   -6), S(  13,  -20), S(   6,  -23), S(  26,   -6),
        S(  17,  -64), S(  18,  -41), S( -22,  -12), S(  -6,  -21), S(   7,  -23), S( -17,   -2), S(  17,  -28), S(  17,  -38),
    },
    {
        S(  41,    3), S(  -3,   22), S(  34,   23), S(  -3,   37), S(  25,   25), S(   9,   25), S(  37,   11), S(  38,   17),
        S( -18,   32), S(  -7,   27), S(  18,   28), S(  15,   38), S(  16,   36), S(  13,   38), S(  17,   28), S(  20,   30),
        S( -22,   30), S(   9,   26), S(  -2,   36), S(  24,   22), S(  13,   30), S(  -7,   38), S(   7,   30), S(   4,   32),
        S(   5,    3), S( -12,   23), S(  -2,   29), S(  -5,   17), S(  -4,   20), S( -10,   29), S(   0,   24), S(  -3,   19),
        S( -30,    7), S( -28,   17), S( -18,   13), S( -17,   11), S( -12,    1), S(  -4,    3), S( -20,   13), S(   2,   -6),
        S( -28,  -36), S(  -6,  -27), S(  -6,  -31), S( -15,  -12), S(  -5,  -19), S( -13,  -16), S(   4,  -29), S( -11,  -30),
        S( -62,  -46), S(  -2,  -51), S(  16,  -49), S(   2,  -35), S(   5,  -38), S(   0,  -30), S(   7,  -46), S(  -7,  -45),
        S(  -4,  -55), S( -27,  -23), S(  12,  -41), S(  26,  -49), S(  13,  -40), S(   7,  -27), S(  14,  -43), S(  10,  -44),
    },
    {
        S(  -8,   58), S( -20,   77), S(  10,    8), S(  20,    6), S(  50,    0), S(  47,   -8), S(  37,   -3), S( -17,   31),
        S(  51,  -10), S(  -9,   19), S(  36,  -26), S(  35,  -18), S(  -4,   42), S(   3,   23), S(  10,   -6), S(  -1,   13),
        S( -15,   36), S(  13,    9), S( -13,   40), S( -21,   60), S(  22,   16), S(  -3,   31), S( -22,   39), S(   1,    7),
        S(  -3,   12), S(  -1,   17), S( -10,   32), S( -26,   48), S( -22,   49), S(   4,   13), S(  -3,   -2), S( -15,   33),
        S(  -9,   18), S(  -3,   -5), S( -20,   40), S( -24,   31), S( -24,   55), S( -12,   39), S(   3,   15), S(  -2,    1),
        S(   3,  -34), S(   5,  -31), S(  -1,  -10), S( -19,    9), S(  -2,   -3), S( -10,   20), S(  15,  -29), S(   6,   21),
        S( -14,  -88), S(  24, -100), S(   7,  -56), S(  -6,  -20), S(  -4,  -20), S(  16,  -39), S(  -3,  -11), S(  -4,  -16),
        S(   2,  -54), S( -11,  -97), S( -12,  -76), S(  -7,  -45), S(   1,  -48), S(  -7,  -37), S( -14,  -16), S(  17,  -60),
    },
    {
        S(-258,    8), S(  48,   70), S( 140,   58), S( 146,   74), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(-132,   61), S(  43,   85), S(  65,   85), S( 100,   92), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S( 124,  -46), S( 256,  -37), S(  -4,   70), S(-100,   70), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S( -25,   -2), S( -24,   45), S( -70,   58), S(-164,   70), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S( -21,  -23), S( -55,   19), S( -55,   26), S(-137,   41), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(   4,  -52), S(  -3,  -18), S( -55,    6), S( -80,   12), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  48,  -73), S(  31,  -44), S(  -8,  -27), S( -55,  -14), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  27,  -74), S(  40,  -63), S(  -2,  -43), S(  -9,  -56), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
    },
};

constexpr ScorePair MOBILITY[4][28] = {
    {S(  -9,  -39), S( -35,  -59), S( -17,   -7), S(  -8,    9), S(   3,   13), S(   7,   22), S(  15,   25), S(  20,   30), S(  28,    7), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S( -12,  -20), S( -41,  -55), S( -19,  -28), S(  -9,   -8), S(  -3,    2), S(   1,   17), S(   2,   23), S(   6,   22), S(   6,   28), S(   9,   23), S(  12,   25), S(  24,    1), S(  21,    8), S(   5,  -37), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S( -64,  -16), S( -47,  -82), S( -17,  -53), S( -10,  -27), S(  -4,  -10), S(   3,    0), S(   3,    5), S(   6,   10), S(  11,   15), S(  13,   18), S(  13,   28), S(  19,   32), S(  24,   34), S(  25,   34), S(  38,   20), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S( -14,   77), S( -26,   49), S( -22,  -69), S( -28, -229), S( -19,  -63), S( -15,  -57), S( -14,  -25), S( -10,  -22), S( -10,   -1), S(  -9,   23), S( -10,   40), S(  -9,   45), S(  -9,   47), S(  -7,   50), S(  -4,   54), S(  -4,   59), S(  -2,   63), S(   0,   53), S(  -2,   54), S(   0,   46), S(  13,   30), S(  25,    2), S(  17,   17), S(  39,  -28), S(  25,  -16), S(  72,  -48), S(  25,  -99), S(   6,  -56)}
};

constexpr ScorePair THREAT_BY_PAWN[6] = {S( -14,  -32), S(  67,   25), S(  56,   70), S(  64,   57), S(  43,   39), S(   0,    0)};
constexpr ScorePair THREAT_BY_KNIGHT[2][6] = {
    {S(   9,   40), S(  14,   67), S(  45,   19), S(  72,    1), S(  42,   16), S(   0,    0)},
    {S(  -7,   13), S(  13,   45), S(  41,   24), S(  67,   43), S(  48,   48), S(   0,    0)}
};
constexpr ScorePair THREAT_BY_BISHOP[2][6] = {
    {S(  12,   35), S(  32,   32), S(  -9,   51), S(  38,   31), S(  40,   97), S(   0,    0)},
    {S(  -5,   11), S(  14,   28), S( -10,   12), S(  41,   73), S(  41,  110), S(   0,    0)}
};
constexpr ScorePair THREAT_BY_ROOK[2][6] = {
    {S(   5,   44), S(  31,   47), S(  39,   37), S( -28,  -37), S(  56,    5), S(   0,    0)},
    {S(  -6,    5), S(   6,   11), S(  16,    0), S( -11,  -92), S(  39,   79), S(   0,    0)}
};
constexpr ScorePair THREAT_BY_QUEEN[2][6] = {
    {S(   7,   28), S(  20,   28), S(  22,   42), S(  23,   -5), S(   3,  -35), S( 140,   30)},
    {S(  -1,   15), S(   1,    4), S(  -4,   22), S(  -6,   -7), S( -22,  -12), S(  13,  214)}
};
constexpr ScorePair THREAT_BY_KING[6] = {S( 113,  -16), S(  28,   23), S(  80,   24), S(  61,   15), S(   0,    0), S(   0,    0)};
constexpr ScorePair KNIGHT_HIT_QUEEN = S(  10,   -1);
constexpr ScorePair BISHOP_HIT_QUEEN = S(  11,   22);
constexpr ScorePair ROOK_HIT_QUEEN = S(  20,   -2);
constexpr ScorePair PUSH_THREAT = S(  14,   22);
constexpr ScorePair RESTRICTED_SQUARES = S(   3,    2);

constexpr ScorePair ISOLATED_PAWN[8] = {S(  -2,   -1), S(  -7,  -15), S( -10,  -15), S( -10,  -13), S( -10,  -23), S( -11,  -13), S( -15,   -9), S( -10,   -5)};
constexpr ScorePair DOUBLED_PAWN[8] = {S(  -9,  -68), S( -20,  -36), S( -13,  -20), S(   7,  -29), S(  -3,  -21), S(  14,  -36), S( -11,  -36), S(  28,  -88)};
constexpr ScorePair BACKWARDS_PAWN[8] = {S(   0,    0), S(  -4,  -18), S(  -2,  -20), S(  -7,  -21), S(  29,  -39), S( -21,   22), S(   0,    0), S(   0,    0)};
constexpr ScorePair PAWN_PHALANX[8] = {S(   0,    0), S(   1,   -1), S(  13,   -6), S(  18,   10), S(  49,   24), S(  69,  151), S( 153,  366), S(   0,    0)};
constexpr ScorePair DEFENDED_PAWN[8] = {S(   0,    0), S(   0,    0), S(  14,    2), S(  13,    1), S(  21,   22), S(  56,   50), S( 160,  117), S(   0,    0)};
constexpr ScorePair CANDIDATE_PASSER[2][8] = {
    {S(   0,    0), S( -44,  -17), S(  -9,  -20), S(   0,   -8), S( -17,   48), S(   0,  119), S(   0,    0), S(   0,    0)},
    {S(   0,    0), S( -11,   -6), S( -17,   13), S(  -5,   20), S(   5,   39), S(  89,  127), S(   0,    0), S(   0,    0)}
};

constexpr ScorePair PASSED_PAWN[2][2][8] = {
    {
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -43,  -31), S(  -5,   24), S(  32,  156), S(  98,  194), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -33,  -52), S(  -4,  -16), S(  43,   43), S( 176,   13), S(   0,    0)}
    },
    {
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -39,  -49), S(   4,  -23), S(  38,   63), S( 115,    6), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -37,  -61), S(   5,  -46), S(  19,   22), S( -16,   39), S(   0,    0)}
    }
};
constexpr ScorePair OUR_PASSER_PROXIMITY[8] = {S( 209,   67), S( 149,   40), S(  85,   60), S(  16,   58), S(   2,   40), S(  -3,   31), S(  -2,   23), S( -23,   25)};
constexpr ScorePair THEIR_PASSER_PROXIMITY[8] = {S(   2,  -30), S(  13,   -2), S(  18,    5), S(  17,   30), S(  22,   58), S(  27,   70), S(  41,   74), S(  28,   69)};
constexpr ScorePair PASSER_DEFENDED_PUSH[8] = {S(   0,    0), S(   0,    0), S(   0,    0), S(   8,   13), S(  17,   26), S(  68,   26), S( -19,  144), S(   0,    0)};

constexpr ScorePair PAWN_STORM[2][4][8] = {
    {
        {S(  -1,  107), S(  25, -1452), S(  65, -782), S(  46, -215), S(  -3,   59), S( -12,   54), S( -19,   44), S(   0,    0)},
        {S(   9,   12), S( 134, -715), S(  95, -559), S(  36, -129), S(  20,  -26), S( -31,   30), S(  21,   -4), S(   0,    0)},
        {S(   2,   24), S(  63, -547), S(  84, -440), S(  40, -116), S(  -6,  -41), S( -11,  -27), S(  -9,   -1), S(   0,    0)},
        {S(  -2,   17), S(  74, -532), S( 113, -376), S(  53,  -77), S(  16,  -12), S( -25,  -18), S( -34,   11), S(   0,    0)}
    },
    {
        {S(   0,    0), S(   0,    0), S(  32,    8), S( -36,   55), S( -11,  119), S(  18,  -31), S(  80,  -78), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S( 131,  -10), S( -22,   42), S( -34,  118), S(   9,   78), S(  39,   93), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S( 158,  117), S(  -7,  127), S( -24,   92), S(  -6,   79), S( 126,  -27), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S( 110,    5), S(  22,  114), S( -33,  137), S(  -6,   95), S( -53,   18), S(   0,    0)}
    }
};
constexpr ScorePair PAWN_SHIELD[4][8] = {
    {S(  52,  -63), S(  -7,  -14), S( -12,  -51), S(  11,  -41), S(  10,   45), S( -60,   64), S( -28,   33), S(   0,    0)},
    {S(  35,   64), S( -28,  -44), S(  21,  -34), S(  50,  -66), S(  48,  -59), S(  27,  -60), S(  49, -304), S(   0,    0)},
    {S(  46,  115), S( -15, -184), S(  -4,  -79), S(  40,  -83), S(  29,  -41), S( -16,  -24), S(-414, -137), S(   0,    0)},
    {S(  12,   75), S( -29,    5), S( -12,  -47), S(  14, -101), S(  -1, -104), S(  69,  -55), S( -21, -121), S(   0,    0)}
};
constexpr ScorePair SAFE_KNIGHT_CHECK = S(  73,  -30);
constexpr ScorePair SAFE_BISHOP_CHECK = S(  53,  -12);
constexpr ScorePair SAFE_ROOK_CHECK = S( 101,  -10);
constexpr ScorePair SAFE_QUEEN_CHECK = S(  57,   23);
constexpr ScorePair UNSAFE_KNIGHT_CHECK = S(  13,  -15);
constexpr ScorePair UNSAFE_BISHOP_CHECK = S(  30,   14);
constexpr ScorePair UNSAFE_ROOK_CHECK = S(  41,   20);
constexpr ScorePair UNSAFE_QUEEN_CHECK = S(  19,   33);
constexpr ScorePair QUEENLESS_ATTACK = S(-121,  178);
constexpr ScorePair KING_ATTACKER_WEIGHT[4] = {S(  60,  -87), S(  29,  -48), S(  38,  -69), S(   6,  -43)};
constexpr ScorePair KING_ATTACKS = S(   2,   11);
constexpr ScorePair WEAK_KING_RING = S(   5,    4);
constexpr ScorePair KING_FLANK_ATTACKS[2] = {S(  12,  -25), S(   4,   -4)};
constexpr ScorePair KING_FLANK_DEFENSES[2] = {S(  -7,   -4), S(  -3,   -8)};
constexpr ScorePair SAFETY_OFFSET = S(  55,  -71);

constexpr ScorePair MINOR_BEHIND_PAWN = S(   4,   18);
constexpr ScorePair KNIGHT_OUTPOST = S(  19,   15);
constexpr ScorePair BISHOP_PAWNS[7] = {S(  20,    1), S(   5,   27), S(   4,   13), S(   2,    0), S(  -4,   -8), S( -10,  -11), S( -13,  -16)};
constexpr ScorePair BISHOP_PAIR = S(  18,   85);
constexpr ScorePair LONG_DIAG_BISHOP = S(   8,   18);
constexpr ScorePair ROOK_OPEN[2] = {S(  29,   -5), S(  19,   -1)};

constexpr ScorePair TEMPO = S(  22,   11);

constexpr ScorePair COMPLEXITY_PAWNS = S(   0,   18);
constexpr ScorePair COMPLEXITY_PAWNS_BOTH_SIDES = S(   0,  179);
constexpr ScorePair COMPLEXITY_PAWN_ENDGAME = S(   0,  254);
constexpr ScorePair COMPLEXITY_OFFSET = S(   0, -323);

#undef S
// clang-format on

}
