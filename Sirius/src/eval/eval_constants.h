#pragma once

#include "../defs.h"

namespace eval
{

#define S(mg, eg) PackedScore(mg, eg)

constexpr PackedScore MATERIAL[6] = {S(  56,  103), S( 278,  442), S( 302,  450), S( 368,  805), S( 791, 1456), S(0, 0)};

constexpr PackedScore PSQT[6][64] = {
	{
		S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
		S(  31,   94), S(  42,   94), S(  85,   94), S(  84,   68), S(  91,   54), S(  53,   72), S(  35,   91), S(  15,   89),
		S(  44,   22), S(  59,   43), S(  76,    6), S(  48,  -11), S(  37,  -10), S(  32,   -2), S(   4,   38), S(   0,   25),
		S(  17,    4), S(   9,   24), S(  27,   -6), S(  16,  -10), S(   3,   -9), S(  -1,   -3), S( -10,   24), S( -12,   15),
		S(   8,  -12), S(   2,   17), S(  13,   -9), S(   8,   -7), S(   1,   -7), S(  -5,   -6), S( -17,   19), S( -17,   -1),
		S(  13,  -20), S(  14,    5), S(  -2,   -2), S(  -4,    2), S( -11,    1), S( -17,   -7), S( -26,   11), S( -28,   -6),
		S(  28,  -25), S(  44,    3), S(  29,   -3), S(   3,   12), S( -13,    5), S( -11,    0), S( -18,   20), S( -20,    0),
		S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
	},
	{
		S( -60,  -84), S( -66,  -21), S( -12,  -20), S(  17,  -13), S( -26,    3), S( -60,    7), S(-108,   17), S( -81,  -42),
		S(   0,  -10), S(  26,   -4), S(  30,   -8), S(  10,    1), S(  14,    3), S(  -3,   11), S(  -7,   20), S( -14,   12),
		S(  21,   -7), S(  14,   -2), S(  57,  -19), S(  33,    1), S(  17,    5), S(  10,    4), S(   2,    6), S(  -7,    7),
		S(  35,    5), S(  34,   10), S(  44,    5), S(  33,   14), S(  29,   15), S(  26,    8), S(  16,    6), S(   6,   18),
		S(  10,   16), S(  20,   10), S(  26,    8), S(  21,   21), S(  23,   15), S(  17,   12), S(  19,    2), S(   0,   13),
		S(   0,    0), S(  14,   -5), S(   4,  -11), S(  14,    8), S(   4,    9), S(  -4,   -6), S(  -4,   -4), S( -15,    0),
		S(   3,   13), S(   6,    0), S(   3,   -7), S(   1,   -2), S(   2,   -3), S(  -9,   -6), S( -13,    1), S( -18,    3),
		S( -11,   -2), S( -13,    2), S(  -2,   -6), S(  -4,    3), S( -11,   -1), S( -22,   -7), S( -15,   -2), S( -51,   15),
	},
	{
		S( -37,   -6), S( -36,    5), S( -10,   -5), S( -72,    9), S( -66,   13), S( -53,    3), S( -27,    4), S( -15,   12),
		S( -28,   -4), S( -39,   10), S( -12,   -1), S(  -5,   -4), S( -23,    5), S(  -2,   -5), S(  -6,   -1), S( -10,   -3),
		S(  23,   12), S(  16,    1), S(  44,    6), S(   8,    3), S(  13,   -3), S(   5,    4), S(   8,    4), S(   4,    7),
		S(  -2,    6), S(  11,    8), S(   9,   11), S(  19,   14), S(  17,   18), S(  12,    5), S(   3,   12), S(  -8,    8),
		S(  18,   -8), S(   4,    7), S(   9,    4), S(  10,   12), S(  16,   11), S(  -3,   13), S(  -1,    5), S(   0,    4),
		S(  16,   -8), S(  19,   -9), S(  10,   -2), S(   4,    8), S(  -5,    6), S(   4,    4), S(   7,    4), S(  -1,   -5),
		S(  22,  -12), S(  28,  -17), S(  18,  -11), S(   2,   -3), S(  -5,   -1), S(   7,  -17), S(   5,  -15), S(  15,   -3),
		S(  33,  -27), S(  21,  -20), S(  -5,    5), S(  12,   -6), S(  -2,   -4), S(   2,    6), S(  12,   -1), S(  10,   -7),
	},
	{
		S(   8,   11), S( -16,   33), S(  -2,   25), S( -10,   14), S( -25,   24), S( -25,   30), S( -11,   22), S( -11,   22),
		S(  24,    2), S(  28,    9), S(  19,   12), S(   4,   13), S(  16,   14), S(  -1,   27), S(  -4,   24), S(  -3,   17),
		S(  14,    1), S(  40,    3), S(  27,    4), S(  20,    8), S(   1,   14), S(  -3,   25), S(  10,   19), S( -11,   23),
		S(   7,    8), S(   6,   16), S(  16,   10), S(  10,    6), S(   1,   14), S(   5,   18), S(   4,   19), S(  -8,   20),
		S(  -4,   -3), S(  14,    3), S(   0,    5), S(   7,    2), S(  -4,    5), S(  -8,    9), S( -10,   10), S( -13,    9),
		S(   9,  -28), S(  19,  -28), S(   4,  -18), S(   2,  -17), S(  -9,   -9), S( -14,  -10), S( -13,  -11), S( -17,  -10),
		S(  -8,  -32), S(  19,  -37), S(   7,  -27), S(   2,  -24), S(  -4,  -20), S(  -4,  -18), S( -14,  -14), S( -16,  -20),
		S( -15,  -30), S( -10,  -16), S(   0,  -22), S(   5,  -28), S(  -2,  -25), S(  -8,  -18), S(  -8,  -22), S(  -8,  -17),
	},
	{
		S(   6,  -24), S(  35,  -39), S(  -2,   12), S(  -8,    6), S(  10,  -15), S( -12,   -2), S( -41,    3), S( -22,   -5),
		S(  37,    3), S(  -2,    9), S(  -1,   20), S( -32,   45), S( -30,   40), S( -10,    9), S( -10,   -9), S(   0,   -6),
		S(  15,    1), S(  18,   -1), S(   7,   14), S(  -5,   24), S(   0,   19), S(   3,   17), S(   5,   -9), S(  14,   -6),
		S(  14,   17), S(  11,   38), S(   9,   13), S(  -8,   29), S(  -7,   31), S(   5,    7), S(   4,   14), S(   2,    9),
		S(  15,   10), S(  19,   15), S(   7,   23), S(   3,   27), S(  -5,   29), S(  -3,   21), S(   2,   18), S(  -1,   10),
		S(  14,  -21), S(  14,   -5), S(   4,    8), S(  -6,   22), S(  -7,   15), S(  -7,   18), S(   2,   -1), S(   2,  -10),
		S(  14,  -55), S(  18,  -68), S(   8,  -39), S(   4,   -3), S(   1,    2), S(   2,  -14), S(   2,  -19), S(   9,  -34),
		S(   2,  -46), S( -14,  -46), S( -18,  -18), S(  -7,  -17), S(  -7,  -10), S( -11,   -5), S( -15,  -11), S( -14,   -8),
	},
	{
		S(   0,  -54), S(   7,   -2), S( -11,    1), S(  20,   -7), S(   0,   -4), S(   0,   -4), S(   0,   -4), S(   0,   -4),
		S( -62,   41), S(   8,   50), S(  24,   38), S(  80,    8), S(   0,   -4), S(   0,   -4), S(   0,   -4), S(   0,   -4),
		S( -39,   30), S(  38,   34), S(  68,   24), S(  70,   16), S(   0,   -4), S(   0,   -4), S(   0,   -4), S(   0,   -4),
		S( -57,   16), S(   2,   20), S(  17,   20), S(  21,    5), S(   0,   -4), S(   0,   -4), S(   0,   -4), S(   0,   -4),
		S( -81,   10), S( -21,   13), S(   4,    6), S(  -4,    3), S(   0,   -4), S(   0,   -4), S(   0,   -4), S(   0,   -4),
		S( -47,    2), S(   6,   -1), S(  -4,    1), S(   1,   -3), S(   0,   -4), S(   0,   -4), S(   0,   -4), S(   0,   -4),
		S(  11,  -16), S(  25,  -10), S(   6,   -5), S(  -7,   -9), S(   0,   -4), S(   0,   -4), S(   0,   -4), S(   0,   -4),
		S(   6,  -47), S(   9,  -22), S( -21,   -7), S( -16,  -25), S(   0,   -4), S(   0,   -4), S(   0,   -4), S(   0,   -4),
	},
};

constexpr PackedScore MOBILITY[4][28] = {
	{S( -10,  -16), S( -37,  -67), S( -15,  -33), S(  -7,   -6), S(   3,    7), S(   6,   20), S(  14,   27), S(  22,   35), S(  30,   35), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -18,  -30), S( -49,  -94), S( -28,  -38), S( -22,  -16), S( -11,   -4), S(  -4,    6), S(   0,   17), S(   6,   21), S(   7,   27), S(  12,   28), S(  14,   31), S(  25,   22), S(  28,   23), S(  45,    6), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -28,  -41), S(  15,  -79), S( -23,  -44), S( -14,  -28), S(  -9,  -21), S(  -3,   -6), S(   0,   -1), S(  -5,    9), S(   0,   13), S(   3,   18), S(   7,   25), S(   8,   34), S(  10,   40), S(  16,   42), S(  22,   40), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -36,   11), S( -50,  -78), S( -89,  -79), S( -64, -265), S( -69, -104), S( -29,  -36), S( -21,  -13), S( -14,   -8), S(  -7,   -6), S(  -6,   18), S(  -4,   26), S(  -1,   36), S(   1,   41), S(   4,   45), S(   7,   48), S(   9,   50), S(  11,   51), S(  11,   56), S(  12,   58), S(  13,   57), S(  21,   50), S(  28,   34), S(  35,   28), S(  49,   10), S(  57,    2), S(  53,    2), S(  43,   -4), S(  23,  -28)}
};

constexpr PackedScore THREAT_BY_PAWN[6] = {S(   7,  -13), S(  61,   34), S(  60,   65), S(  72,   34), S(  69,   -5), S(   0,    0)};
constexpr PackedScore THREAT_BY_KNIGHT[2][6] = {
	{S(   6,   31), S(  29,   35), S(  35,   45), S(  72,   10), S(  42,  -22), S(   0,    0)},
	{S(  -3,   11), S(  14,   49), S(  29,   34), S(  60,   34), S(  51,    2), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_BISHOP[2][6] = {
	{S(   4,   37), S(  46,   29), S(  -4,   29), S(  70,   12), S(  64,   59), S(   0,    0)},
	{S(   1,    9), S(  21,   26), S( -17,   -1), S(  41,   46), S(  45,  135), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_ROOK[2][6] = {
	{S(   0,   44), S(  26,   59), S(  26,   56), S(  16,  -52), S(  71,    6), S(   0,    0)},
	{S(  -5,    8), S(   6,   19), S(  17,    6), S(  12,  -88), S(  57,   56), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_QUEEN[2][6] = {
	{S(   9,    9), S(  32,   18), S(  16,   49), S(  18,    4), S(  11,  -62), S( 104,    4)},
	{S(  -1,   12), S(   2,    9), S(  -4,   22), S(  -6,    5), S( -18,  -66), S(  98,   69)}
};
constexpr PackedScore THREAT_BY_KING[6] = {S(  -9,   45), S(  25,   47), S(  24,   46), S(  90,   16), S(   0,    0), S(   0,    0)};
constexpr PackedScore PUSH_THREAT = S(  18,   20);

constexpr PackedScore ISOLATED_PAWN[8] = {S(  -7,   10), S(  -1,  -15), S( -10,   -6), S(  -8,  -14), S( -10,  -11), S(  -6,   -4), S(  -1,  -12), S( -11,   12)};
constexpr PackedScore PAWN_PHALANX[8] = {S(   0,    0), S(   4,   -4), S(  13,    4), S(  18,   16), S(  44,   59), S( 102,  218), S( -30,  389), S(   0,    0)};
constexpr PackedScore DEFENDED_PAWN[8] = {S(   0,    0), S(   0,    0), S(  18,   10), S(  12,    9), S(  13,   19), S(  20,   59), S( 148,   62), S(   0,    0)};

constexpr PackedScore PASSED_PAWN[2][2][8] = {
	{
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -29,  -40), S( -14,   25), S( -29,  159), S(  47,  239), S(   0,    0)},
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -19,  -53), S(  11,  -26), S(  12,   15), S(  72,   26), S(   0,    0)}
	},
	{
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -29,  -56), S(  -4,  -23), S(  11,    6), S(  72,   -9), S(   0,    0)},
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -30,  -62), S(  -3,  -36), S(  -8,  -22), S(  -6,  -48), S(   0,    0)}
	}
};
constexpr PackedScore OUR_PASSER_PROXIMITY[8] = {S(   0,    0), S(  29,   89), S(  -3,   68), S(   2,   40), S(   5,   28), S(   8,   19), S(  15,   20), S(   9,   19)};
constexpr PackedScore THEIR_PASSER_PROXIMITY[8] = {S(   0,    0), S( -44,   12), S(  22,   -4), S(  10,   27), S(  14,   47), S(   9,   82), S(  16,   80), S(  17,   69)};

constexpr PackedScore PAWN_STORM[3][8] = {
	{S(  53,  -30), S(  29,  -17), S(  21,    0), S(  11,    2), S(   2,    5), S(  -4,    9), S(  -5,    9), S(   5,  -14)},
	{S(   0,    0), S(  18,  -25), S(  24,    6), S(   6,    2), S(  -4,    6), S(  -9,   13), S( -10,   12), S(   4,   -9)},
	{S(  15,    1), S(   4,    8), S(   9,   11), S(   6,   10), S(   5,    9), S(   3,   10), S(   2,    9), S(  -8,   -6)}
};
constexpr PackedScore PAWN_SHIELD[3][8] = {
	{S(  11,  -15), S(  -1,   -9), S(  -4,  -10), S(  -5,   -7), S(   6,   -8), S(  24,  -26), S(  38,  -17), S(  -7,    8)},
	{S(   0,    0), S(  -9,    1), S( -11,    0), S(  -1,    1), S(  12,   -3), S(  33,  -25), S(  53,  -26), S(   7,    8)},
	{S(  -6,   -3), S(  -5,   -1), S(   0,   -2), S(   1,    2), S(   4,    4), S(   5,    0), S(  19,   -6), S(  -5,   12)}
};
constexpr PackedScore SAFE_KNIGHT_CHECK = S(  78,   -2);
constexpr PackedScore SAFE_BISHOP_CHECK = S(  22,   12);
constexpr PackedScore SAFE_ROOK_CHECK = S(  56,    5);
constexpr PackedScore SAFE_QUEEN_CHECK = S(  20,   23);
constexpr PackedScore UNSAFE_KNIGHT_CHECK = S(   5,    2);
constexpr PackedScore UNSAFE_BISHOP_CHECK = S(  11,   12);
constexpr PackedScore UNSAFE_ROOK_CHECK = S(  19,   -1);
constexpr PackedScore UNSAFE_QUEEN_CHECK = S(   5,   13);
constexpr PackedScore KING_ATTACKER_WEIGHT[4] = {S(  17,    2), S(  13,    4), S(  16,  -13), S(   4,    0)};
constexpr PackedScore KING_ATTACKS[14] = {S( -50,   30), S( -57,   22), S( -63,   17), S( -66,   20), S( -64,   15), S( -55,   11), S( -38,    4), S( -18,   -5), S(  21,  -24), S(  43,  -23), S(  72,  -32), S(  83,   -1), S( 118,  -84), S(  87,   42)};

constexpr PackedScore KNIGHT_OUTPOST = S(  25,   20);
constexpr PackedScore BISHOP_PAWNS[7] = {S(   5,   23), S(   7,   21), S(   4,   13), S(   1,    4), S(  -4,   -6), S(  -5,  -20), S( -11,  -35)};
constexpr PackedScore BISHOP_PAIR = S(  18,   63);
constexpr PackedScore ROOK_OPEN[2] = {S(  23,    4), S(  14,    8)};

constexpr PackedScore TEMPO = S(  29,   35);

constexpr PackedScore COMPLEXITY_PAWNS = S(   1,    8);
constexpr PackedScore COMPLEXITY_PASSERS = S(  -1,    1);
constexpr PackedScore COMPLEXITY_PAWNS_BOTH_SIDES = S(   1,   68);
constexpr PackedScore COMPLEXITY_PAWN_ENDGAME = S(   0,   65);
constexpr PackedScore COMPLEXITY_OFFSET = S(   1, -128);

#undef S


}