#pragma once

#include "../defs.h"

namespace eval
{

#define S(mg, eg) PackedScore(mg, eg)


constexpr PackedScore MATERIAL[6] = {S(  59,   85), S( 288,  361), S( 301,  382), S( 401,  676), S( 857, 1232), S(0, 0)};

constexpr PackedScore PSQT[6][64] = {
	{
		S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
		S(  35,   78), S(  44,   80), S(  28,   86), S(  62,   45), S(  47,   51), S(  34,   59), S( -22,   97), S( -28,   89),
		S(  15,   40), S(  11,   57), S(  37,   15), S(  46,  -14), S(  55,  -15), S(  86,   -6), S(  47,   39), S(  32,   29),
		S(  -8,   24), S(  -3,   27), S(   4,    3), S(   5,   -9), S(  26,   -9), S(  26,  -10), S(  10,   17), S(  13,    1),
		S( -15,    6), S( -12,   21), S(  -3,   -3), S(   6,   -8), S(   8,   -8), S(  12,  -10), S(   2,   10), S(  -1,  -11),
		S( -26,   -2), S( -20,   11), S( -13,   -5), S( -10,   -3), S(   0,   -2), S(  -6,   -6), S(   4,    0), S(  -8,  -18),
		S( -18,    4), S( -11,   16), S(  -5,    1), S(  -5,   -3), S(   4,    9), S(  27,   -7), S(  20,    3), S(  -3,  -16),
		S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
	},
	{
		S( -90,  -41), S( -82,  -13), S( -68,    7), S( -18,   -8), S(   5,   -6), S( -47,  -23), S( -77,   -9), S( -61,  -59),
		S(  -6,    1), S(   2,    8), S(   8,    3), S(  18,    3), S(  12,   -5), S(  33,  -12), S(  16,   -1), S(  14,  -16),
		S(   4,   -2), S(   7,    3), S(   7,   12), S(  14,   15), S(  29,    8), S(  54,  -13), S(  22,   -8), S(  25,  -15),
		S(   7,    9), S(   6,    6), S(  17,   15), S(  27,   18), S(  20,   21), S(  29,   14), S(  19,    9), S(  37,   -2),
		S(   0,    7), S(   8,    2), S(   7,   20), S(  16,   18), S(   9,   27), S(  12,   12), S(  11,    5), S(   4,    7),
		S( -13,   -3), S(  -3,    1), S(  -4,    5), S(   2,   20), S(  16,   17), S(  -2,    0), S(  16,   -4), S(   1,    0),
		S( -12,   -1), S( -11,    5), S(  -5,   -1), S(   8,    0), S(   6,   -1), S(  10,   -3), S(  10,   -7), S(   7,   11),
		S( -42,   13), S(  -5,  -11), S( -15,   -5), S(  -5,   -2), S(   2,   -1), S(   5,  -11), S(  -4,   -3), S(  -9,    9),
	},
	{
		S( -12,    4), S( -40,    7), S( -37,    3), S( -73,    9), S( -68,   11), S( -55,   -2), S( -26,    1), S( -51,   -4),
		S(  -5,   -9), S(  14,   -7), S(   2,   -5), S( -11,    2), S(  17,  -13), S( -13,   -2), S( -27,    3), S( -40,    1),
		S(   5,    6), S(  18,   -3), S(  20,    0), S(  27,   -9), S(  10,   -1), S(  47,    3), S(  20,    0), S(  23,    4),
		S(  -6,    2), S(   5,    6), S(  15,    1), S(  28,   16), S(  20,    7), S(  10,    9), S(   2,    2), S(  -5,    5),
		S(   1,    1), S(  -6,    4), S(  -3,   12), S(  18,   11), S(  14,   10), S(  -6,    4), S(  -3,    4), S(  11,  -12),
		S(   0,   -1), S(  10,    4), S(   3,    4), S(  -1,   11), S(   2,   12), S(   6,    4), S(  11,   -6), S(  18,   -8),
		S(  18,    6), S(   4,  -12), S(  11,  -10), S(  -9,    0), S(   1,    2), S(  15,   -8), S(  24,  -10), S(  19,  -11),
		S(   7,   -6), S(  15,    9), S(  -2,   -3), S(  -4,   -3), S(   5,   -9), S(  -6,    6), S(  19,  -12), S(  31,  -23),
	},
	{
		S( -14,   16), S( -18,   20), S( -29,   29), S( -34,   26), S( -21,   20), S(   1,   17), S(  -2,   22), S(  18,   12),
		S(  -2,   16), S(   3,   23), S(  10,   25), S(  26,   14), S(  12,   15), S(  16,   12), S(  28,    6), S(  29,    3),
		S(  -9,   16), S(  17,   12), S(   8,   16), S(   8,   13), S(  28,    5), S(  35,   -2), S(  52,   -2), S(  22,   -4),
		S(  -9,   16), S(   3,   11), S(   3,   15), S(   4,   10), S(   8,    0), S(  11,   -2), S(   7,    3), S(   7,    0),
		S( -17,    6), S( -15,    5), S(  -9,    4), S(  -2,    1), S(  -2,   -1), S( -16,    2), S(   2,   -5), S( -12,   -4),
		S( -19,   -2), S( -16,   -6), S( -12,   -8), S( -10,   -7), S(   0,  -12), S(  -5,  -14), S(  17,  -26), S(   2,  -23),
		S( -19,  -10), S( -15,   -9), S(  -6,  -11), S(  -4,  -13), S(   0,  -18), S(   5,  -23), S(  11,  -26), S( -15,  -20),
		S( -11,   -8), S( -10,  -13), S(  -9,   -7), S(  -2,  -14), S(   4,  -21), S(   0,  -15), S(  -1,  -17), S( -14,  -16),
	},
	{
		S( -15,  -14), S( -31,    1), S( -25,   27), S(   2,   16), S(   1,   16), S(   8,   11), S(  51,  -38), S(   9,   -8),
		S(   6,  -15), S( -11,   -3), S(  -8,   27), S( -22,   49), S( -22,   62), S(   7,   29), S(   1,   10), S(  40,   10),
		S(   8,   -5), S(   6,    0), S(  -2,   28), S(   3,   32), S( -10,   50), S(  13,   20), S(  29,    1), S(  29,    2),
		S(  -2,    7), S(  -5,   22), S(   0,   17), S(  -9,   35), S( -18,   40), S(   2,   24), S(   1,   36), S(  12,   16),
		S(  -2,    1), S(  -5,   17), S(  -6,   18), S(  -9,   27), S(  -2,   28), S(  -6,   25), S(   8,    8), S(  14,    2),
		S(   1,  -22), S(   0,   -5), S( -10,    8), S(  -9,   16), S(  -5,   19), S(  -1,    5), S(  12,  -16), S(  15,  -24),
		S(   3,  -34), S(  -3,  -34), S(   2,  -25), S(   1,  -12), S(   1,  -10), S(   7,  -38), S(  15,  -67), S(  29,  -84),
		S( -15,  -33), S( -16,  -28), S( -13,  -20), S( -10,  -20), S(  -9,  -21), S( -19,  -30), S(  -9,  -44), S(   8,  -50),
	},
	{
		S(  45,  -51), S(  79,  -29), S( 119,  -33), S(  52,  -10), S(  61,  -32), S( -18,    2), S(  18,    7), S(  75,  -63),
		S( -91,   26), S(  10,   25), S(  29,   13), S( 146,  -16), S(  91,   -9), S(  49,   25), S(  21,   41), S( -83,   47),
		S(-108,   26), S(  49,   15), S(  33,    9), S(  44,    4), S(  84,    1), S( 101,   12), S(   5,   37), S( -65,   31),
		S( -65,    2), S( -19,    7), S( -14,    7), S( -17,    3), S( -22,   -2), S( -31,   16), S( -61,   23), S(-152,   29),
		S( -68,  -10), S( -31,   -1), S( -33,    5), S( -32,    3), S( -36,    2), S( -41,    6), S( -72,   14), S(-154,   19),
		S( -50,   -5), S(   6,   -2), S( -22,    3), S(  -3,    0), S(  -5,   -1), S( -24,    6), S( -15,    3), S( -71,   10),
		S(  36,  -15), S(  25,   -2), S(  22,   -1), S(   4,   -4), S(  -1,   -1), S(  10,    0), S(  26,   -2), S(  21,  -11),
		S(  24,  -33), S(  56,  -25), S(  28,   -9), S( -26,   -1), S(  10,  -18), S( -19,    4), S(  35,  -15), S(  33,  -38),
	},
};

constexpr PackedScore MOBILITY[4][28] = {
	{S( -15,  -17), S( -38,  -48), S( -16,  -20), S(  -6,    3), S(   6,   12), S(   9,   22), S(  19,   24), S(  30,   25), S(  41,   20), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S(   2,  -23), S( -34,  -77), S( -13,  -33), S(  -5,  -10), S(   7,   -1), S(  14,    6), S(  20,   15), S(  25,   20), S(  27,   24), S(  29,   27), S(  29,   29), S(  38,   24), S(  29,   29), S(  43,   19), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -55,   21), S(  17,  -20), S( -24,  -42), S( -14,  -30), S(  -9,  -26), S(  -3,  -11), S(  -1,   -5), S(  -4,    2), S(  -0,    3), S(   3,    7), S(   8,   11), S(  10,   16), S(  15,   20), S(  22,   19), S(  29,   14), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -46,   76), S( -70,  -10), S(-112,    0), S( -86, -213), S( -78,  -99), S( -35,  -42), S( -25,  -20), S( -17,  -15), S(  -9,   -8), S(  -6,   11), S(  -3,   17), S(   1,   24), S(   5,   30), S(   9,   31), S(  12,   32), S(  15,   35), S(  18,   36), S(  18,   39), S(  19,   42), S(  20,   43), S(  27,   38), S(  34,   25), S(  38,   25), S(  62,   -2), S(  69,   -3), S( 111,  -36), S(  99,  -33), S(  45,  -27)}
};

constexpr PackedScore THREAT_BY_PAWN[6] = {S(   0,    0), S(  55,   16), S(  59,   33), S(  84,  -11), S(  64,  -51), S(   0,    0)};
constexpr PackedScore THREAT_BY_MINOR[6] = {S(   0,    0), S(   8,   14), S(  26,   10), S(  55,   -8), S(  55,   -9), S(   0,    0)};
constexpr PackedScore HANGING_PAWN = S(   1,   30);
constexpr PackedScore HANGING_PIECE = S(  18,   25);

constexpr PackedScore PASSED_PAWN[8] = {S(   0,    0), S( -16,  -66), S( -15,  -51), S( -13,  -17), S(  12,   18), S(   0,   86), S(  50,   96), S(   0,    0)};
constexpr PackedScore ISOLATED_PAWN[8] = {S(  -4,    7), S(  -4,  -11), S( -11,   -5), S(  -7,  -13), S( -12,  -13), S(  -7,   -4), S(  -2,  -11), S( -11,    8)};
constexpr PackedScore PAWN_PHALANX[8] = {S(   0,    0), S(   4,   -1), S(  12,    7), S(  22,   17), S(  49,   58), S( 137,  182), S( -65,  417), S(   0,    0)};
constexpr PackedScore DEFENDED_PAWN[8] = {S(   0,    0), S(   0,    0), S(  19,   10), S(  12,    6), S(  14,   13), S(  29,   37), S( 169,   28), S(   0,    0)};
constexpr PackedScore OUR_PASSER_PROXIMITY[8] = {S(   0,    0), S(   5,   52), S(  -5,   39), S(  -5,   23), S(  -2,   12), S(   2,   10), S(  16,    7), S(   6,    6)};
constexpr PackedScore THEIR_PASSER_PROXIMITY[8] = {S(   0,    0), S( -79,   -3), S(   5,    0), S(  -1,   26), S(   5,   35), S(   5,   44), S(   7,   49), S( -11,   48)};

constexpr PackedScore PAWN_STORM[3][8] = {
	{S(  43,  -33), S(  22,  -16), S(  18,   -3), S(   9,   -0), S(   2,    2), S(  -2,    6), S(  -0,    5), S(   8,  -11)},
	{S(   0,    0), S(  13,  -28), S(  27,    1), S(   3,    1), S(  -5,    7), S(  -7,   12), S(  -8,   14), S(   7,   -3)},
	{S(  -1,   -1), S(  -8,    6), S(   3,    9), S(   2,    9), S(   4,    8), S(   4,    9), S(   4,    9), S(  -8,   -4)}
};
constexpr PackedScore PAWN_SHIELD[3][8] = {
	{S(   1,  -13), S(  -9,   -7), S(  -5,  -11), S(  -1,  -11), S(  13,  -14), S(  17,  -26), S(  29,  -30), S(   7,    1)},
	{S(   0,    0), S( -16,    4), S(  -9,   -5), S(   9,   -4), S(  21,  -11), S(  35,  -31), S(  54,  -41), S(  17,    2)},
	{S(  -3,   -9), S(  -2,   -6), S(   1,   -5), S(   1,   -0), S(   5,    1), S(   6,    1), S(  23,    6), S(  -8,    7)}
};
constexpr PackedScore SAFE_KNIGHT_CHECK = S(  79,   -5);
constexpr PackedScore SAFE_BISHOP_CHECK = S(  15,   -6);
constexpr PackedScore SAFE_ROOK_CHECK = S(  58,   -4);
constexpr PackedScore SAFE_QUEEN_CHECK = S(  32,   11);
constexpr PackedScore KING_ATTACKER_WEIGHT[4] = {S(  15,   -2), S(  11,    3), S(   7,  -14), S(  -2,   19)};
constexpr PackedScore KING_ATTACKS[14] = {S( -22,    8), S( -26,    4), S( -29,    2), S( -28,    7), S( -21,    4), S(  -6,    1), S(  16,   -8), S(  45,  -20), S(  91,  -42), S( 120,  -47), S( 158,  -63), S( 182,  -50), S( 216, -131), S( 173,   18)};

constexpr PackedScore KNIGHT_OUTPOST = S(  34,   19);
constexpr PackedScore BISHOP_PAIR = S(  23,   64);
constexpr PackedScore ROOK_OPEN[2] = {S(  21,   10), S(   7,   22)};

constexpr PackedScore TEMPO = S(  27,   29);


#undef S


}
