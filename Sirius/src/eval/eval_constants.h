#pragma once

#include "../defs.h"

namespace eval
{

#define S(mg, eg) PackedScore(mg, eg)

constexpr PackedScore MATERIAL[6] = {S(  61,  131), S( 285,  430), S( 306,  443), S( 387,  785), S( 746, 1619), S(0, 0)};

constexpr PackedScore PSQT[6][64] = {
    {
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  57,   78), S(  38,   88), S(  20,  103), S(  53,   76), S(  73,   60), S(  56,   74), S(  46,   94), S(  69,   75),
        S(   6,    0), S( -13,   30), S(  10,  -10), S(   8,  -38), S(   1,  -38), S(   2,  -23), S( -20,   15), S(  -6,    2),
        S(  14,    3), S(  -4,   15), S(  13,  -11), S(  11,  -24), S(  -2,  -24), S(  -1,  -17), S(  -8,    8), S(  -8,    5),
        S(   6,   -5), S(  -5,   15), S(  13,  -22), S(  16,  -17), S(   9,  -16), S(   0,  -15), S( -13,    9), S( -11,   -4),
        S(  -1,   -7), S(   8,    9), S(   4,    0), S(   1,   -2), S(  -8,   -3), S(  -8,  -10), S( -21,    8), S( -22,   -5),
        S(  10,   -8), S(  25,   10), S(  31,  122), S(   9,   -1), S(  -1,  -11), S(  -4,   -8), S( -14,   12), S( -14,   -2),
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
    },
    {
        S( -68,  -98), S( -78,  -25), S( -30,  -16), S(  -3,   -8), S( -29,    1), S( -59,    5), S(-100,    3), S( -83,  -59),
        S( -18,  -13), S(  13,    0), S(  23,   -2), S(  -2,    8), S(   3,   11), S(   5,   10), S(   0,   12), S( -11,   -2),
        S(   2,   -6), S( -10,    7), S(  29,   -2), S(  18,   17), S(   7,   23), S(  15,   13), S(   7,    2), S(  -5,   -2),
        S(  26,    5), S(  22,   16), S(  36,   18), S(  21,   26), S(  22,   27), S(  28,   14), S(  21,    3), S(  12,    8),
        S(  10,   17), S(  14,   16), S(  20,   19), S(  19,   28), S(  21,   21), S(  20,   17), S(  23,    0), S(  10,    2),
        S(  15,    0), S(  16,    4), S(  18,    3), S(  16,   15), S(   7,   16), S(   5,   -1), S(   8,   -7), S(  -5,   -7),
        S(  10,    0), S(  11,   -4), S(  10,   -4), S(  14,    0), S(   8,    0), S(  -1,   -3), S(  -1,   -7), S( -13,   -7),
        S(  -3,  -15), S(  -4,  -11), S(   4,   -9), S(   8,    2), S(   1,   -2), S( -14,   -9), S(  -8,  -16), S( -41,   -6),
    },
    {
        S( -46,  -14), S( -29,    7), S(  -9,   -2), S( -73,   12), S( -63,   15), S( -56,    5), S( -30,    7), S( -32,    5),
        S( -22,  -10), S( -44,    5), S( -14,    3), S( -10,    2), S( -22,   10), S(   1,   -1), S( -12,   -5), S(  -4,   -7),
        S(  10,   12), S(  -2,    8), S(  20,    6), S(   4,   12), S(  16,    5), S(   1,    0), S(  10,    5), S(   7,    1),
        S( -11,    6), S(   2,   13), S(   2,   17), S(  17,   19), S(  22,   23), S(  19,    8), S(   6,   11), S(  -4,    1),
        S(  16,   -6), S(  -4,   13), S(   7,   12), S(  15,   14), S(  21,   12), S(   6,   13), S(   4,    5), S(   5,   -1),
        S(  19,   -8), S(  22,   -2), S(   4,   -1), S(  10,   12), S(   1,    8), S(   5,   -3), S(  20,    1), S(   6,   -9),
        S(  25,  -18), S(  24,  -24), S(  27,   -9), S(   7,   -3), S(  -1,    0), S(  12,  -16), S(   6,  -26), S(  16,  -11),
        S(  28,  -36), S(  21,  -15), S(  -5,   -2), S(  19,   -5), S(   1,   -2), S(   0,    1), S(  11,   -3), S(   7,  -18),
    },
    {
        S(  18,    9), S( -18,   34), S( -11,   27), S( -21,   23), S( -10,   22), S( -13,   30), S(   8,   18), S(  10,   17),
        S(  27,    1), S(  31,    7), S(  11,   17), S(  -6,   20), S(  24,   13), S(  11,   23), S(   7,   20), S(  11,   11),
        S(  -5,    4), S(  22,    6), S(   4,    8), S(   6,    9), S(   5,    8), S(   1,   17), S(  15,   10), S(  -5,   13),
        S( -10,   10), S( -17,   19), S(  -7,   16), S(  -9,   10), S(  -2,    9), S(   5,   11), S(   4,    9), S(  -8,   12),
        S( -19,    5), S(  -2,   10), S( -20,   15), S(  -8,    9), S(  -7,    3), S( -10,    6), S( -10,    6), S(  -8,    3),
        S(   4,  -19), S(  22,  -23), S(  -2,  -10), S(  -2,  -12), S(  -5,  -12), S(  -8,  -13), S(  -5,  -15), S( -12,  -11),
        S(  -6,  -27), S(  25,  -34), S(   5,  -21), S(   2,  -19), S(   4,  -21), S(   1,  -18), S(  -7,  -18), S( -11,  -22),
        S(  -6,  -38), S(  -3,  -18), S(   2,  -18), S(   8,  -24), S(   6,  -25), S(  -1,  -19), S(  -1,  -23), S(  -3,  -21),
    },
    {
        S(  13,   -7), S(  55,  -30), S( -13,   40), S( -13,   24), S(  21,   -1), S( -10,   20), S( -22,    8), S( -16,   12),
        S(  36,    7), S(  16,   10), S(  -7,   25), S( -32,   54), S(  -4,   32), S(  16,    0), S(  27,  -23), S(  20,   -9),
        S(   5,   10), S(   0,    2), S(  -7,   17), S( -16,   15), S(   9,   11), S(  22,    1), S(  21,  -18), S(  30,  -18),
        S(  -6,   17), S( -16,   32), S( -10,   15), S( -16,   24), S(  -3,   22), S(  12,    1), S(  10,    4), S(   8,   -2),
        S(  -5,   15), S(  -3,   14), S( -15,   20), S(  -8,   27), S( -11,   34), S(  -2,   17), S(   5,   13), S(   2,    4),
        S(   2,  -10), S(   5,   -5), S(  -7,    9), S( -13,   17), S(  -9,   15), S(  -4,   14), S(  12,  -10), S(  10,  -17),
        S(   2,  -42), S(  10,  -60), S(   1,  -28), S(   0,  -12), S(  -1,   -2), S(   2,  -15), S(   4,  -21), S(   9,  -36),
        S(   9,  -58), S( -15,  -42), S( -19,  -21), S( -10,  -18), S(  -8,  -18), S( -12,  -12), S( -14,  -17), S( -12,  -16),
    },
    {
        S(  43,  -70), S(  23,    0), S( -40,  -24), S( -68,    1), S(   9,   -5), S(   9,   -5), S(   9,   -5), S(   9,   -5),
        S(  -6,   18), S(  27,   56), S(  -8,   29), S( -12,   32), S(   9,   -5), S(   9,   -5), S(   9,   -5), S(   9,   -5),
        S(  33,   15), S(  49,   53), S(  28,   30), S( -28,   51), S(   9,   -5), S(   9,   -5), S(   9,   -5), S(   9,   -5),
        S( -17,   20), S( -12,   54), S( -40,   32), S( -86,   48), S(   9,   -5), S(   9,   -5), S(   9,   -5), S(   9,   -5),
        S( -55,   15), S( -51,   45), S( -49,   11), S( -86,   29), S(   9,   -5), S(   9,   -5), S(   9,   -5), S(   9,   -5),
        S( -13,   -2), S(  -8,   22), S( -31,   -9), S( -51,    7), S(   9,   -5), S(   9,   -5), S(   9,   -5), S(   9,   -5),
        S(  38,  -23), S(  31,    1), S(   6,  -30), S( -23,  -17), S(   9,   -5), S(   9,   -5), S(   9,   -5), S(   9,   -5),
        S(  36,  -55), S(  36,  -20), S(  12,  -52), S(   1,  -48), S(   9,   -5), S(   9,   -5), S(   9,   -5), S(   9,   -5),
    },
};

constexpr PackedScore MOBILITY[4][28] = {
    {S(  -3,  -30), S( -37,  -46), S( -16,  -16), S(  -8,    0), S(   2,    8), S(   6,   18), S(  13,   21), S(  21,   26), S(  30,   19), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S( -10,  -47), S( -30,  -61), S( -18,  -32), S( -11,  -14), S(  -3,   -5), S(   2,    6), S(   3,   15), S(   6,   18), S(   6,   21), S(   8,   22), S(  10,   22), S(  14,   17), S(  13,   24), S(  18,    4), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S( -13,  -42), S( -29,  -70), S( -14,  -52), S(  -2,  -31), S(   0,  -16), S(  -1,   -6), S(  -1,    1), S(   2,    8), S(   3,   11), S(   6,   17), S(   4,   27), S(   5,   34), S(   7,   39), S(  10,   40), S(  17,   37), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S(  -3,    9), S( -36,  -75), S( -65, -117), S( -19, -200), S( -24,  -64), S( -15,  -13), S(  -6,  -26), S(  -3,   -6), S(  -2,   11), S(   0,   20), S(   3,   23), S(   6,   26), S(   7,   36), S(  11,   35), S(  11,   41), S(  12,   43), S(  14,   44), S(  16,   45), S(  16,   45), S(  22,   38), S(  26,   30), S(  33,   14), S(  28,   21), S(  39,   -6), S(  37,   -6), S(   4,    5), S( -11,   -9), S(-115,   20)}
};

constexpr PackedScore THREAT_BY_PAWN[6] = {S(   4,  -18), S(  65,   28), S(  59,   59), S(  80,   24), S(  72,   -2), S(   0,    0)};
constexpr PackedScore THREAT_BY_KNIGHT[2][6] = {
    {S(   4,   29), S(  15,   36), S(  37,   44), S(  73,   15), S(  60,  -31), S(   0,    0)},
    {S(  -8,    9), S(   6,   35), S(  28,   29), S(  64,   33), S(  60,   -1), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_BISHOP[2][6] = {
    {S(  -2,   34), S(  39,   32), S( -14,   34), S(  67,   15), S(  69,   44), S(   0,    0)},
    {S(  -4,    5), S(  17,   22), S( -25,  -13), S(  44,   44), S(  46,  110), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_ROOK[2][6] = {
    {S(  -1,   42), S(  15,   60), S(  25,   55), S( -12,  -23), S(  59,   17), S(   0,    0)},
    {S(  -7,    7), S(   2,   15), S(  14,    3), S( -13,  -63), S(  39,   65), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_QUEEN[2][6] = {
    {S(   6,    9), S(  24,   22), S(  10,   48), S(  19,   14), S(  10,  -55), S(  96,   50)},
    {S(  -3,   12), S(   1,    8), S(  -5,   14), S(  -4,    3), S( -16,  -74), S( 112,   54)}
};
constexpr PackedScore THREAT_BY_KING[6] = {S( -19,   43), S(   9,   47), S(  27,   41), S(  83,    8), S(   0,    0), S(   0,    0)};
constexpr PackedScore KNIGHT_HIT_QUEEN = S(  11,    2);
constexpr PackedScore BISHOP_HIT_QUEEN = S(  17,   11);
constexpr PackedScore ROOK_HIT_QUEEN = S(  20,   -3);
constexpr PackedScore PUSH_THREAT = S(  14,   17);

constexpr PackedScore ISOLATED_PAWN[8] = {S(  -8,    6), S(  -3,  -16), S( -12,   -8), S( -10,  -15), S( -12,  -14), S(  -8,   -7), S(  -4,  -14), S( -12,    7)};
constexpr PackedScore DOUBLED_PAWN[8] = {S(  -1,  -61), S(  13,  -37), S(   0,  -27), S(  -2,  -17), S(  -5,  -12), S(  -8,  -19), S(   5,  -37), S(   6,  -70)};
constexpr PackedScore BACKWARDS_PAWN[8] = {S(   0,    0), S(  -9,  -12), S(  -2,  -13), S(  -7,  -12), S(   2,  -19), S(  32,  -11), S(   0,    0), S(   0,    0)};
constexpr PackedScore PAWN_PHALANX[8] = {S(   0,    0), S(   5,   -4), S(  11,   -2), S(  20,    7), S(  39,   32), S( 107,  195), S( -13,  320), S(   0,    0)};
constexpr PackedScore DEFENDED_PAWN[8] = {S(   0,    0), S(   0,    0), S(  18,    6), S(  11,    8), S(  17,   21), S(  32,   64), S( 145,   71), S(   0,    0)};
constexpr PackedScore CANDIDATE_PASSER[2][8] = {
    {S(   0,    0), S( -30,  -19), S( -18,   -7), S(   0,   25), S(  25,   53), S(  67,  114), S(   0,    0), S(   0,    0)},
    {S(   0,    0), S( -17,  -10), S(  -8,   14), S(  -5,   28), S(  16,   46), S(  31,  175), S(   0,    0), S(   0,    0)}
};

constexpr PackedScore PASSED_PAWN[2][2][8] = {
    {
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -41,  -44), S( -19,   19), S(   9,  157), S(  66,  216), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -27,  -56), S(   1,  -22), S(  38,   39), S(  69,   25), S(   0,    0)}
    },
    {
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -29,  -56), S(  -4,  -18), S(  41,   33), S(  72,   -3), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -32,  -59), S(  -6,  -25), S(  18,   17), S(  -8,  -13), S(   0,    0)}
    }
};
constexpr PackedScore OUR_PASSER_PROXIMITY[8] = {S(  71,   99), S(  62,   93), S(  41,   73), S(   4,   60), S(   3,   39), S(   6,   26), S(  12,   18), S(  -8,   25)};
constexpr PackedScore THEIR_PASSER_PROXIMITY[8] = {S( -48,  -11), S(  -4,    0), S(  24,   -2), S(  18,   30), S(  12,   63), S(  17,   76), S(  24,   78), S(  29,   66)};
constexpr PackedScore DEFENDED_PUSH_SQ = S(  13,   12);

constexpr PackedScore PAWN_STORM[2][4][8] = {
    {
        {S(  43,   36), S(-136,  -45), S( -60,  -30), S(  57,    2), S(  26,   22), S(   0,   30), S(  -8,   30), S(   0,    0)},
        {S(  34,    7), S(  39, -118), S(  89,  -79), S(  57,  -19), S(  15,   -2), S( -23,    8), S(   4,    6), S(   0,    0)},
        {S(  10,   20), S(  97,  -95), S( 100,  -47), S(  60,   -1), S(  15,   17), S( -13,   23), S( -14,   26), S(   0,    0)},
        {S(  19,    5), S( 144,  -74), S( 117,  -22), S(  69,    5), S(   9,   15), S( -15,    9), S( -20,   19), S(   0,    0)}
    },
    {
        {S(   0,    0), S(   0,    0), S(  61,   62), S( -22,   32), S( -24,   40), S( -15,   57), S(   0,   45), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(  98,   16), S(  -5,   19), S( -18,   27), S( -30,   42), S( -40,   34), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S( 105,   17), S(   7,   24), S( -15,   39), S(  15,   43), S(  50,   28), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(  87,   17), S(  15,   24), S( -25,   25), S( -21,   21), S(  -5,   18), S(   0,    0)}
    }
};
constexpr PackedScore PAWN_SHIELD[4][8] = {
    {S(  45,   36), S( -20,   51), S( -11,   42), S(  40,   31), S(  44,   18), S( -27,   -1), S( -70,  -13), S(   0,    0)},
    {S(  47,   10), S( -25,   19), S(   8,    7), S(  54,   -1), S(  44,  -15), S(  16,  -19), S( -40,  -32), S(   0,    0)},
    {S(  21,   -2), S(  17,  118), S(  12,   -2), S(  35,  -21), S(  25,  -19), S(  -6,  -24), S( -58,  -35), S(   0,    0)},
    {S(  15,   17), S(   3,   12), S(   2,   10), S(  29,    5), S(  34,    2), S(  10,    5), S( -78,    8), S(   0,    0)}
};
constexpr PackedScore SAFE_KNIGHT_CHECK = S( 111,    5);
constexpr PackedScore SAFE_BISHOP_CHECK = S(  62,   17);
constexpr PackedScore SAFE_ROOK_CHECK = S( 105,   16);
constexpr PackedScore SAFE_QUEEN_CHECK = S(  53,   25);
constexpr PackedScore UNSAFE_KNIGHT_CHECK = S(  16,    2);
constexpr PackedScore UNSAFE_BISHOP_CHECK = S(  39,   10);
constexpr PackedScore UNSAFE_ROOK_CHECK = S(  39,    2);
constexpr PackedScore UNSAFE_QUEEN_CHECK = S(  15,    4);
constexpr PackedScore QUEENLESS_ATTACK = S(-142,  149);
constexpr PackedScore KING_ATTACKER_WEIGHT[4] = {S(  55,   -5), S(  21,    0), S(  28,  -13), S(   4,  -10)};
constexpr PackedScore KING_ATTACKS = S(   7,   -1);
constexpr PackedScore WEAK_KING_RING = S(   7,   -1);
constexpr PackedScore KING_FLANK_ATTACKS[2] = {S(  12,   -4), S(   7,    1)};
constexpr PackedScore KING_FLANK_DEFENSES[2] = {S(  -6,    0), S( -10,    2)};
constexpr PackedScore SAFETY_OFFSET = S(  77,  212);

constexpr PackedScore MINOR_BEHIND_PAWN = S(   6,   12);
constexpr PackedScore KNIGHT_OUTPOST = S(  22,   16);
constexpr PackedScore BISHOP_PAWNS[7] = {S(   3,   20), S(   5,   18), S(   3,   11), S(   1,    4), S(  -2,   -5), S(  -2,  -18), S(  -6,  -31)};
constexpr PackedScore BISHOP_PAIR = S(  19,   60);
constexpr PackedScore LONG_DIAG_BISHOP = S(  15,    8);
constexpr PackedScore ROOK_OPEN[2] = {S(  23,    4), S(  12,    6)};

constexpr PackedScore TEMPO = S(  31,   34);

constexpr PackedScore COMPLEXITY_PAWNS = S(   0,   10);
constexpr PackedScore COMPLEXITY_PAWNS_BOTH_SIDES = S(   0,   63);
constexpr PackedScore COMPLEXITY_PAWN_ENDGAME = S(   0,   80);
constexpr PackedScore COMPLEXITY_OFFSET = S(   0, -133);

#undef S


}