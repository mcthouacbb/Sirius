#pragma once

#include "../defs.h"

namespace eval
{

#define S(mg, eg) PackedScore(mg, eg)

constexpr PackedScore MATERIAL[6] = {S(  61,  130), S( 286,  431), S( 309,  442), S( 388,  785), S( 738, 1620), S(0, 0)};

constexpr PackedScore PSQT[6][64] = {
    {
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  56,   75), S(  28,   92), S(  20,  106), S(  54,   77), S(  69,   67), S(  48,   82), S(  35,  100), S(  59,   83),
        S(  17,    6), S(  -7,   37), S(   7,    1), S(  17,  -22), S(  10,  -19), S(   7,   -8), S( -17,   29), S(  -1,   14),
        S(  14,    5), S(  -4,   12), S(  14,  -20), S(  11,  -24), S(  -1,  -23), S(  -1,  -13), S(  -9,   11), S( -10,    9),
        S(   6,   -2), S(  -5,   15), S(  14,  -26), S(  16,  -17), S(   9,  -15), S(  -1,  -11), S( -15,   12), S( -13,   -1),
        S(  -1,   -5), S(   7,    8), S(   4,   -4), S(   1,   -2), S(  -8,   -2), S( -10,   -7), S( -23,   11), S( -24,   -2),
        S(   9,   -6), S(  24,    9), S(  31,  113), S(   9,    1), S(  -2,   -8), S(  -6,   -6), S( -15,   14), S( -15,    1),
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
    },
    {
        S( -67,  -99), S( -71,  -29), S( -27,  -18), S(   1,   -9), S( -30,    2), S( -57,    4), S( -99,    4), S( -85,  -57),
        S( -16,  -14), S(  12,    2), S(  23,    1), S(  -2,    9), S(   3,   12), S(   5,   11), S(   1,   12), S(  -7,   -3),
        S(   4,   -8), S( -10,    7), S(  30,   -2), S(  21,   16), S(  10,   23), S(  14,   15), S(   7,    3), S(  -5,   -1),
        S(  27,    4), S(  24,   15), S(  37,   19), S(  24,   25), S(  24,   27), S(  31,   13), S(  22,    3), S(  14,    8),
        S(  10,   16), S(  14,   17), S(  21,   20), S(  20,   28), S(  22,   20), S(  19,   18), S(  24,    0), S(  11,    0),
        S(  14,   -2), S(  15,    4), S(  16,    3), S(  15,   16), S(   5,   16), S(   3,    0), S(   6,   -7), S(  -6,   -8),
        S(   9,   -2), S(  11,   -5), S(   8,   -4), S(  12,    0), S(   6,   -1), S(  -3,   -4), S(  -2,   -8), S( -13,  -10),
        S(  -3,  -19), S(  -5,  -12), S(   3,  -11), S(   7,    0), S(   1,   -4), S( -15,  -10), S(  -8,  -17), S( -40,  -11),
    },
    {
        S( -45,  -16), S( -27,    4), S(  -4,   -5), S( -72,   11), S( -68,   18), S( -55,    3), S( -31,    7), S( -33,    5),
        S( -22,   -9), S( -42,    3), S( -12,    1), S( -10,    3), S( -23,   12), S(   1,   -1), S( -13,   -7), S(  -2,   -9),
        S(  11,   12), S(  -2,    8), S(  21,    6), S(   3,   12), S(  15,    6), S(   0,   -2), S(  10,    5), S(   7,    0),
        S( -11,    6), S(   2,   12), S(   1,   16), S(  17,   18), S(  22,   22), S(  19,    8), S(   5,   11), S(  -4,    1),
        S(  16,   -6), S(  -5,   13), S(   7,   12), S(  15,   14), S(  22,   12), S(   5,   13), S(   4,    5), S(   4,   -3),
        S(  19,   -9), S(  22,   -2), S(   3,   -3), S(  10,   11), S(   0,    7), S(   5,   -4), S(  19,    0), S(   6,  -10),
        S(  26,  -20), S(  23,  -25), S(  27,   -9), S(   6,   -4), S(  -1,   -1), S(  11,  -17), S(   6,  -27), S(  16,  -12),
        S(  28,  -39), S(  20,  -16), S(  -5,   -3), S(  20,   -7), S(   1,   -3), S(   1,    0), S(  11,   -4), S(   7,  -19),
    },
    {
        S(  13,   12), S( -22,   37), S( -13,   29), S( -24,   26), S( -13,   24), S( -12,   29), S(   7,   18), S(   8,   19),
        S(  25,    4), S(  31,    8), S(  13,   17), S(  -5,   21), S(  25,   13), S(  11,   24), S(   8,   20), S(  10,   13),
        S(  -7,    8), S(  26,    6), S(   5,    9), S(   8,   10), S(   7,    9), S(   4,   17), S(  17,   12), S(  -4,   14),
        S(  -9,   10), S( -15,   20), S(  -5,   17), S(  -6,   11), S(   0,   10), S(   7,   12), S(   5,   11), S(  -6,   13),
        S( -18,    4), S(   1,    8), S( -18,   14), S(  -7,    9), S(  -5,    3), S(  -9,    6), S(  -8,    4), S(  -9,    4),
        S(   5,  -21), S(  24,  -24), S(   0,  -13), S(   0,  -14), S(  -4,  -13), S(  -7,  -13), S(  -4,  -15), S( -11,  -13),
        S(  -6,  -27), S(  26,  -36), S(   6,  -22), S(   3,  -20), S(   4,  -22), S(   2,  -19), S(  -7,  -19), S( -11,  -23),
        S(  -6,  -39), S(  -2,  -19), S(   2,  -19), S(   8,  -24), S(   6,  -25), S(  -1,  -19), S(  -1,  -23), S(  -3,  -22),
    },
    {
        S(  12,   -9), S(  56,  -37), S( -19,   45), S( -25,   35), S(  15,    5), S( -13,   22), S( -25,    9), S( -17,   13),
        S(  35,   11), S(   5,   19), S( -19,   37), S( -49,   69), S( -21,   45), S(   2,   10), S(   8,   -7), S(  14,   -4),
        S(   3,   16), S(  -6,    8), S( -17,   29), S( -27,   25), S(  -1,   18), S(   9,   13), S(  13,  -12), S(  24,  -11),
        S(  -1,   14), S( -15,   33), S( -10,   16), S( -27,   35), S( -14,   34), S(   9,    5), S(   9,    5), S(  10,   -5),
        S(   1,    9), S(   0,   12), S( -12,   17), S(  -6,   26), S(  -9,   33), S(  -1,   16), S(   7,   12), S(   8,   -3),
        S(   9,  -19), S(  10,  -10), S(   0,    3), S(  -8,   12), S(  -3,    9), S(   2,    8), S(  17,  -15), S(  17,  -24),
        S(   9,  -48), S(  17,  -67), S(   9,  -37), S(   8,  -21), S(   7,  -11), S(  11,  -24), S(  12,  -30), S(  18,  -46),
        S(  18,  -66), S(  -8,  -50), S( -11,  -31), S(  -1,  -28), S(   2,  -28), S(  -2,  -23), S(  -5,  -26), S(  -3,  -24),
    },
    {
        S(  46,  -67), S(  28,    4), S( -51,  -13), S( -65,    4), S(   9,   -6), S(   9,   -6), S(   9,   -6), S(   9,   -6),
        S( -17,   30), S(  36,   58), S(  -6,   34), S(  -1,   29), S(   9,   -6), S(   9,   -6), S(   9,   -6), S(   9,   -6),
        S(  36,   20), S(  57,   54), S(  34,   32), S( -21,   51), S(   9,   -6), S(   9,   -6), S(   9,   -6), S(   9,   -6),
        S( -17,   21), S( -14,   55), S( -37,   32), S( -85,   47), S(   9,   -6), S(   9,   -6), S(   9,   -6), S(   9,   -6),
        S( -56,   12), S( -53,   43), S( -51,   12), S( -86,   28), S(   9,   -6), S(   9,   -6), S(   9,   -6), S(   9,   -6),
        S( -17,   -6), S( -11,   18), S( -32,  -11), S( -52,    4), S(   9,   -6), S(   9,   -6), S(   9,   -6), S(   9,   -6),
        S(  37,  -27), S(  30,   -3), S(   5,  -30), S( -24,  -19), S(   9,   -6), S(   9,   -6), S(   9,   -6), S(   9,   -6),
        S(  37,  -60), S(  37,  -23), S(  12,  -51), S(   1,  -48), S(   9,   -6), S(   9,   -6), S(   9,   -6), S(   9,   -6),
    },
};

constexpr PackedScore MOBILITY[4][28] = {
    {S( -16,  -16), S( -39,  -44), S( -16,  -16), S(  -7,    0), S(   3,    7), S(   8,   17), S(  16,   20), S(  24,   24), S(  35,   16), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S( -23,  -33), S( -32,  -59), S( -20,  -31), S( -13,  -14), S(  -4,   -4), S(   1,    6), S(   3,   15), S(   6,   18), S(   7,   21), S(  10,   22), S(  12,   22), S(  17,   16), S(  16,   23), S(  20,    3), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S( -26,  -33), S( -30,  -69), S( -15,  -53), S(  -3,  -32), S(  -1,  -18), S(  -2,   -7), S(  -1,    0), S(   2,    7), S(   3,   10), S(   7,   16), S(   5,   26), S(   7,   33), S(   9,   37), S(  13,   37), S(  22,   35), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S( -17,   25), S( -51,  -60), S( -70, -119), S( -12, -211), S( -15,  -71), S(  -8,  -19), S(   1,  -31), S(   2,  -10), S(   3,    8), S(   5,   18), S(   7,   21), S(  10,   24), S(   9,   35), S(  13,   34), S(  12,   41), S(  13,   44), S(  13,   46), S(  15,   48), S(  13,   48), S(  19,   40), S(  23,   33), S(  30,   16), S(  25,   24), S(  34,    0), S(  30,    2), S(   8,    0), S( -17,   -3), S(-114,   16)}
};

constexpr PackedScore THREAT_BY_PAWN[6] = {S(   4,  -18), S(  66,   27), S(  60,   58), S(  81,   24), S(  71,    1), S(   0,    0)};
constexpr PackedScore THREAT_BY_KNIGHT[2][6] = {
    {S(   6,   28), S(  18,   36), S(  40,   42), S(  76,   13), S(  58,  -31), S(   0,    0)},
    {S(  -8,    9), S(   8,   34), S(  29,   28), S(  65,   32), S(  58,   -4), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_BISHOP[2][6] = {
    {S(  -2,   34), S(  41,   31), S(  -6,   28), S(  69,   12), S(  70,   49), S(   0,    0)},
    {S(  -4,    5), S(  17,   22), S( -20,  -17), S(  45,   43), S(  46,  115), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_ROOK[2][6] = {
    {S(   0,   41), S(  17,   59), S(  27,   54), S(   8,  -40), S(  75,    7), S(   0,    0)},
    {S(  -8,    7), S(   1,   16), S(  13,    3), S(   6,  -79), S(  63,   45), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_QUEEN[2][6] = {
    {S(   6,    8), S(  23,   20), S(   9,   49), S(  20,   14), S(  11,  -54), S(  96,   45)},
    {S(  -3,   12), S(   0,    6), S(  -7,   15), S(  -5,    3), S( -17,  -75), S( 113,   47)}
};
constexpr PackedScore THREAT_BY_KING[6] = {S( -25,   45), S(   9,   47), S(  28,   40), S(  87,    6), S(   0,    0), S(   0,    0)};
constexpr PackedScore PUSH_THREAT = S(  14,   17);
constexpr PackedScore LOW_MOB_THREAT = S( -11,   16);

constexpr PackedScore ISOLATED_PAWN[8] = {S(  -9,    6), S(  -3,  -15), S( -12,   -8), S( -10,  -16), S( -12,  -15), S(  -8,   -8), S(  -4,  -13), S( -12,    7)};
constexpr PackedScore DOUBLED_PAWN[8] = {S(   1,  -61), S(  14,  -37), S(   1,  -27), S(  -1,  -17), S(  -4,  -11), S(  -6,  -19), S(   6,  -38), S(   8,  -73)};
constexpr PackedScore BACKWARDS_PAWN[8] = {S(   0,    0), S(  -7,  -13), S(  -2,  -13), S(  -8,  -11), S(   1,  -17), S(  26,    1), S(   0,    0), S(   0,    0)};
constexpr PackedScore PAWN_PHALANX[8] = {S(   0,    0), S(   6,   -4), S(  11,   -2), S(  20,    8), S(  40,   40), S( 115,  212), S( -14,  358), S(   0,    0)};
constexpr PackedScore DEFENDED_PAWN[8] = {S(   0,    0), S(   0,    0), S(  19,    6), S(  11,    7), S(  16,   20), S(  30,   62), S( 144,   70), S(   0,    0)};
constexpr PackedScore CANDIDATE_PASSER[2][8] = {
    {S(   0,    0), S( -33,  -17), S( -19,   -7), S(   0,   26), S(  27,   53), S(  60,   88), S(   0,    0), S(   0,    0)},
    {S(   0,    0), S( -19,   -7), S(  -9,   14), S(  -4,   28), S(  19,   41), S(  30,  154), S(   0,    0), S(   0,    0)}
};

constexpr PackedScore PASSED_PAWN[2][2][8] = {
    {
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -40,  -40), S( -15,   24), S(   4,  150), S(  57,  224), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -27,  -53), S(   7,  -23), S(  31,   20), S(  60,   30), S(   0,    0)}
    },
    {
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -32,  -56), S(   1,  -24), S(  38,    9), S(  61,   -3), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -32,  -61), S(   0,  -34), S(  12,  -10), S( -24,  -10), S(   0,    0)}
    }
};
constexpr PackedScore OUR_PASSER_PROXIMITY[8] = {S(   0,    0), S(  58,   81), S(  10,   68), S(   3,   44), S(   4,   32), S(  11,   23), S(  18,   20), S(  15,   18)};
constexpr PackedScore THEIR_PASSER_PROXIMITY[8] = {S(   0,    0), S( -57,    8), S(  17,    1), S(  16,   26), S(  21,   45), S(  19,   77), S(  21,   78), S(  24,   68)};

constexpr PackedScore PAWN_STORM[2][4][8] = {
    {
        {S(  44,   35), S(-127,  -48), S( -20,   11), S(  31,   11), S(  17,   23), S(  -2,   30), S(  -8,   29), S(   0,    0)},
        {S(  33,    8), S(  43, -127), S(  83,  -46), S(  37,   -5), S(   9,    3), S( -27,   11), S(   2,    7), S(   0,    0)},
        {S(  13,   21), S( 107,  -99), S( 102,  -22), S(  53,    6), S(  11,   20), S( -11,   24), S( -11,   25), S(   0,    0)},
        {S(  20,    5), S( 164,  -79), S( 101,  -19), S(  43,   11), S(   1,   18), S( -17,   11), S( -19,   19), S(   0,    0)}
    },
    {
        {S(   0,    0), S(   0,    0), S(  34,   41), S( -24,   26), S(  -4,   29), S(  20,   31), S(  -7,   29), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(  91,   -2), S(   3,    8), S( -11,   18), S(  -3,   16), S(   2,    7), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(  85,    7), S(  -1,   13), S(   0,   25), S(  26,   25), S(   3,   22), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(  37,    0), S(  19,   18), S( -27,   16), S(  -4,   10), S(   1,   12), S(   0,    0)}
    }
};
constexpr PackedScore PAWN_SHIELD[4][8] = {
    {S(  47,   31), S( -15,   48), S( -12,   40), S(  30,   33), S(  35,   27), S( -25,   -3), S( -72,  -20), S(   0,    0)},
    {S(  49,    6), S( -21,   17), S(   7,    7), S(  49,    1), S(  36,   -8), S(  -1,  -16), S( -48,  -28), S(   0,    0)},
    {S(  21,   -1), S(  19,  113), S(   8,   -2), S(  29,  -22), S(  26,  -21), S(  -1,  -24), S( -65,  -28), S(   0,    0)},
    {S(  19,   14), S(   9,   10), S(  -3,   11), S(  21,    7), S(  29,    5), S(  10,    6), S( -89,   11), S(   0,    0)}
};
constexpr PackedScore SAFE_KNIGHT_CHECK = S( 111,    5);
constexpr PackedScore SAFE_BISHOP_CHECK = S(  61,   17);
constexpr PackedScore SAFE_ROOK_CHECK = S( 104,   17);
constexpr PackedScore SAFE_QUEEN_CHECK = S(  53,   25);
constexpr PackedScore UNSAFE_KNIGHT_CHECK = S(  16,    2);
constexpr PackedScore UNSAFE_BISHOP_CHECK = S(  39,   10);
constexpr PackedScore UNSAFE_ROOK_CHECK = S(  39,    3);
constexpr PackedScore UNSAFE_QUEEN_CHECK = S(  16,    3);
constexpr PackedScore QUEENLESS_ATTACK = S(-142,  154);
constexpr PackedScore KING_ATTACKER_WEIGHT[4] = {S(  56,   -5), S(  23,    0), S(  28,  -13), S(   4,  -10)};
constexpr PackedScore KING_ATTACKS = S(   7,    0);
constexpr PackedScore WEAK_KING_RING = S(   7,    0);
constexpr PackedScore KING_FLANK_ATTACKS[2] = {S(  11,   -4), S(   7,    1)};
constexpr PackedScore KING_FLANK_DEFENSES[2] = {S(  -6,    0), S( -10,    2)};
constexpr PackedScore SAFETY_OFFSET = S(  73,  199);

constexpr PackedScore MINOR_BEHIND_PAWN = S(   6,   12);
constexpr PackedScore KNIGHT_OUTPOST = S(  23,   16);
constexpr PackedScore BISHOP_PAWNS[7] = {S(   4,   20), S(   6,   19), S(   4,   12), S(   1,    4), S(  -2,   -5), S(  -2,  -18), S(  -6,  -31)};
constexpr PackedScore BISHOP_PAIR = S(  19,   60);
constexpr PackedScore LONG_DIAG_BISHOP = S(  15,    9);
constexpr PackedScore ROOK_OPEN[2] = {S(  25,    3), S(  13,    4)};

constexpr PackedScore TEMPO = S(  32,   34);

constexpr PackedScore COMPLEXITY_PAWNS = S(   0,    9);
constexpr PackedScore COMPLEXITY_PASSERS = S(   0,   -1);
constexpr PackedScore COMPLEXITY_PAWNS_BOTH_SIDES = S(   0,   66);
constexpr PackedScore COMPLEXITY_PAWN_ENDGAME = S(   0,   79);
constexpr PackedScore COMPLEXITY_OFFSET = S(   0, -127);

#undef S


}