#pragma once

#include "../defs.h"

namespace eval
{

#define S(mg, eg) PackedScore(mg, eg)

constexpr PackedScore MATERIAL[6] = {S(  57,   83), S( 275,  346), S( 282,  363), S( 392,  638), S( 828, 1185), S(0, 0)};

constexpr PackedScore PSQT[6][64] = {
	{
		S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
		S(  30,   75), S(  38,   76), S(  20,   83), S(  57,   43), S(  43,   49), S(  32,   55), S( -27,   93), S( -26,   85),
		S(  14,   37), S(   8,   54), S(  33,   13), S(  43,  -14), S(  51,  -16), S(  81,   -8), S(  45,   36), S(  29,   26),
		S(  -8,   22), S(  -2,   25), S(   4,    2), S(   4,   -9), S(  24,   -9), S(  26,  -11), S(  11,   15), S(  12,    0),
		S( -15,    5), S( -11,   20), S(  -3,   -3), S(   6,   -8), S(   8,   -7), S(  12,  -11), S(   2,    9), S(  -1,  -12),
		S( -26,   -1), S( -19,   10), S( -12,   -6), S( -10,   -2), S(   0,   -2), S(  -5,   -7), S(   4,   -1), S(  -8,  -17),
		S( -19,    4), S( -10,   15), S(  -4,    1), S(  -4,   -3), S(   3,    9), S(  26,   -7), S(  19,    3), S(  -4,  -15),
		S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
	},
	{
		S( -96,  -30), S( -89,   -5), S( -63,    8), S( -21,   -6), S(   6,   -5), S( -49,  -23), S( -81,   -3), S( -68,  -48),
		S( -12,    8), S(   2,   10), S(   3,    1), S(  15,    1), S(  12,   -9), S(  27,  -14), S(  12,    2), S(   8,   -9),
		S(   5,    0), S(   6,    0), S(  14,    3), S(  20,    2), S(  30,   -3), S(  57,  -23), S(  18,  -10), S(  23,  -13),
		S(   8,   12), S(  12,    2), S(  25,    4), S(  36,    8), S(  31,    7), S(  38,    1), S(  25,    0), S(  38,    0),
		S(   1,   10), S(  11,    0), S(  14,   10), S(  24,   10), S(  16,   20), S(  19,    2), S(  17,    1), S(   4,   11),
		S( -11,    2), S(   0,   -1), S(   1,    0), S(   7,   13), S(  18,   11), S(   3,   -6), S(  17,   -5), S(   3,    5),
		S( -14,    7), S( -11,   11), S(  -5,   -1), S(   8,    1), S(   6,   -1), S(   7,   -2), S(  10,   -1), S(   6,   20),
		S( -41,   23), S( -10,    1), S( -20,    3), S(  -9,    4), S(  -5,    6), S(   1,   -5), S(  -7,    7), S( -10,   19),
	},
	{
		S( -18,   10), S( -44,   11), S( -40,    5), S( -77,   11), S( -68,   11), S( -66,    1), S( -32,    4), S( -49,    0),
		S(  -4,   -5), S( -10,    0), S(  -7,   -4), S( -16,    0), S( -11,   -6), S( -15,   -3), S( -43,    7), S( -32,    3),
		S(   7,    8), S(  16,   -1), S(   7,    1), S(  16,   -7), S(   9,   -3), S(  38,    2), S(  25,    0), S(  24,    7),
		S(  -7,    5), S(   2,    7), S(   8,    2), S(  23,   11), S(   9,    5), S(  11,    7), S(  -6,    8), S(   0,    5),
		S(   2,    3), S(  -7,    7), S(   2,    5), S(  13,    6), S(  12,    2), S(  -2,    0), S(   0,    4), S(   6,   -5),
		S(   1,    3), S(  15,    2), S(   8,    0), S(   9,    2), S(  10,    6), S(  12,   -2), S(  16,   -6), S(  19,   -5),
		S(  22,    7), S(  10,  -13), S(  21,  -14), S(   4,   -4), S(  12,   -2), S(  20,  -10), S(  29,  -12), S(  25,   -9),
		S(  15,   -3), S(  24,    9), S(   6,   -2), S(   3,   -1), S(  11,   -5), S(   2,    7), S(  21,   -9), S(  37,  -15),
	},
	{
		S( -14,   18), S( -11,   19), S( -15,   27), S( -22,   25), S( -14,   18), S(   3,   16), S(   1,   20), S(  17,   11),
		S(  -5,   13), S(   2,   18), S(  13,   19), S(  29,    7), S(  13,    9), S(  23,    7), S(  29,    4), S(  31,    1),
		S( -12,   12), S(  18,    6), S(   9,    9), S(  10,    3), S(  29,   -2), S(  41,  -10), S(  63,  -10), S(  23,   -8),
		S( -12,   13), S(   3,    6), S(   2,   11), S(   6,    6), S(  10,   -5), S(  16,   -8), S(  13,   -3), S(   6,   -4),
		S( -20,    6), S( -18,    6), S( -11,    5), S(  -4,    2), S(  -3,    0), S( -14,    1), S(   4,   -7), S( -12,   -5),
		S( -25,    2), S( -19,   -3), S( -15,   -4), S( -11,   -3), S(  -4,   -8), S(  -5,  -12), S(  15,  -25), S(   1,  -22),
		S( -25,   -5), S( -19,   -5), S(  -9,   -6), S(  -7,   -8), S(  -3,  -14), S(  -2,  -16), S(   5,  -21), S( -19,  -16),
		S( -15,   -3), S( -10,   -6), S(  -7,   -1), S(   0,   -8), S(   6,  -15), S(  -1,  -10), S(  -2,  -12), S( -17,  -13),
	},
	{
		S( -20,   -5), S( -26,    0), S( -16,   22), S(  -1,   16), S(  -6,   18), S(   2,   12), S(  48,  -37), S(  -3,    0),
		S(   2,  -12), S( -13,   -1), S( -14,   30), S( -25,   46), S( -33,   64), S(   0,   30), S(   1,    9), S(  34,   12),
		S(   4,   -5), S(   2,   -2), S(  -6,   25), S(  -5,   31), S(  -6,   42), S(   8,   16), S(  23,    0), S(  17,    6),
		S(  -7,    7), S(  -2,   13), S(  -4,   18), S(  -8,   30), S( -15,   33), S(   0,   21), S(  -2,   33), S(   5,   14),
		S(  -1,   -4), S(  -6,   18), S(  -4,   15), S(  -7,   25), S(   0,   22), S(  -3,   18), S(   5,    7), S(  10,    4),
		S(  -1,  -17), S(   0,   -3), S(  -6,    8), S(  -6,   11), S(  -1,   14), S(   0,    5), S(  11,  -15), S(  13,  -22),
		S(   7,  -30), S(   0,  -30), S(   4,  -22), S(   7,  -16), S(   5,  -12), S(  12,  -38), S(  17,  -67), S(  33,  -83),
		S(  -4,  -32), S(   3,  -31), S(   2,  -21), S(   1,   -7), S(   6,  -25), S(  -6,  -34), S(   3,  -48), S(  12,  -49),
	},
	{
		S(  44,  -53), S(  68,  -28), S( 114,  -32), S(  51,  -10), S(  63,  -32), S( -17,    2), S(  23,    7), S( 110,  -70),
		S( -94,   27), S(   9,   28), S(  24,   14), S( 151,  -16), S(  93,   -9), S(  40,   27), S(  10,   44), S( -80,   46),
		S(-111,   26), S(  35,   18), S(  29,   10), S(  40,    4), S(  81,    1), S(  99,   13), S(  -9,   42), S( -68,   31),
		S( -68,    1), S( -24,    9), S( -15,    7), S( -15,    2), S( -20,   -2), S( -29,   16), S( -64,   25), S(-150,   28),
		S( -72,  -10), S( -32,    0), S( -30,    3), S( -32,    2), S( -36,    2), S( -38,    5), S( -68,   13), S(-147,   18),
		S( -46,   -6), S(   8,   -2), S( -19,    3), S(  -1,   -1), S(  -4,   -1), S( -22,    6), S( -14,    4), S( -69,    9),
		S(  33,  -15), S(  24,   -1), S(  21,   -1), S(   4,   -3), S(   0,   -1), S(   7,    1), S(  24,   -2), S(  18,  -10),
		S(  22,  -33), S(  51,  -23), S(  24,   -9), S( -27,   -2), S(   7,  -19), S( -24,    4), S(  30,  -14), S(  30,  -39),
	},
};

constexpr PackedScore MOBILITY[4][28] = {
	{S(-122, -103), S( -32,  -52), S( -10,  -24), S(  -0,    0), S(  10,   13), S(  13,   25), S(  21,   31), S(  32,   35), S(  41,   34), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -20, -162), S( -37,  -83), S( -10,  -33), S(  -1,  -11), S(  11,    1), S(  17,   11), S(  23,   22), S(  28,   28), S(  32,   35), S(  35,   37), S(  36,   42), S(  47,   36), S(  45,   42), S(  55,   32), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S(  -5, -131), S( -28,  -79), S( -16,  -29), S(  -8,  -10), S(  -3,   -2), S(  -0,    7), S(   1,   12), S(   3,   18), S(   5,   21), S(   9,   24), S(  10,   29), S(  11,   34), S(  15,   36), S(  17,   36), S(  18,   32), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S(   0,    0), S(   0,    0), S(-210,  -56), S( -24, -226), S( -45,  -57), S( -12,  -57), S(  -6,  -34), S(  -4,  -13), S(  -0,    4), S(   2,   26), S(   6,   31), S(  10,   35), S(  14,   42), S(  19,   41), S(  21,   44), S(  23,   50), S(  24,   52), S(  25,   56), S(  27,   58), S(  28,   57), S(  36,   54), S(  48,   37), S(  59,   34), S(  77,   13), S(  73,   21), S( 188,  -53), S( 109,  -21), S(  36,   -1)}
};

constexpr PackedScore THREATS[6][6] = {
	{S(   9,  -14), S(  58,   21), S(  57,   56), S(  83,    5), S(  70,  -25), S(   0,    0)},
	{S(  -4,   12), S(   0,    0), S(  29,   34), S(  65,   13), S(  50,  -26), S(   0,    0)},
	{S(   1,   17), S(  23,   29), S(   0,    0), S(  49,   24), S(  65,   77), S(   0,    0)},
	{S( -10,   19), S(   2,   24), S(  11,   18), S(   0,    0), S(  73,   15), S(   0,    0)},
	{S(  -2,   11), S(   2,   14), S(  -0,   30), S(   4,    4), S(   0,    0), S(   0,    0)},
	{S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)}
};

constexpr PackedScore PASSED_PAWN[8] = {S(   0,    0), S( -15,  -63), S( -15,  -48), S( -13,  -15), S(  12,   19), S(   3,   86), S(  52,   95), S(   0,    0)};
constexpr PackedScore ISOLATED_PAWN[8] = {S(  -3,    6), S(  -3,  -11), S( -10,   -5), S(  -6,  -12), S( -10,  -13), S(  -7,   -4), S(  -2,  -12), S( -10,    7)};
constexpr PackedScore PAWN_PHALANX[8] = {S(   0,    0), S(   4,   -2), S(  13,    6), S(  21,   16), S(  47,   56), S( 130,  175), S(-180,  435), S(   0,    0)};
constexpr PackedScore DEFENDED_PAWN[8] = {S(   0,    0), S(   0,    0), S(  18,   11), S(  12,    8), S(  12,   16), S(  24,   40), S( 163,   28), S(   0,    0)};
constexpr PackedScore OUR_PASSER_PROXIMITY[8] = {S(   0,    0), S(   6,   50), S(  -5,   37), S(  -4,   21), S(  -2,   11), S(   2,    9), S(  16,    6), S(   5,    5)};
constexpr PackedScore THEIR_PASSER_PROXIMITY[8] = {S(   0,    0), S( -71,   -8), S(   5,   -0), S(  -1,   25), S(   5,   34), S(   5,   42), S(   6,   47), S( -11,   46)};

constexpr PackedScore PAWN_STORM[3][8] = {
	{S(  45,  -34), S(  25,  -17), S(  18,   -3), S(   9,   -0), S(   3,    2), S(  -0,    6), S(   1,    5), S(  10,  -10)},
	{S(   0,    0), S(   8,  -29), S(  24,    1), S(   1,    0), S(  -6,    7), S(  -8,   12), S(  -9,   14), S(   8,   -2)},
	{S(  -1,   -2), S(  -6,    5), S(   4,    9), S(   2,    8), S(   4,    8), S(   4,    9), S(   4,    9), S(  -7,   -4)}
};
constexpr PackedScore PAWN_SHIELD[3][8] = {
	{S(   2,  -13), S(  -8,   -7), S(  -5,  -11), S(  -0,  -10), S(  13,  -14), S(  17,  -26), S(  32,  -30), S(   8,    0)},
	{S(   0,    0), S( -17,    3), S( -10,   -4), S(   7,   -4), S(  19,  -11), S(  32,  -30), S(  53,  -38), S(  19,    2)},
	{S(  -3,   -9), S(  -2,   -6), S(   1,   -5), S(   1,   -0), S(   4,    1), S(   5,    1), S(  22,    4), S(  -7,    6)}
};
constexpr PackedScore SAFE_KNIGHT_CHECK = S(  75,   -4);
constexpr PackedScore SAFE_BISHOP_CHECK = S(  16,   -6);
constexpr PackedScore SAFE_ROOK_CHECK = S(  52,   -2);
constexpr PackedScore SAFE_QUEEN_CHECK = S(  30,    9);
constexpr PackedScore KING_ATTACKER_WEIGHT[4] = {S(  14,   -3), S(   9,    1), S(   9,  -16), S(  -0,   13)};
constexpr PackedScore KING_ATTACKS[14] = {S( -25,   16), S( -29,   11), S( -32,    9), S( -31,   13), S( -21,    9), S(  -3,    1), S(  23,   -9), S(  58,  -27), S( 105,  -52), S( 139,  -66), S( 186,  -81), S( 249, -117), S( 252, -100), S( 271, -120)};

constexpr PackedScore KNIGHT_OUTPOST = S(  32,   23);
constexpr PackedScore BISHOP_PAIR = S(  20,   57);
constexpr PackedScore ROOK_OPEN[2] = {S(  26,    8), S(  15,    7)};

constexpr PackedScore TEMPO = S(  28,   25);

#undef S


}
