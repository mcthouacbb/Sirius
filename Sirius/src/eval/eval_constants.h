#pragma once

#include "../defs.h"

namespace eval
{

#define S(mg, eg) PackedScore(mg, eg)

constexpr PackedScore MATERIAL[6] = {S(  62,   87), S( 294,  362), S( 291,  378), S( 412,  671), S( 860, 1227), S(0, 0)};

constexpr PackedScore PSQT[6][64] = {
	{
		S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
		S(  36,   77), S(  43,   79), S(  28,   86), S(  63,   45), S(  48,   51), S(  37,   59), S( -28,   98), S( -31,   91),
		S(  14,   40), S(   9,   56), S(  36,   14), S(  45,  -15), S(  51,  -15), S(  84,   -6), S(  44,   38), S(  29,   28),
		S(  -7,   23), S(  -3,   27), S(   5,    3), S(   5,   -9), S(  24,   -9), S(  26,  -10), S(  10,   17), S(  11,    2),
		S( -15,    6), S( -12,   21), S(  -1,   -4), S(   7,   -8), S(   9,   -7), S(  13,  -11), S(   0,    9), S(  -1,  -11),
		S( -25,   -1), S( -20,   10), S( -11,   -6), S(  -9,   -3), S(   1,   -3), S(  -5,   -8), S(   4,   -2), S(  -7,  -17),
		S( -18,    4), S( -11,   15), S(  -4,    0), S(  -5,   -2), S(   3,    8), S(  27,   -9), S(  18,    1), S(  -4,  -15),
		S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
	},
	{
		S( -94,  -34), S( -83,   -7), S( -61,    8), S( -14,   -8), S(   7,   -4), S(  -5,  -27), S( -69,   -4), S( -70,  -50),
		S( -13,    6), S(  -2,   10), S(   1,    2), S(  10,    1), S(   7,   -6), S(  29,  -13), S(  15,    2), S(   6,   -9),
		S(   1,    0), S(   4,    2), S(  10,    3), S(  16,    3), S(  28,   -3), S(  57,  -22), S(  13,   -7), S(  22,  -11),
		S(   8,   11), S(  16,    3), S(  28,    4), S(  35,    9), S(  29,   13), S(  44,    3), S(  31,    5), S(  38,    1),
		S(   2,   12), S(  18,    3), S(  18,   13), S(  27,   11), S(  21,   23), S(  25,    7), S(  24,    8), S(   8,   15),
		S( -15,    0), S(  -4,    0), S(  -2,   -1), S(   3,   13), S(  16,   11), S(   1,   -6), S(  15,   -4), S(   0,    4),
		S( -19,    6), S( -16,   10), S( -10,    0), S(   2,    0), S(   1,   -1), S(   5,   -1), S(   6,   -2), S(   1,   17),
		S( -49,   22), S( -12,   -4), S( -20,    0), S( -11,    3), S(  -4,    4), S(   0,   -7), S( -11,    5), S( -16,   17),
	},
	{
		S(  -9,    2), S( -37,    8), S( -42,    2), S( -67,    8), S( -68,    7), S( -24,   -5), S( -26,   -1), S( -49,   -1),
		S(  -8,   -6), S( -13,   -2), S(  -6,   -4), S( -21,    0), S(  -9,   -7), S( -19,   -4), S( -52,   10), S( -39,    1),
		S(   2,    5), S(  12,    1), S(   1,    2), S(  16,   -5), S(   2,    0), S(  34,    6), S(  15,    0), S(  21,    6),
		S(  -6,    5), S(   6,    6), S(  13,    4), S(  20,   15), S(  14,   11), S(  11,    9), S(   7,    9), S(   2,    3),
		S(   2,    1), S(   0,    8), S(   4,   10), S(  16,   12), S(  15,    9), S(   8,    6), S(   5,    5), S(  18,   -7),
		S(   1,    1), S(  14,    2), S(   7,    4), S(   0,    6), S(   7,   10), S(   8,    0), S(  18,   -7), S(  16,  -10),
		S(  19,    4), S(   8,  -13), S(  12,  -13), S(  -3,    1), S(   4,   -2), S(  18,  -10), S(  25,  -15), S(  23,  -13),
		S(  12,   -4), S(  15,    8), S(   5,    3), S(  -1,   -3), S(  13,   -6), S(  -2,    7), S(  23,  -11), S(  33,  -23),
	},
	{
		S( -12,   16), S( -16,   20), S( -24,   29), S( -29,   26), S( -16,   19), S(   5,   16), S(  -1,   21), S(  20,   11),
		S(  -3,   12), S(   1,   17), S(   9,   19), S(  24,    7), S(  10,    9), S(  15,    8), S(  25,    3), S(  29,    1),
		S( -10,   11), S(  16,    6), S(   7,    9), S(   7,    4), S(  26,   -2), S(  34,   -9), S(  49,   -7), S(  19,   -6),
		S(  -9,   13), S(   9,    6), S(   8,   10), S(   4,    6), S(  15,   -4), S(  19,   -7), S(  15,    0), S(   8,   -3),
		S( -16,    7), S(  -8,    7), S(  -5,    5), S(   0,    3), S(   6,    1), S(  -5,    5), S(  12,   -1), S(  -8,   -2),
		S( -23,    1), S( -18,   -3), S( -14,   -5), S( -11,   -4), S(  -2,   -8), S(  -6,  -10), S(  16,  -22), S(  -1,  -21),
		S( -25,   -5), S( -19,   -5), S( -10,   -7), S(  -8,   -9), S(  -4,  -15), S(   0,  -16), S(   6,  -20), S( -20,  -16),
		S( -17,   -5), S( -16,   -9), S( -15,   -4), S(  -7,  -12), S(  -1,  -17), S(  -6,  -11), S(  -7,  -13), S( -20,  -12),
	},
	{
		S( -20,   -9), S( -32,    2), S( -25,   23), S(   2,   10), S(  -4,   13), S(   7,    7), S(  49,  -39), S(  10,   -9),
		S(   5,  -15), S( -15,   -2), S( -12,   25), S( -25,   43), S( -27,   57), S(   1,   23), S(  -3,   12), S(  40,    8),
		S(   8,   -5), S(   1,   -2), S(  -5,   22), S(  -4,   27), S( -15,   40), S(   6,   11), S(  23,   -4), S(  27,   -2),
		S(   1,    7), S(   2,   15), S(   5,   12), S( -10,   27), S( -13,   30), S(  10,   15), S(   9,   30), S(  17,   12),
		S(   0,    4), S(   3,   16), S(  -1,   13), S(  -5,   21), S(   6,   22), S(   3,   22), S(  17,    6), S(  16,    9),
		S(   2,  -16), S(   1,   -4), S(  -8,    7), S(  -8,   14), S(  -3,   19), S(   1,    5), S(  14,  -13), S(  14,  -17),
		S(   3,  -30), S(  -2,  -31), S(   2,  -22), S(   2,   -7), S(   1,   -6), S(   8,  -32), S(  17,  -63), S(  29,  -76),
		S( -14,  -28), S( -15,  -24), S( -13,  -13), S( -10,  -13), S(  -9,  -14), S( -17,  -24), S(  -6,  -39), S(  10,  -48),
	},
	{
		S(  40,  -51), S(  80,  -30), S( 118,  -33), S(  52,  -10), S(  59,  -33), S( -26,    3), S(  17,    6), S(  86,  -66),
		S( -97,   25), S(  15,   22), S(  29,   11), S( 147,  -18), S(  88,  -10), S(  48,   23), S(  21,   38), S( -86,   44),
		S(-110,   24), S(  53,   12), S(  38,    7), S(  46,    2), S(  84,    0), S(  99,   10), S(   7,   34), S( -62,   29),
		S( -64,    1), S( -19,    5), S( -15,    6), S( -16,    1), S( -20,   -3), S( -30,   15), S( -56,   22), S(-155,   30),
		S( -72,   -9), S( -27,   -1), S( -34,    4), S( -33,    2), S( -35,    1), S( -37,    5), S( -69,   14), S(-151,   20),
		S( -52,   -4), S(   3,   -2), S( -22,    3), S(  -6,   -1), S(  -9,   -2), S( -25,    6), S( -18,    4), S( -75,   11),
		S(  31,  -14), S(  22,    0), S(  18,   -1), S(   0,   -3), S(  -4,    0), S(   6,    2), S(  22,   -1), S(  16,   -9),
		S(  21,  -33), S(  54,  -24), S(  26,   -8), S( -28,   -1), S(   8,  -17), S( -21,    4), S(  33,  -15), S(  30,  -38),
	},
};

constexpr PackedScore MOBILITY[4][28] = {
	{S( -10,  -13), S( -34,  -60), S( -13,  -29), S(  -3,   -5), S(   7,    6), S(  11,   17), S(  20,   23), S(  29,   28), S(  38,   26), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S(  -4,  -32), S( -40,  -92), S( -18,  -44), S( -11,  -21), S(   1,   -9), S(   8,    1), S(  13,   11), S(  18,   16), S(  21,   21), S(  25,   23), S(  24,   26), S(  34,   19), S(  27,   25), S(  42,   13), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -45,  -25), S(   1,  -54), S( -27,  -47), S( -17,  -32), S( -11,  -26), S(  -5,  -11), S(  -4,   -4), S(  -7,    2), S(  -3,    4), S(   1,    8), S(   6,   12), S(   8,   17), S(  13,   21), S(  20,   22), S(  24,   18), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -48,    5), S( -64,  -73), S(-110,  -62), S( -77, -267), S( -82, -110), S( -37,  -55), S( -26,  -31), S( -18,  -26), S( -11,  -16), S(  -9,    6), S(  -6,   14), S(  -2,   23), S(   1,   29), S(   5,   31), S(   8,   34), S(  11,   38), S(  12,   40), S(  12,   45), S(  13,   49), S(  13,   52), S(  20,   48), S(  27,   36), S(  30,   38), S(  56,   10), S(  59,   13), S( 103,  -24), S(  99,  -24), S(  56,  -24)}
};

constexpr PackedScore THREAT_BY_PAWN[6] = {S(   7,  -16), S(  64,   27), S(  64,   56), S(  89,    8), S(  75,  -21), S(   0,    0)};
constexpr PackedScore THREAT_BY_KNIGHT[2][6] = {
	{S(   8,   27), S(  30,   21), S(  36,   37), S(  76,    2), S(  43,  -28), S(   0,    0)},
	{S(  -3,   11), S(  13,   41), S(  29,   31), S(  62,   26), S(  52,   -2), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_BISHOP[2][6] = {
	{S(   5,   32), S(  50,   22), S(   2,   33), S(  71,    7), S(  71,   32), S(   0,    0)},
	{S(   1,    9), S(  23,   23), S( -13,   12), S(  44,   40), S(  51,  121), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_ROOK[2][6] = {
	{S(   1,   41), S(  30,   47), S(  29,   46), S(  11,  -26), S(  75,   -7), S(   0,    0)},
	{S(  -6,   14), S(   5,   17), S(  16,    7), S(   6,  -51), S(  57,   53), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_QUEEN[2][6] = {
	{S(  12,    4), S(  37,    5), S(  19,   42), S(  25,  -11), S(  13,  -69), S( 155,  -59)},
	{S(  -1,   15), S(   2,    7), S(  -4,   23), S(  -3,    3), S( -19,  -55), S( 116,   52)}
};
constexpr PackedScore THREAT_BY_KING[6] = {S( -16,   39), S(  29,   40), S(  30,   45), S( 100,    7), S(   0,    0), S(   0,    0)};
constexpr PackedScore PUSH_THREAT = S(  19,   16);

constexpr PackedScore PASSED_PAWN[8] = {S(   0,    0), S( -17,  -69), S( -16,  -54), S( -14,  -20), S(  10,   16), S(  -1,   85), S(  48,   95), S(   0,    0)};
constexpr PackedScore ISOLATED_PAWN[8] = {S(  -4,    7), S(  -2,  -11), S( -11,   -5), S(  -6,  -13), S( -11,  -13), S(  -7,   -3), S(  -1,  -11), S( -10,    7)};
constexpr PackedScore PAWN_PHALANX[8] = {S(   0,    0), S(   5,   -2), S(  12,    6), S(  18,   15), S(  45,   54), S( 118,  178), S(-147,  433), S(   0,    0)};
constexpr PackedScore DEFENDED_PAWN[8] = {S(   0,    0), S(   0,    0), S(  18,   10), S(  12,    7), S(  14,   15), S(  30,   36), S( 174,   22), S(   0,    0)};
constexpr PackedScore OUR_PASSER_PROXIMITY[8] = {S(   0,    0), S(   6,   52), S(  -6,   40), S(  -5,   24), S(  -2,   14), S(   2,   11), S(  17,    8), S(   6,    7)};
constexpr PackedScore THEIR_PASSER_PROXIMITY[8] = {S(   0,    0), S( -79,    0), S(   7,   -0), S(  -1,   27), S(   5,   37), S(   5,   45), S(   8,   50), S( -10,   49)};

constexpr PackedScore PAWN_STORM[3][8] = {
	{S(  42,  -31), S(  22,  -16), S(  17,   -5), S(   8,   -1), S(   1,    2), S(  -3,    6), S(  -1,    5), S(   6,  -11)},
	{S(   0,    0), S(  16,  -26), S(  27,   -2), S(   4,    1), S(  -5,    7), S(  -6,   13), S(  -7,   14), S(   7,   -3)},
	{S(   0,   -2), S(  -8,    6), S(   3,    8), S(   2,    9), S(   4,    8), S(   4,   10), S(   4,   10), S(  -9,   -4)}
};
constexpr PackedScore PAWN_SHIELD[3][8] = {
	{S(   2,  -13), S(  -8,   -7), S(  -4,  -11), S(   1,  -11), S(  14,  -14), S(  17,  -25), S(  27,  -29), S(   7,    0)},
	{S(   0,    0), S( -15,    3), S(  -8,   -4), S(   9,   -4), S(  20,  -10), S(  34,  -29), S(  53,  -41), S(  16,    2)},
	{S(  -3,   -8), S(  -2,   -5), S(   0,   -5), S(   1,   -0), S(   4,    1), S(   5,    2), S(  22,    6), S(  -9,    7)}
};
constexpr PackedScore SAFE_KNIGHT_CHECK = S(  79,   -4);
constexpr PackedScore SAFE_BISHOP_CHECK = S(  16,   -7);
constexpr PackedScore SAFE_ROOK_CHECK = S(  58,   -4);
constexpr PackedScore SAFE_QUEEN_CHECK = S(  31,   10);
constexpr PackedScore KING_ATTACKER_WEIGHT[4] = {S(  15,   -4), S(   8,   -1), S(   7,  -18), S(  -2,   11)};
constexpr PackedScore KING_ATTACKS[14] = {S( -26,    6), S( -29,    4), S( -30,    2), S( -28,    7), S( -19,    5), S(  -4,    2), S(  20,   -7), S(  49,  -18), S(  94,  -38), S( 124,  -44), S( 161,  -60), S( 185,  -47), S( 220, -128), S( 184,    9)};

constexpr PackedScore KNIGHT_OUTPOST = S(  24,   17);
constexpr PackedScore BISHOP_PAWNS[7] = {S(  22,   19), S(  24,   17), S(  21,   10), S(  17,    2), S(  12,   -7), S(  10,  -19), S(   4,  -31)};
constexpr PackedScore BISHOP_PAIR = S(  20,   60);
constexpr PackedScore ROOK_OPEN[2] = {S(  21,    9), S(  11,   11)};

constexpr PackedScore TEMPO = S(  29,   30);

#undef S


}
