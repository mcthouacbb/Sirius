#pragma once

#include "../defs.h"

namespace eval
{

#define S(mg, eg) PackedScore(mg, eg)

constexpr PackedScore MATERIAL[6] = {S(  61,  129), S( 295,  443), S( 313,  451), S( 387,  811), S( 795, 1497), S(0, 0)};

constexpr PackedScore PSQT[6][64] = {
	{
		S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
		S(  65,   84), S(  29,   91), S(  34,   94), S(  57,   74), S(  68,   65), S(  33,   96), S(  30,  102), S(  63,   89),
		S(  26,   26), S(  31,   43), S(  30,   13), S(  56,  -21), S(  41,  -14), S(  24,    7), S(   3,   34), S(  10,   31),
		S(  19,   17), S(   9,   13), S(  11,   -5), S(  18,  -17), S(   7,  -17), S(   0,   -3), S(  -5,   12), S( -10,   21),
		S(   7,    4), S(   6,   10), S(   5,  -18), S(  13,  -14), S(   7,  -13), S(  -5,   -7), S( -13,    9), S( -17,    7),
		S(   0,    0), S(   9,   -3), S(   0,  -23), S(  -2,    1), S(  -8,    0), S( -16,   -7), S( -23,    3), S( -29,    5),
		S(  15,    3), S(  32,   -2), S(  15,   -9), S(   8,   10), S(  -6,    3), S(  -8,   -2), S( -13,   11), S( -18,   11),
		S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
	},
	{
		S( -67,  -84), S( -77,  -21), S( -31,  -14), S(  12,  -13), S( -38,    6), S( -66,    8), S(-105,   15), S( -74,  -42),
		S(  -6,  -10), S(  20,    0), S(  31,   -5), S(   4,    6), S(  11,    6), S(   5,   11), S(   0,   18), S(  -1,   11),
		S(  13,   -7), S(  11,   -3), S(  56,  -19), S(  36,    1), S(  18,    9), S(  15,    4), S(   7,    4), S(   3,    5),
		S(  33,    3), S(  35,    6), S(  45,    5), S(  33,   14), S(  28,   17), S(  33,    6), S(  21,    3), S(  18,   16),
		S(   5,   16), S(  16,   12), S(  25,    7), S(  16,   21), S(  20,   14), S(  24,   10), S(  25,    1), S(  13,   11),
		S(  -4,    0), S(  11,   -3), S(   2,   -9), S(  10,    8), S(   2,    8), S(   2,   -7), S(   2,   -5), S(  -4,   -2),
		S(  -4,    7), S(  -1,   -5), S(  -1,   -6), S(  -2,   -2), S(   0,   -2), S(  -4,   -9), S(  -8,   -3), S(  -6,   -1),
		S( -18,   -5), S( -18,    1), S( -10,   -7), S(  -9,    5), S( -13,    0), S( -20,   -7), S( -12,   -2), S( -33,    8),
	},
	{
		S( -38,   -3), S( -34,    6), S( -14,    1), S( -75,   12), S( -70,   18), S( -53,    4), S( -26,    8), S( -15,   15),
		S( -25,   -4), S( -36,   11), S( -12,   -1), S(  -3,   -1), S( -21,    8), S(   1,   -2), S(  -1,   -1), S(  -2,   -6),
		S(  19,   12), S(  14,   -1), S(  43,    4), S(   9,    5), S(  14,    0), S(   7,    4), S(   6,    5), S(   7,    3),
		S(  -3,    5), S(   9,    8), S(   7,   11), S(  18,   13), S(  18,   19), S(  12,    5), S(   5,    9), S(  -8,    8),
		S(  13,   -4), S(   2,    8), S(   5,    6), S(   8,   11), S(  16,    8), S(  -4,   13), S(  -2,    6), S(   0,    2),
		S(  21,  -11), S(  23,  -10), S(  13,   -3), S(   3,    7), S(  -4,    3), S(   6,    3), S(  10,    2), S(   0,   -6),
		S(  23,  -19), S(  30,  -24), S(  21,  -15), S(   4,   -5), S(  -4,    0), S(   8,  -18), S(   7,  -17), S(  14,   -7),
		S(  36,  -31), S(  20,  -19), S(  -4,    0), S(  15,   -3), S(   0,   -2), S(   2,    7), S(  11,   -1), S(  13,   -7),
	},
	{
		S(  10,   10), S( -28,   39), S( -15,   27), S( -13,   16), S( -29,   26), S( -26,   30), S( -12,   22), S(  -3,   17),
		S(  27,    1), S(  29,    7), S(  15,   12), S(   5,   13), S(  16,   15), S(   0,   27), S(  -2,   23), S(   1,   15),
		S(  10,    3), S(  41,    2), S(  30,    2), S(  26,    4), S(   3,   15), S(  -1,   25), S(  12,   19), S(  -8,   22),
		S(   3,   10), S(   4,   15), S(  14,   12), S(  12,    4), S(   3,   14), S(   6,   18), S(   6,   18), S(  -9,   21),
		S(  -7,   -1), S(  12,    3), S(  -4,    8), S(   7,    2), S(  -4,    6), S(  -8,    9), S( -11,    9), S( -14,    8),
		S(  10,  -27), S(  20,  -28), S(   1,  -16), S(   3,  -17), S(  -9,  -10), S( -14,  -10), S( -13,  -11), S( -19,   -9),
		S(  -5,  -31), S(  21,  -38), S(   5,  -24), S(   4,  -25), S(  -3,  -21), S(  -4,  -18), S( -14,  -14), S( -17,  -20),
		S(  -8,  -34), S(  -6,  -17), S(   0,  -22), S(   7,  -28), S(   0,  -25), S(  -8,  -16), S(  -7,  -21), S(  -8,  -17),
	},
	{
		S(   7,  -26), S(  44,  -49), S( -13,   15), S(  -9,    1), S(  10,  -18), S( -17,    1), S( -37,   -3), S( -15,  -14),
		S(  38,    2), S(  -5,   13), S( -19,   23), S( -38,   54), S( -26,   36), S( -10,    9), S(  -5,  -13), S(   8,  -14),
		S(  13,    6), S(  10,    8), S(   5,   14), S(  -9,   29), S(   4,   19), S(   8,   14), S(   6,   -5), S(  19,   -9),
		S(  11,   19), S(   8,   39), S(   8,   12), S( -11,   33), S(  -7,   33), S(   7,    6), S(   5,   15), S(   3,   10),
		S(  12,    9), S(  15,   17), S(   1,   26), S(   0,   29), S(  -5,   30), S(  -4,   23), S(   3,   17), S(  -1,    7),
		S(  15,  -24), S(  13,   -5), S(   4,    8), S(  -8,   22), S(  -7,   15), S(  -6,   17), S(   4,   -3), S(   3,  -12),
		S(  14,  -58), S(  19,  -69), S(   8,  -39), S(   5,   -5), S(   2,    1), S(   4,  -17), S(   3,  -21), S(  10,  -36),
		S(   6,  -52), S(  -7,  -53), S( -17,  -23), S(  -7,  -17), S(  -7,  -11), S( -11,   -6), S( -15,  -12), S( -14,  -11),
	},
	{
		S(  -6,  -62), S(   1,    2), S( -29,   -5), S( -19,   -9), S(   8,   -5), S(   8,   -5), S(   8,   -5), S(   8,   -5),
		S( -56,   32), S(  -2,   60), S(  -8,   47), S(  33,   19), S(   8,   -5), S(   8,   -5), S(   8,   -5), S(   8,   -5),
		S( -16,   23), S(  23,   54), S(  32,   42), S(   4,   42), S(   8,   -5), S(   8,   -5), S(   8,   -5), S(   8,   -5),
		S( -58,   22), S( -25,   48), S( -17,   38), S( -45,   34), S(   8,   -5), S(   8,   -5), S(   8,   -5), S(   8,   -5),
		S( -69,    9), S( -38,   32), S( -25,   20), S( -46,   17), S(   8,   -5), S(   8,   -5), S(   8,   -5), S(   8,   -5),
		S( -22,  -10), S(   3,   10), S( -11,   -1), S( -16,   -3), S(   8,   -5), S(   8,   -5), S(   8,   -5), S(   8,   -5),
		S(  31,  -30), S(  32,   -6), S(  11,  -15), S(  -4,  -18), S(   8,   -5), S(   8,   -5), S(   8,   -5), S(   8,   -5),
		S(  22,  -65), S(  22,  -26), S(   2,  -30), S(  13,  -51), S(   8,   -5), S(   8,   -5), S(   8,   -5), S(   8,   -5),
	},
};

constexpr PackedScore MOBILITY[4][28] = {
	{S( -12,  -19), S( -40,  -64), S( -15,  -32), S(  -7,   -5), S(   3,    7), S(   6,   18), S(  14,   26), S(  21,   33), S(  30,   33), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -21,  -32), S( -52,  -97), S( -30,  -38), S( -23,  -17), S( -11,   -4), S(  -4,    6), S(   1,   16), S(   6,   21), S(   8,   26), S(  13,   28), S(  16,   29), S(  28,   21), S(  29,   25), S(  47,    6), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -26,  -43), S(  14,  -73), S( -25,  -52), S( -13,  -31), S(  -7,  -24), S(  -3,   -6), S(   0,   -1), S(  -5,    9), S(  -1,   13), S(   2,   19), S(   6,   25), S(   6,   34), S(   9,   40), S(  15,   42), S(  23,   39), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -34,    8), S( -52,  -80), S( -95,  -82), S( -76, -252), S( -75,  -95), S( -29,  -40), S( -22,   -9), S( -14,   -4), S(  -6,   -3), S(  -5,   21), S(  -3,   29), S(   0,   38), S(   3,   42), S(   6,   44), S(   9,   46), S(  12,   48), S(  14,   49), S(  13,   55), S(  15,   54), S(  15,   56), S(  23,   48), S(  31,   32), S(  35,   29), S(  52,    8), S(  63,   -7), S(  63,   -8), S(  47,   -7), S(   9,  -23)}
};

constexpr PackedScore THREAT_BY_PAWN[6] = {S(   9,  -15), S(  64,   31), S(  63,   63), S(  79,   30), S(  75,   -8), S(   0,    0)};
constexpr PackedScore THREAT_BY_KNIGHT[2][6] = {
	{S(   8,   29), S(  27,   36), S(  38,   43), S(  74,   12), S(  48,  -22), S(   0,    0)},
	{S(  -4,   11), S(  14,   36), S(  30,   31), S(  64,   33), S(  57,    1), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_BISHOP[2][6] = {
	{S(   1,   38), S(  43,   36), S(  -9,   35), S(  70,   16), S(  69,   64), S(   0,    0)},
	{S(   0,    8), S(  22,   24), S( -22,  -17), S(  44,   46), S(  48,  123), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_ROOK[2][6] = {
	{S(   1,   43), S(  18,   64), S(  28,   58), S(  14,  -49), S(  75,   11), S(   0,    0)},
	{S(  -8,    7), S(   1,   17), S(  14,    3), S(  14,  -92), S(  65,   45), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_QUEEN[2][6] = {
	{S(   7,   10), S(  24,   21), S(   9,   52), S(  14,    9), S(  11,  -55), S(  95,   28)},
	{S(  -1,   10), S(   0,    7), S(  -7,   20), S(  -6,    3), S( -19,  -69), S( 109,   64)}
};
constexpr PackedScore THREAT_BY_KING[6] = {S( -33,   48), S(   3,   49), S(  22,   42), S(  82,   19), S(   0,    0), S(   0,    0)};
constexpr PackedScore PUSH_THREAT = S(  16,   21);

constexpr PackedScore ISOLATED_PAWN[8] = {S(  -6,   -2), S(  -4,  -11), S( -10,  -10), S( -11,  -16), S( -11,  -14), S(  -7,   -7), S(  -2,  -11), S(  -8,   -1)};
constexpr PackedScore PAWN_PHALANX[8] = {S(   0,    0), S(   6,   -3), S(  12,    4), S(  19,   16), S(  47,   61), S( 110,  227), S( -30,  353), S(   0,    0)};
constexpr PackedScore DEFENDED_PAWN[8] = {S(   0,    0), S(   0,    0), S(  21,   10), S(  13,    9), S(  13,   18), S(  21,   58), S( 133,   79), S(   0,    0)};

constexpr PackedScore PASSED_PAWN[2][2][8] = {
	{
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -32,  -35), S( -14,   25), S( -21,  152), S(  30,  240), S(   0,    0)},
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -20,  -49), S(  11,  -24), S(  15,   15), S(  61,   36), S(   0,    0)}
	},
	{
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -27,  -56), S(   0,  -26), S(  16,    1), S(  67,   -2), S(   0,    0)},
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -29,  -61), S(   1,  -36), S(  -7,  -19), S(  -3,  -19), S(   0,    0)}
	}
};
constexpr PackedScore OUR_PASSER_PROXIMITY[8] = {S(   0,    0), S(  47,   82), S(   2,   67), S(   0,   42), S(   3,   31), S(   9,   24), S(  18,   23), S(  11,   22)};
constexpr PackedScore THEIR_PASSER_PROXIMITY[8] = {S(   0,    0), S( -40,    6), S(  21,   -2), S(  13,   25), S(  17,   45), S(  10,   79), S(  14,   79), S(  17,   67)};

constexpr PackedScore PAWN_STORM[2][4][8] = {
	{
		{S(  15,   13), S(-135,  -50), S(  -2,   -9), S(   4,  -12), S(   0,    1), S(  -5,   10), S(  -4,    9), S(   0,    0)},
		{S(  11,    2), S(  -6, -105), S(  54,  -42), S(  10,  -10), S(   2,   -4), S( -11,    7), S(  -8,   10), S(   0,    0)},
		{S(  -3,    5), S(  59, -100), S(  71,  -44), S(  18,  -17), S(   3,   -1), S(  -7,    8), S(  -9,   12), S(   0,    0)},
		{S(   8,   -8), S( 104,  -85), S(  39,  -21), S(  15,   -2), S(  -1,    4), S(  -8,    0), S(  -2,    0), S(   0,    0)}
	},
	{
		{S(   0,    0), S(  -3,  -26), S( -30,  120), S(  17,  -54), S(  -3,    8), S(  -2,    6), S(  -5,   10), S(   0,    0)},
		{S(   0,    0), S(  -1,  -82), S(   4,   70), S(  52,  -35), S(   3,    2), S(  -7,    6), S(  -8,   10), S(   0,    0)},
		{S(   0,    0), S(  -8,   13), S( -59, -107), S(  20,  -29), S(   2,    4), S(  -1,    6), S(  -9,   11), S(   0,    0)},
		{S(   0,    0), S( -12,  -54), S(  68,   -9), S(  23,   -3), S(   1,    9), S(   1,  -10), S(   0,    7), S(   0,    0)}
	}
};
constexpr PackedScore PAWN_SHIELD[4][8] = {
	{S(  15,    3), S(  -8,   27), S( -16,   16), S(  -3,    8), S(   4,   -1), S( -32,  -26), S( -77,  -34), S(   0,    0)},
	{S(  18,    2), S( -15,   12), S( -11,    2), S(  12,   -2), S(  10,   -9), S(  -2,  -16), S( -42,  -31), S(   0,    0)},
	{S(   8,   14), S( -15,    9), S(   5,   -9), S(   3,   -1), S(   2,    1), S(  12,  -13), S(  -2,  -41), S(   0,    0)},
	{S(  15,   -3), S(   6,   -3), S(  -3,    0), S(   1,   -6), S(   9,  -10), S(  30,  -20), S(  -9,  -24), S(   0,    0)}
};
constexpr PackedScore SAFE_KNIGHT_CHECK = S(  82,   -2);
constexpr PackedScore SAFE_BISHOP_CHECK = S(  24,   11);
constexpr PackedScore SAFE_ROOK_CHECK = S(  60,    5);
constexpr PackedScore SAFE_QUEEN_CHECK = S(  23,   21);
constexpr PackedScore UNSAFE_KNIGHT_CHECK = S(   7,    1);
constexpr PackedScore UNSAFE_BISHOP_CHECK = S(  12,   12);
constexpr PackedScore UNSAFE_ROOK_CHECK = S(  20,    0);
constexpr PackedScore UNSAFE_QUEEN_CHECK = S(   6,   13);
constexpr PackedScore KING_ATTACKER_WEIGHT[4] = {S(  17,    2), S(  16,    2), S(  18,  -14), S(   5,    2)};
constexpr PackedScore KING_ATTACKS[14] = {S( -36,   15), S( -43,    9), S( -51,    4), S( -55,    6), S( -54,    2), S( -48,   -2), S( -32,   -6), S( -15,  -13), S(  14,  -22), S(  38,  -17), S(  57,  -23), S(  68,   17), S(  89,  -15), S(  77,   40)};

constexpr PackedScore MINOR_BEHIND_PAWN = S(   8,   14);
constexpr PackedScore KNIGHT_OUTPOST = S(  27,   19);
constexpr PackedScore LOST_KNIGHT[4] = {S( -12,    4), S( -11,    1), S( -20,   -2), S( -46,   -8)};
constexpr PackedScore BISHOP_PAWNS[7] = {S(   5,   24), S(   7,   22), S(   5,   13), S(   1,    5), S(  -2,   -5), S(  -3,  -19), S(  -8,  -34)};
constexpr PackedScore BISHOP_PAIR = S(  21,   62);
constexpr PackedScore ROOK_OPEN[2] = {S(  26,    3), S(  15,    3)};

constexpr PackedScore TEMPO = S(  32,   35);

constexpr PackedScore COMPLEXITY_PAWNS = S(   0,    8);
constexpr PackedScore COMPLEXITY_PASSERS = S(   0,    1);
constexpr PackedScore COMPLEXITY_PAWNS_BOTH_SIDES = S(   0,   69);
constexpr PackedScore COMPLEXITY_PAWN_ENDGAME = S(   0,   62);
constexpr PackedScore COMPLEXITY_OFFSET = S(   0, -132);

#undef S


}