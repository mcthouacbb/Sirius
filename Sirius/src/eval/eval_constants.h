#pragma once

#include "../defs.h"

namespace eval
{

#define S(mg, eg) PackedScore(mg, eg)

constexpr PackedScore MATERIAL[6] = {S(  61,  131), S( 284,  435), S( 306,  447), S( 386,  794), S( 745, 1613), S(0, 0)};

constexpr PackedScore PSQT[6][64] = {
    {
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  55,   42), S(  28,   60), S(   1,   79), S(  41,   67), S(  36,   53), S(  20,   55), S(  31,   64), S(  62,   45),
        S(  14,   -3), S(  -9,   29), S(   3,   -8), S(  -1,  -19), S(  -1,  -25), S(   6,  -23), S( -14,   12), S(   2,   -2),
        S(  14,    3), S(  -5,   12), S(  13,  -20), S(  11,  -23), S(  -1,  -23), S(  -1,  -17), S(  -8,    7), S(  -7,    5),
        S(   6,   -3), S(  -5,   15), S(  14,  -25), S(  16,  -15), S(  10,  -15), S(   0,  -14), S( -14,    9), S( -11,   -3),
        S(  -1,   -5), S(   7,    8), S(   4,   -2), S(   2,   -1), S(  -7,   -2), S(  -8,   -9), S( -21,    9), S( -22,   -4),
        S(   9,   -6), S(  24,   11), S(  31,  122), S(  10,    1), S(  -1,  -10), S(  -4,   -7), S( -14,   12), S( -13,   -1),
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
    },
    {
        S( -67,  -98), S( -79,  -23), S( -30,  -16), S(  -7,   -5), S( -31,    2), S( -55,    2), S(-101,    6), S( -84,  -58),
        S( -18,  -12), S(  13,    1), S(  24,   -2), S(  -2,    9), S(   4,   10), S(   6,    9), S(   1,   11), S( -10,   -2),
        S(   3,   -6), S(  -9,    7), S(  31,   -5), S(  19,   17), S(   8,   22), S(  16,   12), S(   7,    2), S(  -5,   -1),
        S(  27,    5), S(  23,   17), S(  38,   18), S(  21,   26), S(  23,   27), S(  29,   14), S(  22,    3), S(  13,    9),
        S(  11,   16), S(  16,   16), S(  21,   20), S(  20,   28), S(  22,   20), S(  20,   17), S(  24,    0), S(  11,    1),
        S(  16,   -1), S(  17,    4), S(  19,    3), S(  17,   15), S(   8,   15), S(   6,   -1), S(   9,   -7), S(  -4,   -8),
        S(  10,   -1), S(  12,   -5), S(  10,   -5), S(  15,   -1), S(   9,   -1), S(  -1,   -4), S(   0,   -8), S( -12,   -8),
        S(  -1,  -18), S(  -3,  -12), S(   5,  -10), S(   9,    2), S(   2,   -3), S( -13,  -10), S(  -6,  -17), S( -41,   -7),
    },
    {
        S( -46,  -15), S( -28,    5), S(  -8,   -4), S( -70,    9), S( -66,   17), S( -59,    7), S( -29,    7), S( -32,    5),
        S( -23,  -10), S( -43,    4), S( -13,    3), S( -10,    3), S( -22,   10), S(   1,   -1), S( -12,   -6), S(  -4,   -7),
        S(  10,   12), S(  -2,    8), S(  20,    6), S(   4,   11), S(  16,    5), S(   1,   -1), S(  10,    5), S(   6,    1),
        S( -11,    6), S(   2,   13), S(   1,   18), S(  17,   19), S(  23,   23), S(  19,    8), S(   6,   11), S(  -5,    2),
        S(  16,   -6), S(  -4,   14), S(   7,   12), S(  15,   15), S(  22,   12), S(   6,   13), S(   4,    4), S(   5,   -2),
        S(  19,   -8), S(  22,   -1), S(   4,   -1), S(  10,   12), S(   1,    8), S(   5,   -3), S(  20,    0), S(   6,   -9),
        S(  26,  -20), S(  24,  -25), S(  27,   -9), S(   7,   -4), S(  -1,    0), S(  12,  -17), S(   6,  -26), S(  16,  -12),
        S(  28,  -38), S(  21,  -15), S(  -4,   -2), S(  19,   -5), S(   1,   -3), S(   0,    0), S(  11,   -4), S(   7,  -19),
    },
    {
        S(  18,    9), S( -13,   33), S( -12,   27), S( -17,   21), S(  -7,   21), S( -13,   30), S(   8,   18), S(  12,   16),
        S(  27,    1), S(  30,    8), S(  11,   18), S(  -5,   20), S(  25,   13), S(  12,   23), S(   7,   20), S(  12,   11),
        S(  -3,    3), S(  20,    9), S(   3,   10), S(   6,    9), S(   6,    8), S(   3,   16), S(  16,   11), S(  -3,   13),
        S( -10,   11), S( -14,   19), S(  -7,   17), S(  -8,   10), S(  -2,    9), S(   6,   11), S(   5,   10), S(  -7,   13),
        S( -18,    3), S(   0,    9), S( -19,   14), S(  -8,    9), S(  -7,    3), S(  -9,    5), S(  -9,    4), S(  -9,    3),
        S(   4,  -21), S(  23,  -25), S(  -1,  -11), S(  -2,  -13), S(  -6,  -11), S(  -8,  -13), S(  -5,  -15), S( -12,  -11),
        S(  -6,  -28), S(  26,  -36), S(   5,  -21), S(   2,  -19), S(   3,  -21), S(   2,  -19), S(  -7,  -17), S( -12,  -21),
        S(  -6,  -39), S(  -2,  -19), S(   2,  -19), S(   8,  -24), S(   6,  -25), S(  -1,  -19), S(  -1,  -23), S(  -2,  -22),
    },
    {
        S(  13,   -7), S(  53,  -30), S( -15,   43), S( -13,   24), S(  20,    1), S(  -8,   17), S( -27,   13), S( -12,    7),
        S(  37,    6), S(  16,   10), S(  -5,   23), S( -33,   58), S(  -5,   34), S(  16,    1), S(  26,  -22), S(  20,   -9),
        S(   6,   11), S(  -1,    4), S(  -7,   19), S( -14,   13), S(   9,   11), S(  22,    2), S(  21,  -17), S(  30,  -16),
        S(  -5,   18), S( -16,   35), S( -10,   16), S( -16,   25), S(  -4,   25), S(  13,    1), S(  10,    5), S(   8,   -1),
        S(  -5,   15), S(  -3,   13), S( -14,   20), S(  -8,   27), S( -11,   33), S(  -2,   17), S(   5,   12), S(   2,    3),
        S(   2,  -11), S(   5,   -5), S(  -7,    8), S( -13,   15), S(  -9,   13), S(  -4,   13), S(  12,  -11), S(  10,  -19),
        S(   1,  -39), S(  10,  -60), S(   1,  -29), S(   0,  -13), S(  -1,   -4), S(   2,  -17), S(   4,  -23), S(   9,  -37),
        S(   9,  -58), S( -16,  -40), S( -20,  -21), S( -11,  -19), S(  -8,  -20), S( -12,  -14), S( -14,  -18), S( -12,  -18),
    },
    {
        S(  67, -102), S(  27,  -25), S( -49,  -25), S( -87,   10), S(  11,   -5), S(  11,   -5), S(  11,   -5), S(  11,   -5),
        S( -14,   10), S(  23,   45), S( -12,   29), S( -13,   35), S(  11,   -5), S(  11,   -5), S(  11,   -5), S(  11,   -5),
        S(  30,    9), S(  39,   48), S(  18,   38), S( -35,   63), S(  11,   -5), S(  11,   -5), S(  11,   -5), S(  11,   -5),
        S( -34,   21), S( -29,   55), S( -51,   43), S( -96,   61), S(  11,   -5), S(  11,   -5), S(  11,   -5), S(  11,   -5),
        S( -64,   14), S( -59,   43), S( -54,   23), S( -87,   43), S(  11,   -5), S(  11,   -5), S(  11,   -5), S(  11,   -5),
        S( -14,   -8), S(  -6,   14), S( -26,   -4), S( -45,   15), S(  11,   -5), S(  11,   -5), S(  11,   -5), S(  11,   -5),
        S(  40,  -31), S(  34,   -9), S(  10,  -28), S( -19,  -11), S(  11,   -5), S(  11,   -5), S(  11,   -5), S(  11,   -5),
        S(  39,  -65), S(  40,  -30), S(  16,  -50), S(   4,  -44), S(  11,   -5), S(  11,   -5), S(  11,   -5), S(  11,   -5),
    },
};

constexpr PackedScore MOBILITY[4][28] = {
    {S(  -3,  -30), S( -37,  -47), S( -16,  -16), S(  -8,    1), S(   2,    9), S(   6,   18), S(  13,   22), S(  21,   27), S(  30,   20), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S( -10,  -46), S( -30,  -60), S( -18,  -32), S( -11,  -13), S(  -3,   -4), S(   2,    7), S(   3,   16), S(   6,   20), S(   6,   22), S(   8,   24), S(  10,   23), S(  15,   18), S(  13,   25), S(  18,    5), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S( -14,  -43), S( -28,  -73), S( -14,  -53), S(  -3,  -31), S(   0,  -17), S(  -1,   -6), S(  -1,    1), S(   2,    7), S(   4,   10), S(   6,   17), S(   4,   27), S(   5,   34), S(   7,   38), S(  11,   39), S(  18,   36), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S(  -1,    3), S( -33,  -80), S( -64, -120), S( -19, -204), S( -23,  -67), S( -14,  -17), S(  -6,  -27), S(  -3,   -7), S(  -2,   10), S(   0,   19), S(   3,   23), S(   6,   25), S(   7,   36), S(  11,   35), S(  11,   41), S(  13,   42), S(  14,   46), S(  16,   47), S(  16,   45), S(  22,   39), S(  27,   29), S(  34,   12), S(  28,   23), S(  38,   -5), S(  39,   -7), S(   5,    3), S( -27,   11), S(-117,   22)}
};

constexpr PackedScore THREAT_BY_PAWN[6] = {S(   4,  -20), S(  65,   29), S(  59,   60), S(  81,   24), S(  72,   -2), S(   0,    0)};
constexpr PackedScore THREAT_BY_KNIGHT[2][6] = {
    {S(   4,   29), S(  15,   39), S(  37,   45), S(  73,   15), S(  60,  -30), S(   0,    0)},
    {S(  -8,    9), S(   6,   37), S(  28,   30), S(  64,   34), S(  61,   -2), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_BISHOP[2][6] = {
    {S(  -2,   34), S(  39,   32), S( -13,   34), S(  67,   16), S(  69,   46), S(   0,    0)},
    {S(  -4,    5), S(  17,   22), S( -25,  -13), S(  44,   45), S(  47,  110), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_ROOK[2][6] = {
    {S(  -1,   42), S(  15,   61), S(  25,   55), S( -11,  -25), S(  59,   19), S(   0,    0)},
    {S(  -7,    7), S(   1,   15), S(  13,    3), S( -12,  -67), S(  39,   64), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_QUEEN[2][6] = {
    {S(   6,    8), S(  25,   22), S(   9,   50), S(  18,   16), S(  11,  -57), S( 101,   38)},
    {S(  -3,   11), S(   1,    8), S(  -5,   14), S(  -4,    3), S( -16,  -75), S( 114,   47)}
};
constexpr PackedScore THREAT_BY_KING[6] = {S( -24,   43), S(   8,   49), S(  27,   41), S(  82,    9), S(   0,    0), S(   0,    0)};
constexpr PackedScore KNIGHT_HIT_QUEEN = S(  11,    3);
constexpr PackedScore BISHOP_HIT_QUEEN = S(  17,   11);
constexpr PackedScore ROOK_HIT_QUEEN = S(  20,   -2);
constexpr PackedScore PUSH_THREAT = S(  14,   18);

constexpr PackedScore ISOLATED_PAWN[8] = {S(  -8,    5), S(  -3,  -16), S( -12,   -9), S( -10,  -16), S( -12,  -14), S(  -8,   -8), S(  -4,  -14), S( -12,    6)};
constexpr PackedScore DOUBLED_PAWN[8] = {S(  -1,  -60), S(  14,  -36), S(   1,  -27), S(  -2,  -16), S(  -5,  -12), S(  -6,  -19), S(   6,  -37), S(   8,  -72)};
constexpr PackedScore BACKWARDS_PAWN[8] = {S(   0,    0), S(  -7,  -13), S(  -2,  -14), S(  -8,  -11), S(   2,  -19), S(  30,  -11), S(   0,    0), S(   0,    0)};
constexpr PackedScore PAWN_PHALANX[8] = {S(   0,    0), S(   5,   -4), S(  11,   -2), S(  20,    8), S(  40,   41), S( 115,  221), S( -24,  375), S(   0,    0)};
constexpr PackedScore DEFENDED_PAWN[8] = {S(   0,    0), S(   0,    0), S(  18,    6), S(  11,    8), S(  17,   21), S(  28,   69), S( 112,  103), S(   0,    0)};
constexpr PackedScore CANDIDATE_PASSER[2][8] = {
    {S(   0,    0), S( -34,  -11), S( -18,   -7), S(  -1,   26), S(  27,   52), S(  61,   72), S(   0,    0), S(   0,    0)},
    {S(   0,    0), S( -19,   -7), S(  -9,   14), S(  -5,   28), S(  19,   41), S(  35,  137), S(   0,    0), S(   0,    0)}
};

constexpr PackedScore PASSED_PAWN[2][2][8] = {
    {
        {S(   0,    0), S(   0,    0), S(   0,    0), S(  -6,   29), S(   0,   54), S(  -2,  117), S(  39,  190), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(   0,    0), S(   8,   11), S(  19,   13), S(  33,    2), S(  48,    7), S(   0,    0)}
    },
    {
        {S(   0,    0), S(   0,    0), S(   0,    0), S(   3,   10), S(  11,   13), S(  30,   -2), S(  54,  -27), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(   0,    0), S(   1,    4), S(  10,    8), S(  15,  -15), S( -26,  -20), S(   0,    0)}
    }
};
constexpr PackedScore OUR_PASSER_PROXIMITY[4][6] = {
    {S(  62,   41), S(  50,   41), S(   9,   28), S( -15,   16), S(  -9,   -8), S(  11,  -20)},
    {S(  67,   89), S(  99,   86), S(  75,   39), S(  11,   32), S(  -3,   16), S(   1,   -2)},
    {S(  75,  170), S(  48,  177), S( 181,   73), S( 120,   40), S(  37,   41), S(  -5,   31)},
    {S(  56,  280), S( -25,  188), S( 197,  100), S( 180,   41), S(  84,   26), S(  -3,   40)}
};
constexpr PackedScore THEIR_PASSER_PROXIMITY[4][6] = {
    {S(  -9,  -11), S(  11,   -9), S(  13,   -5), S(   6,    4), S(  -6,   33), S(   0,   47)},
    {S( -17,  -25), S(   6,  -15), S(  13,   -9), S(   7,   29), S(  12,   58), S(  10,   76)},
    {S( -65,  -58), S(  -4,  -44), S(  79,  -21), S(  33,   66), S(  19,  118), S(  26,  125)},
    {S( -62,  -53), S( -21,  -51), S(  58,  -34), S(  51,   78), S(  72,  101), S(  41,  128)}
};

constexpr PackedScore PAWN_STORM[2][4][8] = {
    {
        {S(  42,   30), S( -77,   26), S(   4,   52), S(  28,    8), S(  14,   17), S(  -3,   25), S( -10,   25), S(   0,    0)},
        {S(  32,    3), S(  87,  -51), S( 101,   -4), S(  36,   -9), S(   9,   -2), S( -26,    7), S(   2,    3), S(   0,    0)},
        {S(  13,   16), S( 144,  -40), S( 113,   13), S(  53,    5), S(  11,   15), S( -11,   21), S( -12,   22), S(   0,    0)},
        {S(  19,    1), S( 188,  -27), S( 140,   36), S(  41,   13), S(   0,   14), S( -17,    8), S( -21,   17), S(   0,    0)}
    },
    {
        {S(   0,    0), S(   0,    0), S(  36,   53), S( -27,   23), S(  -5,   26), S(  20,   26), S(  -9,   24), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(  94,    6), S(   3,    5), S( -11,   15), S(  -3,   12), S(   2,    3), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(  97,   12), S(   1,   11), S(   1,   21), S(  25,   22), S(   3,   22), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(  58,    4), S(  19,   15), S( -27,   13), S(  -7,   10), S(  -8,   14), S(   0,    0)}
    }
};
constexpr PackedScore PAWN_SHIELD[4][8] = {
    {S(  48,   30), S( -16,   48), S( -12,   39), S(  27,   30), S(  34,   25), S( -17,    0), S( -52,  -24), S(   0,    0)},
    {S(  51,    3), S( -22,   16), S(   7,    4), S(  48,   -3), S(  39,  -11), S(  11,  -13), S( -16,  -36), S(   0,    0)},
    {S(  23,   -8), S(  19,  127), S(   7,   -8), S(  28,  -31), S(  27,  -28), S(  16,  -33), S( -32,  -44), S(   0,    0)},
    {S(  19,   16), S(   7,   10), S(  -2,   13), S(  21,    9), S(  31,    5), S(  27,    6), S( -54,   15), S(   0,    0)}
};
constexpr PackedScore SAFE_KNIGHT_CHECK = S( 111,    7);
constexpr PackedScore SAFE_BISHOP_CHECK = S(  62,   20);
constexpr PackedScore SAFE_ROOK_CHECK = S( 104,   19);
constexpr PackedScore SAFE_QUEEN_CHECK = S(  53,   28);
constexpr PackedScore UNSAFE_KNIGHT_CHECK = S(  16,    3);
constexpr PackedScore UNSAFE_BISHOP_CHECK = S(  39,   12);
constexpr PackedScore UNSAFE_ROOK_CHECK = S(  39,    3);
constexpr PackedScore UNSAFE_QUEEN_CHECK = S(  16,    4);
constexpr PackedScore QUEENLESS_ATTACK = S(-142,  143);
constexpr PackedScore KING_ATTACKER_WEIGHT[4] = {S(  55,   -5), S(  22,    0), S(  27,  -15), S(   3,  -10)};
constexpr PackedScore KING_ATTACKS = S(   7,   -1);
constexpr PackedScore WEAK_KING_RING = S(   7,   -1);
constexpr PackedScore KING_FLANK_ATTACKS[2] = {S(  12,   -4), S(   7,    1)};
constexpr PackedScore KING_FLANK_DEFENSES[2] = {S(  -6,    0), S( -10,    3)};
constexpr PackedScore SAFETY_OFFSET = S(  79,  173);

constexpr PackedScore MINOR_BEHIND_PAWN = S(   5,   12);
constexpr PackedScore KNIGHT_OUTPOST = S(  22,   16);
constexpr PackedScore BISHOP_PAWNS[7] = {S(   4,   20), S(   5,   19), S(   3,   11), S(   1,    4), S(  -2,   -5), S(  -2,  -18), S(  -6,  -30)};
constexpr PackedScore BISHOP_PAIR = S(  19,   60);
constexpr PackedScore LONG_DIAG_BISHOP = S(  15,    8);
constexpr PackedScore ROOK_OPEN[2] = {S(  23,    4), S(  12,    5)};

constexpr PackedScore TEMPO = S(  31,   34);

constexpr PackedScore COMPLEXITY_PAWNS = S(   0,   10);
constexpr PackedScore COMPLEXITY_PAWNS_BOTH_SIDES = S(   0,   64);
constexpr PackedScore COMPLEXITY_PAWN_ENDGAME = S(   0,   83);
constexpr PackedScore COMPLEXITY_OFFSET = S(   0, -136);

#undef S


}