#pragma once

#include "../defs.h"

namespace eval
{

#define S(mg, eg) PackedScore(mg, eg)

constexpr PackedScore MATERIAL[6] = {S(  61,  131), S( 286,  431), S( 306,  444), S( 386,  789), S( 746, 1620), S(0, 0)};

constexpr PackedScore PSQT[6][64] = {
    {
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  55,   79), S(  37,   90), S(  20,  102), S(  56,   76), S(  74,   61), S(  58,   75), S(  46,   95), S(  69,   77),
        S(   4,    0), S( -13,   30), S(   8,   -8), S(   9,  -38), S(   2,  -38), S(   2,  -23), S( -19,   14), S(  -6,    2),
        S(  12,    3), S(  -5,   15), S(  12,  -10), S(  11,  -23), S(  -1,  -24), S(   0,  -17), S(  -8,    8), S(  -8,    5),
        S(   5,   -5), S(  -5,   15), S(  13,  -21), S(  16,  -17), S(   9,  -16), S(   0,  -15), S( -13,    9), S( -11,   -4),
        S(  -1,   -6), S(   8,    9), S(   4,    0), S(   2,   -2), S(  -7,   -2), S(  -8,   -9), S( -21,    8), S( -22,   -5),
        S(   9,   -7), S(  24,   10), S(  31,  122), S(  10,    0), S(  -1,  -11), S(  -4,   -8), S( -14,   12), S( -14,   -2),
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
    },
    {
        S( -68,  -98), S( -76,  -24), S( -29,  -17), S(  -5,   -8), S( -31,    1), S( -58,    4), S( -99,    2), S( -84,  -58),
        S( -16,  -14), S(  12,    2), S(  23,   -1), S(  -1,    8), S(   2,   12), S(   6,   10), S(   1,   12), S( -10,   -2),
        S(   2,   -6), S( -10,    8), S(  29,   -2), S(  18,   18), S(   7,   23), S(  15,   13), S(   7,    3), S(  -4,   -1),
        S(  25,    5), S(  22,   17), S(  35,   19), S(  20,   27), S(  21,   28), S(  28,   14), S(  21,    3), S(  12,    8),
        S(  10,   17), S(  14,   18), S(  20,   20), S(  19,   29), S(  21,   21), S(  20,   18), S(  23,    0), S(  10,    2),
        S(  15,    0), S(  16,    5), S(  18,    4), S(  17,   16), S(   7,   16), S(   5,    0), S(   8,   -7), S(  -5,   -7),
        S(  10,   -1), S(  11,   -5), S(  10,   -5), S(  14,    0), S(   9,   -1), S(  -2,   -3), S(  -1,   -7), S( -13,   -8),
        S(  -3,  -16), S(  -4,  -11), S(   4,  -10), S(   8,    2), S(   1,   -2), S( -14,  -10), S(  -8,  -16), S( -40,   -8),
    },
    {
        S( -46,  -14), S( -26,    6), S(  -8,   -3), S( -71,   11), S( -63,   16), S( -57,    6), S( -31,    7), S( -31,    5),
        S( -21,  -10), S( -44,    5), S( -12,    3), S(  -9,    3), S( -22,   11), S(   2,   -1), S( -13,   -5), S(  -2,   -8),
        S(  10,   12), S(  -2,    8), S(  20,    6), S(   5,   12), S(  16,    6), S(   1,    0), S(  11,    5), S(   7,    1),
        S( -11,    6), S(  -2,   16), S(   2,   17), S(  18,   19), S(  23,   23), S(  19,    8), S(   5,   12), S(  -5,    1),
        S(  11,   -3), S(  -4,   14), S(   6,   13), S(  15,   15), S(  22,   12), S(   6,   14), S(   4,    5), S(   4,   -1),
        S(  19,   -9), S(  21,   -1), S(   4,   -1), S(  10,   12), S(   1,    8), S(   5,   -4), S(  20,    0), S(   6,   -9),
        S(  25,  -18), S(  24,  -24), S(  27,   -9), S(   7,   -3), S(  -1,    0), S(  13,  -16), S(   6,  -26), S(  17,  -12),
        S(  29,  -37), S(  21,  -16), S(  -4,   -2), S(  19,   -5), S(   1,   -3), S(   1,    1), S(  12,   -4), S(   7,  -18),
    },
    {
        S(  17,    9), S( -16,   33), S( -12,   26), S( -19,   22), S( -12,   22), S( -15,   30), S(   7,   17), S(   9,   17),
        S(  24,    2), S(  30,    7), S(  11,   17), S(  -5,   20), S(  25,   13), S(  11,   23), S(   8,   19), S(  10,   11),
        S(  -7,    4), S(  22,    6), S(   4,    8), S(   7,    9), S(   6,    7), S(   2,   16), S(  17,   10), S(  -4,   13),
        S(  -9,    9), S( -14,   19), S(  -6,   16), S(  -7,   11), S(  -1,    9), S(   6,   11), S(   6,    9), S(  -7,   12),
        S( -18,    4), S(   1,    8), S( -19,   15), S(  -7,    9), S(  -7,    3), S( -10,    6), S(  -8,    4), S(  -8,    2),
        S(   4,  -20), S(  23,  -24), S(  -1,  -11), S(  -2,  -13), S(  -5,  -11), S(  -8,  -13), S(  -4,  -16), S( -11,  -12),
        S(  -6,  -28), S(  26,  -36), S(   6,  -22), S(   3,  -19), S(   3,  -22), S(   2,  -19), S(  -6,  -19), S( -11,  -23),
        S(  -5,  -40), S(  -3,  -19), S(   2,  -19), S(   9,  -25), S(   5,  -25), S(  -1,  -20), S(  -1,  -24), S(  -2,  -22),
    },
    {
        S(  14,   -8), S(  56,  -31), S(  -8,   37), S(  -7,   21), S(  20,    3), S(  -9,   20), S( -21,    8), S( -12,   11),
        S(  34,    7), S(   7,   19), S(  -9,   30), S( -35,   57), S(  -7,   37), S(  13,    5), S(  22,  -18), S(  19,   -8),
        S(   4,   12), S(  -2,    2), S(  -7,   20), S( -15,   18), S(   8,   15), S(  20,    5), S(  20,  -16), S(  33,  -19),
        S(  -3,   13), S( -17,   35), S(  -8,   17), S( -16,   28), S(  -4,   27), S(  12,    5), S(  10,    6), S(  11,   -4),
        S(  -2,   12), S(  -2,   13), S( -12,   21), S(  -8,   29), S( -11,   36), S(  -3,   21), S(   6,   13), S(  11,   -6),
        S(   7,  -17), S(   5,   -5), S(  -3,    8), S( -13,   18), S(  -9,   16), S(  -3,   13), S(  12,  -11), S(  16,  -24),
        S(   2,  -44), S(  10,  -60), S(   1,  -28), S(   1,  -12), S(  -1,   -3), S(   2,  -15), S(   3,  -22), S(  11,  -39),
        S(   7,  -58), S( -17,  -42), S( -20,  -22), S( -11,  -19), S(  -8,  -19), S( -13,  -13), S( -15,  -18), S( -12,  -18),
    },
    {
        S(  46,  -72), S(  20,    1), S( -44,  -24), S( -69,    1), S(  10,   -5), S(  10,   -5), S(  10,   -5), S(  10,   -5),
        S(  -9,   18), S(  24,   56), S(  -8,   27), S( -19,   33), S(  10,   -5), S(  10,   -5), S(  10,   -5), S(  10,   -5),
        S(  32,   15), S(  46,   53), S(  23,   30), S( -33,   52), S(  10,   -5), S(  10,   -5), S(  10,   -5), S(  10,   -5),
        S( -17,   19), S( -14,   54), S( -42,   32), S( -90,   49), S(  10,   -5), S(  10,   -5), S(  10,   -5), S(  10,   -5),
        S( -56,   15), S( -51,   45), S( -50,   11), S( -87,   30), S(  10,   -5), S(  10,   -5), S(  10,   -5), S(  10,   -5),
        S( -14,   -2), S(  -8,   22), S( -33,   -9), S( -52,    8), S(  10,   -5), S(  10,   -5), S(  10,   -5), S(  10,   -5),
        S(  39,  -23), S(  33,    0), S(   6,  -31), S( -23,  -17), S(  10,   -5), S(  10,   -5), S(  10,   -5), S(  10,   -5),
        S(  39,  -56), S(  39,  -20), S(  13,  -52), S(   2,  -48), S(  10,   -5), S(  10,   -5), S(  10,   -5), S(  10,   -5),
    },
};

constexpr PackedScore MOBILITY[4][28] = {
    {S(  -5,  -28), S( -38,  -46), S( -17,  -15), S(  -9,    1), S(   1,    9), S(   6,   19), S(  13,   22), S(  20,   27), S(  30,   19), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S(  -9,  -46), S( -30,  -61), S( -18,  -32), S( -11,  -14), S(  -3,   -4), S(   2,    7), S(   3,   15), S(   6,   19), S(   6,   22), S(   9,   23), S(  10,   23), S(  14,   17), S(  12,   25), S(  18,    4), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S( -12,  -46), S( -29,  -70), S( -15,  -53), S(  -3,  -31), S(  -1,  -16), S(  -2,   -6), S(  -2,    2), S(   1,    8), S(   2,   11), S(   5,   17), S(   4,   27), S(   5,   34), S(   7,   38), S(  10,   39), S(  17,   36), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S(  -2,    5), S( -32,  -75), S( -61, -114), S( -17, -202), S( -23,  -64), S( -15,  -12), S(  -6,  -23), S(  -3,   -4), S(  -3,   12), S(   0,   21), S(   3,   24), S(   6,   27), S(   6,   37), S(  10,   36), S(  11,   42), S(  12,   44), S(  13,   45), S(  16,   46), S(  15,   46), S(  21,   38), S(  25,   30), S(  32,   12), S(  29,   17), S(  37,   -8), S(  34,   -7), S(   6,   -3), S( -12,   -9), S(-118,   16)}
};

constexpr PackedScore THREAT_BY_PAWN[6] = {S(   4,  -20), S(  66,   28), S(  60,   59), S(  81,   24), S(  72,   -1), S(   0,    0)};
constexpr PackedScore THREAT_BY_KNIGHT[2][6] = {
    {S(   4,   28), S(  15,   38), S(  36,   43), S(  73,   13), S(  54,  -28), S(   0,    0)},
    {S(  -8,    9), S(   6,   38), S(  29,   29), S(  64,   33), S(  60,    0), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_BISHOP[2][6] = {
    {S(  -2,   34), S(  39,   32), S( -11,   34), S(  68,   15), S(  72,   42), S(   0,    0)},
    {S(  -4,    5), S(  16,   23), S( -25,  -12), S(  44,   44), S(  50,  106), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_ROOK[2][6] = {
    {S(   0,   39), S(  16,   58), S(  25,   53), S( -11,  -29), S(  62,   12), S(   0,    0)},
    {S(  -8,    8), S(   1,   16), S(  13,    3), S( -13,  -66), S(  41,   63), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_QUEEN[2][6] = {
    {S(   7,    4), S(  24,   19), S(  10,   41), S(  17,    0), S(  12,  -57), S( 102,   51)},
    {S(  -2,   11), S(   1,    8), S(  -4,   13), S(  -3,    2), S( -15,  -74), S( 117,   52)}
};
constexpr PackedScore THREAT_BY_KING[6] = {S( -12,   43), S(   9,   48), S(  28,   41), S(  85,    8), S(   0,    0), S(   0,    0)};
constexpr PackedScore KNIGHT_HIT_QUEEN = S(  11,    2);
constexpr PackedScore BISHOP_HIT_QUEEN = S(  18,   10);
constexpr PackedScore ROOK_HIT_QUEEN = S(  20,   -2);
constexpr PackedScore PUSH_THREAT = S(  14,   18);

constexpr PackedScore ISOLATED_PAWN[8] = {S(  -8,    6), S(  -3,  -16), S( -12,   -8), S( -10,  -16), S( -12,  -14), S(  -8,   -7), S(  -4,  -14), S( -12,    7)};
constexpr PackedScore DOUBLED_PAWN[8] = {S(   0,  -60), S(  13,  -36), S(   0,  -27), S(  -2,  -16), S(  -6,  -12), S(  -8,  -20), S(   5,  -38), S(   7,  -70)};
constexpr PackedScore BACKWARDS_PAWN[8] = {S(   0,    0), S(  -9,  -12), S(  -2,  -14), S(  -8,  -12), S(   1,  -18), S(  32,  -12), S(   0,    0), S(   0,    0)};
constexpr PackedScore PAWN_PHALANX[8] = {S(   0,    0), S(   5,   -4), S(  11,   -2), S(  20,    8), S(  38,   41), S( 117,  212), S(   4,  341), S(   0,    0)};
constexpr PackedScore DEFENDED_PAWN[8] = {S(   0,    0), S(   0,    0), S(  18,    6), S(  11,    8), S(  17,   21), S(  32,   64), S( 141,   75), S(   0,    0)};
constexpr PackedScore CANDIDATE_PASSER[2][8] = {
    {S(   0,    0), S( -32,  -17), S( -18,   -8), S(   0,   25), S(  25,   53), S(  65,  113), S(   0,    0), S(   0,    0)},
    {S(   0,    0), S( -17,  -10), S(  -8,   13), S(  -5,   28), S(  18,   40), S(  27,  178), S(   0,    0), S(   0,    0)}
};

constexpr PackedScore PASSED_PAWN[2][2][8] = {
    {
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -36,  -41), S( -16,   22), S(  11,  159), S(  68,  217), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -23,  -52), S(   3,  -19), S(  38,   41), S(  68,   26), S(   0,    0)}
    },
    {
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -29,  -55), S(  -6,  -18), S(  38,   34), S(  71,   -3), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -30,  -56), S(  -6,  -23), S(  16,   19), S(  -9,  -12), S(   0,    0)}
    }
};
constexpr PackedScore OUR_PASSER_PROXIMITY[8] = {S(  78,   98), S(  71,  100), S(  45,   72), S(   7,   58), S(   5,   38), S(   7,   25), S(  12,   17), S(  -8,   24)};
constexpr PackedScore THEIR_PASSER_PROXIMITY[8] = {S( -44,  -10), S(  -3,    3), S(  25,    0), S(  20,   31), S(  15,   64), S(  19,   78), S(  25,   79), S(  31,   68)};

constexpr PackedScore PAWN_STORM[2][4][8] = {
    {
        {S(  40,   37), S(-110,  -49), S( -38,  -34), S(  61,    2), S(  27,   22), S(  -1,   31), S( -10,   31), S(   0,    0)},
        {S(  32,    6), S(  44, -123), S(  93,  -82), S(  59,  -20), S(  16,   -2), S( -23,    8), S(   4,    6), S(   0,    0)},
        {S(   8,   20), S( 101, -101), S( 105,  -50), S(  62,   -2), S(  14,   17), S( -13,   23), S( -15,   27), S(   0,    0)},
        {S(  16,    6), S( 149,  -77), S( 120,  -22), S(  70,    5), S(   9,   16), S( -15,   10), S( -21,   20), S(   0,    0)}
    },
    {
        {S(   0,    0), S(   0,    0), S(  62,   63), S( -20,   33), S( -24,   41), S( -17,   58), S(  -5,   46), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(  98,   17), S(  -3,   18), S( -17,   27), S( -29,   42), S( -39,   33), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S( 109,   17), S(  10,   24), S( -15,   40), S(  15,   44), S(  50,   29), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(  90,   17), S(  17,   25), S( -25,   25), S( -24,   22), S(  -3,   18), S(   0,    0)}
    }
};
constexpr PackedScore PAWN_SHIELD[4][8] = {
    {S(  47,   37), S( -19,   52), S( -11,   42), S(  41,   32), S(  45,   18), S( -25,   -1), S( -66,  -16), S(   0,    0)},
    {S(  49,    9), S( -25,   19), S(   8,    7), S(  53,   -1), S(  43,  -15), S(  13,  -20), S( -41,  -33), S(   0,    0)},
    {S(  22,   -2), S(  16,  119), S(  12,   -2), S(  34,  -21), S(  24,  -19), S(  -5,  -25), S( -61,  -40), S(   0,    0)},
    {S(  15,   17), S(   3,   12), S(   2,   10), S(  28,    5), S(  33,    1), S(   8,    5), S( -83,    7), S(   0,    0)}
};
constexpr PackedScore SAFE_KNIGHT_CHECK = S( 109,    7);
constexpr PackedScore SAFE_BISHOP_CHECK = S(  71,   18);
constexpr PackedScore SAFE_ROOK_CHECK = S( 115,   15);
constexpr PackedScore SAFE_QUEEN_CHECK = S(  55,   26);
constexpr PackedScore UNSAFE_KNIGHT_CHECK = S(  16,    2);
constexpr PackedScore UNSAFE_BISHOP_CHECK = S(  38,   10);
constexpr PackedScore UNSAFE_ROOK_CHECK = S(  39,    3);
constexpr PackedScore UNSAFE_QUEEN_CHECK = S(  16,    3);
constexpr PackedScore QUEENLESS_ATTACK = S(-145,  144);
constexpr PackedScore KING_ATTACKER_WEIGHT[4] = {S(  57,   -4), S(  23,    0), S(  30,  -13), S(   3,  -10)};
constexpr PackedScore KING_ATTACKS = S(   7,   -1);
constexpr PackedScore WEAK_KING_RING = S(   8,   -1);
constexpr PackedScore KING_FLANK_ATTACKS[2] = {S(  11,   -4), S(   7,    1)};
constexpr PackedScore KING_FLANK_DEFENSES[2] = {S(  -6,    0), S( -10,    2)};
constexpr PackedScore SAFETY_OFFSET = S(  80,  211);

constexpr PackedScore MINOR_BEHIND_PAWN = S(   6,   12);
constexpr PackedScore KNIGHT_OUTPOST = S(  22,   16);
constexpr PackedScore BISHOP_PAWNS[7] = {S(   3,   20), S(   5,   19), S(   3,   11), S(   1,    4), S(  -2,   -5), S(  -2,  -18), S(  -6,  -30)};
constexpr PackedScore BISHOP_PAIR = S(  18,   60);
constexpr PackedScore LONG_DIAG_BISHOP = S(  15,    8);
constexpr PackedScore ROOK_OPEN[2] = {S(  23,    4), S(  13,    5)};
constexpr PackedScore WEAK_QUEEN = S( -23,    6);

constexpr PackedScore TEMPO = S(  32,   34);

constexpr PackedScore COMPLEXITY_PAWNS = S(   0,   10);
constexpr PackedScore COMPLEXITY_PAWNS_BOTH_SIDES = S(   0,   63);
constexpr PackedScore COMPLEXITY_PAWN_ENDGAME = S(   0,   80);
constexpr PackedScore COMPLEXITY_OFFSET = S(   0, -133);

#undef S


}