#pragma once

#include "../defs.h"

namespace eval
{

// clang-format off
#define S(mg, eg) ScorePair(mg, eg)

constexpr ScorePair MATERIAL[6] = {S(  64,  135), S( 315,  454), S( 332,  478), S( 424,  811), S( 877, 1841), S(0, 0)};

constexpr ScorePair PSQT[6][64] = {
    {
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  69,   81), S(  16,   95), S(  33,   97), S(  41,   86), S(  68,   58), S(  48,   58), S(  38,   90), S(  83,   78),
        S(   5,   11), S(  -8,   23), S(   4,    0), S(   5,   -8), S(  -4,  -17), S(  -3,   -7), S( -16,   18), S(  -4,    9),
        S(   5,    9), S(   4,   18), S(  12,   -7), S(  12,  -18), S(   5,  -18), S(   2,  -11), S(  -3,   11), S(  -7,    8),
        S(  -5,   -5), S(  -7,   14), S(  18,  -25), S(  18,  -18), S(  14,  -19), S(   4,  -14), S( -14,   11), S( -14,   -5),
        S( -12,   -6), S(  12,    6), S(   4,    4), S(   7,   -1), S(  -3,   -1), S(  -7,   -3), S( -18,   11), S( -22,   -7),
        S(  -4,   -8), S(  25,    7), S(  25,   53), S(   5,    8), S(  -2,    0), S(  -3,   -1), S(  -9,   10), S( -18,   -3),
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
    },
    {
        S( -58, -120), S( -90,   17), S(-113,   46), S(  -1,   10), S( -23,   16), S( -62,    7), S(-103,    8), S( -89,  -66),
        S(  -1,   -2), S( -10,   22), S(  24,   11), S(  36,   14), S(  27,   18), S(  23,   -5), S( -20,   16), S(  -7,  -10),
        S(  15,   -5), S(  11,   13), S(  35,   11), S(  28,   15), S(  21,   16), S(  24,    7), S(  11,   10), S(  10,  -10),
        S(  30,    6), S(  30,   12), S(  34,   16), S(  28,   25), S(  33,   22), S(  19,   16), S(  19,    6), S(  12,    6),
        S(  21,    7), S(  27,    7), S(  24,   16), S(  18,   31), S(  18,   22), S(  19,   16), S(  17,    4), S(   9,    3),
        S(   4,   -6), S(  19,   -1), S(  18,    1), S(  15,   15), S(  12,   10), S(   0,   -1), S(   4,   -7), S(  -7,   -8),
        S(  11,  -11), S(   3,    1), S(   8,  -13), S(  12,   -1), S(   4,   -1), S(   2,  -12), S(  -5,   -5), S( -15,  -22),
        S( -27,  -23), S( -10,  -21), S(  -1,  -15), S(   4,   -9), S(  -1,   -4), S( -10,  -17), S( -16,  -22), S( -29,  -40),
    },
    {
        S( -28,  -36), S( -53,   20), S( -85,   21), S( -68,   21), S( -77,   26), S( -68,   20), S( -52,   20), S( -31,  -13),
        S( -14,   -5), S( -37,    3), S( -10,    9), S( -29,   13), S( -18,   16), S( -13,   11), S( -12,  -12), S(  -9,   -1),
        S(  23,  -10), S(  11,   10), S(  20,    6), S(  23,   12), S(  18,   13), S(   9,    0), S(  17,    4), S(   7,   -4),
        S(   8,   -4), S(  12,   15), S(  14,   18), S(  16,   29), S(  26,   25), S(  17,   15), S(  13,    9), S(   7,   -9),
        S(  19,  -10), S(   7,    6), S(  10,   17), S(  19,   16), S(  20,   19), S(  13,   11), S(   8,    6), S(  13,  -10),
        S(  21,  -10), S(  24,   -5), S(  13,   -7), S(  15,   11), S(  13,    5), S(   8,   -9), S(  28,   -6), S(  14,  -12),
        S(  23,  -17), S(  29,  -30), S(  27,  -13), S(  11,   -5), S(   3,   -6), S(  13,  -16), S(  10,  -27), S(  20,   -9),
        S(  10,  -40), S(  -7,   -1), S( -10,   -9), S(  11,  -15), S(   6,  -12), S(  -3,   -7), S(   6,  -11), S(   5,  -25),
    },
    {
        S(  18,   14), S(  33,   12), S(  27,   14), S(  12,   26), S(  22,   17), S(  14,   20), S(  19,   21), S(  23,   20),
        S(  21,   13), S(  12,   22), S(  19,   20), S(  15,   22), S(  20,   26), S(  12,   25), S(  11,   23), S(  19,   21),
        S( -18,   18), S(   9,   13), S(  13,   10), S(  15,    9), S(  11,    9), S(   7,   15), S(   7,   17), S(  -3,   22),
        S( -18,   11), S(  -7,   15), S(  -3,   12), S( -10,   11), S(  -4,    8), S(  -1,   10), S(  -3,   15), S(  -5,   12),
        S( -23,   -2), S( -10,    5), S( -13,   10), S( -11,    7), S( -13,    4), S( -16,   10), S( -16,   11), S( -12,    1),
        S( -16,  -25), S(   6,  -26), S(  -7,   -9), S(   0,  -18), S(  -1,  -18), S( -14,   -8), S(  -4,  -17), S( -18,  -14),
        S( -51,  -28), S(  -6,  -35), S(   3,  -25), S(   0,  -23), S(  -1,  -24), S(  -6,  -19), S( -12,  -25), S( -19,  -23),
        S( -15,  -36), S( -19,  -19), S(   7,  -24), S(  14,  -30), S(   7,  -28), S(  -1,  -22), S(   0,  -26), S(  -1,  -23),
    },
    {
        S(  10,   29), S(  41,    5), S(  25,   26), S(  15,   32), S(  17,   27), S(  27,   14), S(  16,    9), S( -18,   34),
        S(  37,   -8), S(  33,   -7), S(  11,   23), S( -15,   41), S(   8,   31), S(  16,    2), S(  19,   -9), S(  12,    2),
        S(   8,   11), S(  13,    9), S(  -4,   24), S( -20,   39), S(  -4,   36), S(  12,    3), S(  27,  -22), S(  21,  -11),
        S(  -2,   11), S( -12,   22), S( -11,   22), S( -25,   40), S( -21,   39), S(   6,    9), S(   1,   21), S(   4,    0),
        S( -13,   24), S(  -8,   17), S( -13,   17), S( -18,   31), S( -21,   43), S(  -8,   23), S(   0,   11), S(  -4,    5),
        S(  -5,  -14), S(   1,  -17), S(  -7,    1), S( -16,   14), S( -10,   14), S(  -4,    6), S(   8,   -7), S(   3,   -7),
        S(  -1,  -60), S(   8,  -83), S(   3,  -49), S(  -3,  -21), S(  -6,  -14), S(   7,  -33), S(   2,  -29), S(   2,  -21),
        S( -15,  -36), S( -21,  -70), S( -14,  -52), S(  -5,  -47), S(  -2,  -36), S(  -8,  -34), S( -11,  -32), S( -19,   -7),
    },
    {
        S(  53, -153), S(  21,   71), S(  -4,   20), S( -24,    7), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  28,   13), S(  -1,  104), S( -39,   62), S( -62,   48), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  35,   50), S(   0,  112), S( -54,   54), S(-133,   17), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S( -25,   49), S( -46,   97), S( -68,   37), S(-135,    6), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S( -62,   41), S( -57,   75), S( -85,   21), S(-111,  -12), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  -1,   18), S(  -6,   45), S( -37,   -2), S( -59,  -35), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  59,  -10), S(  45,   17), S(  17,  -36), S(  -9,  -70), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  59,  -42), S(  58,   -7), S(  22,  -61), S(  17, -112), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
    },
};

constexpr ScorePair MOBILITY[4][28] = {
    {S(  -7,  -21), S( -35,  -54), S( -21,  -18), S( -10,   -1), S(   0,    8), S(   6,   18), S(  15,   22), S(  23,   26), S(  33,   17), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S( -12,  -29), S( -41,  -60), S( -22,  -30), S( -11,  -10), S(  -4,    0), S(   0,   10), S(   1,   17), S(   5,   20), S(   4,   22), S(   8,   22), S(   6,   23), S(  13,   16), S(  19,   13), S(  42,  -10), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S( -25,  -63), S( -50,  -63), S( -18,  -43), S( -11,  -26), S(  -3,  -16), S(   2,   -5), S(   1,    6), S(   4,   11), S(   5,   14), S(   7,   20), S(   9,   26), S(   9,   34), S(  10,   38), S(  14,   39), S(  40,   18), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S( -14,   42), S( -42,   10), S( -61,  -13), S( -42, -124), S( -26, -106), S( -12,  -69), S(  -5,  -52), S(   0,  -33), S(  -1,  -15), S(   0,   -1), S(   3,    6), S(   3,   16), S(   5,   22), S(   5,   30), S(   7,   35), S(   8,   35), S(   7,   41), S(   8,   40), S(  10,   40), S(  12,   35), S(  16,   32), S(  21,   17), S(  21,   17), S(  28,    5), S(  22,   10), S(  23,   -8), S(  27,  -41), S( -32,    5)}
};

constexpr ScorePair THREAT_BY_PAWN[6] = {S(  -6,  -21), S(  72,   41), S(  65,   71), S(  72,   49), S(  56,   25), S(   0,    0)};
constexpr ScorePair THREAT_BY_KNIGHT[2][6] = {
    {S(   6,   36), S(   7,   82), S(  50,   32), S(  84,   14), S(  42,    7), S(   0,    0)},
    {S(  -8,   10), S(   3,   77), S(  38,   28), S(  71,   45), S(  51,   47), S(   0,    0)}
};
constexpr ScorePair THREAT_BY_BISHOP[2][6] = {
    {S(   3,   33), S(  37,   44), S(   2,   32), S(  58,   36), S(  61,   48), S(   0,    0)},
    {S(  -5,    3), S(  20,   20), S(  -6,    2), S(  56,   76), S(  63,   75), S(   0,    0)}
};
constexpr ScorePair THREAT_BY_ROOK[2][6] = {
    {S(  -2,   50), S(  37,   50), S(  46,   47), S(   7,  -73), S(  70,  -18), S(   0,    0)},
    {S( -10,    9), S(   8,   14), S(  19,    4), S(  20, -103), S(  55,   90), S(   0,    0)}
};
constexpr ScorePair THREAT_BY_QUEEN[2][6] = {
    {S(   8,   23), S(  25,   28), S(  21,   55), S(  17,   11), S(   1,  -55), S( 149,   66)},
    {S(  -5,   17), S(   1,    5), S(  -8,   26), S(  -4,   -6), S( -16,  -45), S( 103,  206)}
};
constexpr ScorePair THREAT_BY_KING[6] = {S(  49,   13), S(  26,   40), S(  98,   31), S(  85,    6), S(   0,    0), S(   0,    0)};
constexpr ScorePair KNIGHT_HIT_QUEEN = S(   7,    0);
constexpr ScorePair BISHOP_HIT_QUEEN = S(  16,   14);
constexpr ScorePair ROOK_HIT_QUEEN = S(  19,   -3);
constexpr ScorePair PUSH_THREAT = S(  13,   18);
constexpr ScorePair RESTRICTED_SQUARES = S(   2,    2);

constexpr ScorePair ISOLATED_PAWN[4] = {S(  -6,    2), S(  -5,  -14), S(  -9,   -9), S( -12,  -15)};
constexpr ScorePair DOUBLED_PAWN[4] = {S(   3,  -49), S(   3,  -40), S(  -2,  -21), S(  -9,   -6)};
constexpr ScorePair BACKWARDS_PAWN[8] = {S(   0,    0), S(  -8,  -13), S(   0,  -15), S(  -7,  -14), S(   7,  -21), S(  12,   23), S(   0,    0), S(   0,    0)};
constexpr ScorePair PAWN_PHALANX[8] = {S(   0,    0), S(   5,   -6), S(  12,   -2), S(  18,   10), S(  39,   36), S(  75,  138), S( 112,  194), S(   0,    0)};
constexpr ScorePair DEFENDED_PAWN[8] = {S(   0,    0), S(   0,    0), S(  18,    5), S(  10,    9), S(  18,   24), S(  41,   57), S(  76,  117), S(   0,    0)};
constexpr ScorePair CANDIDATE_PASSER[2][8] = {
    {S(   0,    0), S( -21,  -13), S(  -6,  -14), S(  -2,    3), S(  16,   24), S(  42,   82), S(   0,    0), S(   0,    0)},
    {S(   0,    0), S( -14,  -10), S(  -9,    9), S(  -4,   25), S(   9,   36), S(  45,   97), S(   0,    0), S(   0,    0)}
};

constexpr ScorePair PASSED_PAWN[2][2][8] = {
    {
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -34,  -28), S( -12,   25), S(  26,  131), S( 117,  199), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -25,  -40), S(  -3,  -12), S(  29,   55), S(  64,   71), S(   0,    0)}
    },
    {
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -26,  -41), S(  -6,   -9), S(  28,   54), S(  31,   42), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -27,  -51), S(  -4,  -27), S(  17,   30), S(  -1,   11), S(   0,    0)}
    }
};
constexpr ScorePair OUR_PASSER_PROXIMITY[8] = {S(  74,  110), S( 110,   70), S(  44,   69), S(  -3,   60), S(   0,   34), S(   2,   22), S(  16,   12), S(   0,   22)};
constexpr ScorePair THEIR_PASSER_PROXIMITY[8] = {S( -52,    8), S(   4,   -3), S(  26,    0), S(  21,   25), S(  12,   59), S(  15,   73), S(  21,   77), S(  21,   62)};
constexpr ScorePair PASSER_DEFENDED_PUSH[8] = {S(   0,    0), S(   0,    0), S(   0,    0), S(   8,    6), S(  10,   20), S(  36,   31), S(  57,  103), S(   0,    0)};

constexpr ScorePair PAWN_STORM[2][4][8] = {
    {
        {S(  29,   28), S( -86,  -79), S(   3,  -38), S(  43,    9), S(  20,   23), S(   3,   25), S(  -4,   28), S(   0,    0)},
        {S(  22,   17), S(  57, -110), S(  76,  -61), S(  33,   -3), S(   8,   16), S( -25,   19), S(   1,   18), S(   0,    0)},
        {S(   8,   16), S(  51,  -80), S( 107,  -50), S(  68,   -6), S(   9,   17), S( -17,   20), S(  -5,   17), S(   0,    0)},
        {S(   9,   -2), S( 126,  -96), S( 115,  -57), S(  57,   -5), S(   6,    5), S( -25,    1), S( -25,    3), S(   0,    0)}
    },
    {
        {S(   0,    0), S(   0,    0), S(  74,   42), S(  -5,   28), S(  -2,   34), S(   9,   43), S(  33,   34), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S( 138,   33), S( -26,   27), S( -14,   32), S( -18,   45), S(   6,   28), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S( 130,   13), S(  12,   21), S(  -8,   33), S(  -1,   38), S(  49,   14), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S( 129,    1), S(  11,   15), S( -21,   16), S( -10,   13), S( -17,  -10), S(   0,    0)}
    }
};
constexpr ScorePair PAWN_SHIELD[4][8] = {
    {S(  56,   30), S(   0,   43), S( -13,   34), S(  31,   28), S(  37,   19), S(   3,   13), S( -24,   21), S(   0,    0)},
    {S(  43,   20), S( -28,   25), S(   7,   20), S(  42,   11), S(  40,    1), S(  -4,   -4), S( -36,  -25), S(   0,    0)},
    {S(  23,   14), S(   5,   52), S(   4,    8), S(  33,   -9), S(  32,  -10), S(   6,   -8), S( -61,   -2), S(   0,    0)},
    {S(  13,    8), S( -26,   -2), S(   4,   -6), S(  27,  -12), S(  20,  -11), S(  26,   -3), S( -33,    1), S(   0,    0)}
};
constexpr ScorePair SAFE_KNIGHT_CHECK = S( 100,    1);
constexpr ScorePair SAFE_BISHOP_CHECK = S(  69,   18);
constexpr ScorePair SAFE_ROOK_CHECK = S( 107,   10);
constexpr ScorePair SAFE_QUEEN_CHECK = S(  64,   21);
constexpr ScorePair UNSAFE_KNIGHT_CHECK = S(  17,    0);
constexpr ScorePair UNSAFE_BISHOP_CHECK = S(  35,    7);
constexpr ScorePair UNSAFE_ROOK_CHECK = S(  40,    2);
constexpr ScorePair UNSAFE_QUEEN_CHECK = S(  20,    5);
constexpr ScorePair QUEENLESS_ATTACK = S(-112,  335);
constexpr ScorePair KING_ATTACKER_WEIGHT[4] = {S(  57,   -3), S(  24,   -2), S(  24,  -10), S(   6,  -17)};
constexpr ScorePair KING_ATTACKS = S(   7,    0);
constexpr ScorePair WEAK_KING_RING = S(   4,    1);
constexpr ScorePair KING_FLANK_ATTACKS[2] = {S(  13,   -4), S(   3,    0)};
constexpr ScorePair KING_FLANK_DEFENSES[2] = {S(  -8,    0), S(  -6,    3)};
constexpr ScorePair SAFETY_OFFSET = S(  78,  146);

constexpr ScorePair MINOR_BEHIND_PAWN = S(   1,    9);
constexpr ScorePair KNIGHT_OUTPOST = S(  18,   16);
constexpr ScorePair BISHOP_PAWNS[7] = {S(   6,    0), S(   1,    8), S(   0,    4), S(  -1,    1), S(  -2,   -2), S(  -3,   -4), S(  -3,   -7)};
constexpr ScorePair BISHOP_PAIR = S(  21,   65);
constexpr ScorePair LONG_DIAG_BISHOP = S(  12,   12);
constexpr ScorePair ROOK_OPEN[2] = {S(  31,    0), S(  19,    2)};

constexpr ScorePair TEMPO = S(  29,   20);

constexpr ScorePair COMPLEXITY_PAWNS = S(   0,   10);
constexpr ScorePair COMPLEXITY_PAWNS_BOTH_SIDES = S(   0,  125);
constexpr ScorePair COMPLEXITY_PAWN_ENDGAME = S(   0,  129);
constexpr ScorePair COMPLEXITY_OFFSET = S(   0, -207);

#undef S
// clang-format on

}
