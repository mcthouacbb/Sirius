#pragma once

#include "../defs.h"

namespace eval
{

// clang-format off
#define S(mg, eg) ScorePair(mg, eg)

constexpr ScorePair MATERIAL[6] = {S(  64,  130), S( 326,  434), S( 337,  453), S( 434,  785), S( 932, 1569), S(0, 0)};

constexpr ScorePair PSQT[6][64] = {
    {
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  72,   86), S(  25,   70), S(  66,   72), S(  48,   89), S(  70,   54), S(  45,   62), S(  32,   87), S(  93,   75),
        S(   9,   17), S( -16,   23), S(  14,   23), S(   1,   11), S(  -9,   -5), S(   5,   -1), S( -13,   18), S(  -4,   16),
        S(   2,   14), S(   7,   18), S(  11,  -12), S(   6,  -12), S(   1,  -12), S(  -1,   -6), S(   0,   10), S(  -6,    8),
        S(  -7,   -5), S(  -7,   17), S(  16,  -17), S(  19,  -16), S(  12,  -15), S(   2,   -8), S( -13,   13), S( -17,   -3),
        S( -12,   -6), S(  12,    4), S(   7,   -7), S(   9,    1), S(  -1,    0), S(  -6,   -2), S( -15,    8), S( -22,   -6),
        S(  -7,   -7), S(  26,    7), S(  29,   27), S(   7,    9), S(  -2,    1), S(  -1,    1), S(  -4,    9), S( -18,   -2),
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
    },
    {
        S( -21, -136), S( -76,    7), S(-113,   29), S(   6,   22), S( -24,   13), S( -63,   21), S(-105,   11), S( -94,  -61),
        S( -29,   17), S(  -7,  -10), S(  42,   -9), S(  34,   29), S(  60,   -3), S(  24,   -3), S(  -2,    9), S(   7,  -17),
        S(  20,  -14), S(   8,    8), S(  73,  -11), S(  23,   23), S(  23,   18), S(  20,   16), S(  11,   -3), S(   2,  -13),
        S(  12,   17), S(  30,    8), S(  39,    9), S(  31,   27), S(  28,   26), S(   8,   23), S(  23,   -2), S(  12,    7),
        S(  20,    6), S(  31,    3), S(  18,   24), S(  20,   26), S(  21,   20), S(  14,   23), S(   9,   12), S(   9,    3),
        S(   1,  -10), S(  18,   -3), S(  11,    5), S(  15,   13), S(  13,   12), S(  -3,    2), S(  -3,   -5), S(  -9,   -9),
        S(   0,    0), S(  10,    2), S(   3,   -9), S(   6,    2), S(   1,    1), S(  -2,  -10), S( -28,   13), S( -45,  -16),
        S( -38,  -17), S( -17,  -13), S(   7,  -17), S(   2,   -4), S(   8,   -7), S(  -5,  -35), S( -22,  -12), S( -23,  -46),
    },
    {
        S( -34,  -32), S( -42,   30), S( -93,   13), S( -74,   37), S( -82,   24), S(-104,   25), S( -46,   16), S( -36,  -24),
        S(  -9,   -1), S( -28,   11), S(  -5,    5), S( -51,   25), S(   2,    6), S(  -8,   11), S( -12,  -20), S( -22,   -6),
        S(  19,  -13), S(   6,   10), S(  24,   10), S(  25,   21), S(  21,   10), S(   9,    8), S(  15,    0), S(  11,   -8),
        S(   2,   -1), S(  15,   14), S(  16,   13), S(  15,   31), S(  25,   29), S(  14,    9), S(  23,    1), S(   9,   -8),
        S(   9,   -5), S(  10,    5), S(  14,   12), S(  27,   11), S(  22,   15), S(  17,    7), S(  11,   -4), S(  18,  -18),
        S(  28,  -18), S(  30,  -12), S(  12,    0), S(  16,   12), S(  15,    3), S(   0,    0), S(  23,    0), S(  15,  -14),
        S(  30,  -36), S(  27,  -27), S(  24,  -13), S(  15,  -10), S(   1,   -3), S(  11,  -11), S(   7,  -22), S(  26,   -2),
        S(  12,  -32), S( -10,    3), S( -14,   -8), S(  13,  -22), S(   4,   -9), S(  -3,   -7), S(  13,   -8), S(  11,  -15),
    },
    {
        S(  18,    9), S(  47,    5), S(  -1,   26), S(  16,   25), S(  10,   19), S(  16,   18), S(  17,   27), S(  22,   22),
        S(  28,   11), S(  13,   17), S(  39,    7), S(  25,   17), S(  35,   22), S(  12,   34), S(  15,   25), S(  23,   21),
        S( -20,   15), S(  22,    3), S(  15,   10), S(  23,    2), S(  11,    9), S(  -1,   20), S(  10,   16), S( -15,   36),
        S( -17,    9), S( -12,   21), S(   1,   11), S( -15,   19), S( -11,   11), S(  -3,   16), S( -17,   28), S(  -7,   13),
        S( -21,   -6), S( -12,   10), S( -10,    7), S(  -3,    0), S( -16,    3), S( -16,    7), S( -14,    3), S( -11,    0),
        S( -26,  -19), S(  13,  -33), S(  -7,   -5), S(   9,  -29), S(   5,  -19), S( -16,  -11), S(   0,  -25), S( -21,   -9),
        S( -64,  -24), S( -17,  -24), S(   4,  -25), S(   1,  -23), S(   0,  -25), S(  -8,  -16), S( -19,  -21), S( -22,  -16),
        S( -18,  -33), S( -26,  -18), S(   8,  -26), S(  13,  -28), S(   8,  -29), S(  -2,  -24), S(  -3,  -23), S(  -2,  -22),
    },
    {
        S(  13,   13), S(  30,   25), S(  26,   15), S(  19,   11), S(  21,   31), S(  23,   21), S(  11,   13), S( -28,   41),
        S(  25,   11), S(   6,   36), S(  13,   22), S( -25,   49), S(  18,    7), S(   3,   16), S(  28,  -25), S(   2,   17),
        S(  10,   -2), S(  13,    1), S(   6,   21), S( -27,   48), S(   0,   43), S(  15,   -8), S(   9,    9), S(  27,  -25),
        S(  -1,   20), S( -14,   22), S( -19,   25), S( -18,   32), S( -28,   46), S(  15,    0), S(   6,   12), S(  12,    4),
        S( -13,   26), S(  -8,   15), S(  -9,    9), S( -12,   26), S( -17,   32), S(  -6,   19), S(  -3,   11), S(  -9,   24),
        S( -16,    3), S(   4,  -14), S(  -6,    0), S( -15,   13), S(  -8,    6), S(  -3,    9), S(  13,  -22), S(   7,   -6),
        S(   3,  -73), S(  12,  -81), S(  -6,  -41), S(  -5,  -11), S(  -7,   -7), S(   8,  -37), S(   2,  -20), S(  -2,  -25),
        S(  10,  -84), S(  -8,  -83), S( -20,  -38), S(  -8,  -36), S(  -1,  -33), S(  -5,  -41), S(  -4,  -51), S(   1,  -34),
    },
    {
        S(  11, -165), S(  11,   55), S(   9,   66), S(   5,   47), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S( -15,  -17), S(   6,   85), S(  25,   56), S( -21,   68), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S( -24,   40), S( -41,  107), S( -45,   43), S(-152,   38), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S( -50,   34), S( -28,   77), S( -76,   46), S(-138,   20), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S( -77,   22), S( -69,   61), S( -91,   30), S(-113,   10), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  -1,    2), S(   0,   29), S( -32,    7), S( -55,   -8), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  65,  -25), S(  51,    3), S(  21,  -25), S( -11,  -42), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  67,  -61), S(  64,  -25), S(  23,  -50), S(  17,  -84), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
    },
};

constexpr ScorePair MOBILITY[4][28] = {
    {S( -11,  -16), S( -28,  -62), S( -23,  -15), S( -10,   -1), S(  -1,   12), S(   6,   20), S(  15,   23), S(  24,   26), S(  34,   16), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S(  -6,  -34), S( -40,  -62), S( -25,  -28), S( -13,   -9), S(  -7,    2), S(  -3,   11), S(  -1,   18), S(   3,   21), S(   0,   25), S(   6,   26), S(   8,   21), S(  12,   14), S(   6,   30), S(  67,  -27), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S( -35,  -61), S( -59,  -60), S( -17,  -41), S( -10,  -26), S(   0,  -17), S(   3,   -3), S(   4,    8), S(   6,   12), S(   8,   14), S(  10,   20), S(  11,   27), S(  13,   35), S(  12,   41), S(  12,   45), S(  50,   10), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S(  -2,   37), S( -50,   46), S( -45,  -69), S( -44, -105), S( -24, -117), S( -11,  -76), S(  -4,  -52), S(   3,  -34), S(   1,  -22), S(  -1,   -1), S(   2,   10), S(   2,   18), S(   3,   23), S(   6,   29), S(   8,   37), S(   8,   34), S(   6,   41), S(   9,   40), S(  11,   39), S(  13,   33), S(  15,   34), S(  22,   18), S(  11,   25), S(   4,   32), S(  22,   -7), S( -16,   17), S(  14,  -52), S(  15,   -3)}
};

constexpr ScorePair THREAT_BY_PAWN[6] = {S( -10,   10), S(  74,   40), S(  67,   62), S(  76,   35), S(  72,   -3), S(   0,    0)};
constexpr ScorePair THREAT_BY_KNIGHT[2][6] = {
    {S(   6,   33), S(   1,   66), S(  50,   30), S(  79,   13), S(  34,   -5), S(   0,    0)},
    {S(  -8,    9), S(  21,   36), S(  36,   33), S(  74,   37), S(  66,    7), S(   0,    0)}
};
constexpr ScorePair THREAT_BY_BISHOP[2][6] = {
    {S(   3,   33), S(  37,   50), S(  16,   12), S(  66,   25), S(  64,   58), S(   0,    0)},
    {S(  -7,    5), S(  18,   19), S(   1,  -11), S(  53,   69), S(  57,  117), S(   0,    0)}
};
constexpr ScorePair THREAT_BY_ROOK[2][6] = {
    {S(  -3,   51), S(  39,   48), S(  46,   48), S( -29,  -46), S(  74,  -29), S(   0,    0)},
    {S( -11,    8), S(   6,   17), S(  18,    5), S(   2,  -93), S(  57,   74), S(   0,    0)}
};
constexpr ScorePair THREAT_BY_QUEEN[2][6] = {
    {S(   6,   28), S(  28,   26), S(  16,   70), S(  17,   13), S(  19,  -90), S( 188,  106)},
    {S(  -7,   21), S(   2,    5), S( -11,   38), S(  -2,  -13), S( -14,  -46), S( 164,  242)}
};
constexpr ScorePair THREAT_BY_KING[6] = {S(  48,   15), S(  41,   31), S(  87,   29), S(  86,    5), S(   0,    0), S(   0,    0)};
constexpr ScorePair KNIGHT_HIT_QUEEN = S(   6,    3);
constexpr ScorePair BISHOP_HIT_QUEEN = S(  17,   10);
constexpr ScorePair ROOK_HIT_QUEEN = S(  25,  -15);
constexpr ScorePair PUSH_THREAT = S(  15,   16);
constexpr ScorePair RESTRICTED_SQUARES = S(   2,    3);

constexpr ScorePair ISOLATED_PAWN[8] = {S(  -4,    2), S(  -3,  -15), S(  -8,  -14), S(  -9,  -14), S( -11,  -16), S(  -9,   -9), S(  -4,   -9), S(  -7,    0)};
constexpr ScorePair DOUBLED_PAWN[8] = {S(   0,  -40), S(  -2,  -33), S(  -3,  -24), S(  -1,  -14), S(  -7,   -9), S(  -6,  -12), S(  11,  -50), S(   4,  -33)};
constexpr ScorePair BACKWARDS_PAWN[8] = {S(   0,    0), S(  -7,  -13), S(   1,  -16), S(  -4,  -15), S(   2,  -16), S(  17,  -58), S(   0,    0), S(   0,    0)};
constexpr ScorePair PAWN_PHALANX[8] = {S(   0,    0), S(   3,   -5), S(  10,    0), S(  18,    8), S(  38,   38), S(  71,  147), S(  12,    3), S(   0,    0)};
constexpr ScorePair DEFENDED_PAWN[8] = {S(   0,    0), S(   0,    0), S(  16,    5), S(  11,    8), S(  21,   18), S(  52,   44), S( 107,  112), S(   0,    0)};
constexpr ScorePair CANDIDATE_PASSER[2][8] = {
    {S(   0,    0), S(  13,  -34), S( -16,  -21), S(  -2,   14), S(  12,   28), S(  56,   63), S(   0,    0), S(   0,    0)},
    {S(   0,    0), S( -17,   -9), S( -13,   16), S(  -7,   26), S(  13,   27), S(   8,  128), S(   0,    0), S(   0,    0)}
};

constexpr ScorePair PASSED_PAWN[2][2][8] = {
    {
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -39,  -23), S( -14,   31), S(  21,  129), S( 111,  189), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -30,  -33), S(  -2,  -12), S(  30,   47), S(  82,   75), S(   0,    0)}
    },
    {
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -24,  -44), S( -18,   -4), S(  40,   45), S(  45,   32), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -26,  -49), S(  -5,  -20), S(  19,   23), S(  14,    0), S(   0,    0)}
    }
};
constexpr ScorePair OUR_PASSER_PROXIMITY[8] = {S(  20,  127), S( 131,   56), S(  46,   62), S(  -2,   54), S(   0,   30), S(  -1,   22), S(  16,   10), S(  -1,   17)};
constexpr ScorePair THEIR_PASSER_PROXIMITY[8] = {S( -66,   13), S(  11,   -4), S(  29,    1), S(  21,   26), S(  16,   56), S(  16,   72), S(  17,   76), S(  13,   60)};
constexpr ScorePair PASSER_DEFENDED_PUSH[8] = {S(   0,    0), S(   0,    0), S(   0,    0), S(  11,    6), S(   8,   20), S(  35,   34), S(  26,  122), S(   0,    0)};

constexpr ScorePair PAWN_STORM[2][4][8] = {
    {
        {S(  27,   26), S(-124, -170), S( -12,  -88), S(  35,   -8), S(  17,   16), S(   2,   18), S(   3,   27), S(   0,    0)},
        {S(  27,    7), S(  47, -244), S(  75, -141), S(  20,  -20), S(  10,    5), S( -19,   14), S(   7,   11), S(   0,    0)},
        {S(   9,    7), S(  20, -213), S(  85, -113), S(  61,  -24), S(  11,    7), S( -16,   16), S(  -1,    7), S(   0,    0)},
        {S(  11,  -12), S(  48, -173), S( 108, -132), S(  57,  -18), S(  10,   -6), S( -25,   -5), S( -24,    0), S(   0,    0)}
    },
    {
        {S(   0,    0), S(   0,    0), S(  64,   38), S( -10,   21), S(   6,   37), S(   4,   46), S(  38,   36), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S( 136,   22), S( -27,   17), S( -23,   27), S(  -8,   58), S(   6,   42), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S( 134,   -9), S(  10,    7), S(   1,   33), S(  -3,   32), S(  63,   19), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S( 126,   -5), S(  20,    6), S( -21,   22), S(   1,   -2), S( -32,  -17), S(   0,    0)}
    }
};
constexpr ScorePair PAWN_SHIELD[4][8] = {
    {S(  57,   18), S(   3,   39), S( -18,   25), S(  21,   15), S(  32,    7), S(  -6,   -2), S( -56,   23), S(   0,    0)},
    {S(  42,   13), S( -27,   24), S(   3,   13), S(  49,   -2), S(  41,  -28), S(  -7,  -14), S(  -9,  -87), S(   0,    0)},
    {S(  27,   12), S(   8,   40), S(  -1,  -10), S(  37,  -25), S(  29,  -36), S(  -6,   10), S( -92,  -35), S(   0,    0)},
    {S(  13,    2), S( -28,   -9), S(   5,  -27), S(  27,  -37), S(  21,  -26), S(  31,   -3), S( -26,  -17), S(   0,    0)}
};
constexpr ScorePair SAFE_KNIGHT_CHECK = S( 103,    0);
constexpr ScorePair SAFE_BISHOP_CHECK = S(  75,   30);
constexpr ScorePair SAFE_ROOK_CHECK = S( 111,   12);
constexpr ScorePair SAFE_QUEEN_CHECK = S(  68,   21);
constexpr ScorePair UNSAFE_KNIGHT_CHECK = S(  18,    2);
constexpr ScorePair UNSAFE_BISHOP_CHECK = S(  40,   10);
constexpr ScorePair UNSAFE_ROOK_CHECK = S(  40,    2);
constexpr ScorePair UNSAFE_QUEEN_CHECK = S(  21,   12);
constexpr ScorePair QUEENLESS_ATTACK = S(-110,  259);
constexpr ScorePair KING_ATTACKER_WEIGHT[4] = {S(  54,   -5), S(  22,    2), S(  24,  -16), S(   5,  -61)};
constexpr ScorePair KING_ATTACKS = S(   6,   -1);
constexpr ScorePair WEAK_KING_RING = S(   5,    2);
constexpr ScorePair KING_FLANK_ATTACKS[2] = {S(  13,   -7), S(   4,    0)};
constexpr ScorePair KING_FLANK_DEFENSES[2] = {S(  -8,    0), S(  -6,    6)};
constexpr ScorePair SAFETY_OFFSET = S(  76,    7);

constexpr ScorePair MINOR_BEHIND_PAWN = S(   1,   11);
constexpr ScorePair KNIGHT_OUTPOST = S(  13,   20);
constexpr ScorePair BISHOP_PAWNS[7] = {S(  13,    2), S(   8,   12), S(   5,    9), S(   2,    4), S(  -4,    0), S(  -7,   -9), S( -11,  -15)};
constexpr ScorePair BISHOP_PAIR = S(  24,   65);
constexpr ScorePair LONG_DIAG_BISHOP = S(  16,    4);
constexpr ScorePair ROOK_OPEN[2] = {S(  33,   -2), S(  19,    2)};

constexpr ScorePair TEMPO = S(  26,   16);

constexpr ScorePair COMPLEXITY_PAWNS = S(   0,    9);
constexpr ScorePair COMPLEXITY_PAWNS_BOTH_SIDES = S(   0,  138);
constexpr ScorePair COMPLEXITY_PAWN_ENDGAME = S(   0,  126);
constexpr ScorePair COMPLEXITY_OFFSET = S(   0, -207);

#undef S
// clang-format on

}
