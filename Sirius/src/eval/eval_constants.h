#pragma once

#include "../defs.h"

namespace eval
{

#define S(mg, eg) PackedScore(mg, eg)

constexpr PackedScore MATERIAL[6] = {S(  61,  130), S( 288,  429), S( 310,  441), S( 389,  784), S( 739, 1619), S(0, 0)};

constexpr PackedScore PSQT[6][64] = {
    {
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  57,   75), S(  28,   92), S(  21,  105), S(  55,   77), S(  70,   66), S(  47,   83), S(  36,  101), S(  59,   83),
        S(  17,    6), S(  -6,   37), S(   9,    0), S(  18,  -22), S(  10,  -19), S(   8,   -8), S( -16,   29), S(   0,   13),
        S(  14,    5), S(  -4,   12), S(  14,  -20), S(  12,  -24), S(   0,  -23), S(  -1,  -13), S(  -9,   11), S( -10,    8),
        S(   6,   -2), S(  -5,   15), S(  14,  -26), S(  16,  -17), S(   9,  -16), S(  -1,  -11), S( -15,   12), S( -13,   -1),
        S(  -2,   -5), S(   7,    8), S(   4,   -4), S(   0,   -2), S(  -9,   -2), S( -10,   -7), S( -24,   11), S( -24,   -2),
        S(   9,   -6), S(  24,    9), S(  31,  113), S(   9,    1), S(  -2,   -9), S(  -6,   -6), S( -16,   14), S( -15,    1),
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
    },
    {
        S( -67,  -99), S( -70,  -28), S( -25,  -18), S(   0,   -8), S( -30,    3), S( -57,    5), S(-100,    5), S( -85,  -57),
        S( -15,  -13), S(  13,    3), S(  23,    1), S(   0,   10), S(   4,   12), S(   5,   12), S(   1,   13), S(  -7,   -2),
        S(   5,   -7), S(  -9,    8), S(  30,   -1), S(  22,   16), S(  10,   24), S(  15,   15), S(   8,    4), S(  -4,    0),
        S(  27,    5), S(  24,   16), S(  37,   19), S(  24,   26), S(  24,   27), S(  31,   14), S(  22,    3), S(  13,    9),
        S(  10,   16), S(  14,   17), S(  20,   20), S(  20,   29), S(  22,   21), S(  19,   18), S(  24,    1), S(  11,    1),
        S(  15,   -1), S(  15,    4), S(  16,    3), S(  15,   16), S(   5,   16), S(   3,    0), S(   7,   -6), S(  -5,   -7),
        S(   9,   -1), S(  11,   -4), S(   8,   -4), S(  12,    0), S(   7,    0), S(  -3,   -3), S(  -2,   -7), S( -13,   -9),
        S(  -3,  -18), S(  -5,  -11), S(   3,  -10), S(   7,    1), S(   1,   -3), S( -15,   -9), S(  -8,  -15), S( -41,  -10),
    },
    {
        S( -42,  -14), S( -26,    5), S(  -4,   -4), S( -69,   11), S( -66,   19), S( -52,    4), S( -30,    9), S( -31,    7),
        S( -19,   -8), S( -41,    4), S( -10,    1), S(  -9,    4), S( -22,   13), S(   2,   -1), S( -12,   -6), S(   1,   -8),
        S(  13,   13), S(  -4,    6), S(  11,    5), S(  -6,   10), S(   2,    5), S(  -8,   -2), S(   1,    4), S(   8,    0),
        S(  -9,    6), S(   3,    9), S(  -1,   12), S(  12,   13), S(  10,   18), S(  11,    5), S(   2,    8), S(  -4,    1),
        S(  17,   -7), S(  -4,   12), S(   8,   10), S(  14,   10), S(  19,    8), S(   6,   10), S(   3,    3), S(   5,   -3),
        S(  21,   -8), S(  24,   -2), S(   5,   -2), S(  12,   12), S(   2,    7), S(   7,   -4), S(  21,    1), S(   8,   -9),
        S(  28,  -18), S(  26,  -24), S(  29,   -8), S(   9,   -3), S(   2,    0), S(  14,  -16), S(   8,  -26), S(  18,  -11),
        S(  30,  -37), S(  22,  -15), S(  -3,   -2), S(  23,   -5), S(   4,   -2), S(   3,    1), S(  14,   -3), S(   9,  -18),
    },
    {
        S(  13,   12), S( -22,   37), S( -13,   29), S( -25,   26), S( -13,   24), S( -13,   30), S(   7,   19), S(   7,   19),
        S(  25,    4), S(  30,    8), S(  13,   17), S(  -6,   21), S(  25,   13), S(  11,   24), S(   7,   20), S(   9,   13),
        S(  -7,    7), S(  25,    6), S(   5,    9), S(   8,   10), S(   7,    9), S(   4,   17), S(  16,   12), S(  -4,   14),
        S(  -9,   10), S( -15,   20), S(  -5,   17), S(  -6,   10), S(   0,   10), S(   7,   12), S(   5,   11), S(  -6,   13),
        S( -18,    4), S(   2,    8), S( -18,   14), S(  -6,    9), S(  -5,    3), S(  -8,    5), S(  -8,    4), S(  -9,    4),
        S(   5,  -21), S(  24,  -25), S(   1,  -13), S(   0,  -14), S(  -3,  -13), S(  -7,  -13), S(  -3,  -16), S( -11,  -13),
        S(  -6,  -28), S(  27,  -37), S(   6,  -23), S(   3,  -20), S(   4,  -22), S(   3,  -19), S(  -7,  -19), S( -10,  -23),
        S(  -6,  -39), S(  -2,  -20), S(   2,  -19), S(   8,  -24), S(   7,  -25), S(  -1,  -20), S(   0,  -23), S(  -2,  -22),
    },
    {
        S(  11,   -8), S(  56,  -36), S( -19,   46), S( -25,   35), S(  15,    6), S( -12,   21), S( -25,    9), S( -18,   14),
        S(  36,   10), S(   3,   21), S( -19,   38), S( -49,   69), S( -20,   45), S(   2,   11), S(   8,   -7), S(  14,   -3),
        S(   3,   16), S(  -6,    8), S( -17,   29), S( -27,   26), S(  -1,   18), S(   9,   14), S(  14,  -12), S(  24,  -12),
        S(  -1,   13), S( -15,   33), S( -10,   16), S( -26,   35), S( -14,   34), S(   9,    5), S(  10,    5), S(  11,   -5),
        S(   1,    9), S(   0,   11), S( -11,   16), S(  -6,   25), S(  -8,   33), S(   0,   16), S(   7,   12), S(   9,   -3),
        S(  10,  -20), S(  10,  -11), S(   0,    2), S(  -8,   11), S(  -3,    9), S(   2,    8), S(  18,  -15), S(  18,  -24),
        S(  10,  -48), S(  18,  -68), S(  10,  -38), S(   9,  -21), S(   7,  -11), S(  11,  -24), S(  13,  -30), S(  19,  -46),
        S(  17,  -65), S(  -9,  -48), S( -10,  -32), S(  -1,  -28), S(   2,  -29), S(  -2,  -23), S(  -4,  -26), S(  -2,  -25),
    },
    {
        S(  44,  -67), S(  26,    5), S( -51,  -13), S( -66,    4), S(   9,   -6), S(   9,   -6), S(   9,   -6), S(   9,   -6),
        S( -16,   30), S(  35,   59), S(  -6,   34), S(  -1,   29), S(   9,   -6), S(   9,   -6), S(   9,   -6), S(   9,   -6),
        S(  35,   20), S(  58,   55), S(  35,   31), S( -21,   51), S(   9,   -6), S(   9,   -6), S(   9,   -6), S(   9,   -6),
        S( -17,   21), S( -13,   55), S( -37,   32), S( -85,   47), S(   9,   -6), S(   9,   -6), S(   9,   -6), S(   9,   -6),
        S( -57,   13), S( -53,   43), S( -50,   12), S( -86,   28), S(   9,   -6), S(   9,   -6), S(   9,   -6), S(   9,   -6),
        S( -17,   -5), S( -11,   18), S( -32,  -11), S( -52,    4), S(   9,   -6), S(   9,   -6), S(   9,   -6), S(   9,   -6),
        S(  37,  -27), S(  30,   -3), S(   5,  -31), S( -24,  -19), S(   9,   -6), S(   9,   -6), S(   9,   -6), S(   9,   -6),
        S(  37,  -60), S(  37,  -23), S(  12,  -51), S(   1,  -49), S(   9,   -6), S(   9,   -6), S(   9,   -6), S(   9,   -6),
    },
};

constexpr PackedScore MOBILITY[4][28] = {
    {S(  -8,  -29), S( -40,  -44), S( -17,  -15), S(  -9,    0), S(   2,    8), S(   6,   18), S(  14,   21), S(  23,   25), S(  33,   18), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S( -18,  -44), S( -34,  -62), S( -22,  -33), S( -16,  -15), S(  -7,   -5), S(  -2,    6), S(   0,   14), S(   4,   18), S(   5,   21), S(   9,   23), S(  12,   24), S(  21,   19), S(  21,   28), S(  27,    8), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S( -18,  -43), S( -30,  -69), S( -15,  -52), S(  -4,  -31), S(  -1,  -17), S(  -2,   -6), S(  -2,    1), S(   1,    8), S(   3,   11), S(   6,   17), S(   4,   27), S(   6,   34), S(   9,   38), S(  13,   38), S(  21,   35), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S(  -7,   13), S( -41,  -72), S( -64, -126), S( -10, -214), S( -16,  -70), S(  -9,  -17), S(   0,  -29), S(   2,   -9), S(   2,    9), S(   4,   19), S(   6,   22), S(   9,   25), S(   9,   37), S(  12,   36), S(  12,   42), S(  12,   45), S(  13,   48), S(  14,   50), S(  13,   49), S(  19,   42), S(  22,   34), S(  30,   17), S(  25,   25), S(  34,    1), S(  30,    3), S(   8,    1), S( -16,   -2), S(-114,   17)}
};

constexpr PackedScore THREAT_BY_PAWN[6] = {S(   4,  -18), S(  66,   27), S(  58,   57), S(  80,   24), S(  71,    0), S(   0,    0)};
constexpr PackedScore THREAT_BY_KNIGHT[2][6] = {
    {S(   6,   28), S(  18,   36), S(  39,   42), S(  75,   14), S(  58,  -31), S(   0,    0)},
    {S(  -8,    9), S(   7,   34), S(  28,   30), S(  65,   32), S(  58,   -4), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_BISHOP[2][6] = {
    {S(  -2,   36), S(  42,   32), S( -11,   35), S(  69,   15), S(  70,   54), S(   0,    0)},
    {S(  -4,    6), S(  18,   23), S( -24,   -9), S(  45,   45), S(  47,  121), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_ROOK[2][6] = {
    {S(   0,   40), S(  17,   59), S(  26,   53), S(   6,  -35), S(  75,    8), S(   0,    0)},
    {S(  -7,    7), S(   1,   16), S(  13,    5), S(   3,  -75), S(  62,   46), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_QUEEN[2][6] = {
    {S(   6,    8), S(  23,   20), S(   7,   49), S(  18,   16), S(  11,  -54), S(  96,   46)},
    {S(  -3,   12), S(   0,    6), S(  -7,   18), S(  -5,    4), S( -16,  -73), S( 115,   44)}
};
constexpr PackedScore THREAT_BY_KING[6] = {S( -26,   45), S(   9,   47), S(  28,   39), S(  87,    6), S(   0,    0), S(   0,    0)};
constexpr PackedScore PUSH_THREAT = S(  13,   17);

constexpr PackedScore ISOLATED_PAWN[8] = {S(  -9,    6), S(  -3,  -15), S( -12,   -8), S(  -9,  -16), S( -11,  -15), S(  -8,   -7), S(  -4,  -13), S( -12,    7)};
constexpr PackedScore DOUBLED_PAWN[8] = {S(   1,  -61), S(  14,  -37), S(   1,  -27), S(  -1,  -17), S(  -4,  -11), S(  -6,  -19), S(   6,  -38), S(   9,  -73)};
constexpr PackedScore BACKWARDS_PAWN[8] = {S(   0,    0), S(  -7,  -13), S(  -1,  -13), S(  -8,  -11), S(   1,  -17), S(  25,    1), S(   0,    0), S(   0,    0)};
constexpr PackedScore PAWN_PHALANX[8] = {S(   0,    0), S(   6,   -4), S(  12,   -2), S(  20,    8), S(  40,   40), S( 115,  213), S( -12,  357), S(   0,    0)};
constexpr PackedScore DEFENDED_PAWN[8] = {S(   0,    0), S(   0,    0), S(  19,    6), S(  11,    7), S(  17,   20), S(  31,   61), S( 146,   68), S(   0,    0)};
constexpr PackedScore CANDIDATE_PASSER[2][8] = {
    {S(   0,    0), S( -34,  -16), S( -19,   -7), S(   0,   26), S(  27,   52), S(  60,   87), S(   0,    0), S(   0,    0)},
    {S(   0,    0), S( -19,   -7), S(  -9,   14), S(  -4,   28), S(  20,   40), S(  29,  154), S(   0,    0), S(   0,    0)}
};

constexpr PackedScore PASSED_PAWN[2][2][8] = {
    {
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -40,  -40), S( -15,   24), S(   4,  150), S(  58,  224), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -27,  -53), S(   7,  -23), S(  31,   20), S(  60,   31), S(   0,    0)}
    },
    {
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -32,  -56), S(   1,  -24), S(  38,    9), S(  62,   -3), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -33,  -62), S(  -1,  -35), S(  11,  -10), S( -24,  -11), S(   0,    0)}
    }
};
constexpr PackedScore OUR_PASSER_PROXIMITY[8] = {S(   0,    0), S(  57,   81), S(  10,   68), S(   3,   44), S(   4,   32), S(  11,   23), S(  18,   21), S(  16,   18)};
constexpr PackedScore THEIR_PASSER_PROXIMITY[8] = {S(   0,    0), S( -57,    8), S(  17,    1), S(  16,   26), S(  21,   45), S(  19,   77), S(  20,   78), S(  24,   67)};

constexpr PackedScore PAWN_STORM[2][4][8] = {
    {
        {S(  44,   36), S(-126,  -47), S( -20,   12), S(  30,   11), S(  18,   23), S(  -2,   30), S(  -8,   29), S(   0,    0)},
        {S(  34,    8), S(  43, -126), S(  83,  -46), S(  36,   -5), S(   9,    3), S( -26,   11), S(   3,    7), S(   0,    0)},
        {S(  13,   21), S( 108,  -98), S( 104,  -22), S(  53,    6), S(  11,   20), S( -11,   24), S( -11,   26), S(   0,    0)},
        {S(  20,    5), S( 164,  -79), S( 101,  -18), S(  42,   12), S(   1,   18), S( -17,   11), S( -19,   19), S(   0,    0)}
    },
    {
        {S(   0,    0), S(   0,    0), S(  33,   41), S( -24,   26), S(  -4,   30), S(  20,   31), S(  -7,   29), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(  91,   -1), S(   3,    8), S( -12,   18), S(  -3,   17), S(   2,    7), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(  84,    8), S(  -1,   14), S(  -1,   25), S(  26,   25), S(   3,   22), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(  36,    1), S(  19,   18), S( -28,   16), S(  -3,   10), S(  -1,   12), S(   0,    0)}
    }
};
constexpr PackedScore PAWN_SHIELD[4][8] = {
    {S(  47,   32), S( -15,   49), S( -12,   41), S(  30,   33), S(  35,   27), S( -24,   -3), S( -71,  -20), S(   0,    0)},
    {S(  49,    6), S( -21,   17), S(   7,    7), S(  49,    1), S(  36,   -7), S(  -2,  -16), S( -49,  -29), S(   0,    0)},
    {S(  21,    0), S(  20,  113), S(   8,   -2), S(  28,  -21), S(  25,  -20), S(  -2,  -25), S( -64,  -30), S(   0,    0)},
    {S(  19,   14), S(  10,   11), S(  -2,   11), S(  21,    7), S(  29,    5), S(  11,    6), S( -88,   11), S(   0,    0)}
};
constexpr PackedScore SAFE_KNIGHT_CHECK = S( 111,    5);
constexpr PackedScore SAFE_BISHOP_CHECK = S(  61,   17);
constexpr PackedScore SAFE_ROOK_CHECK = S( 104,   17);
constexpr PackedScore SAFE_QUEEN_CHECK = S(  53,   24);
constexpr PackedScore UNSAFE_KNIGHT_CHECK = S(  16,    2);
constexpr PackedScore UNSAFE_BISHOP_CHECK = S(  39,   10);
constexpr PackedScore UNSAFE_ROOK_CHECK = S(  40,    3);
constexpr PackedScore UNSAFE_QUEEN_CHECK = S(  17,    3);
constexpr PackedScore QUEENLESS_ATTACK = S(-142,  154);
constexpr PackedScore KING_ATTACKER_WEIGHT[4] = {S(  56,   -5), S(  22,    0), S(  28,  -13), S(   4,  -10)};
constexpr PackedScore KING_ATTACKS = S(   6,    0);
constexpr PackedScore WEAK_KING_RING = S(   7,    0);
constexpr PackedScore KING_FLANK_ATTACKS[2] = {S(  11,   -4), S(   7,    1)};
constexpr PackedScore KING_FLANK_DEFENSES[2] = {S(  -6,    0), S( -10,    2)};
constexpr PackedScore SAFETY_OFFSET = S(  73,  202);

constexpr PackedScore MINOR_BEHIND_PAWN = S(   5,   11);
constexpr PackedScore KNIGHT_OUTPOST = S(  24,   16);
constexpr PackedScore BISHOP_OUTPOST = S(  39,    5);
constexpr PackedScore BISHOP_PAWNS[7] = {S(   5,   21), S(   6,   19), S(   3,   12), S(   1,    4), S(  -2,   -5), S(  -3,  -19), S(  -7,  -31)};
constexpr PackedScore BISHOP_PAIR = S(  19,   61);
constexpr PackedScore LONG_DIAG_BISHOP = S(  15,    8);
constexpr PackedScore ROOK_OPEN[2] = {S(  25,    3), S(  13,    4)};

constexpr PackedScore TEMPO = S(  32,   34);

constexpr PackedScore COMPLEXITY_PAWNS = S(   0,    9);
constexpr PackedScore COMPLEXITY_PASSERS = S(   0,   -1);
constexpr PackedScore COMPLEXITY_PAWNS_BOTH_SIDES = S(   0,   66);
constexpr PackedScore COMPLEXITY_PAWN_ENDGAME = S(   0,   79);
constexpr PackedScore COMPLEXITY_OFFSET = S(   0, -127);

#undef S


}