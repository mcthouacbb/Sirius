#pragma once

#include "../defs.h"

namespace eval
{

// clang-format off
#define S(mg, eg) ScorePair(mg, eg)

constexpr ScorePair MATERIAL[6] = {S(  64,  128), S( 324,  424), S( 330,  448), S( 425,  777), S( 929, 1540), S(0, 0)};

constexpr ScorePair PSQT[6][64] = {
    {
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S( 104,   72), S(  25,   69), S(  34,   63), S(  60,   96), S(  88,   63), S(  54,   66), S(   5,  114), S(  71,   94),
        S(   4,   14), S( -10,   20), S(   8,   26), S(  16,   -2), S( -24,    9), S(   0,   -2), S( -18,   26), S(   1,   17),
        S(   3,   16), S(   7,   21), S(   3,    3), S(   8,  -12), S(   3,  -15), S(  -1,   -7), S(   3,   10), S(  -7,    8),
        S(  -8,   -4), S(  -8,   17), S(  13,  -19), S(  18,  -17), S(  12,  -17), S(   2,  -10), S( -15,   11), S( -13,   -6),
        S( -14,   -7), S(  11,    6), S(   1,    3), S(   8,    0), S(  -1,   -2), S(  -9,   -1), S( -17,   10), S( -22,   -6),
        S(  -6,   -7), S(  25,    5), S(  26,   28), S(   5,   12), S(  -2,    2), S(   0,   -1), S(  -6,   11), S( -14,   -7),
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
    },
    {
        S( -85,  -92), S(  -1,   25), S(-130,   34), S(  28,    2), S( -26,   15), S( -78,   38), S( -69,  -34), S( -71,  -79),
        S(  15,   -3), S( -17,   -2), S(  16,    9), S(  56,   -8), S(  21,   24), S(  32,  -14), S( -27,   18), S( -10,  -15),
        S(  24,  -12), S(   8,    7), S(  53,    2), S(  19,   15), S(  13,   17), S(  19,    9), S(  13,    0), S(   5,  -17),
        S(  20,    7), S(  29,    4), S(  26,   19), S(  27,   25), S(  31,   21), S(  16,   22), S(  19,    4), S(  10,   13),
        S(  18,   11), S(  21,   15), S(  18,   22), S(  16,   27), S(  19,   23), S(  10,   19), S(   1,   20), S(   0,   10),
        S(  -3,   -4), S(   5,    7), S(  11,    4), S(  10,   17), S(   5,   14), S(  -6,    0), S(   1,   -8), S( -14,   -7),
        S(   8,   -9), S(   2,  -10), S(   1,   -7), S(   6,    5), S(  -5,    6), S( -10,   -6), S(   8,  -28), S( -20,  -35),
        S( -10,  -29), S( -17,  -11), S(   0,  -20), S( -11,    4), S(   3,   -6), S(  -1,  -19), S( -19,  -14), S( -31,  -43),
    },
    {
        S( -24,  -34), S( -76,   31), S( -44,   -8), S( -54,   15), S( -91,   31), S( -83,   15), S( -22,   15), S( -41,  -11),
        S( -10,  -10), S( -50,   16), S(  -8,    5), S( -54,   25), S(  24,    0), S(  -2,    4), S(  -4,  -27), S( -11,  -15),
        S(  14,   -8), S(  21,    5), S(  36,    5), S(  17,   23), S(   1,   26), S(   5,    7), S(  18,   -2), S(  -8,   16),
        S(   7,   -4), S(   9,   20), S(   6,   27), S(  13,   30), S(  18,   27), S(  13,   14), S(  15,    8), S(   5,   -4),
        S(   9,  -11), S(   6,   10), S(  15,   12), S(  21,   13), S(  25,    9), S(  11,   17), S(   2,   10), S(  11,   -6),
        S(  32,  -20), S(  33,  -21), S(  17,   -5), S(  13,   16), S(  10,    7), S(  -1,    2), S(  24,   -8), S(   7,   -7),
        S(  19,   -3), S(  25,  -25), S(  27,  -11), S(  14,   -9), S(   3,   -5), S(  14,  -18), S(   6,  -17), S(  29,  -21),
        S(   5,  -31), S(  15,  -19), S( -13,   -4), S(   3,  -13), S(  -2,   -3), S(  -4,   -6), S(  30,  -18), S(  -1,  -12),
    },
    {
        S(  42,    3), S(  41,   -1), S(  31,   16), S( -10,   29), S(  35,    8), S(  38,    6), S(  13,   18), S(  30,   12),
        S(  25,    8), S(  12,   11), S(  24,    6), S(  15,   17), S(  16,   34), S(  18,   19), S(  20,   21), S(  31,   13),
        S( -26,   27), S(   5,   11), S(   3,   19), S(  22,    9), S(  18,    9), S(  21,    3), S(   7,   24), S( -13,   31),
        S( -25,   14), S(  12,   -4), S(   4,    3), S( -16,   18), S( -12,   10), S( -15,   16), S(  -9,   22), S(  -2,    8),
        S( -17,   -9), S( -12,    1), S( -22,   20), S(  -4,    9), S(  -5,    0), S(   3,    0), S( -21,   16), S(  -9,   -2),
        S( -27,  -16), S(   5,  -30), S(  -7,   -2), S(  -5,  -14), S( -10,  -15), S( -12,  -11), S( -16,   -9), S( -16,  -13),
        S( -63,  -21), S( -16,  -22), S(   2,  -27), S(  -1,  -22), S(  -5,  -22), S(  -8,  -15), S( -16,  -20), S( -25,  -14),
        S( -17,  -33), S( -26,  -15), S(   3,  -19), S(  13,  -30), S(   6,  -28), S(  -4,  -21), S(  -6,  -20), S(  -2,  -21),
    },
    {
        S(  -3,   38), S(  35,    8), S(  24,   11), S(  29,   19), S(  17,   30), S(  59,  -15), S(  14,   11), S( -16,   23),
        S(  38,  -14), S(  31,    4), S(  12,   10), S( -23,   33), S(   7,   22), S(   8,    8), S(   9,   11), S(  12,   -1),
        S(   1,   17), S(  29,  -23), S(  18,   -7), S( -14,   37), S(  -2,   39), S(  14,    8), S(  18,  -20), S(  11,  -14),
        S(  12,  -14), S(  -9,   27), S( -18,   21), S( -16,   24), S( -26,   43), S(   4,   11), S(  -1,   34), S(   4,    3),
        S(  -1,    1), S( -10,   13), S(  -1,   -6), S( -24,   37), S( -18,   28), S(  -7,   17), S(  -7,   29), S(  -8,   24),
        S( -16,    6), S(   0,  -11), S(  -5,  -13), S( -20,   14), S( -10,   13), S(  -2,    9), S(   7,  -12), S(   7,  -10),
        S( -30,  -37), S(  -2,  -54), S(   1,  -57), S(  -7,  -12), S(  -7,  -11), S(  10,  -41), S(   5,  -41), S(  -1,   -9),
        S( -20,  -10), S( -34,  -55), S(  -1,  -71), S(  -8,  -39), S(  -4,  -26), S(  -6,  -44), S( -25,  -17), S( -18,    5),
    },
    {
        S(   4, -150), S(  24,   40), S(  60,   16), S(  34,   15), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S( -15,  -13), S(  28,   92), S( -22,   69), S(  20,   58), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S( -29,   45), S(  45,   73), S( -25,   52), S(-123,   21), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S( -66,   45), S( -49,   85), S( -66,   34), S(-151,   20), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(-102,   37), S( -54,   65), S(-100,   33), S(-114,    5), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  -5,    6), S(  -8,   33), S( -43,    7), S( -65,  -11), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  58,  -20), S(  48,    8), S(  14,  -24), S( -14,  -46), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  61,  -53), S(  61,  -19), S(  15,  -49), S(  11,  -87), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
    },
};

constexpr ScorePair MOBILITY[4][28] = {
    {S(   1,  -40), S( -40,  -45), S( -24,  -13), S( -11,    0), S(   1,    8), S(   4,   23), S(  12,   27), S(  23,   29), S(  37,   17), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S(  -6,  -27), S( -36,  -62), S( -19,  -34), S( -11,  -11), S(  -6,    1), S(  -1,    9), S(   1,   15), S(   7,   17), S(   5,   22), S(  12,   21), S(   4,   28), S(  19,   10), S(  15,   31), S(  22,  -20), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S( -39,  -42), S( -76,  -27), S( -18,  -46), S(  -8,  -29), S(  -1,  -21), S(   6,   -9), S(   5,    3), S(   8,    7), S(   7,   12), S(  14,   15), S(  13,   24), S(  13,   31), S(  15,   36), S(  12,   40), S(  50,   10), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S( -13,   63), S( -48,   33), S( -47,  -73), S( -70,  -40), S( -30,  -89), S( -11,  -80), S(   0,  -58), S(  -4,  -17), S(   1,  -32), S(   1,  -15), S(   4,    4), S(   2,    9), S(   3,   19), S(   0,   32), S(   4,   31), S(   4,   31), S(   7,   30), S(  10,   30), S(  12,   32), S(   8,   32), S(  17,   26), S(  11,   25), S(  10,   15), S(  13,    0), S(  22,  -19), S(  30,  -18), S(  25,   17), S(  26,   -9)}
};

constexpr ScorePair THREAT_BY_PAWN[6] = {S( -18,   15), S(  73,   39), S(  67,   68), S(  75,   54), S(  50,   40), S(   0,    0)};
constexpr ScorePair THREAT_BY_KNIGHT[2][6] = {
    {S(   3,   33), S( -12,   30), S(  39,   40), S( 102,    1), S(  45,  -13), S(   0,    0)},
    {S( -10,   11), S(  -2,   25), S(  34,   32), S(  91,   11), S(  36,   86), S(   0,    0)}
};
constexpr ScorePair THREAT_BY_BISHOP[2][6] = {
    {S(   5,   29), S(  45,   30), S(  14,   41), S(  52,   30), S(  63,   29), S(   0,    0)},
    {S(  -6,    5), S(  22,   17), S( -18,   41), S(  61,   63), S(  63,   61), S(   0,    0)}
};
constexpr ScorePair THREAT_BY_ROOK[2][6] = {
    {S(  -7,   51), S(  26,   61), S(  55,   38), S( -49,  -15), S(  65,  -13), S(   0,    0)},
    {S( -13,   11), S(   7,   10), S(  17,    4), S( -28,  -46), S(  38,  116), S(   0,    0)}
};
constexpr ScorePair THREAT_BY_QUEEN[2][6] = {
    {S(   4,   32), S(  18,   52), S(  13,   68), S(   7,   28), S(   4,  -50), S( 188,  116)},
    {S(  -6,   20), S(   3,   -1), S( -12,   37), S(  -1,   -6), S( -25,  -12), S( 115,  183)}
};
constexpr ScorePair THREAT_BY_KING[6] = {S(  55,   10), S(  32,   27), S( 114,   23), S(  64,   19), S(   0,    0), S(   0,    0)};
constexpr ScorePair KNIGHT_HIT_QUEEN = S(   7,    2);
constexpr ScorePair BISHOP_HIT_QUEEN = S(  22,    0);
constexpr ScorePair ROOK_HIT_QUEEN = S(  23,   -9);
constexpr ScorePair PUSH_THREAT = S(  10,   20);
constexpr ScorePair RESTRICTED_SQUARES = S(   2,    2);

constexpr ScorePair ISOLATED_PAWN[8] = {S(  -4,    2), S(  -5,  -14), S(  -9,  -11), S(  -9,  -12), S( -15,  -12), S(  -8,  -10), S(  -5,   -8), S(  -7,    2)};
constexpr ScorePair DOUBLED_PAWN[8] = {S(  -3,  -37), S(  13,  -51), S(  -4,  -21), S(  -4,   -8), S( -21,    4), S(  -5,  -14), S(  15,  -50), S(   5,  -41)};
constexpr ScorePair BACKWARDS_PAWN[8] = {S(   0,    0), S(  -6,  -14), S(   3,  -19), S(  -4,  -16), S(   7,  -27), S(  23,  -37), S(   0,    0), S(   0,    0)};
constexpr ScorePair PAWN_PHALANX[8] = {S(   0,    0), S(   1,   -5), S(  11,   -1), S(  17,   11), S(  32,   43), S(  37,  146), S( 114,  154), S(   0,    0)};
constexpr ScorePair DEFENDED_PAWN[8] = {S(   0,    0), S(   0,    0), S(  15,    6), S(  10,   10), S(  17,   22), S(  38,   58), S(  39,  145), S(   0,    0)};
constexpr ScorePair CANDIDATE_PASSER[2][8] = {
    {S(   0,    0), S( -16,  -34), S(  -3,  -26), S(  -9,    4), S(  18,   14), S(  59,   57), S(   0,    0), S(   0,    0)},
    {S(   0,    0), S( -14,  -10), S(   1,    0), S(   1,   21), S(  25,   20), S(  93,   53), S(   0,    0), S(   0,    0)}
};

constexpr ScorePair PASSED_PAWN[2][2][8] = {
    {
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -40,  -22), S( -14,   27), S(  24,  128), S( 134,  190), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -28,  -31), S(  -7,   -6), S(  35,   41), S(  74,   58), S(   0,    0)}
    },
    {
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -23,  -43), S( -13,  -11), S(  30,   40), S(  49,   31), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -20,  -56), S( -11,  -24), S(  16,   17), S(  -4,   16), S(   0,    0)}
    }
};
constexpr ScorePair OUR_PASSER_PROXIMITY[8] = {S(  36,  115), S( 114,   65), S(  45,   61), S(  -2,   54), S(  -4,   31), S(   2,   20), S(  20,    7), S(   2,   14)};
constexpr ScorePair THEIR_PASSER_PROXIMITY[8] = {S( -54,   14), S(  12,   -5), S(  28,    1), S(  19,   25), S(  16,   55), S(  20,   67), S(  12,   79), S(  11,   59)};
constexpr ScorePair PASSER_DEFENDED_PUSH[8] = {S(   0,    0), S(   0,    0), S(   0,    0), S(  11,    4), S(   9,   17), S(  39,   28), S(  46,   94), S(   0,    0)};

constexpr ScorePair PAWN_STORM[2][4][8] = {
    {
        {S(  29,   27), S(-115, -167), S(  -9,  -64), S(  33,   -1), S(  24,   18), S(  12,   23), S(   5,   27), S(   0,    0)},
        {S(  26,   12), S(  14, -162), S(  71, -118), S(  22,  -17), S(   9,    7), S( -16,   13), S(   8,   16), S(   0,    0)},
        {S(   7,   10), S(  50, -123), S( 104,  -87), S(  79,  -30), S(  18,   12), S( -13,   14), S(   0,   12), S(   0,    0)},
        {S(  11,   -9), S(  56, -132), S( 115, -119), S(  64,  -20), S(  13,   -1), S( -30,    1), S( -21,    0), S(   0,    0)}
    },
    {
        {S(   0,    0), S(   0,    0), S(  79,   51), S( -20,   23), S(   2,   36), S(  23,   49), S(   3,   58), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S( 134,   42), S( -30,   28), S(  -8,   20), S( -19,   53), S( -19,   49), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S( 144,   -2), S(  13,   13), S(  -1,   41), S( -32,   50), S(  26,   26), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S( 170,  -20), S(  20,   14), S( -19,   23), S(   9,    8), S(   0,  -48), S(   0,    0)}
    }
};
constexpr ScorePair PAWN_SHIELD[4][8] = {
    {S(  64,   20), S(   5,   44), S(  -8,   29), S(  21,   23), S(  21,   16), S(  19,   -4), S( -28,   15), S(   0,    0)},
    {S(  39,   17), S( -31,   26), S(   4,   16), S(  41,   11), S(  41,   -2), S(  15,  -31), S( -11, -104), S(   0,    0)},
    {S(  28,   17), S(   0,   42), S(  11,    0), S(  41,  -19), S(  32,  -18), S(  10,    6), S(-113,  -42), S(   0,    0)},
    {S(  17,    2), S( -25,   -7), S(   9,  -19), S(  34,  -29), S(  13,  -17), S(  56,  -18), S( -30,   -2), S(   0,    0)}
};
constexpr ScorePair SAFE_KNIGHT_CHECK = S( 104,   -1);
constexpr ScorePair SAFE_BISHOP_CHECK = S(  59,   33);
constexpr ScorePair SAFE_ROOK_CHECK = S( 114,   10);
constexpr ScorePair SAFE_QUEEN_CHECK = S(  68,   19);
constexpr ScorePair UNSAFE_KNIGHT_CHECK = S(  19,    1);
constexpr ScorePair UNSAFE_BISHOP_CHECK = S(  40,    9);
constexpr ScorePair UNSAFE_ROOK_CHECK = S(  43,    1);
constexpr ScorePair UNSAFE_QUEEN_CHECK = S(  23,    3);
constexpr ScorePair QUEENLESS_ATTACK = S(-125,  216);
constexpr ScorePair KING_ATTACKER_WEIGHT[4] = {S(  55,   -2), S(  24,   -2), S(  28,  -16), S(  -9,    0)};
constexpr ScorePair KING_ATTACKS = S(   7,   -1);
constexpr ScorePair WEAK_KING_RING = S(   4,    1);
constexpr ScorePair KING_FLANK_ATTACKS[2] = {S(  13,   -6), S(   3,    1)};
constexpr ScorePair KING_FLANK_DEFENSES[2] = {S(  -8,    0), S(  -8,    5)};
constexpr ScorePair SAFETY_OFFSET = S(  83,   69);

constexpr ScorePair MINOR_BEHIND_PAWN = S(   1,   10);
constexpr ScorePair KNIGHT_OUTPOST = S(  14,   16);
constexpr ScorePair BISHOP_PAWNS[7] = {S(  15,    3), S(   9,   12), S(   4,   10), S(   0,    7), S(  -4,   -1), S(  -9,   -8), S( -14,  -17)};
constexpr ScorePair BISHOP_PAIR = S(  22,   64);
constexpr ScorePair LONG_DIAG_BISHOP = S(  14,    8);
constexpr ScorePair ROOK_OPEN[2] = {S(  33,   -2), S(  21,    2)};

constexpr ScorePair TEMPO = S(  24,   17);

constexpr ScorePair COMPLEXITY_PAWNS = S(   0,   10);
constexpr ScorePair COMPLEXITY_PAWNS_BOTH_SIDES = S(   0,  137);
constexpr ScorePair COMPLEXITY_PAWN_ENDGAME = S(   0,  123);
constexpr ScorePair COMPLEXITY_OFFSET = S(   0, -203);

#undef S
// clang-format on

}
