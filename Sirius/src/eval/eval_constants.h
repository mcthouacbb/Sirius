#pragma once

#include "../defs.h"

namespace eval
{

#define S(mg, eg) PackedScore(mg, eg)

constexpr PackedScore MATERIAL[6] = {S(  58,  101), S( 285,  347), S( 306,  357), S( 394,  639), S( 753, 1502), S(0, 0)};

constexpr PackedScore PSQT[6][64] = {
    {
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  54,   84), S(  33,   94), S(  20,  106), S(  46,   84), S(  68,   69), S(  54,   78), S(  45,   95), S(  64,   82),
        S(  10,    7), S( -10,   32), S(   3,    1), S(   9,  -19), S(   2,  -17), S(   5,  -10), S( -18,   20), S(  -3,    9),
        S(  12,    1), S(  -6,    9), S(  11,  -20), S(   9,  -18), S(  -3,  -18), S(  -1,  -14), S(  -9,    7), S(  -9,    4),
        S(   2,   -3), S(  -6,   11), S(  13,  -23), S(  16,  -11), S(   9,  -10), S(   0,  -10), S( -13,    9), S( -12,   -2),
        S(   0,   -2), S(   8,   10), S(   5,   -3), S(   2,    2), S(  -6,    2), S(  -7,   -5), S( -20,    9), S( -20,   -2),
        S(  12,   -4), S(  26,   11), S(  29,   68), S(  11,    6), S(   1,   -2), S(  -2,   -2), S( -11,   13), S( -10,    2),
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
    },
    {
        S( -79,  -71), S( -82,  -19), S( -52,   -8), S( -12,   -2), S( -39,    5), S( -63,    5), S(-103,    5), S( -90,  -49),
        S( -19,  -13), S(  15,   -5), S(  25,   -2), S(  -1,    9), S(   4,   12), S(   7,    8), S(  -2,    7), S( -14,   -6),
        S(   4,  -10), S(  -7,    3), S(  32,   -1), S(  26,   13), S(  12,   20), S(  22,   10), S(  10,    0), S(  -9,   -4),
        S(  24,    1), S(  24,   13), S(  41,   14), S(  26,   19), S(  27,   22), S(  31,   12), S(  24,    2), S(  12,    4),
        S(  11,   12), S(  16,   12), S(  24,   16), S(  22,   24), S(  23,   16), S(  23,   13), S(  24,   -2), S(  12,    1),
        S(  17,    0), S(  18,    5), S(  23,    4), S(  18,   15), S(   8,   14), S(  11,    2), S(  10,   -4), S(  -3,   -5),
        S(  12,    1), S(  12,   -1), S(  10,   -1), S(  17,    2), S(  13,    1), S(   1,   -2), S(   0,   -8), S( -12,   -8),
        S( -11,  -10), S(   0,   -6), S(   7,   -8), S(  10,    0), S(   2,   -4), S( -15,   -8), S(  -1,  -11), S( -45,   -8),
    },
    {
        S( -51,  -15), S( -28,    3), S( -28,   -2), S( -77,   10), S( -74,   14), S( -61,    4), S( -44,    9), S( -33,    0),
        S( -18,  -12), S( -44,    3), S( -12,    1), S( -11,    3), S( -20,    8), S(  -3,   -1), S( -15,   -7), S( -12,  -10),
        S(   9,    9), S(  -1,    6), S(  19,    5), S(   5,   13), S(  16,    6), S(   2,    1), S(  12,    3), S(   5,   -2),
        S( -13,    4), S(   6,   10), S(   1,   17), S(  16,   17), S(  22,   21), S(  19,    8), S(   9,   10), S(  -3,   -1),
        S(  17,   -6), S(  -3,   12), S(  11,   12), S(  15,   14), S(  21,   13), S(  10,   12), S(   5,    4), S(   6,   -1),
        S(  21,   -6), S(  23,    0), S(   6,    1), S(  14,   12), S(   6,    9), S(   7,   -1), S(  22,    2), S(   9,   -5),
        S(  27,  -14), S(  29,  -19), S(  28,   -5), S(  11,   -1), S(   3,    2), S(  15,  -13), S(  10,  -19), S(  20,  -10),
        S(  24,  -33), S(  21,  -10), S(   1,    0), S(  21,   -4), S(   3,   -3), S(   7,    1), S(  15,   -6), S(   9,  -16),
    },
    {
        S(  23,    6), S(  -4,   20), S(  -9,   21), S( -22,   19), S( -22,   23), S( -14,   24), S(   7,   15), S(   8,   15),
        S(  31,   -4), S(  32,    5), S(  13,   11), S(  -5,   17), S(  26,   11), S(  11,   19), S(   3,   16), S(   3,   10),
        S(  -4,   -4), S(  30,   -3), S(   6,    0), S(   3,    6), S(   6,    4), S(   3,    9), S(  15,    5), S( -10,    8),
        S(  -6,    0), S( -11,    9), S(  -5,    7), S( -10,    7), S(  -2,    5), S(   5,    6), S(   6,    4), S( -11,    9),
        S( -18,    3), S(   0,    7), S( -19,   12), S( -12,   10), S( -10,    3), S( -12,    5), S( -13,    4), S( -12,    3),
        S(   5,  -16), S(  22,  -17), S(   0,   -8), S(  -5,   -7), S(  -7,   -7), S(  -9,  -10), S(  -6,  -12), S( -13,   -8),
        S(  -7,  -23), S(  27,  -28), S(   6,  -15), S(   1,  -13), S(   3,  -16), S(   1,  -15), S(  -8,  -14), S( -14,  -15),
        S(  -1,  -24), S(   0,  -12), S(   8,  -11), S(  11,  -16), S(   8,  -17), S(   0,  -13), S(   0,  -16), S(   3,  -11),
    },
    {
        S(   5,   -1), S(  69,  -41), S( -12,   30), S( -19,   31), S(  13,   14), S( -22,   30), S( -36,   18), S( -23,   18),
        S(  37,   -8), S(  15,    3), S(  -8,   20), S( -35,   52), S(  -5,   31), S(  10,   10), S(  22,  -16), S(  14,  -11),
        S(   6,    1), S(   0,   -3), S(  -9,   16), S( -10,   10), S(   8,   12), S(  20,    3), S(  19,  -15), S(  30,  -20),
        S(  -3,    8), S( -12,   19), S(  -9,   11), S( -18,   23), S(  -5,   23), S(  12,    2), S(  11,    2), S(   6,   -3),
        S(  -2,    7), S(  -1,    8), S( -12,   14), S(  -9,   25), S( -10,   30), S(  -2,   16), S(   4,   12), S(   5,    5),
        S(   3,  -13), S(   8,   -6), S(  -1,    4), S( -10,   13), S(  -4,   13), S(  -1,   12), S(  15,   -6), S(  11,  -16),
        S(  -2,  -29), S(  12,  -50), S(   4,  -23), S(   6,  -14), S(   4,   -4), S(   6,  -13), S(   6,  -18), S(  10,  -30),
        S(   3,  -43), S( -18,  -31), S( -16,  -21), S(  -7,  -20), S(   2,  -19), S(  -9,  -15), S( -14,  -16), S(  -9,  -16),
    },
    {
        S( 125,  -77), S(  67,  -11), S( -10,  -21), S( -47,  -28), S(   4,   -3), S(   4,   -3), S(   4,   -3), S(   4,   -3),
        S( -14,   22), S(  58,   40), S(  25,   15), S(  32,   -9), S(   4,   -3), S(   4,   -3), S(   4,   -3), S(   4,   -3),
        S(  33,   19), S(  71,   45), S(  48,   18), S(  -4,    9), S(   4,   -3), S(   4,   -3), S(   4,   -3), S(   4,   -3),
        S( -29,   27), S( -24,   52), S( -47,   27), S( -93,   16), S(   4,   -3), S(   4,   -3), S(   4,   -3), S(   4,   -3),
        S( -77,   25), S( -68,   49), S( -56,   14), S( -93,    4), S(   4,   -3), S(   4,   -3), S(   4,   -3), S(   4,   -3),
        S( -29,   13), S( -21,   33), S( -39,    0), S( -58,  -11), S(   4,   -3), S(   4,   -3), S(   4,   -3), S(   4,   -3),
        S(  24,   -3), S(  20,   15), S(  -1,  -17), S( -29,  -31), S(   4,   -3), S(   4,   -3), S(   4,   -3), S(   4,   -3),
        S(  23,  -32), S(  28,   -3), S(  10,  -35), S(  -1,  -58), S(   4,   -3), S(   4,   -3), S(   4,   -3), S(   4,   -3),
    },
};

constexpr PackedScore MOBILITY[4][28] = {
    {S(  -5,  -25), S( -36,  -39), S( -16,  -13), S(  -7,    1), S(   2,    7), S(   6,   15), S(  13,   17), S(  20,   21), S(  29,   15), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S( -15,  -38), S( -31,  -49), S( -19,  -26), S( -12,  -10), S(  -4,   -2), S(   1,    6), S(   3,   13), S(   6,   16), S(   7,   18), S(   9,   19), S(  11,   17), S(  17,   12), S(  12,   21), S(  23,    3), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S( -19,  -40), S( -31,  -61), S( -14,  -41), S(  -2,  -23), S(   1,  -12), S(   0,   -4), S(   1,    2), S(   3,    6), S(   5,    9), S(   9,   14), S(   7,   22), S(   8,   27), S(  10,   31), S(  14,   32), S(  22,   29), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S( -34,   13), S( -59,  -48), S( -80,  -76), S( -25, -170), S( -28,  -52), S( -23,   -2), S( -13,  -12), S( -10,    5), S( -10,   20), S(  -7,   28), S(  -4,   29), S(  -1,   31), S(   0,   40), S(   3,   39), S(   4,   44), S(   6,   44), S(   7,   46), S(   9,   46), S(   8,   46), S(  17,   35), S(  22,   28), S(  28,   14), S(  34,   10), S(  52,  -18), S(  73,  -35), S(  72,  -50), S(  32,  -46), S( -58,  -36)}
};

constexpr PackedScore THREAT_BY_PAWN[6] = {S(  15,   -8), S(  47,    3), S(  43,   29), S(  66,   -7), S(  43,  -23), S(   0,    0)};
constexpr PackedScore THREAT_BY_KNIGHT[2][6] = {
    {S(  -4,    9), S(   8,    6), S(  20,   15), S(  57,  -16), S(  29,  -44), S(   0,    0)},
    {S(  -7,    7), S(   4,   24), S(  20,   18), S(  50,    5), S(  33,  -23), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_BISHOP[2][6] = {
    {S(  -8,   13), S(  25,    5), S( -27,   18), S(  50,  -16), S(  38,   14), S(   0,    0)},
    {S(  -3,    4), S(  15,   13), S( -27,   -1), S(  26,   11), S(  17,   73), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_ROOK[2][6] = {
    {S(  -2,   15), S(  11,   23), S(  15,   18), S( -29,  -27), S(  27,   -6), S(   0,    0)},
    {S(  -7,    7), S(   1,   12), S(  12,    2), S( -23,  -27), S(  13,   27), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_QUEEN[2][6] = {
    {S(   2,  -11), S(  15,   -2), S(   2,   19), S(   7,  -15), S(   5,  -55), S(  77,   57)},
    {S(  -2,    8), S(   1,    5), S(  -4,    9), S(  -3,    0), S( -15,  -44), S( 103,   56)}
};
constexpr PackedScore THREAT_BY_KING[6] = {S(  -3,   18), S(   9,   12), S(  22,    8), S(  86,  -28), S(   0,    0), S(   0,    0)};
constexpr PackedScore KNIGHT_HIT_QUEEN = S(  11,    2);
constexpr PackedScore BISHOP_HIT_QUEEN = S(  19,   10);
constexpr PackedScore ROOK_HIT_QUEEN = S(  21,    0);
constexpr PackedScore PUSH_THREAT = S(  15,   13);

constexpr PackedScore ISOLATED_PAWN[8] = {S(  -8,    4), S(  -4,  -13), S( -13,   -7), S( -11,  -14), S( -12,  -13), S( -10,   -5), S(  -5,  -10), S( -12,    5)};
constexpr PackedScore DOUBLED_PAWN[8] = {S(  -5,  -48), S(  12,  -30), S(   0,  -21), S(  -3,  -15), S(  -8,   -9), S(  -8,  -14), S(   2,  -30), S(   4,  -58)};
constexpr PackedScore BACKWARDS_PAWN[8] = {S(   0,    0), S(  -9,  -12), S(  -2,  -12), S(  -8,  -11), S(  -1,  -18), S(  16,   -3), S(   0,    0), S(   0,    0)};
constexpr PackedScore PAWN_PHALANX[8] = {S(   0,    0), S(   6,   -4), S(  11,   -2), S(  21,    5), S(  44,   25), S( 138,  153), S( -27,  251), S(   0,    0)};
constexpr PackedScore DEFENDED_PAWN[8] = {S(   0,    0), S(   0,    0), S(  18,    5), S(  12,    8), S(  19,   20), S(  34,   58), S( 137,   65), S(   0,    0)};
constexpr PackedScore CANDIDATE_PASSER[2][8] = {
    {S(   0,    0), S( -29,   -6), S( -15,   -7), S(  -1,   21), S(  25,   42), S(  56,   73), S(   0,    0), S(   0,    0)},
    {S(   0,    0), S( -20,   -7), S(  -9,   10), S(  -3,   23), S(  22,   42), S(  41,  130), S(   0,    0), S(   0,    0)}
};

constexpr PackedScore PASSED_PAWN[2][2][8] = {
    {
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -34,  -35), S( -12,   21), S(   8,  126), S(  36,  148), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -21,  -44), S(   5,  -12), S(  35,   24), S(  63,   12), S(   0,    0)}
    },
    {
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -29,  -44), S(  -3,   -9), S(  40,   18), S(  65,   -7), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -31,  -44), S(  -6,  -12), S(  16,    3), S(  -3,  -20), S(   0,    0)}
    }
};
constexpr PackedScore OUR_PASSER_PROXIMITY[8] = {S(  89,   77), S(  50,   78), S(  33,   65), S(   8,   49), S(   5,   31), S(   7,   19), S(  12,   13), S(  -4,   16)};
constexpr PackedScore THEIR_PASSER_PROXIMITY[8] = {S( -59,  -16), S(  -5,   -9), S(  26,   -5), S(  19,   23), S(  15,   52), S(  21,   64), S(  26,   68), S(  27,   61)};
constexpr PackedScore PASSER_PROTECTED_ADVANCE = S(   0,   17);

constexpr PackedScore PAWN_STORM[2][4][8] = {
    {
        {S(  51,   45), S(-116,   -1), S(  -1,   31), S(  36,   32), S(  27,   39), S(   7,   43), S(  -3,   44), S(   0,    0)},
        {S(  44,   34), S(  38,  -38), S(  96,    1), S(  48,   27), S(  22,   32), S( -11,   36), S(  14,   35), S(   0,    0)},
        {S(  25,   46), S( 102,  -24), S( 113,   16), S(  66,   37), S(  28,   46), S(   5,   48), S(   2,   48), S(   0,    0)},
        {S(  27,   22), S( 147,  -34), S( 121,   10), S(  56,   27), S(  12,   32), S(  -7,   26), S(  -8,   30), S(   0,    0)}
    },
    {
        {S(   0,    0), S(   0,    0), S(  47,   46), S( -17,   42), S(   5,   44), S(  32,   43), S(   1,   43), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S( 104,   25), S(  18,   33), S(   3,   42), S(  13,   41), S(  16,   35), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(  95,   33), S(  14,   42), S(  16,   50), S(  41,   48), S(  17,   46), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(  57,   16), S(  28,   30), S( -17,   30), S(   7,   27), S(  11,   23), S(   0,    0)}
    }
};
constexpr PackedScore PAWN_SHIELD[4][8] = {
    {S(  59,   52), S(   1,   63), S(   1,   58), S(  38,   52), S(  44,   45), S( -11,   29), S( -45,   17), S(   0,    0)},
    {S(  64,   42), S(  -7,   49), S(  21,   42), S(  63,   36), S(  49,   31), S(  16,   27), S( -11,   16), S(   0,    0)},
    {S(  43,   48), S(  33,  105), S(  25,   44), S(  47,   30), S(  41,   31), S(  20,   31), S( -38,   31), S(   0,    0)},
    {S(  30,   37), S(  20,   33), S(   7,   34), S(  32,   31), S(  38,   29), S(  17,   28), S( -72,   31), S(   0,    0)}
};
constexpr PackedScore SAFE_KNIGHT_CHECK = S( 116,    0);
constexpr PackedScore SAFE_BISHOP_CHECK = S(  64,   11);
constexpr PackedScore SAFE_ROOK_CHECK = S( 108,    6);
constexpr PackedScore SAFE_QUEEN_CHECK = S(  61,   14);
constexpr PackedScore UNSAFE_KNIGHT_CHECK = S(  18,    1);
constexpr PackedScore UNSAFE_BISHOP_CHECK = S(  41,    6);
constexpr PackedScore UNSAFE_ROOK_CHECK = S(  39,    1);
constexpr PackedScore UNSAFE_QUEEN_CHECK = S(  18,   -1);
constexpr PackedScore QUEENLESS_ATTACK = S( -96,  285);
constexpr PackedScore KING_ATTACKER_WEIGHT[4] = {S(  56,   -5), S(  23,    0), S(  25,   -9), S(   4,  -10)};
constexpr PackedScore KING_ATTACKS = S(   7,    0);
constexpr PackedScore WEAK_KING_RING = S(   7,    0);
constexpr PackedScore KING_FLANK_ATTACKS[2] = {S(  11,   -3), S(   6,    1)};
constexpr PackedScore KING_FLANK_DEFENSES[2] = {S(  -7,    0), S( -10,    2)};
constexpr PackedScore SAFETY_OFFSET = S(   0,    0);

constexpr PackedScore MINOR_BEHIND_PAWN = S(   6,   11);
constexpr PackedScore KNIGHT_OUTPOST = S(  24,   15);
constexpr PackedScore BISHOP_PAWNS[7] = {S(   4,   14), S(   5,   13), S(   4,    8), S(   1,    2), S(  -2,   -4), S(  -3,  -14), S(  -7,  -25)};
constexpr PackedScore BISHOP_PAIR = S(  20,   51);
constexpr PackedScore LONG_DIAG_BISHOP = S(  15,    7);
constexpr PackedScore ROOK_OPEN[2] = {S(  24,    4), S(  13,    4)};

constexpr PackedScore TEMPO = S(   0,  -12);

constexpr PackedScore COMPLEXITY_PAWNS = S(   0,    4);
constexpr PackedScore COMPLEXITY_PASSERS = S(   0,  -11);
constexpr PackedScore COMPLEXITY_PAWNS_BOTH_SIDES = S(   0,   35);
constexpr PackedScore COMPLEXITY_PAWN_ENDGAME = S(   0,   62);
constexpr PackedScore COMPLEXITY_OFFSET = S(   0,    0);

#undef S


}