#pragma once

#include "../defs.h"

namespace eval
{

// clang-format off
#define S(mg, eg) ScorePair(mg, eg)

constexpr ScorePair MATERIAL[6] = {S(  70,  144), S( 348,  485), S( 366,  504), S( 473,  871), S( 992, 1807), S(0, 0)};

constexpr ScorePair PSQT[6][64] = {
    {
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  73,   75), S(  28,   94), S(  26,   84), S(  63,   76), S(  79,   44), S(  37,   73), S(  40,   98), S(  82,   80),
        S(  11,    6), S(  -7,   23), S(   4,  -10), S(   5,  -13), S(   3,  -21), S(  -5,  -12), S( -13,   15), S(  -3,   11),
        S(   9,    6), S(   7,   25), S(  15,    0), S(  12,  -14), S(   5,  -15), S(   2,  -11), S(   2,   12), S(  -5,    8),
        S(  -4,   -7), S(  -6,   21), S(  15,  -16), S(  16,  -20), S(  10,  -17), S(   2,  -12), S( -12,   13), S( -16,   -5),
        S( -12,  -10), S(  11,   12), S(   2,   11), S(   3,    1), S(  -8,    1), S(  -9,   -4), S( -16,   13), S( -24,   -9),
        S(  -4,   -8), S(  25,    6), S(  26,   20), S(   3,   12), S(  -3,    1), S(  -4,    0), S(  -6,   13), S( -19,   -4),
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
    },
    {
        S( -82, -131), S( -39,   12), S(-109,   38), S(   6,    3), S( -12,    5), S(-107,   36), S( -97,   24), S(-120,  -83),
        S(   4,  -16), S(   6,    5), S(  34,    7), S(  28,   20), S(  29,   15), S(  26,    3), S(   1,   -1), S(  -6,   -2),
        S(  -1,   12), S(  13,   14), S(  43,    9), S(  36,   15), S(  24,   15), S(  26,   12), S(   8,    1), S(   4,   -3),
        S(  28,   10), S(  35,   11), S(  40,   14), S(  34,   26), S(  35,   25), S(  24,   13), S(  24,    1), S(  10,   10),
        S(  19,    6), S(  22,   14), S(  26,   14), S(  21,   27), S(  24,   20), S(  17,   18), S(  25,   -4), S(   6,   -2),
        S(   3,   -8), S(  19,   -5), S(  19,   -3), S(  15,   15), S(  14,   12), S(   0,   -3), S(   2,   -7), S( -12,  -12),
        S(   6,   -8), S(   2,   -2), S(   7,  -11), S(  11,   -2), S(   2,   -1), S(  -5,  -11), S( -10,   -6), S( -25,  -16),
        S( -22,  -27), S( -15,  -20), S(   1,  -18), S(   2,   -6), S(  -9,   -1), S( -23,  -10), S( -20,  -24), S( -52,  -30),
    },
    {
        S( -41,  -21), S( -40,   21), S(-108,   32), S( -55,   18), S( -70,   23), S( -52,   18), S( -25,   22), S( -43,    7),
        S(  -7,  -10), S( -38,    3), S(  -9,    7), S( -21,   14), S( -19,   17), S(  -9,    8), S( -18,   -6), S( -10,   -3),
        S(  18,   -3), S(   6,   16), S(  19,   14), S(  23,   15), S(  20,   18), S(  12,    2), S(  16,    5), S(   8,   -7),
        S(   5,   -2), S(   9,   16), S(  16,   16), S(  23,   29), S(  28,   28), S(  18,   11), S(  13,   11), S(   1,   -7),
        S(  11,  -10), S(  12,    3), S(  10,   16), S(  18,   19), S(  20,   20), S(  17,   11), S(   8,    2), S(  17,  -22),
        S(  19,  -10), S(  23,   -1), S(  12,   -7), S(   9,   14), S(   9,    6), S(   1,   -4), S(  24,   -3), S(  10,  -11),
        S(  18,  -21), S(  25,  -29), S(  21,  -12), S(  10,   -7), S(  -5,   -3), S(  12,  -17), S(   3,  -26), S(  16,  -14),
        S(   7,  -36), S(  18,  -24), S( -16,   -5), S(   6,  -12), S(   6,  -16), S(  -9,   -6), S(  15,  -27), S(   1,  -17),
    },
    {
        S(  27,   10), S(  25,   18), S(  11,   27), S(   7,   30), S(  19,   17), S(  14,   21), S(  27,   15), S(  21,   19),
        S(  17,   15), S(  13,   23), S(  22,   20), S(   7,   36), S(  29,   23), S(  20,   23), S(   7,   28), S(  18,   25),
        S( -11,   19), S(   8,   17), S(  12,   16), S(   9,   16), S(  22,    6), S(  10,   15), S(  14,   11), S(   0,   22),
        S( -12,    9), S( -11,   24), S(   1,   21), S(  -1,   13), S(   7,    5), S(   0,   15), S(  -3,   16), S( -11,   16),
        S( -17,   -8), S( -12,    9), S( -13,   14), S(  -7,    7), S(  -6,    0), S( -11,   10), S( -16,    7), S( -19,    6),
        S( -24,  -24), S(   1,  -23), S(  -2,  -12), S(  -7,  -14), S(  -4,  -18), S( -12,  -11), S(  -7,  -18), S( -15,  -19),
        S( -64,  -26), S(  -8,  -39), S(   5,  -31), S(   2,  -27), S(   4,  -33), S(   0,  -29), S( -16,  -30), S( -23,  -27),
        S( -16,  -41), S( -25,  -22), S(   8,  -29), S(  15,  -35), S(   7,  -34), S(  -2,  -26), S(   0,  -32), S(   0,  -31),
    },
    {
        S(   6,   25), S(  45,  -13), S(  13,   40), S(  10,   33), S(  21,   30), S(  26,    8), S(  34,   -9), S( -12,   35),
        S(  40,   -4), S(  37,  -10), S(  17,    7), S( -26,   64), S(   3,   32), S(  12,    9), S(  17,  -12), S(  16,   -7),
        S(   2,   18), S(  21,    7), S(   4,   28), S( -14,   40), S(   2,   29), S(  15,    1), S(  20,   -4), S(  19,  -16),
        S(   2,   15), S( -14,   38), S( -11,   20), S( -19,   33), S( -18,   48), S(  -3,   18), S(   3,    7), S(  13,  -13),
        S( -10,   19), S(  -4,   12), S( -14,   19), S( -14,   30), S( -16,   37), S(  -4,   15), S(  -5,   14), S(  -7,   18),
        S(  -7,    0), S(   1,   -8), S(  -6,    3), S( -15,    8), S(  -9,   10), S(  -5,    9), S(   9,   -5), S(   0,   -4),
        S( -18,  -27), S(   7,  -78), S(  -4,  -49), S(  -7,  -17), S(  -8,   -8), S(   2,  -26), S(  -6,  -11), S(  -2,  -16),
        S(   8,  -72), S( -19,  -96), S( -22,  -64), S( -17,  -38), S(  -9,  -34), S( -16,  -29), S( -11,  -39), S( -12,  -19),
    },
    {
        S( -69,  -50), S(  12,  129), S( -51,   50), S( -68,   43), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  32,   44), S(  -1,  158), S( -18,   56), S( -21,   33), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  29,   79), S(  32,  142), S( -33,   29), S( -87,  -41), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S( -36,   83), S( -21,  122), S( -59,   13), S(-115,  -54), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S( -50,   66), S( -50,  106), S( -62,   -5), S( -97,  -63), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(   1,   45), S(   0,   75), S( -41,  -26), S( -57,  -82), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  61,   13), S(  48,   44), S(  14,  -60), S( -15, -113), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  54,  -18), S(  56,   22), S(  15,  -84), S(  12, -159), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
    },
};

constexpr ScorePair MOBILITY[4][28] = {
    {S(  -7,  -31), S( -37,  -64), S( -25,  -17), S( -10,    0), S(   0,   13), S(   7,   23), S(  15,   27), S(  24,   30), S(  34,   19), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S(  -2,  -39), S( -45,  -63), S( -27,  -31), S( -14,  -10), S(  -6,    2), S(  -1,   12), S(   1,   21), S(   5,   24), S(   5,   28), S(   9,   27), S(  11,   25), S(  21,   11), S(  10,   25), S(  43,  -30), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S( -29,  -67), S( -62,  -74), S( -20,  -51), S( -12,  -28), S(  -2,  -17), S(   2,   -4), S(   2,    7), S(   5,   14), S(   8,   17), S(  10,   26), S(  12,   33), S(  14,   40), S(  16,   45), S(  18,   46), S(  52,   15), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S(  -2,   16), S(  -8,  -32), S( -37,  -50), S(  -9, -214), S( -33, -101), S( -20,  -67), S( -12,  -44), S(  -8,  -18), S(  -8,    1), S(  -6,   11), S(  -5,   22), S(  -2,   30), S(   2,   33), S(   4,   39), S(   5,   41), S(   7,   44), S(   6,   49), S(   8,   51), S(  10,   48), S(  12,   44), S(  14,   44), S(  18,   35), S(  24,   26), S(  20,   11), S(  12,   30), S(  19,   -3), S(   6,  -11), S( -11,  -33)}
};

constexpr ScorePair THREAT_BY_PAWN[6] = {S(  -3,  -19), S(  78,   43), S(  73,   74), S(  77,   61), S(  65,   16), S(   0,    0)};
constexpr ScorePair THREAT_BY_KNIGHT[2][6] = {
    {S(   6,   38), S(  19,   54), S(  54,   32), S(  87,   12), S(  53,   -5), S(   0,    0)},
    {S(  -8,   11), S(  12,   51), S(  41,   31), S(  73,   45), S(  57,   41), S(   0,    0)}
};
constexpr ScorePair THREAT_BY_BISHOP[2][6] = {
    {S(   3,   35), S(  42,   47), S(   1,   31), S(  61,   40), S(  65,   62), S(   0,    0)},
    {S(  -4,    3), S(  22,   22), S(  -6,   -2), S(  58,   77), S(  58,  102), S(   0,    0)}
};
constexpr ScorePair THREAT_BY_ROOK[2][6] = {
    {S(   0,   52), S(  40,   55), S(  52,   44), S(  -4,  -68), S(  68,    0), S(   0,    0)},
    {S(  -8,    9), S(  11,   16), S(  24,    3), S(  13, -110), S(  54,  101), S(   0,    0)}
};
constexpr ScorePair THREAT_BY_QUEEN[2][6] = {
    {S(   7,   27), S(  25,   32), S(  21,   55), S(  11,   17), S(  10,  -68), S( 181,   44)},
    {S(  -6,   20), S(   0,   12), S(  -7,   29), S(  -2,   -7), S(  -9,  -65), S(  89,  197)}
};
constexpr ScorePair THREAT_BY_KING[6] = {S(  56,   14), S(  20,   43), S( 117,   25), S(  78,    9), S(   0,    0), S(   0,    0)};
constexpr ScorePair KNIGHT_HIT_QUEEN = S(   7,   -1);
constexpr ScorePair BISHOP_HIT_QUEEN = S(  16,   19);
constexpr ScorePair ROOK_HIT_QUEEN = S(  21,   -7);
constexpr ScorePair PUSH_THREAT = S(  14,   20);
constexpr ScorePair RESTRICTED_SQUARES = S(   3,    2);

constexpr ScorePair ISOLATED_PAWN[8] = {S(  -2,    3), S(  -4,  -18), S(  -8,  -11), S( -10,  -18), S( -13,  -15), S(  -7,   -7), S(  -4,  -15), S(  -9,    4)};
constexpr ScorePair DOUBLED_PAWN[8] = {S(  -6,  -59), S(   9,  -49), S( -10,  -25), S(  -6,  -18), S( -14,   -5), S(  -8,  -26), S(   1,  -43), S(   5,  -55)};
constexpr ScorePair BACKWARDS_PAWN[8] = {S(   0,    0), S(  -8,  -14), S(   2,  -18), S(  -5,  -15), S(   7,  -18), S(   5,   41), S(   0,    0), S(   0,    0)};
constexpr ScorePair PAWN_PHALANX[8] = {S(   0,    0), S(   5,   -3), S(  14,   -2), S(  22,   10), S(  39,   41), S(  75,  133), S( 113,  257), S(   0,    0)};
constexpr ScorePair DEFENDED_PAWN[8] = {S(   0,    0), S(   0,    0), S(  20,    5), S(  12,    9), S(  19,   24), S(  44,   64), S( 141,   97), S(   0,    0)};
constexpr ScorePair CANDIDATE_PASSER[2][8] = {
    {S(   0,    0), S( -39,   -3), S(  -9,   -9), S(  -6,   -1), S(  12,   24), S(  54,   88), S(   0,    0), S(   0,    0)},
    {S(   0,    0), S( -15,   -9), S(  -9,    8), S(  -4,   25), S(  15,   38), S(  50,  102), S(   0,    0), S(   0,    0)}
};

constexpr ScorePair PASSED_PAWN[2][2][8] = {
    {
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -36,  -30), S( -16,   22), S(  41,  137), S( 146,  208), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -28,  -45), S(  -5,  -17), S(  38,   61), S(  97,   81), S(   0,    0)}
    },
    {
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -32,  -46), S( -12,  -13), S(  37,   56), S(  49,   46), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -31,  -58), S(  -8,  -28), S(  21,   38), S(   4,   32), S(   0,    0)}
    }
};
constexpr ScorePair OUR_PASSER_PROXIMITY[8] = {S( 116,   87), S( 109,   62), S(  46,   71), S(   1,   60), S(  -1,   35), S(   1,   23), S(  15,   14), S(   5,   19)};
constexpr ScorePair THEIR_PASSER_PROXIMITY[8] = {S( -48,   11), S(   4,    4), S(  27,    5), S(  24,   27), S(  21,   58), S(  19,   77), S(  29,   75), S(  28,   61)};
constexpr ScorePair PASSER_DEFENDED_PUSH[8] = {S(   0,    0), S(   0,    0), S(   0,    0), S(   3,   10), S(  13,   23), S(  37,   36), S(  60,  109), S(   0,    0)};

constexpr ScorePair PAWN_STORM[2][4][8] = {
    {
        {S(  28,   42), S( -74, -109), S( -23,  -34), S(  45,   22), S(  20,   38), S(   0,   43), S(  -3,   45), S(   0,    0)},
        {S(  20,   20), S(  24, -134), S(  76,  -66), S(  40,    0), S(  11,   17), S( -27,   24), S(   5,   25), S(   0,    0)},
        {S(   3,   20), S(  57,  -96), S( 125,  -59), S(  59,    1), S(   7,   22), S( -17,   28), S(  -2,   25), S(   0,    0)},
        {S(   5,  -10), S( 100, -124), S( 123,  -81), S(  63,  -15), S(   9,   -2), S( -26,   -4), S( -27,   -5), S(   0,    0)}
    },
    {
        {S(   0,    0), S(   0,    0), S(  82,   60), S(  -8,   42), S(   1,   48), S(  12,   64), S(  12,   50), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S( 138,   45), S( -24,   29), S( -16,   40), S( -15,   50), S(   0,   30), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S( 149,   11), S(   1,   28), S( -16,   41), S(  -9,   49), S(  55,    5), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S( 114,   13), S(  13,   13), S( -19,   16), S( -16,    9), S( -40,  -16), S(   0,    0)}
    }
};
constexpr ScorePair PAWN_SHIELD[4][8] = {
    {S(  56,   47), S(  -9,   64), S( -20,   52), S(  23,   46), S(  41,   30), S(  10,   32), S( -15,   32), S(   0,    0)},
    {S(  39,   25), S( -34,   27), S(   3,   28), S(  34,   18), S(  41,    8), S(   7,   -6), S( -28,  -26), S(   0,    0)},
    {S(  24,   25), S( -11,   39), S(   9,   27), S(  39,   11), S(  42,    9), S(  16,   -5), S( -45,   -2), S(   0,    0)},
    {S(  12,   -1), S( -28,  -11), S(   5,  -20), S(  26,  -27), S(  22,  -22), S(  30,  -12), S(   8,  -10), S(   0,    0)}
};
constexpr ScorePair SAFE_KNIGHT_CHECK = S(  92,    4);
constexpr ScorePair SAFE_BISHOP_CHECK = S(  67,   24);
constexpr ScorePair SAFE_ROOK_CHECK = S( 108,   12);
constexpr ScorePair SAFE_QUEEN_CHECK = S(  60,   21);
constexpr ScorePair UNSAFE_KNIGHT_CHECK = S(  16,    0);
constexpr ScorePair UNSAFE_BISHOP_CHECK = S(  37,   10);
constexpr ScorePair UNSAFE_ROOK_CHECK = S(  43,    3);
constexpr ScorePair UNSAFE_QUEEN_CHECK = S(  18,    6);
constexpr ScorePair QUEENLESS_ATTACK = S(-153,  201);
constexpr ScorePair KING_ATTACKER_WEIGHT[4] = {S(  63,    0), S(  26,   -1), S(  28,  -10), S(   6,  -11)};
constexpr ScorePair KING_ATTACKS = S(   6,    0);
constexpr ScorePair WEAK_KING_RING = S(   3,    1);
constexpr ScorePair KING_FLANK_ATTACKS[2] = {S(  14,   -4), S(   4,    1)};
constexpr ScorePair KING_FLANK_DEFENSES[2] = {S(  -7,    0), S(  -7,    3)};
constexpr ScorePair SAFETY_OFFSET = S(  72,  225);

constexpr ScorePair MINOR_BEHIND_PAWN = S(   3,   12);
constexpr ScorePair KNIGHT_OUTPOST = S(  17,   18);
constexpr ScorePair BISHOP_PAWNS[7] = {S(  11,    3), S(   4,   17), S(   4,   10), S(   1,    5), S(  -3,   -2), S(  -6,   -8), S(  -9,  -22)};
constexpr ScorePair BISHOP_PAIR = S(  24,   73);
constexpr ScorePair LONG_DIAG_BISHOP = S(  15,   10);
constexpr ScorePair ROOK_OPEN[2] = {S(  34,   -2), S(  20,    3)};

constexpr ScorePair TEMPO = S(  26,   17);

constexpr ScorePair COMPLEXITY_PAWNS = S(   0,   12);
constexpr ScorePair COMPLEXITY_PAWNS_BOTH_SIDES = S(   0,  180);
constexpr ScorePair COMPLEXITY_PAWN_ENDGAME = S(   0,  171);
constexpr ScorePair COMPLEXITY_OFFSET = S(   0, -290);

#undef S
// clang-format on

}
