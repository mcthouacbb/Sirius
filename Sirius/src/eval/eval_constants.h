#pragma once

#include "../defs.h"

namespace eval
{

#define S(mg, eg) PackedScore(mg, eg)

constexpr PackedScore MATERIAL[6] = {S(  60,  131), S( 304,  459), S( 327,  459), S( 390,  823), S( 813, 1472), S(0, 0)};

constexpr PackedScore PSQT[6][64] = {
	{
		S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
		S(  62,   85), S(  31,   95), S(  27,  102), S(  55,   79), S(  63,   73), S(  32,   99), S(  28,  112), S(  63,   90),
		S(   9,   14), S(   0,   42), S(  10,    9), S(  30,  -28), S(  17,  -22), S(   5,    0), S( -17,   35), S(  -3,   19),
		S(  16,    8), S(   5,   14), S(   7,   -8), S(  11,  -23), S(  -1,  -21), S(  -4,   -8), S(  -9,   15), S( -12,   12),
		S(   9,    0), S(   4,   17), S(   7,  -14), S(  14,  -14), S(   8,  -13), S(  -3,   -7), S( -15,   16), S( -14,    2),
		S(   3,   -2), S(  11,   13), S(  16,   -3), S(  -2,    3), S(  -7,    1), S( -12,   -3), S( -23,   14), S( -26,    1),
		S(  16,   -2), S(  29,    8), S(  16,   -7), S(   7,    7), S(  -7,    0), S(  -6,   -3), S( -14,   18), S( -16,    5),
		S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
	},
	{
		S( -62,  -88), S( -68,  -20), S( -12,  -14), S(  20,   -5), S( -19,    8), S( -58,   17), S( -91,   16), S( -73,  -45),
		S(  -1,  -10), S(  30,    5), S(  34,    0), S(  15,    5), S(  15,   13), S(   8,   18), S(   2,   25), S(  -4,   14),
		S(  16,   -6), S(   9,    0), S(  51,  -12), S(  39,    7), S(  23,   16), S(  12,   15), S(   5,   11), S(  -2,   15),
		S(  31,   -1), S(  32,    6), S(  41,    8), S(  32,   14), S(  24,   21), S(  29,   12), S(  21,    8), S(  15,   20),
		S(   5,   11), S(  10,    9), S(  20,    8), S(  12,   20), S(  20,   13), S(  16,   16), S(  22,    5), S(   9,   14),
		S(   2,   -6), S(   7,   -6), S(   5,  -11), S(   3,    8), S(  -2,    8), S(  -4,   -1), S(   1,   -1), S(  -9,    1),
		S(  -7,   -7), S(   0,  -14), S(  -8,  -13), S(   0,   -8), S(  -2,   -6), S(  -9,   -4), S(  -5,   -3), S( -13,    1),
		S( -23,  -19), S( -21,  -11), S( -19,  -18), S( -10,   -4), S( -17,   -4), S( -26,   -7), S( -15,   -6), S( -41,    2),
	},
	{
		S( -30,  -12), S( -21,    7), S(   8,   -1), S( -63,   16), S( -52,   18), S( -40,    6), S( -13,   10), S( -22,   15),
		S( -14,   -5), S( -40,    6), S(  -4,    1), S(   6,    0), S( -12,   12), S(  10,    1), S(  -8,   -2), S(   4,    0),
		S(  19,   12), S(  16,    1), S(  31,    2), S(  16,    5), S(  22,    2), S(   2,    1), S(  13,    9), S(  13,    7),
		S(  -8,    4), S(   9,    5), S(   9,   10), S(  20,   13), S(  20,   21), S(  17,    7), S(   8,   12), S(   0,    8),
		S(   9,   -7), S(  -4,    6), S(   3,    6), S(   6,   12), S(  15,   10), S(  -2,   15), S(   2,    7), S(   6,    2),
		S(   9,  -13), S(  12,   -9), S(  -7,   -8), S(  -3,    8), S(  -7,    5), S(  -2,   -3), S(  14,    3), S(   6,   -5),
		S(  16,  -23), S(   6,  -26), S(  12,  -12), S(  -6,   -6), S(  -9,   -2), S(   8,  -18), S(   3,  -23), S(  22,  -11),
		S(  13,  -40), S(   2,  -18), S( -23,    0), S(   1,   -4), S(  -9,   -4), S(  -7,    3), S(  14,   -3), S(  14,  -16),
	},
	{
		S(  17,   14), S( -22,   41), S( -17,   33), S(  -2,   21), S( -19,   31), S( -17,   37), S(  -1,   26), S(   4,   26),
		S(  31,    7), S(  33,   13), S(  15,   20), S(  13,   17), S(  22,   20), S(   8,   33), S(   5,   29), S(   7,   22),
		S(   9,    5), S(  35,    4), S(  20,    5), S(  27,    3), S(   5,   12), S(   4,   21), S(  15,   19), S(  -3,   24),
		S(   4,    4), S(   3,   12), S(  10,    7), S(  10,   -1), S(   3,    8), S(   7,   13), S(   8,   16), S(  -1,   18),
		S( -14,   -2), S(   9,    0), S( -13,    5), S(   4,   -2), S(  -7,    1), S(  -8,    5), S(  -7,    8), S(  -8,   10),
		S(   1,  -29), S(  15,  -32), S(  -7,  -22), S(  -3,  -22), S( -12,  -14), S( -13,  -14), S( -10,  -12), S( -13,   -9),
		S( -13,  -32), S(  13,  -41), S(  -6,  -29), S(  -3,  -28), S(  -7,  -23), S(  -4,  -20), S( -11,  -16), S( -12,  -20),
		S( -13,  -34), S( -14,  -19), S(  -8,  -26), S(   3,  -30), S(  -2,  -26), S(  -6,  -18), S(  -3,  -21), S(  -2,  -16),
	},
	{
		S(  20,  -39), S(  53,  -58), S( -13,   19), S(  -5,    5), S(  22,  -24), S( -11,   -4), S( -26,  -14), S(  -6,  -24),
		S(  54,  -18), S(  14,   -1), S(  -9,   22), S( -21,   44), S( -14,   31), S(   6,   -4), S(   8,  -26), S(  20,  -30),
		S(  22,    0), S(  15,    7), S(   4,   22), S(  -8,   29), S(   5,   18), S(  13,    5), S(  12,  -15), S(  31,  -30),
		S(   8,   17), S(   3,   39), S(   5,   19), S( -13,   41), S(  -9,   37), S(   8,    7), S(  11,    4), S(  16,  -16),
		S(   1,   19), S(   4,   25), S(  -9,   30), S(  -5,   40), S( -12,   45), S(  -6,   27), S(   7,    8), S(   9,  -10),
		S(  -2,    0), S(  -2,   15), S( -14,   27), S( -20,   35), S( -13,   25), S(  -8,   19), S(   7,  -11), S(  14,  -36),
		S(  -2,  -30), S(  -5,  -37), S( -12,  -10), S( -11,   11), S(  -7,    8), S(   1,  -14), S(   6,  -29), S(  19,  -55),
		S(  -7,  -30), S( -27,  -28), S( -38,    2), S( -18,   -3), S( -12,   -7), S( -10,  -15), S(  -7,  -27), S(  -1,  -36),
	},
	{
		S( -24,  -57), S( -56,   22), S( -69,    8), S( -64,   10), S(   9,   -6), S(   9,   -6), S(   9,   -6), S(   9,   -6),
		S( -71,   37), S( -26,   63), S( -30,   51), S(  22,   20), S(   9,   -6), S(   9,   -6), S(   9,   -6), S(   9,   -6),
		S(  -5,   25), S(  28,   50), S(  37,   41), S(  15,   41), S(   9,   -6), S(   9,   -6), S(   9,   -6), S(   9,   -6),
		S( -39,   20), S( -17,   44), S( -10,   36), S( -29,   30), S(   9,   -6), S(   9,   -6), S(   9,   -6), S(   9,   -6),
		S( -49,    6), S( -26,   27), S( -10,   15), S( -32,   14), S(   9,   -6), S(   9,   -6), S(   9,   -6), S(   9,   -6),
		S(  -8,  -13), S(   9,    5), S(  -4,   -4), S(  -9,   -7), S(   9,   -6), S(   9,   -6), S(   9,   -6), S(   9,   -6),
		S(  39,  -35), S(  24,   -8), S(   6,  -17), S(  -5,  -22), S(   9,   -6), S(   9,   -6), S(   9,   -6), S(   9,   -6),
		S(  31,  -67), S(  22,  -26), S(  -1,  -27), S(   8,  -46), S(   9,   -6), S(   9,   -6), S(   9,   -6), S(   9,   -6),
	},
};

constexpr PackedScore MOBILITY[4][28] = {
	{S( -14,  -28), S( -44,  -48), S( -18,  -20), S(  -9,    0), S(   2,    9), S(   7,   19), S(  15,   23), S(  25,   28), S(  36,   22), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -24,  -42), S( -44,  -60), S( -25,  -33), S( -16,  -14), S(  -6,   -3), S(   1,    7), S(   4,   16), S(   8,   20), S(   9,   23), S(  13,   24), S(  14,   24), S(  21,   17), S(  20,   22), S(  31,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -22,  -43), S( -50,  -61), S( -17,  -52), S(  -2,  -30), S(   0,  -12), S(   3,   -6), S(  -2,    5), S(   3,   10), S(   4,   14), S(   8,   19), S(   8,   28), S(  10,   33), S(  14,   38), S(  19,   37), S(  28,   34), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -33,   25), S( -55,  -76), S(-123,  -78), S( -37, -221), S( -41,  -74), S( -25,  -10), S( -12,  -29), S( -12,    3), S(  -9,   18), S(  -7,   31), S(  -4,   36), S(   1,   34), S(   1,   45), S(   6,   43), S(   8,   44), S(   9,   47), S(  11,   48), S(  12,   50), S(  14,   49), S(  19,   41), S(  29,   31), S(  38,   12), S(  40,   14), S(  48,   -5), S(  61,  -17), S(  51,   -8), S(  25,  -15), S(   5,  -44)}
};

constexpr PackedScore THREAT_BY_PAWN[6] = {S(   4,  -20), S(  65,   31), S(  61,   63), S(  78,   28), S(  74,   -5), S(   0,    0)};
constexpr PackedScore THREAT_BY_KNIGHT[2][6] = {
	{S(   7,   30), S(  24,   30), S(  40,   46), S(  72,   17), S(  55,  -20), S(   0,    0)},
	{S(  -7,    8), S(  12,   29), S(  29,   31), S(  63,   35), S(  58,   -1), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_BISHOP[2][6] = {
	{S(  -2,   37), S(  40,   34), S( -10,   30), S(  69,   16), S(  67,   59), S(   0,    0)},
	{S(  -3,    7), S(  18,   24), S( -23,  -20), S(  43,   49), S(  46,  121), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_ROOK[2][6] = {
	{S(   0,   43), S(  18,   61), S(  26,   57), S(   6,  -36), S(  72,   17), S(   0,    0)},
	{S(  -7,    7), S(   2,   15), S(  13,    2), S(   6,  -82), S(  65,   44), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_QUEEN[2][6] = {
	{S(   6,    9), S(  24,   17), S(   9,   49), S(  19,   14), S(   9,  -48), S( 107,   28)},
	{S(  -2,    9), S(   1,    3), S(  -7,   15), S(  -6,    4), S( -17,  -77), S( 117,   53)}
};
constexpr PackedScore THREAT_BY_KING[6] = {S( -28,   50), S(   4,   52), S(  32,   44), S(  75,    9), S(   0,    0), S(   0,    0)};
constexpr PackedScore PUSH_THREAT = S(  15,   20);

constexpr PackedScore ISOLATED_PAWN[8] = {S(  -8,    5), S(  -4,  -16), S( -12,   -8), S( -11,  -16), S( -11,  -15), S(  -7,   -8), S(  -1,  -15), S( -11,    7)};
constexpr PackedScore DOUBLED_PAWN[8] = {S(  -4,  -62), S(   9,  -38), S(  -2,  -30), S(  -4,  -20), S(  -6,  -15), S( -16,  -20), S(   5,  -42), S(   2,  -74)};
constexpr PackedScore BACKWARDS_PAWN[8] = {S(   0,    0), S(  -7,  -14), S(  -2,  -14), S(  -9,  -11), S(   1,  -16), S(  28,   -5), S(   0,    0), S(   0,    0)};
constexpr PackedScore PAWN_PHALANX[8] = {S(   0,    0), S(   5,   -4), S(  11,   -2), S(  21,    7), S(  44,   38), S( 102,  220), S( -23,  357), S(   0,    0)};
constexpr PackedScore DEFENDED_PAWN[8] = {S(   0,    0), S(   0,    0), S(  19,    7), S(  11,    8), S(  17,   21), S(  28,   64), S( 131,   75), S(   0,    0)};
constexpr PackedScore CANDIDATE_PASSER[2][8] = {
	{S(   0,    0), S( -38,  -14), S( -20,   -6), S(   1,   29), S(  30,   56), S(  62,   84), S(   0,    0), S(   0,    0)},
	{S(   0,    0), S( -22,   -5), S( -10,   14), S(  -5,   31), S(  20,   44), S(  37,  151), S(   0,    0), S(   0,    0)}
};

constexpr PackedScore PASSED_PAWN[2][2][8] = {
	{
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -16,  -78), S(   0,   -1), S(   7,  142), S(  37,  243), S(   0,    0)},
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -26,  -51), S(   7,  -16), S(  28,   29), S(  57,   41), S(   0,    0)}
	},
	{
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -37,  -48), S(  -5,  -16), S(  27,   17), S(  60,    3), S(   0,    0)},
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -38,  -51), S(  -4,  -27), S(   6,   -6), S( -12,  -13), S(   0,    0)}
	}
};
constexpr PackedScore OUR_PASSER_PROXIMITY[8] = {S(   0,    0), S(  43,   77), S(   9,   64), S(   6,   38), S(   8,   25), S(  14,   18), S(  22,   15), S(  15,   15)};
constexpr PackedScore THEIR_PASSER_PROXIMITY[8] = {S(   0,    0), S( -40,    1), S(  25,   -5), S(  16,   26), S(  21,   43), S(  16,   75), S(  19,   76), S(  24,   63)};
constexpr PackedScore PASSED_PATH_ADVANCE = S( -10,   20);

constexpr PackedScore PAWN_STORM[2][4][8] = {
	{
		{S(  16,   13), S(-129,  -50), S( -10,   -8), S(   2,  -11), S(  -2,    2), S(  -7,    9), S(  -6,    8), S(   0,    0)},
		{S(  13,    3), S( -18,  -99), S(  40,  -41), S(   5,  -10), S(   1,   -4), S( -11,    7), S(  -7,    9), S(   0,    0)},
		{S(  -2,    5), S(  60,  -99), S(  61,  -43), S(  18,  -16), S(   3,    0), S(  -5,    6), S(  -8,   12), S(   0,    0)},
		{S(  11,   -8), S( 109,  -83), S(  33,  -19), S(  16,    0), S(   2,    5), S(  -4,   -2), S(   1,    0), S(   0,    0)}
	},
	{
		{S(   0,    0), S(  -3,  -29), S( -26,  120), S(  10,  -51), S(  -5,    9), S(  -3,    5), S(  -7,   10), S(   0,    0)},
		{S(   0,    0), S(   8,  -91), S(   1,   62), S(  51,  -42), S(   1,    3), S(  -8,    6), S(  -8,    8), S(   0,    0)},
		{S(   0,    0), S(  -6,   26), S( -64, -114), S(  20,  -27), S(   3,    5), S(   0,    5), S(  -8,   11), S(   0,    0)},
		{S(   0,    0), S(  -3,  -44), S(  65,   -3), S(  21,    0), S(   5,    8), S(   4,  -10), S(   3,    5), S(   0,    0)}
	}
};
constexpr PackedScore PAWN_SHIELD[4][8] = {
	{S(  15,    2), S( -11,   25), S( -17,   16), S(  -4,    7), S(   2,    2), S( -41,  -22), S( -80,  -34), S(   0,    0)},
	{S(  16,    1), S( -14,   10), S( -10,    7), S(  10,   -2), S(   8,  -11), S( -15,  -15), S( -52,  -31), S(   0,    0)},
	{S(   5,    8), S( -16,    7), S(  16,    4), S(   1,   -1), S(  -2,   -1), S(   2,  -16), S( -12,  -44), S(   0,    0)},
	{S(  17,   -3), S(   8,   -4), S(   1,   -2), S(   4,   -6), S(  12,   -9), S(  30,  -19), S( -17,  -20), S(   0,    0)}
};
constexpr PackedScore SAFE_KNIGHT_CHECK = S(  90,   -2);
constexpr PackedScore SAFE_BISHOP_CHECK = S(  16,   22);
constexpr PackedScore SAFE_ROOK_CHECK = S(  71,   10);
constexpr PackedScore SAFE_QUEEN_CHECK = S(  28,   31);
constexpr PackedScore UNSAFE_KNIGHT_CHECK = S(  10,    0);
constexpr PackedScore UNSAFE_BISHOP_CHECK = S(  15,   11);
constexpr PackedScore UNSAFE_ROOK_CHECK = S(  21,   -1);
constexpr PackedScore UNSAFE_QUEEN_CHECK = S(   6,    9);
constexpr PackedScore KING_ATTACKER_WEIGHT[4] = {S(  17,   -2), S(  12,   -2), S(  14,  -15), S(   3,    5)};
constexpr PackedScore KING_ATTACKS[14] = {S( -39,   10), S( -46,    8), S( -50,    5), S( -53,    9), S( -52,    6), S( -44,    4), S( -30,    1), S( -11,   -8), S(  16,  -19), S(  38,  -15), S(  57,  -26), S(  62,   13), S(  85,  -22), S(  72,   24)};
constexpr PackedScore WEAK_KING_RING[17] = {S( -28,   44), S( -27,   26), S( -23,   24), S( -21,   20), S( -14,   13), S(  -5,    7), S(   5,    2), S(  19,   -2), S(  36,   -6), S(  49,   -8), S(  61,  -11), S(  64,   -8), S(  77,  -12), S(  78,  -13), S(  76,   -9), S(  96,  -13), S( 103,  -15)};
constexpr PackedScore OUR_TROPISM[4] = {S(  -3,   -4), S(  -4,   -1), S(  -2,   -2), S(  -6,   10)};

constexpr PackedScore MINOR_BEHIND_PAWN = S(   7,   14);
constexpr PackedScore KNIGHT_OUTPOST = S(  24,   16);
constexpr PackedScore BISHOP_PAWNS[7] = {S(   4,   20), S(   6,   19), S(   4,   11), S(   1,    4), S(  -2,   -4), S(  -2,  -18), S(  -6,  -30)};
constexpr PackedScore BISHOP_PAIR = S(  20,   62);
constexpr PackedScore LONG_DIAG_BISHOP = S(  15,    8);
constexpr PackedScore ROOK_OPEN[2] = {S(  26,    3), S(  14,    4)};

constexpr PackedScore TEMPO = S(  32,   36);

constexpr PackedScore COMPLEXITY_PAWNS = S(   0,    8);
constexpr PackedScore COMPLEXITY_PASSERS = S(   0,    1);
constexpr PackedScore COMPLEXITY_PAWNS_BOTH_SIDES = S(   0,   70);
constexpr PackedScore COMPLEXITY_PAWN_ENDGAME = S(   0,   65);
constexpr PackedScore COMPLEXITY_OFFSET = S(   0, -134);

#undef S


}