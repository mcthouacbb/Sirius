#pragma once

#include "../defs.h"

namespace eval
{

// clang-format off
#define S(mg, eg) ScorePair(mg, eg)

constexpr ScorePair MATERIAL[6] = {S(  65,  135), S( 314,  454), S( 327,  473), S( 423,  811), S( 874, 1816), S(0, 0)};

constexpr ScorePair PSQT[6][64] = {
    {
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  72,   79), S(  16,   96), S(  30,   98), S(  41,   84), S(  65,   59), S(  46,   60), S(  38,   92), S(  83,   77),
        S(   6,   10), S(  -8,   23), S(   3,    1), S(   4,   -9), S(  -5,  -18), S(  -4,   -7), S( -16,   18), S(  -4,    8),
        S(   5,    8), S(   3,   18), S(  11,   -6), S(  10,  -17), S(   3,  -17), S(   0,  -10), S(  -3,   11), S(  -7,    8),
        S(  -6,   -5), S(  -8,   14), S(  18,  -28), S(  18,  -17), S(  13,  -18), S(   3,  -14), S( -14,   11), S( -15,   -6),
        S( -12,   -7), S(  10,    6), S(   4,    1), S(   7,   -1), S(  -3,   -1), S(  -8,   -3), S( -17,   11), S( -22,   -7),
        S(  -4,   -8), S(  23,    7), S(  24,   74), S(   6,    7), S(  -2,   -1), S(  -4,   -1), S(  -8,   10), S( -18,   -4),
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
    },
    {
        S( -60, -119), S( -92,   18), S(-113,   46), S(  -2,   11), S( -24,   16), S( -61,    6), S(-103,    8), S( -91,  -67),
        S(   0,   -3), S( -12,   23), S(  22,   11), S(  36,   14), S(  27,   17), S(  24,   -5), S( -21,   16), S(  -8,  -10),
        S(  13,   -3), S(  10,   13), S(  36,   11), S(  28,   14), S(  21,   15), S(  24,    7), S(  10,    9), S(  10,  -11),
        S(  30,    6), S(  30,   12), S(  34,   17), S(  29,   25), S(  34,   21), S(  19,   16), S(  19,    5), S(  11,    6),
        S(  20,    7), S(  27,    7), S(  25,   16), S(  19,   30), S(  18,   22), S(  18,   16), S(  16,    4), S(   8,    3),
        S(   3,   -5), S(  18,    0), S(  15,    1), S(  14,   16), S(  12,   11), S(  -1,   -1), S(   4,   -6), S(  -8,   -7),
        S(  10,   -9), S(   2,    2), S(   8,  -12), S(  11,   -1), S(   4,    0), S(   2,  -12), S(  -6,   -5), S( -15,  -21),
        S( -29,  -22), S( -11,  -20), S(  -1,  -14), S(   5,   -8), S(  -1,   -3), S( -11,  -17), S( -16,  -22), S( -29,  -40),
    },
    {
        S( -29,  -37), S( -54,   20), S( -85,   21), S( -67,   21), S( -76,   26), S( -67,   19), S( -53,   20), S( -34,  -12),
        S( -12,   -6), S( -37,    3), S( -12,    9), S( -30,   14), S( -18,   15), S( -13,   11), S( -13,  -12), S( -10,   -1),
        S(  22,   -9), S(  10,   10), S(  20,    6), S(  22,   13), S(  19,   13), S(  10,    0), S(  16,    4), S(   6,   -3),
        S(   7,   -3), S(  12,   15), S(  14,   19), S(  16,   29), S(  26,   25), S(  17,   15), S(  14,    9), S(   6,   -9),
        S(  19,   -9), S(   6,    7), S(  11,   17), S(  20,   16), S(  21,   19), S(  14,   11), S(   8,    6), S(  13,  -10),
        S(  20,  -10), S(  23,   -5), S(  13,   -7), S(  15,   11), S(  13,    5), S(   7,  -10), S(  28,   -6), S(  14,  -12),
        S(  22,  -17), S(  28,  -30), S(  26,  -12), S(  11,   -5), S(   2,   -6), S(  13,  -16), S(   9,  -27), S(  19,   -9),
        S(   9,  -39), S(  -8,    0), S( -11,   -9), S(  11,  -15), S(   6,  -12), S(  -3,   -7), S(   6,  -10), S(   5,  -25),
    },
    {
        S(  17,   14), S(  31,   13), S(  26,   15), S(  13,   26), S(  23,   17), S(  16,   19), S(  19,   21), S(  22,   20),
        S(  23,   12), S(  13,   21), S(  19,   19), S(  14,   23), S(  22,   25), S(  13,   25), S(  11,   23), S(  18,   21),
        S( -17,   17), S(  10,   12), S(  14,   10), S(  14,   10), S(  12,    9), S(   8,   14), S(   6,   17), S(  -4,   22),
        S( -17,   11), S(  -7,   15), S(  -3,   13), S( -10,   12), S(  -3,    8), S(  -1,   11), S(  -4,   16), S(  -6,   12),
        S( -23,   -1), S( -10,    5), S( -14,   11), S( -11,    9), S( -12,    5), S( -16,   10), S( -16,   11), S( -13,    1),
        S( -18,  -24), S(   5,  -25), S(  -8,   -8), S(   0,  -16), S(  -1,  -18), S( -14,   -8), S(  -5,  -17), S( -19,  -14),
        S( -52,  -27), S(  -7,  -34), S(   3,  -23), S(  -1,  -22), S(  -2,  -23), S(  -7,  -18), S( -12,  -25), S( -20,  -23),
        S( -17,  -35), S( -20,  -19), S(   7,  -22), S(  13,  -29), S(   6,  -27), S(  -2,  -21), S(  -1,  -25), S(  -2,  -23),
    },
    {
        S(   7,   31), S(  38,    8), S(  22,   28), S(  15,   31), S(  20,   24), S(  27,   13), S(  15,    9), S( -20,   35),
        S(  36,   -6), S(  31,   -6), S(   8,   24), S( -13,   38), S(  11,   28), S(  16,    2), S(  17,   -9), S(  11,    0),
        S(   8,    9), S(  13,    8), S(  -3,   25), S( -20,   37), S(  -1,   34), S(  13,    1), S(  26,  -23), S(  20,  -13),
        S(  -2,    9), S( -12,   21), S( -12,   22), S( -23,   39), S( -19,   37), S(   7,    7), S(  -1,   21), S(   4,   -3),
        S( -13,   23), S(  -9,   16), S( -13,   16), S( -18,   30), S( -20,   42), S(  -8,   22), S(   0,    8), S(  -5,    4),
        S(  -6,  -13), S(   0,  -16), S(  -8,    1), S( -17,   13), S( -11,   14), S(  -5,    6), S(   7,   -8), S(   3,   -8),
        S(  -2,  -57), S(   7,  -82), S(   1,  -48), S(  -4,  -21), S(  -7,  -14), S(   5,  -33), S(   1,  -30), S(   2,  -22),
        S( -16,  -38), S( -23,  -69), S( -15,  -54), S(  -6,  -47), S(  -3,  -36), S(  -9,  -35), S( -12,  -33), S( -19,   -9),
    },
    {
        S(  47, -154), S(  15,   72), S(   8,   15), S(  -5,    7), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  24,   13), S(  -7,  107), S( -27,   57), S( -44,   48), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  29,   51), S(  -7,  115), S( -44,   50), S(-116,   18), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S( -32,   50), S( -55,   99), S( -60,   34), S(-121,    9), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S( -70,   43), S( -66,   78), S( -79,   19), S(-101,   -8), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  -9,   21), S( -14,   48), S( -33,   -4), S( -51,  -31), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  52,   -8), S(  38,   20), S(  21,  -39), S(  -1,  -66), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  52,  -40), S(  52,   -6), S(  27,  -65), S(  25, -110), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
    },
};

constexpr ScorePair MOBILITY[4][28] = {
    {S(  -7,  -22), S( -35,  -54), S( -21,  -18), S( -10,   -1), S(   0,    8), S(   6,   18), S(  14,   22), S(  22,   26), S(  32,   17), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S( -11,  -31), S( -41,  -62), S( -22,  -31), S( -11,  -11), S(  -4,   -1), S(  -1,    9), S(   1,   16), S(   4,   20), S(   4,   22), S(   8,   22), S(   6,   23), S(  12,   16), S(  18,   14), S(  42,  -11), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S( -25,  -62), S( -49,  -62), S( -19,  -43), S( -11,  -26), S(  -3,  -16), S(   2,   -5), S(   1,    6), S(   3,   11), S(   4,   15), S(   6,   21), S(   8,   27), S(   8,   35), S(   9,   39), S(  13,   40), S(  39,   19), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S( -14,   44), S( -40,    9), S( -60,  -13), S( -43, -119), S( -27, -104), S( -13,  -66), S(  -5,  -50), S(  -1,  -32), S(  -1,  -14), S(   1,   -1), S(   4,    6), S(   4,   16), S(   6,   22), S(   6,   30), S(   8,   34), S(  10,   34), S(   8,   39), S(  10,   37), S(  11,   38), S(  13,   33), S(  17,   29), S(  22,   14), S(  22,   14), S(  27,    4), S(  24,    5), S(  21,   -8), S(  14,  -29), S( -32,    3)}
};

constexpr ScorePair THREAT_BY_PAWN[6] = {S(  -6,  -21), S(  72,   42), S(  65,   71), S(  72,   49), S(  56,   24), S(   0,    0)};
constexpr ScorePair THREAT_BY_KNIGHT[2][6] = {
    {S(   6,   36), S(   7,   81), S(  50,   32), S(  84,   13), S(  41,    8), S(   0,    0)},
    {S(  -8,   10), S(   4,   75), S(  38,   29), S(  71,   44), S(  50,   49), S(   0,    0)}
};
constexpr ScorePair THREAT_BY_BISHOP[2][6] = {
    {S(   3,   33), S(  36,   44), S(   2,   32), S(  58,   36), S(  61,   49), S(   0,    0)},
    {S(  -5,    4), S(  20,   21), S(  -6,    2), S(  56,   76), S(  62,   75), S(   0,    0)}
};
constexpr ScorePair THREAT_BY_ROOK[2][6] = {
    {S(  -2,   50), S(  36,   50), S(  45,   48), S(   7,  -72), S(  69,  -17), S(   0,    0)},
    {S( -10,    9), S(   8,   14), S(  19,    4), S(  21, -102), S(  54,   91), S(   0,    0)}
};
constexpr ScorePair THREAT_BY_QUEEN[2][6] = {
    {S(   8,   22), S(  25,   27), S(  21,   55), S(  18,    9), S(   1,  -54), S( 144,   71)},
    {S(  -5,   17), S(   2,    4), S(  -8,   26), S(  -4,   -8), S( -16,  -45), S( 102,  210)}
};
constexpr ScorePair THREAT_BY_KING[6] = {S(  48,   14), S(  25,   41), S(  98,   31), S(  86,    6), S(   0,    0), S(   0,    0)};
constexpr ScorePair KNIGHT_HIT_QUEEN = S(   7,    0);
constexpr ScorePair BISHOP_HIT_QUEEN = S(  16,   14);
constexpr ScorePair ROOK_HIT_QUEEN = S(  19,   -2);
constexpr ScorePair PUSH_THREAT = S(  13,   18);
constexpr ScorePair RESTRICTED_SQUARES = S(   2,    2);

constexpr ScorePair ISOLATED_PAWN[8] = {S(  -4,    3), S(  -4,  -17), S( -10,  -11), S( -10,  -16), S( -14,  -14), S(  -9,   -8), S(  -6,  -12), S(  -9,    2)};
constexpr ScorePair DOUBLED_PAWN[8] = {S(   1,  -53), S(   5,  -41), S(  -2,  -26), S(  -5,  -16), S( -16,    1), S(  -7,  -18), S(   4,  -39), S(   7,  -46)};
constexpr ScorePair BACKWARDS_PAWN[8] = {S(   0,    0), S(  -8,  -13), S(   0,  -15), S(  -7,  -14), S(   7,  -20), S(  11,   23), S(   0,    0), S(   0,    0)};
constexpr ScorePair PAWN_PHALANX[8] = {S(   0,    0), S(   5,   -6), S(  12,   -2), S(  18,   10), S(  39,   36), S(  73,  139), S( 110,  193), S(   0,    0)};
constexpr ScorePair DEFENDED_PAWN[8] = {S(   0,    0), S(   0,    0), S(  17,    6), S(  11,    9), S(  18,   24), S(  41,   57), S(  75,  117), S(   0,    0)};
constexpr ScorePair CANDIDATE_PASSER[2][8] = {
    {S(   0,    0), S( -22,  -10), S(  -6,  -14), S(  -2,    2), S(  16,   24), S(  42,   82), S(   0,    0), S(   0,    0)},
    {S(   0,    0), S( -14,  -10), S(  -9,    9), S(  -4,   25), S(   9,   36), S(  46,   98), S(   0,    0), S(   0,    0)}
};

constexpr ScorePair PASSED_PAWN[2][2][8] = {
    {
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -34,  -28), S( -12,   25), S(  27,  131), S( 116,  200), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -25,  -40), S(  -2,  -12), S(  30,   56), S(  65,   71), S(   0,    0)}
    },
    {
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -27,  -41), S(  -7,  -10), S(  27,   54), S(  31,   43), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -28,  -52), S(  -5,  -27), S(  16,   30), S(   0,   11), S(   0,    0)}
    }
};
constexpr ScorePair OUR_PASSER_PROXIMITY[8] = {S(  75,  110), S( 112,   70), S(  46,   68), S(  -3,   60), S(   0,   34), S(   3,   22), S(  15,   12), S(  -1,   22)};
constexpr ScorePair THEIR_PASSER_PROXIMITY[8] = {S( -52,    7), S(   4,   -3), S(  26,    0), S(  21,   24), S(  12,   59), S(  15,   74), S(  22,   77), S(  21,   63)};
constexpr ScorePair PASSER_DEFENDED_PUSH[8] = {S(   0,    0), S(   0,    0), S(   0,    0), S(   8,    6), S(  10,   20), S(  35,   31), S(  59,  101), S(   0,    0)};

constexpr ScorePair PAWN_STORM[2][4][8] = {
    {
        {S(  28,   20), S( -82,  -86), S(   4,  -46), S(  40,    2), S(  17,   15), S(  -2,   18), S(  -8,   21), S(   0,    0)},
        {S(  24,   20), S(  62, -106), S(  79,  -56), S(  33,    1), S(   6,   19), S( -29,   23), S(  -1,   20), S(   0,    0)},
        {S(   8,   17), S(  57,  -77), S( 110,  -47), S(  69,   -4), S(   8,   19), S( -16,   22), S(  -2,   18), S(   0,    0)},
        {S(  12,    4), S( 132,  -84), S( 121,  -47), S(  63,    1), S(  11,   11), S( -20,    7), S( -16,    9), S(   0,    0)}
    },
    {
        {S(   0,    0), S(   0,    0), S(  72,   34), S(  -7,   20), S(  -8,   26), S(   2,   36), S(  30,   25), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S( 138,   34), S( -28,   29), S( -17,   34), S( -24,   47), S(   5,   30), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S( 127,   16), S(   9,   22), S( -11,   34), S(  -4,   38), S(  48,   16), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S( 130,    7), S(  12,   20), S( -16,   21), S(  -7,   20), S( -15,   -3), S(   0,    0)}
    }
};
constexpr ScorePair PAWN_SHIELD[4][8] = {
    {S(  53,   21), S(  -6,   33), S( -20,   24), S(  26,   18), S(  34,   10), S(   1,    5), S( -26,   12), S(   0,    0)},
    {S(  43,   24), S( -31,   28), S(   3,   23), S(  40,   15), S(  39,    5), S(  -4,    2), S( -36,  -18), S(   0,    0)},
    {S(  21,   12), S(   8,   64), S(   3,    5), S(  33,  -12), S(  31,  -11), S(   6,   -9), S( -64,   -3), S(   0,    0)},
    {S(  16,   15), S( -15,    6), S(  12,    2), S(  35,   -3), S(  23,   -2), S(  26,    4), S( -36,    8), S(   0,    0)}
};
constexpr ScorePair SAFE_KNIGHT_CHECK = S( 100,    1);
constexpr ScorePair SAFE_BISHOP_CHECK = S(  70,   17);
constexpr ScorePair SAFE_ROOK_CHECK = S( 104,   10);
constexpr ScorePair SAFE_QUEEN_CHECK = S(  61,   20);
constexpr ScorePair UNSAFE_KNIGHT_CHECK = S(  18,    0);
constexpr ScorePair UNSAFE_BISHOP_CHECK = S(  34,    7);
constexpr ScorePair UNSAFE_ROOK_CHECK = S(  39,    2);
constexpr ScorePair UNSAFE_QUEEN_CHECK = S(  19,    4);
constexpr ScorePair QUEENLESS_ATTACK = S(-116,  280);
constexpr ScorePair KING_ATTACKER_WEIGHT[4] = {S(  55,   -2), S(  23,   -2), S(  23,  -10), S(   3,  -11)};
constexpr ScorePair KING_ATTACKS = S(   7,    0);
constexpr ScorePair WEAK_KING_RING = S(   4,    1);
constexpr ScorePair KING_FLANK_ATTACKS[2] = {S(  13,   -4), S(   3,    0)};
constexpr ScorePair KING_FLANK_DEFENSES[2] = {S(  -9,    0), S(  -7,    3)};
constexpr ScorePair SAFETY_KING_FILES[2][4] = {
    {S(  32,   -3), S(  26,    2), S(  44,    2), S(  42,   24)},
    {S(  13,   35), S( -38,   47), S( -10,   33), S(  28,   40)}
};
constexpr ScorePair SAFETY_OFFSET = S(  79,  181);

constexpr ScorePair MINOR_BEHIND_PAWN = S(   2,   10);
constexpr ScorePair KNIGHT_OUTPOST = S(  18,   17);
constexpr ScorePair BISHOP_PAWNS[7] = {S(  12,    6), S(   6,   15), S(   3,   10), S(   1,    4), S(  -3,   -2), S(  -6,   -9), S(  -9,  -18)};
constexpr ScorePair BISHOP_PAIR = S(  22,   66);
constexpr ScorePair LONG_DIAG_BISHOP = S(  12,   13);
constexpr ScorePair ROOK_OPEN[2] = {S(  31,    0), S(  19,    2)};

constexpr ScorePair TEMPO = S(  29,   20);

constexpr ScorePair COMPLEXITY_PAWNS = S(   0,   11);
constexpr ScorePair COMPLEXITY_PAWNS_BOTH_SIDES = S(   0,  124);
constexpr ScorePair COMPLEXITY_PAWN_ENDGAME = S(   0,  130);
constexpr ScorePair COMPLEXITY_OFFSET = S(   0, -209);

#undef S
// clang-format on

}
