#pragma once

#include "../defs.h"

namespace eval
{

#define S(mg, eg) PackedScore(mg, eg)

constexpr PackedScore MATERIAL[6] = {S(  61,  133), S( 288,  445), S( 314,  452), S( 387,  812), S( 797, 1496), S(0, 0)};

constexpr PackedScore PSQT[6][64] = {
	{
		S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
		S(  68,   74), S(  29,   95), S(  34,   96), S(  56,   77), S(  65,   68), S(  35,   93), S(  30,  107), S(  65,   81),
		S(  23,   14), S(  27,   43), S(  27,    7), S(  52,  -26), S(  37,  -19), S(  22,    1), S(  -1,   36), S(   6,   20),
		S(  18,   10), S(   7,   15), S(   9,   -8), S(  16,  -23), S(   5,  -21), S(  -2,   -7), S(  -7,   15), S( -12,   12),
		S(   9,    0), S(   5,   16), S(   7,  -14), S(  13,  -14), S(   8,  -13), S(  -4,   -8), S( -15,   14), S( -15,    2),
		S(   3,   -3), S(  10,   12), S(  15,   -2), S(  -1,    2), S(  -6,    1), S( -14,   -4), S( -24,   12), S( -27,    1),
		S(  17,   -3), S(  32,    7), S(  17,   -8), S(   8,    8), S(  -5,    2), S(  -7,   -3), S( -15,   18), S( -17,    4),
		S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
	},
	{
		S( -69,  -86), S( -75,  -23), S( -30,  -13), S(  16,  -13), S( -37,    7), S( -70,   10), S(-110,   16), S( -83,  -43),
		S(  -7,   -9), S(  21,    2), S(  33,   -5), S(   8,    5), S(  10,    9), S(   2,   12), S(  -4,   20), S( -11,    9),
		S(  16,   -8), S(  13,   -2), S(  57,  -18), S(  39,    2), S(  20,   10), S(  12,    6), S(   3,    4), S(  -8,    6),
		S(  35,    3), S(  37,    7), S(  48,    6), S(  37,   14), S(  30,   18), S(  31,    8), S(  19,    4), S(   8,   15),
		S(  10,   15), S(  20,   11), S(  28,    8), S(  19,   21), S(  25,   14), S(  20,   13), S(  21,    2), S(   2,   11),
		S(   2,   -1), S(  17,   -4), S(   8,  -10), S(  17,    8), S(   7,    7), S(  -1,   -5), S(  -1,   -5), S( -14,   -2),
		S(   3,    6), S(   6,   -5), S(   5,   -8), S(   4,   -3), S(   5,   -3), S(  -7,   -6), S( -12,   -4), S( -19,   -1),
		S( -11,   -7), S( -11,   -1), S(  -4,   -9), S(  -2,    3), S(  -9,    0), S( -22,   -7), S( -15,   -3), S( -48,    8),
	},
	{
		S( -38,   -4), S( -35,    6), S( -13,    1), S( -74,   11), S( -71,   19), S( -52,    3), S( -27,    8), S( -15,   15),
		S( -25,   -5), S( -35,   11), S( -13,    0), S(  -3,   -2), S( -22,    9), S(   0,   -2), S(  -2,    0), S(  -4,   -5),
		S(  19,   13), S(  13,    0), S(  42,    5), S(   9,    4), S(  13,    0), S(   6,    3), S(   6,    5), S(   6,    3),
		S(  -4,    6), S(   8,    7), S(   7,   11), S(  18,   13), S(  17,   19), S(  11,    5), S(   4,    9), S(  -8,    6),
		S(  13,   -4), S(   2,    8), S(   5,    6), S(   7,   10), S(  15,    8), S(  -4,   12), S(  -3,    5), S(   0,    2),
		S(  21,  -10), S(  22,  -10), S(  12,   -3), S(   3,    7), S(  -4,    3), S(   6,    3), S(  10,    2), S(   0,   -5),
		S(  23,  -19), S(  30,  -24), S(  21,  -14), S(   4,   -5), S(  -4,    0), S(   8,  -18), S(   6,  -17), S(  14,   -7),
		S(  35,  -29), S(  19,  -18), S(  -4,    1), S(  15,   -4), S(   0,   -1), S(   1,    8), S(  12,   -1), S(  13,   -8),
	},
	{
		S(  12,    9), S( -25,   36), S( -16,   27), S( -13,   15), S( -29,   25), S( -24,   28), S( -12,   22), S(  -5,   18),
		S(  26,    2), S(  30,    7), S(  15,   12), S(   5,   12), S(  16,   14), S(   0,   27), S(  -2,   22), S(   1,   15),
		S(  10,    3), S(  40,    2), S(  29,    2), S(  25,    4), S(   3,   14), S(  -1,   24), S(  11,   19), S(  -8,   21),
		S(   4,    8), S(   4,   15), S(  14,   10), S(  12,    2), S(   3,   13), S(   6,   17), S(   5,   17), S(  -8,   19),
		S(  -7,   -2), S(  12,    2), S(  -4,    7), S(   7,    1), S(  -5,    5), S(  -9,    9), S( -10,    8), S( -14,    8),
		S(  10,  -28), S(  20,  -29), S(   1,  -17), S(   3,  -18), S( -10,  -10), S( -14,  -11), S( -13,  -13), S( -19,  -10),
		S(  -5,  -31), S(  22,  -40), S(   5,  -25), S(   4,  -25), S(  -3,  -21), S(  -4,  -18), S( -14,  -15), S( -17,  -21),
		S(  -8,  -35), S(  -6,  -17), S(  -1,  -22), S(   7,  -29), S(  -1,  -25), S(  -8,  -17), S(  -7,  -21), S(  -8,  -18),
	},
	{
		S(   9,  -27), S(  40,  -44), S( -11,   15), S( -13,    4), S(  11,  -18), S( -18,    2), S( -36,   -3), S( -13,  -15),
		S(  37,    4), S(  -4,   14), S( -18,   22), S( -37,   53), S( -26,   36), S(  -8,    6), S(  -4,  -13), S(   7,  -12),
		S(  14,    5), S(  10,    9), S(   6,   12), S(  -8,   26), S(   4,   18), S(   9,   13), S(   8,   -7), S(  20,   -9),
		S(  11,   18), S(   8,   41), S(   8,   13), S( -11,   33), S(  -6,   32), S(   7,    5), S(   5,   15), S(   3,    8),
		S(  12,   12), S(  16,   16), S(   3,   24), S(   1,   29), S(  -5,   30), S(  -4,   23), S(   3,   17), S(   0,    8),
		S(  15,  -23), S(  14,   -7), S(   4,    8), S(  -7,   22), S(  -6,   15), S(  -6,   17), S(   4,   -3), S(   4,  -12),
		S(  16,  -56), S(  19,  -68), S(   9,  -38), S(   5,   -4), S(   3,    1), S(   4,  -16), S(   3,  -20), S(  11,  -35),
		S(   5,  -45), S(  -6,  -55), S( -17,  -21), S(  -6,  -16), S(  -6,  -10), S( -11,   -4), S( -14,  -12), S( -14,   -9),
	},
	{
		S(  -7,  -62), S(   2,    1), S( -33,   -3), S( -23,   -6), S(   8,   -5), S(   8,   -5), S(   8,   -5), S(   8,   -5),
		S( -57,   32), S(   0,   60), S( -10,   48), S(  33,   20), S(   8,   -5), S(   8,   -5), S(   8,   -5), S(   8,   -5),
		S( -15,   22), S(  27,   53), S(  34,   42), S(   5,   43), S(   8,   -5), S(   8,   -5), S(   8,   -5), S(   8,   -5),
		S( -53,   19), S( -21,   46), S( -17,   38), S( -46,   34), S(   8,   -5), S(   8,   -5), S(   8,   -5), S(   8,   -5),
		S( -69,    9), S( -37,   32), S( -24,   19), S( -46,   18), S(   8,   -5), S(   8,   -5), S(   8,   -5), S(   8,   -5),
		S( -22,  -10), S(   4,    9), S( -11,   -1), S( -16,   -3), S(   8,   -5), S(   8,   -5), S(   8,   -5), S(   8,   -5),
		S(  30,  -30), S(  32,   -6), S(  12,  -15), S(  -4,  -18), S(   8,   -5), S(   8,   -5), S(   8,   -5), S(   8,   -5),
		S(  20,  -64), S(  22,  -25), S(   2,  -30), S(  13,  -51), S(   8,   -5), S(   8,   -5), S(   8,   -5), S(   8,   -5),
	},
};

constexpr PackedScore MOBILITY[4][28] = {
	{S( -11,  -20), S( -40,  -62), S( -15,  -31), S(  -7,   -6), S(   4,    7), S(   6,   18), S(  14,   25), S(  22,   32), S(  31,   32), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -21,  -33), S( -51,  -97), S( -29,  -39), S( -22,  -17), S( -11,   -4), S(  -4,    5), S(   1,   16), S(   6,   21), S(   9,   26), S(  14,   28), S(  15,   30), S(  28,   21), S(  30,   25), S(  47,    7), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -27,  -43), S(  11,  -71), S( -25,  -53), S( -13,  -32), S(  -7,  -24), S(  -3,   -6), S(   0,    0), S(  -5,    9), S(  -1,   13), S(   2,   18), S(   6,   25), S(   6,   34), S(   9,   39), S(  16,   41), S(  23,   39), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -33,    3), S( -52,  -80), S( -96,  -82), S( -76, -249), S( -74,  -97), S( -29,  -40), S( -22,  -12), S( -14,   -7), S(  -5,   -6), S(  -5,   19), S(  -3,   26), S(   0,   36), S(   3,   40), S(   6,   43), S(   9,   45), S(  12,   47), S(  14,   48), S(  13,   53), S(  15,   53), S(  16,   55), S(  24,   46), S(  31,   31), S(  35,   28), S(  53,    6), S(  57,    1), S(  62,   -9), S(  41,   -2), S(   6,  -20)}
};

constexpr PackedScore THREAT_BY_PAWN[6] = {S(   9,  -16), S(  64,   31), S(  63,   62), S(  80,   29), S(  75,   -7), S(   0,    0)};
constexpr PackedScore THREAT_BY_KNIGHT[2][6] = {
	{S(   8,   28), S(  26,   38), S(  38,   42), S(  73,   13), S(  48,  -25), S(   0,    0)},
	{S(  -4,   10), S(  13,   38), S(  30,   31), S(  64,   33), S(  57,    1), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_BISHOP[2][6] = {
	{S(   1,   38), S(  43,   36), S(  -8,   35), S(  71,   16), S(  69,   64), S(   0,    0)},
	{S(   0,    8), S(  22,   24), S( -22,  -16), S(  44,   47), S(  48,  124), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_ROOK[2][6] = {
	{S(   1,   43), S(  19,   63), S(  28,   57), S(  13,  -49), S(  75,   10), S(   0,    0)},
	{S(  -8,    8), S(   2,   16), S(  14,    3), S(  13,  -91), S(  65,   47), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_QUEEN[2][6] = {
	{S(   7,   11), S(  23,   23), S(   9,   51), S(  15,    7), S(  10,  -55), S(  95,   31)},
	{S(  -1,   10), S(   0,    8), S(  -7,   20), S(  -6,    4), S( -17,  -73), S( 109,   64)}
};
constexpr PackedScore THREAT_BY_KING[6] = {S( -35,   49), S(   0,   50), S(  22,   42), S(  83,   18), S(   0,    0), S(   0,    0)};
constexpr PackedScore PUSH_THREAT = S(  16,   20);

constexpr PackedScore ISOLATED_PAWN[8] = {S(  -7,    6), S(  -4,  -16), S( -11,   -9), S( -11,  -17), S( -11,  -16), S(  -6,   -8), S(  -1,  -15), S(  -8,    7)};
constexpr PackedScore DOUBLED_PAWN[8] = {S(  -6,  -65), S(   7,  -38), S(  -3,  -31), S(  -9,  -21), S(  -8,  -16), S( -17,  -20), S(   5,  -43), S(  -3,  -76)};
constexpr PackedScore BACKWARDS_PAWN[8] = {S(   0,    0), S(  -6,  -12), S(  -2,  -14), S(  -9,  -12), S(   1,  -21), S(  22,   -8), S(   0,    0), S(   0,    0)};
constexpr PackedScore PAWN_PHALANX[8] = {S(   0,    0), S(   5,   -5), S(  11,   -1), S(  19,   14), S(  48,   62), S( 115,  222), S( -34,  357), S(   0,    0)};
constexpr PackedScore DEFENDED_PAWN[8] = {S(   0,    0), S(   0,    0), S(  20,    7), S(  12,    8), S(  16,   21), S(  20,   66), S( 133,   78), S(   0,    0)};

constexpr PackedScore PASSED_PAWN[2][2][8] = {
	{
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -33,  -39), S( -13,   25), S( -16,  153), S(  33,  238), S(   0,    0)},
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -21,  -51), S(  12,  -23), S(  18,   18), S(  60,   34), S(   0,    0)}
	},
	{
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -29,  -56), S(   1,  -25), S(  19,    3), S(  66,   -3), S(   0,    0)},
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -30,  -60), S(   2,  -34), S(  -4,  -16), S(  -4,  -19), S(   0,    0)}
	}
};
constexpr PackedScore OUR_PASSER_PROXIMITY[8] = {S(   0,    0), S(  48,   83), S(   3,   68), S(   0,   42), S(   4,   30), S(   9,   23), S(  19,   20), S(  14,   20)};
constexpr PackedScore THEIR_PASSER_PROXIMITY[8] = {S(   0,    0), S( -39,    5), S(  22,   -1), S(  13,   26), S(  18,   45), S(  11,   78), S(  13,   79), S(  16,   67)};

constexpr PackedScore PAWN_STORM[2][4][8] = {
	{
		{S(  15,   14), S(-139,  -46), S(  -2,   -9), S(   5,  -13), S(   0,   -1), S(  -5,    9), S(  -4,    8), S(   0,    0)},
		{S(  11,    3), S(  -9, -103), S(  54,  -42), S(   8,  -11), S(   2,   -5), S( -11,    7), S(  -7,    9), S(   0,    0)},
		{S(  -3,    6), S(  59,  -99), S(  69,  -45), S(  19,  -18), S(   3,   -1), S(  -7,    7), S(  -9,   12), S(   0,    0)},
		{S(   8,   -7), S( 108,  -88), S(  39,  -21), S(  14,   -1), S(  -2,    4), S(  -9,    0), S(  -3,    0), S(   0,    0)}
	},
	{
		{S(   0,    0), S(  -3,  -26), S( -31,  122), S(  14,  -46), S(  -2,    8), S(  -1,    5), S(  -5,    9), S(   0,    0)},
		{S(   0,    0), S(   2,  -81), S(   1,   76), S(  56,  -40), S(   3,    2), S(  -7,    5), S(  -8,    8), S(   0,    0)},
		{S(   0,    0), S(  -7,   14), S( -50, -110), S(  21,  -27), S(   2,    4), S(  -2,    5), S(  -9,   11), S(   0,    0)},
		{S(   0,    0), S( -15,  -57), S(  70,  -10), S(  23,   -2), S(   1,    8), S(   0,   -9), S(   0,    6), S(   0,    0)}
	}
};
constexpr PackedScore PAWN_SHIELD[4][8] = {
	{S(  14,    2), S(  -8,   26), S( -15,   17), S(  -3,    8), S(   3,    1), S( -31,  -27), S( -78,  -37), S(   0,    0)},
	{S(  19,    0), S( -15,   12), S( -10,    8), S(  12,   -3), S(   9,  -11), S(  -3,  -19), S( -49,  -30), S(   0,    0)},
	{S(   5,    8), S( -16,    8), S(  16,    6), S(   1,   -1), S(  -2,   -2), S(   7,  -20), S( -10,  -42), S(   0,    0)},
	{S(  14,   -3), S(   6,   -3), S(  -3,    0), S(   0,   -5), S(   9,   -9), S(  30,  -21), S( -11,  -23), S(   0,    0)}
};
constexpr PackedScore SAFE_KNIGHT_CHECK = S(  83,   -2);
constexpr PackedScore SAFE_BISHOP_CHECK = S(  24,   11);
constexpr PackedScore SAFE_ROOK_CHECK = S(  60,    5);
constexpr PackedScore SAFE_QUEEN_CHECK = S(  23,   21);
constexpr PackedScore UNSAFE_KNIGHT_CHECK = S(   7,    1);
constexpr PackedScore UNSAFE_BISHOP_CHECK = S(  12,   12);
constexpr PackedScore UNSAFE_ROOK_CHECK = S(  21,    0);
constexpr PackedScore UNSAFE_QUEEN_CHECK = S(   6,   13);
constexpr PackedScore KING_ATTACKER_WEIGHT[4] = {S(  19,    1), S(  16,    2), S(  18,  -14), S(   5,    1)};
constexpr PackedScore KING_ATTACKS[14] = {S( -37,   15), S( -44,    9), S( -52,    4), S( -56,    6), S( -55,    2), S( -49,   -2), S( -33,   -6), S( -15,  -13), S(  14,  -22), S(  38,  -16), S(  56,  -23), S(  66,   20), S(  91,  -19), S(  79,   34)};

constexpr PackedScore MINOR_BEHIND_PAWN = S(   8,   14);
constexpr PackedScore KNIGHT_OUTPOST = S(  26,   18);
constexpr PackedScore BISHOP_PAWNS[7] = {S(   4,   23), S(   6,   21), S(   4,   13), S(   0,    5), S(  -3,   -5), S(  -4,  -19), S(  -8,  -34)};
constexpr PackedScore BISHOP_PAIR = S(  20,   62);
constexpr PackedScore ROOK_OPEN[2] = {S(  26,    4), S(  15,    5)};

constexpr PackedScore TEMPO = S(  32,   35);

constexpr PackedScore COMPLEXITY_PAWNS = S(   0,    8);
constexpr PackedScore COMPLEXITY_PASSERS = S(   0,    1);
constexpr PackedScore COMPLEXITY_PAWNS_BOTH_SIDES = S(   0,   69);
constexpr PackedScore COMPLEXITY_PAWN_ENDGAME = S(   0,   65);
constexpr PackedScore COMPLEXITY_OFFSET = S(   0, -132);

#undef S


}