#pragma once

#include "../defs.h"

namespace eval
{

// clang-format off
#define S(mg, eg) ScorePair(mg, eg)

constexpr ScorePair MATERIAL[6] = {S(  65,  146), S( 334,  482), S( 351,  500), S( 443,  877), S( 940, 1773), S(0, 0)};

constexpr ScorePair PSQT[6][64] = {
    {
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  90,   77), S(  32,   61), S(  17,   96), S(  67,   65), S(  69,   52), S(  35,   72), S(  36,   85), S(  90,   80),
        S(   7,    7), S(  -9,   22), S(  17,   -4), S(   9,   -5), S(  -6,  -16), S(  -4,   -4), S( -14,   19), S(  -2,   11),
        S(   5,   11), S(   7,   17), S(  11,   -5), S(   9,  -18), S(   1,  -13), S(  -1,  -10), S(  -1,   13), S( -10,   11),
        S(  -6,   -5), S(  -8,   19), S(  16,  -23), S(  16,  -18), S(   9,  -17), S(   2,  -12), S( -14,   14), S( -15,   -6),
        S( -14,   -5), S(  12,    7), S(   4,    3), S(   8,    0), S(  -2,    1), S(  -8,   -1), S( -15,   14), S( -22,   -8),
        S(  -4,   -9), S(  24,    8), S(  27,   28), S(   6,   11), S(  -3,    4), S(  -4,    1), S(  -7,   12), S( -17,   -5),
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
    },
    {
        S( -77, -114), S( -90,   34), S( -78,   19), S( -13,   14), S( -55,   17), S( -55,    0), S(-108,   33), S( -93,  -83),
        S( -13,    4), S( -12,   14), S(  23,   11), S(  30,   22), S(  23,   23), S(  25,   -9), S( -19,    9), S( -11,  -12),
        S(  20,  -10), S(  14,    6), S(  43,    7), S(  33,   17), S(  19,   15), S(  28,   12), S(   5,   11), S( -13,    5),
        S(  31,    5), S(  31,    8), S(  37,   15), S(  32,   23), S(  37,   21), S(  23,   14), S(  19,    4), S(  16,    0),
        S(  20,    9), S(  26,   11), S(  27,   17), S(  20,   31), S(  20,   23), S(  19,   17), S(  15,    3), S(   5,    6),
        S(   4,   -8), S(  21,   -2), S(  17,    0), S(  16,   17), S(  10,   14), S(  -1,    2), S(   6,   -9), S(  -5,  -12),
        S(   5,   -4), S(   4,    0), S(   8,  -13), S(  10,    1), S(   2,    2), S(   1,   -9), S( -18,    4), S( -15,  -32),
        S(  -9,  -48), S( -13,  -18), S(   6,  -21), S(   0,   -6), S(   4,   -9), S(   6,  -26), S( -18,  -19), S( -24,  -35),
    },
    {
        S( -31,  -52), S( -47,   17), S( -73,   26), S( -61,   23), S( -60,   26), S( -92,   32), S( -65,   27), S( -31,  -21),
        S(  -9,  -11), S( -37,   13), S(  -5,    6), S( -30,   17), S( -22,   24), S( -14,   14), S(  -8,  -23), S( -12,   -5),
        S(  15,   -3), S(  10,   12), S(  20,    8), S(  11,   21), S(  19,   15), S(   6,    6), S(  17,    0), S(  13,  -13),
        S(   4,    5), S(  11,   18), S(  19,   14), S(  16,   34), S(  27,   29), S(  15,   13), S(  14,   13), S(   2,    0),
        S(  16,  -12), S(   4,    9), S(  12,   19), S(  21,   14), S(  24,   18), S(  17,   13), S(  10,    5), S(  16,  -16),
        S(  20,  -10), S(  26,  -10), S(  15,   -9), S(  16,   11), S(  12,    8), S(   6,  -10), S(  27,   -5), S(  15,  -14),
        S(  15,  -15), S(  29,  -35), S(  27,  -21), S(  10,   -4), S(  -1,   -4), S(  14,  -16), S(   9,  -30), S(  21,   -7),
        S(   4,  -31), S(  17,  -14), S( -15,   -7), S(  12,  -21), S(  -1,   -8), S(  -5,   -6), S(  19,  -28), S(   7,  -15),
    },
    {
        S(  24,   13), S(  21,   18), S(   5,   34), S(   1,   36), S(  22,   23), S(  10,   22), S(  25,   24), S(  19,   26),
        S(  21,   18), S(  14,   20), S(  22,   26), S(  14,   30), S(  22,   31), S(  12,   32), S(  10,   30), S(  19,   26),
        S( -12,   19), S(   3,   18), S(  15,   12), S(  19,   11), S(  10,   10), S(   2,   22), S(   3,   21), S(  -8,   31),
        S( -15,   13), S(  -7,   20), S(  -8,   23), S(  -7,   13), S(  -2,    9), S(   1,   13), S(   4,   10), S(  -7,   14),
        S( -23,   -2), S( -16,   12), S(  -9,    7), S(  -5,    3), S( -12,    4), S(  -9,    7), S( -13,   10), S( -10,   -3),
        S( -21,  -26), S(   7,  -30), S(  -4,  -13), S(  -5,  -13), S(   3,  -24), S(  -9,  -17), S(  -4,  -18), S( -11,  -20),
        S( -57,  -30), S( -11,  -38), S(   6,  -32), S(   5,  -32), S(   4,  -35), S(  -5,  -26), S(  -9,  -33), S( -18,  -29),
        S( -15,  -40), S( -23,  -19), S(  12,  -32), S(  19,  -37), S(   8,  -34), S(   2,  -27), S(   4,  -35), S(   2,  -28),
    },
    {
        S(  16,   20), S(  41,    3), S(  27,   26), S(  19,   27), S(  28,   26), S(  24,   12), S(  23,    1), S( -13,   19),
        S(  28,    2), S(  32,   -8), S(  15,   20), S( -25,   47), S(   3,   27), S(   6,   13), S(  24,  -22), S(  10,    3),
        S(   8,   10), S(  24,   -1), S(   6,   16), S( -17,   31), S(   8,   17), S(  21,  -18), S(  19,  -15), S(  20,  -18),
        S(  -6,   24), S(  -9,   18), S( -13,   23), S( -24,   39), S( -16,   32), S(   6,   10), S(   5,   13), S(   1,    4),
        S( -19,   42), S(  -9,   25), S( -12,   16), S( -14,   27), S( -21,   50), S(  -7,   23), S(  -1,   13), S(  -7,   13),
        S(  -4,  -20), S(   1,  -19), S( -10,   10), S( -21,   21), S(  -9,   16), S(  -6,   16), S(   6,   -2), S(   4,  -15),
        S(  -8,  -56), S(   5,  -81), S(  -1,  -48), S(  -6,  -18), S( -11,   -3), S(   4,  -29), S(   1,  -27), S(  -5,   -4),
        S(   2,  -61), S( -25,  -75), S( -22,  -47), S( -13,  -41), S(  -4,  -32), S( -12,  -35), S( -17,  -20), S( -14,  -15),
    },
    {
        S( -97, -105), S(  -1,  104), S( -24,   66), S( -44,   55), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  25,    7), S(  16,  100), S( -12,   73), S( -12,   55), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  10,   55), S(  27,   90), S( -21,   39), S(-124,   -1), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S( -34,   48), S( -14,   78), S( -62,   32), S(-130,   -2), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S( -45,   26), S( -37,   61), S( -71,   20), S( -99,  -10), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(   4,    8), S(   1,   39), S( -33,   -2), S( -53,  -27), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  58,  -16), S(  47,   13), S(  15,  -32), S( -12,  -57), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  57,  -51), S(  57,   -9), S(  13,  -56), S(  13, -103), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
    },
};

constexpr ScorePair MOBILITY[4][28] = {
    {S(  -5,  -33), S( -33,  -63), S( -21,  -18), S(  -9,    0), S(   0,   13), S(   4,   25), S(  13,   29), S(  21,   33), S(  35,   15), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S(  -3,  -36), S( -38,  -67), S( -24,  -31), S( -12,   -9), S(  -6,    1), S(  -1,   13), S(   0,   22), S(   4,   23), S(   2,   28), S(   5,   29), S(   5,   30), S(  16,   11), S(  11,   25), S(  49,  -32), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S( -32,  -66), S( -57,  -74), S( -18,  -45), S( -11,  -26), S(  -2,  -16), S(   3,   -3), S(   4,    7), S(   6,   13), S(   8,   15), S(  10,   24), S(  10,   33), S(  12,   41), S(  13,   47), S(  15,   47), S(  50,   16), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S(  12,   10), S(  15,  -65), S(   3, -119), S( -61,  -92), S( -32, -113), S( -10,  -75), S(  -3,  -55), S(  -3,  -25), S(  -1,  -11), S(  -1,    6), S(   3,   14), S(   2,   25), S(   4,   32), S(   4,   40), S(   7,   42), S(   6,   49), S(   7,   52), S(   7,   55), S(  11,   49), S(   9,   52), S(  12,   51), S(  18,   32), S(  17,   37), S(  17,   17), S(  17,   17), S(  26,  -34), S( -41,   36), S( -39,  -24)}
};

constexpr ScorePair THREAT_BY_PAWN[6] = {S(  -8,  -25), S(  79,   42), S(  70,   77), S(  77,   50), S(  61,   18), S(   0,    0)};
constexpr ScorePair THREAT_BY_KNIGHT[2][6] = {
    {S(   7,   41), S(  16,   64), S(  46,   36), S(  88,   10), S(  45,   -1), S(   0,    0)},
    {S(  -8,   12), S(  11,   60), S(  38,   33), S(  71,   52), S(  57,   49), S(   0,    0)}
};
constexpr ScorePair THREAT_BY_BISHOP[2][6] = {
    {S(   1,   37), S(  40,   44), S(  11,   26), S(  57,   38), S(  58,   65), S(   0,    0)},
    {S(  -7,    5), S(  20,   19), S(   2,   -4), S(  61,   81), S(  57,   97), S(   0,    0)}
};
constexpr ScorePair THREAT_BY_ROOK[2][6] = {
    {S(  -3,   55), S(  38,   50), S(  47,   52), S(   2,  -79), S(  72,  -11), S(   0,    0)},
    {S( -11,    9), S(   8,   15), S(  21,    3), S(  18, -118), S(  47,  118), S(   0,    0)}
};
constexpr ScorePair THREAT_BY_QUEEN[2][6] = {
    {S(   6,   29), S(  26,   29), S(  22,   60), S(  17,   13), S(  10,  -71), S( 115,   69)},
    {S(  -8,   24), S(   0,    5), S( -10,   38), S(  -9,    4), S(  -9,  -53), S( 143,  152)}
};
constexpr ScorePair THREAT_BY_KING[6] = {S(  48,   22), S(  28,   41), S( 112,   30), S(  79,    9), S(   0,    0), S(   0,    0)};
constexpr ScorePair KNIGHT_HIT_QUEEN = S(   8,   -3);
constexpr ScorePair BISHOP_HIT_QUEEN = S(  21,   10);
constexpr ScorePair ROOK_HIT_QUEEN = S(  23,  -11);
constexpr ScorePair PUSH_THREAT = S(  14,   19);
constexpr ScorePair RESTRICTED_SQUARES = S(   3,    3);

constexpr ScorePair ISOLATED_PAWN[8] = {S(  -4,    3), S(  -4,  -16), S(  -8,  -15), S( -10,  -16), S( -15,  -13), S(  -9,   -8), S(  -7,  -10), S(  -8,    2)};
constexpr ScorePair DOUBLED_PAWN[8] = {S(   3,  -57), S(  13,  -57), S(   2,  -31), S( -11,  -11), S( -13,   -3), S(  -7,  -21), S(   9,  -50), S(   7,  -49)};
constexpr ScorePair BACKWARDS_PAWN[8] = {S(   0,    0), S(  -7,  -15), S(   0,  -17), S(  -6,  -12), S(   2,  -18), S(  34,   -1), S(   0,    0), S(   0,    0)};
constexpr ScorePair PAWN_PHALANX[8] = {S(   0,    0), S(   5,   -7), S(  12,   -4), S(  19,   10), S(  38,   38), S(  74,  142), S(  95,  234), S(   0,    0)};
constexpr ScorePair DEFENDED_PAWN[8] = {S(   0,    0), S(   0,    0), S(  16,    6), S(  11,    9), S(  18,   23), S(  48,   59), S(  53,  144), S(   0,    0)};
constexpr ScorePair CANDIDATE_PASSER[2][8] = {
    {S(   0,    0), S( -31,    7), S(  -8,  -14), S(   4,   -3), S(  21,   19), S(  44,   80), S(   0,    0), S(   0,    0)},
    {S(   0,    0), S( -13,   -9), S(  -6,    9), S(  -3,   25), S(   9,   37), S(  25,  126), S(   0,    0), S(   0,    0)}
};

constexpr ScorePair PASSED_PAWN[2][2][8] = {
    {
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -34,  -28), S( -13,   29), S(  32,  143), S( 144,  212), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -23,  -42), S(  -2,  -13), S(  32,   55), S(  91,   76), S(   0,    0)}
    },
    {
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -26,  -45), S(  -7,  -12), S(  26,   60), S(  49,   42), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -28,  -55), S(  -5,  -30), S(  17,   30), S(   2,   31), S(   0,    0)}
    }
};
constexpr ScorePair OUR_PASSER_PROXIMITY[8] = {S( 130,   98), S( 120,   73), S(  48,   73), S(  -1,   59), S(  -2,   34), S(   1,   22), S(  18,    8), S(  -1,   18)};
constexpr ScorePair THEIR_PASSER_PROXIMITY[8] = {S( -39,   -2), S(   7,   -3), S(  28,    3), S(  25,   27), S(  15,   62), S(  18,   80), S(  24,   80), S(  20,   67)};
constexpr ScorePair PASSER_DEFENDED_PUSH[8] = {S(   0,    0), S(   0,    0), S(   0,    0), S(   5,   11), S(  10,   26), S(  40,   35), S(  58,   96), S(   0,    0)};

constexpr ScorePair PAWN_STORM[2][4][8] = {
    {
        {S(  31,   31), S( -67, -415), S(  -2,  -76), S(  40,    8), S(  21,   27), S(   7,   27), S(  -5,   38), S(   0,    0)},
        {S(  21,   12), S(  30, -169), S(  71, -117), S(  32,  -15), S(   9,    9), S( -21,   14), S(   5,   12), S(   0,    0)},
        {S(   4,    9), S(  36, -160), S(  97,  -98), S(  63,  -19), S(   7,   10), S( -13,   14), S(  -3,    9), S(   0,    0)},
        {S(   7,  -12), S(  85, -214), S( 111, -117), S(  57,  -20), S(  12,   -4), S( -23,  -10), S( -26,   -8), S(   0,    0)}
    },
    {
        {S(   0,    0), S(   0,    0), S(  84,   55), S(   3,   30), S(  -2,   43), S(  17,   52), S(  33,   39), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S( 121,   43), S( -30,   22), S( -14,   40), S( -20,   53), S(  -6,   23), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S( 128,    3), S(  17,   16), S(  -3,   32), S(  -7,   47), S(  62,    4), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S( 139,    6), S(  18,   15), S( -17,   18), S(  -3,   13), S( -21,  -29), S(   0,    0)}
    }
};
constexpr ScorePair PAWN_SHIELD[4][8] = {
    {S(  56,   25), S(   7,   44), S( -12,   32), S(  34,   21), S(  38,   10), S(   5,    5), S( -20,   27), S(   0,    0)},
    {S(  36,   17), S( -32,   25), S(   4,   19), S(  40,    6), S(  38,  -15), S(   4,  -26), S( -15,  -99), S(   0,    0)},
    {S(  22,   15), S(   3,   38), S(   5,    3), S(  34,  -19), S(  32,  -24), S(  11,  -31), S( -65,  -45), S(   0,    0)},
    {S(  11,    3), S( -28,  -15), S(   5,  -24), S(  26,  -37), S(  19,  -33), S(  33,  -15), S(  -8,  -37), S(   0,    0)}
};
constexpr ScorePair SAFE_KNIGHT_CHECK = S(  96,    4);
constexpr ScorePair SAFE_BISHOP_CHECK = S(  72,   30);
constexpr ScorePair SAFE_ROOK_CHECK = S( 110,   15);
constexpr ScorePair SAFE_QUEEN_CHECK = S(  64,   33);
constexpr ScorePair UNSAFE_KNIGHT_CHECK = S(  18,    0);
constexpr ScorePair UNSAFE_BISHOP_CHECK = S(  37,   12);
constexpr ScorePair UNSAFE_ROOK_CHECK = S(  44,    2);
constexpr ScorePair UNSAFE_QUEEN_CHECK = S(  19,   14);
constexpr ScorePair QUEENLESS_ATTACK = S(-126,  264);
constexpr ScorePair KING_ATTACKER_WEIGHT[4] = {S(  55,   -5), S(  22,    0), S(  21,  -16), S(   7,  -50)};
constexpr ScorePair KING_ATTACKS = S(   7,   -1);
constexpr ScorePair WEAK_KING_RING = S(   4,    1);
constexpr ScorePair KING_FLANK_ATTACKS[2] = {S(  13,   -6), S(   3,    0)};
constexpr ScorePair KING_FLANK_DEFENSES[2] = {S(  -7,    0), S(  -6,    5)};
constexpr ScorePair SAFETY_OFFSET = S(  77,   47);

constexpr ScorePair MINOR_BEHIND_PAWN = S(   1,   12);
constexpr ScorePair KNIGHT_OUTPOST = S(  16,   21);
constexpr ScorePair BISHOP_PAWNS[7] = {S(  17,   -7), S(   6,   14), S(   3,   13), S(   0,    6), S(  -4,    3), S(  -7,   -7), S( -11,  -19)};
constexpr ScorePair BISHOP_PAIR = S(  19,   76);
constexpr ScorePair LONG_DIAG_BISHOP = S(  10,   17);
constexpr ScorePair ROOK_OPEN[2] = {S(  32,    0), S(  21,    1)};

constexpr ScorePair TEMPO = S(  26,   18);

constexpr ScorePair COMPLEXITY_PAWNS = S(   0,   13);
constexpr ScorePair COMPLEXITY_PAWNS_BOTH_SIDES = S(   0,  184);
constexpr ScorePair COMPLEXITY_PAWN_ENDGAME = S(   0,  181);
constexpr ScorePair COMPLEXITY_OFFSET = S(   0, -308);

#undef S
// clang-format on

}
