#pragma once

#include "../defs.h"

namespace eval
{

#define S(mg, eg) PackedScore(mg, eg)

constexpr PackedScore MATERIAL[6] = {S(  64,  130), S( 289,  456), S( 318,  472), S( 383,  830), S( 780, 1590), S(0, 0)};

constexpr PackedScore PSQT[6][64] = {
	{
		S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
		S(  17,  104), S(  28,   84), S(  66,  101), S(  64,   71), S(  67,   58), S(  31,   74), S(  22,   81), S(  22,   88),
		S(  56,   25), S(  67,   30), S(  81,   -3), S(  48,  -18), S(  39,  -18), S(  32,  -10), S(   3,   22), S(   1,   23),
		S(  30,    9), S(  21,   10), S(  30,  -11), S(  15,  -13), S(  -3,  -12), S(  -6,   -7), S( -20,   12), S( -24,   19),
		S(  19,   -3), S(  13,    7), S(  17,   -9), S(   8,   -7), S(  -1,   -7), S( -13,   -6), S( -32,   11), S( -31,    7),
		S(  19,   -7), S(  26,   -1), S(   4,    0), S(  -1,    4), S( -15,    3), S( -23,   -6), S( -39,    4), S( -40,    4),
		S(  30,  -11), S(  59,   -4), S(  42,   -1), S(   6,   14), S(  -9,    5), S( -14,    0), S( -27,   12), S( -29,   11),
		S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
	},
	{
		S( -65,  -87), S( -69,  -20), S( -23,  -17), S(  24,  -16), S( -30,    6), S( -60,   10), S(-125,   23), S( -87,  -45),
		S(   7,  -14), S(  20,   -2), S(  48,  -12), S(  25,    1), S(  24,    4), S(   1,   12), S(  -9,   21), S( -10,   13),
		S(  37,  -13), S(  20,   -3), S(  71,  -15), S(  44,    2), S(  28,    7), S(  18,    9), S(  -3,    7), S(  -7,    6),
		S(  48,   -4), S(  38,    8), S(  65,    4), S(  47,   11), S(  46,   18), S(  26,   11), S(  19,    5), S(   4,   15),
		S(  15,   16), S(  43,    8), S(  36,    9), S(  30,   22), S(  24,   17), S(  16,   15), S(  18,    3), S(  -6,   15),
		S(  -4,    1), S(  14,    0), S(   4,   -5), S(  13,   11), S(  -2,   12), S(  -9,   -4), S( -11,   -4), S( -24,   -1),
		S(  -6,   11), S(  -2,    0), S(   4,   -5), S(  -2,   -1), S(  -3,   -1), S( -17,   -6), S( -23,   -1), S( -29,    0),
		S( -29,   -2), S( -20,   -2), S( -13,   -2), S( -10,    8), S( -17,    2), S( -28,   -7), S( -22,   -4), S( -61,    9),
	},
	{
		S( -37,   -7), S( -39,    6), S( -17,   -1), S( -69,   11), S( -68,   15), S( -58,    3), S( -26,    6), S( -13,   16),
		S( -19,   -9), S( -42,   11), S(  -2,   -4), S(  -5,   -5), S( -29,    9), S(  -5,   -1), S(  -3,   -1), S(   0,   -5),
		S(  21,    7), S(  24,   -2), S(  40,    5), S(  11,    3), S(  13,   -3), S(   3,    3), S(   8,    2), S(   4,    5),
		S(   1,    6), S(   8,    7), S(  17,    6), S(  18,   12), S(  22,   16), S(  12,    3), S(  -1,   10), S(  -9,    8),
		S(  18,   -8), S(   0,   10), S(   7,    6), S(  15,   10), S(  16,    6), S(  -4,   14), S(  -5,    5), S(  -3,    3),
		S(  23,  -11), S(  20,   -8), S(   9,    1), S(   7,    7), S(  -5,    5), S(   0,    3), S(  10,    1), S(  -3,   -6),
		S(  22,  -17), S(  30,  -21), S(  23,  -11), S(  -1,   -2), S(  -6,   -1), S(   9,  -21), S(   2,  -19), S(  17,   -8),
		S(  32,  -29), S(  21,  -18), S(  -9,    6), S(  11,    0), S(  -3,    0), S(   5,    5), S(  20,   -4), S(  11,   -8),
	},
	{
		S(  22,   11), S( -32,   47), S(  13,   27), S(   4,   15), S( -12,   23), S( -21,   34), S( -11,   26), S(  -6,   24),
		S(  47,   -4), S(  42,    5), S(  37,    8), S(   8,   12), S(  13,   15), S(  -5,   28), S(  -5,   23), S(  -4,   17),
		S(  50,   -9), S(  70,   -6), S(  53,   -6), S(  27,    2), S(   2,   11), S(  -6,   24), S(   8,   19), S( -10,   22),
		S(  23,    3), S(  27,    9), S(  21,    8), S(   8,    6), S(  -9,   16), S(  -7,   21), S(  -2,   20), S( -14,   21),
		S(   5,   -6), S(  31,   -3), S(   1,    3), S(  -2,    6), S( -17,   10), S( -20,   11), S( -20,   12), S( -26,   14),
		S(  16,  -31), S(  39,  -35), S(   3,  -19), S(  -6,  -15), S( -25,   -4), S( -29,   -5), S( -24,   -7), S( -31,   -6),
		S(  -5,  -30), S(  30,  -39), S(   8,  -26), S(  -7,  -20), S( -16,  -16), S( -18,  -13), S( -26,   -9), S( -28,  -18),
		S( -18,  -34), S(  -2,  -18), S(  -8,  -17), S(  -3,  -24), S( -14,  -22), S( -22,  -14), S( -18,  -20), S( -19,  -17),
	},
	{
		S(   5,   -7), S(  42,  -22), S(  17,   35), S(   0,   38), S(  29,   -1), S( -15,   30), S( -43,   23), S( -20,    5),
		S(  50,    4), S( -12,   40), S(  15,   40), S( -29,   81), S( -26,   56), S( -10,   16), S(  -9,   -5), S(  11,  -14),
		S(  54,   17), S(  50,   17), S(  35,   52), S(  -2,   53), S(   7,   27), S(   8,   16), S(  15,  -18), S(  28,  -22),
		S(  26,   30), S(  13,   54), S(  13,   35), S( -12,   49), S( -12,   33), S(   4,    0), S(   2,    4), S(   6,   -5),
		S(  12,   20), S(  13,   20), S(  -2,   25), S(  -2,   21), S(  -8,   15), S( -12,    5), S(  -4,    1), S( -12,    6),
		S(  14,  -22), S(  11,   -9), S(  -2,    0), S( -14,    5), S( -15,   -5), S( -15,   -6), S(  -7,  -21), S(  -4,  -30),
		S(  14,  -65), S(  16,  -71), S(   8,  -49), S(  -6,  -18), S(  -8,  -20), S(  -5,  -32), S(  -6,  -37), S(   1,  -49),
		S(   9,  -87), S( -20,  -59), S( -30,  -19), S( -22,  -24), S( -20,  -30), S( -24,  -26), S( -25,  -25), S( -26,  -25),
	},
	{
		S(  -4,  -76), S(   7,  -15), S( -24,   -5), S( -40,    5), S(  20,    1), S(  20,    1), S(  20,    1), S(  20,    1),
		S( -41,    6), S( -15,   40), S( -43,   52), S(   2,   31), S(  20,    1), S(  20,    1), S(  20,    1), S(  20,    1),
		S( -33,   -1), S(   6,   31), S(  -6,   45), S( -37,   57), S(  20,    1), S(  20,    1), S(  20,    1), S(  20,    1),
		S( -61,   -5), S( -49,   23), S( -63,   43), S( -98,   49), S(  20,    1), S(  20,    1), S(  20,    1), S(  20,    1),
		S( -84,  -12), S( -59,    9), S( -73,   24), S(-110,   38), S(  20,    1), S(  20,    1), S(  20,    1), S(  20,    1),
		S( -24,  -28), S(  -6,  -14), S( -53,    6), S( -71,   17), S(  20,    1), S(  20,    1), S(  20,    1), S(  20,    1),
		S(  55,  -51), S(  49,  -33), S(   8,  -14), S( -18,   -5), S(  20,    1), S(  20,    1), S(  20,    1), S(  20,    1),
		S(  71,  -98), S(  68,  -65), S(  30,  -41), S(  28,  -48), S(  20,    1), S(  20,    1), S(  20,    1), S(  20,    1),
	},
};

constexpr PackedScore MOBILITY[4][28] = {
	{S( -21,  -19), S( -39,  -65), S( -15,  -33), S(  -6,   -6), S(   4,    6), S(   6,   18), S(  14,   25), S(  22,   33), S(  31,   33), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -42,  -21), S( -60, -101), S( -37,  -41), S( -29,  -17), S( -15,   -4), S(  -6,    6), S(   0,   17), S(   7,   22), S(  11,   27), S(  17,   29), S(  20,   30), S(  32,   23), S(  39,   24), S(  60,    5), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -39,  -33), S(  19,  -74), S( -31,  -55), S( -19,  -35), S( -13,  -25), S(  -5,   -9), S(  -2,   -3), S(  -7,    9), S(  -3,   13), S(   1,   19), S(   6,   26), S(   9,   35), S(  15,   41), S(  26,   43), S(  32,   42), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -44,  -37), S( -64,  -97), S(-124,  -87), S( -63, -360), S( -77, -151), S( -34,  -70), S( -25,  -48), S( -16,  -43), S(  -7,  -39), S(  -6,  -10), S(  -4,    0), S(  -1,   13), S(   2,   21), S(   6,   26), S(   9,   32), S(  12,   39), S(  14,   44), S(  14,   56), S(  15,   62), S(  15,   73), S(  24,   70), S(  30,   67), S(  33,   77), S(  53,   65), S(  58,   78), S(  96,   51), S(  75,   84), S(  23,  105)}
};

constexpr PackedScore THREAT_BY_PAWN[6] = {S(  11,  -17), S(  64,   31), S(  66,   63), S(  69,   37), S(  76,   -7), S(   0,    0)};
constexpr PackedScore THREAT_BY_KNIGHT[2][6] = {
	{S(   8,   31), S(  30,   41), S(  42,   45), S(  70,   18), S(  55,  -16), S(   0,    0)},
	{S(  -5,    9), S(  17,   41), S(  30,   32), S(  63,   35), S(  55,    5), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_BISHOP[2][6] = {
	{S(   3,   39), S(  42,   38), S(  -9,   42), S(  65,   19), S(  67,   71), S(   0,    0)},
	{S(   3,    9), S(  24,   25), S( -18,   -9), S(  43,   50), S(  48,  128), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_ROOK[2][6] = {
	{S(   2,   46), S(  20,   65), S(  29,   60), S(  20,  -44), S(  71,   19), S(   0,    0)},
	{S(  -5,    6), S(   5,   13), S(  16,    2), S(  28,  -92), S(  64,   42), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_QUEEN[2][6] = {
	{S(   7,   13), S(  24,   18), S(   8,   51), S(  23,    5), S(  10,  -68), S( 148,  -29)},
	{S(  -2,   15), S(  -1,    7), S(  -8,   22), S(  -6,    5), S( -18,  -54), S( 152,   17)}
};
constexpr PackedScore THREAT_BY_KING[6] = {S( -10,   49), S(  -9,   51), S(  14,   55), S(  10,   38), S(   0,    0), S(   0,    0)};
constexpr PackedScore PUSH_THREAT = S(  16,   22);

constexpr PackedScore ISOLATED_PAWN[8] = {S( -11,   -2), S(  -5,  -11), S( -13,  -10), S(  -9,  -17), S( -11,  -16), S(  -7,  -10), S(  -1,  -12), S(  -8,   -5)};
constexpr PackedScore PAWN_PHALANX[8] = {S(   0,    0), S(   3,   -1), S(  14,    4), S(  20,   16), S(  46,   61), S( 105,  222), S(-223,  530), S(   0,    0)};
constexpr PackedScore DEFENDED_PAWN[8] = {S(   0,    0), S(   0,    0), S(  19,   11), S(  13,    8), S(  13,   19), S(  17,   60), S( 142,   59), S(   0,    0)};

constexpr PackedScore PASSED_PAWN[2][2][8] = {
	{
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -26,  -37), S( -16,   28), S( -48,  171), S(  -9,  259), S(   0,    0)},
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -12,  -51), S(  15,  -24), S(   6,   20), S(  59,   34), S(   0,    0)}
	},
	{
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -20,  -56), S(   0,  -23), S(   4,   11), S(  61,   -7), S(   0,    0)},
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -19,  -62), S(   4,  -35), S( -13,  -14), S( -16,  -42), S(   0,    0)}
	}
};
constexpr PackedScore OUR_PASSER_PROXIMITY[8] = {S(   0,    0), S(  39,   93), S( -11,   74), S(  -5,   42), S(   1,   30), S(  15,   22), S(  31,   21), S(  27,   20)};
constexpr PackedScore THEIR_PASSER_PROXIMITY[8] = {S(   0,    0), S( -36,   -8), S(  28,   -5), S(  10,   26), S(  13,   49), S(   3,   86), S(   8,   84), S(   3,   74)};

constexpr PackedScore PAWN_STORM[2][4][8] = {
	{
		{S(  27,    4), S( -56,  -69), S(  -8,   -5), S(  15,  -14), S(   5,   -2), S( -15,    4), S( -19,    6), S(   0,    0)},
		{S(  18,    5), S(   8,  -72), S(  41,  -27), S(  14,   -8), S(   0,    0), S( -24,    5), S( -17,    9), S(   0,    0)},
		{S(   2,    4), S(  40,  -70), S(  47,  -28), S(  27,  -16), S(   5,   -2), S( -16,    5), S( -21,   13), S(   0,    0)},
		{S(  -1,    1), S( 117,  -70), S(  41,   -8), S(  19,    2), S( -13,    6), S( -24,    3), S( -37,   11), S(   0,    0)}
	},
	{
		{S(   0,    0), S(   0,   -2), S( -34,  146), S(  15,  -46), S(  -7,    4), S(   0,    0), S( -25,    6), S(   0,    0)},
		{S(   0,    0), S(  -3,  -45), S(  -2,   57), S(  73,  -53), S(   3,    3), S( -25,    7), S( -18,    7), S(   0,    0)},
		{S(   0,    0), S(   7,   23), S( -90,  -84), S(  32,  -28), S(  -7,    5), S( -16,    8), S( -13,   12), S(   0,    0)},
		{S(   0,    0), S( -18,  -46), S(  82,   -2), S(  27,    5), S( -20,   12), S( -11,   -6), S(   1,    6), S(   0,    0)}
	}
};
constexpr PackedScore PAWN_SHIELD[4][8] = {
	{S(   6,    5), S(  -8,   14), S( -17,    9), S(   6,    1), S(  22,  -11), S(   4,  -34), S( -92,  -47), S(   0,    0)},
	{S(   7,    3), S(  -7,    9), S( -13,    2), S(  -3,   -1), S(  -1,   -6), S(   7,  -22), S( -76,  -37), S(   0,    0)},
	{S(  -7,    8), S(  -6,   12), S( -15,    5), S(   1,    0), S(   7,   -8), S(  14,  -18), S( -50,  -23), S(   0,    0)},
	{S(   3,    5), S(  -2,    4), S( -20,    7), S(  -9,    4), S(   3,    2), S( -16,   -1), S( -62,  -20), S(   0,    0)}
};
constexpr PackedScore SAFE_KNIGHT_CHECK = S(  88,   -4);
constexpr PackedScore SAFE_BISHOP_CHECK = S(  37,    8);
constexpr PackedScore SAFE_ROOK_CHECK = S(  68,    1);
constexpr PackedScore SAFE_QUEEN_CHECK = S(  39,    4);
constexpr PackedScore UNSAFE_KNIGHT_CHECK = S(   4,    4);
constexpr PackedScore UNSAFE_BISHOP_CHECK = S(  16,   11);
constexpr PackedScore UNSAFE_ROOK_CHECK = S(  23,    0);
constexpr PackedScore UNSAFE_QUEEN_CHECK = S(   8,    4);
constexpr PackedScore KING_ATTACKER_WEIGHT[4] = {S(  39,   -7), S(  29,   -3), S(  25,  -12), S(  15,  -18)};
constexpr PackedScore KING_ATTACKS[14] = {S(   5,   12), S(  -7,   10), S(  -5,    3), S( -12,    3), S( -16,   -2), S( -18,   -4), S( -11,   -7), S(  -5,  -13), S(  12,  -19), S(  21,   -4), S(  36,  -18), S(  27,   39), S(  51,  -14), S(  29,   32)};
constexpr PackedScore SAFETY_OFFSET = S( -15,   46);

constexpr PackedScore MINOR_BEHIND_PAWN = S(   7,   14);
constexpr PackedScore KNIGHT_OUTPOST = S(  23,   19);
constexpr PackedScore BISHOP_PAWNS[7] = {S(   0,   16), S(   2,   14), S(   0,    4), S(  -4,   -4), S(  -8,  -15), S(  -9,  -29), S( -13,  -44)};
constexpr PackedScore BISHOP_PAIR = S(  20,   67);
constexpr PackedScore ROOK_OPEN[2] = {S(  30,    2), S(  18,   -2)};

constexpr PackedScore TEMPO = S(  32,   36);

constexpr PackedScore COMPLEXITY_PAWNS = S(   0,    8);
constexpr PackedScore COMPLEXITY_PASSERS = S(   0,    1);
constexpr PackedScore COMPLEXITY_PAWNS_BOTH_SIDES = S(   0,   71);
constexpr PackedScore COMPLEXITY_PAWN_ENDGAME = S(   0,   61);
constexpr PackedScore COMPLEXITY_OFFSET = S(   0, -136);

#undef S


}