#pragma once

#include "../defs.h"

namespace eval
{

#define S(mg, eg) PackedScore(mg, eg)

constexpr PackedScore MATERIAL[6] = {S(  66,   98), S( 310,  410), S( 334,  415), S( 421,  747), S( 860, 1386), S(0, 0)};

constexpr PackedScore PSQT[6][64] = {
	{
		S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
		S(  22,   97), S(  27,   97), S(  74,   99), S(  75,   72), S(  83,   59), S(  47,   72), S(  20,   95), S(  17,   86),
		S(  52,   25), S(  64,   44), S(  82,    8), S(  52,   -4), S(  41,   -3), S(  38,    1), S(  11,   37), S(   7,   26),
		S(  22,    3), S(  13,   21), S(  30,   -6), S(  18,   -8), S(   4,   -6), S(   1,   -2), S(  -7,   22), S(  -9,   14),
		S(   8,   -9), S(   2,   16), S(  15,   -9), S(   8,   -6), S(   1,   -6), S(  -6,   -5), S( -18,   18), S( -18,   -1),
		S(  12,  -19), S(  14,    3), S(  -3,   -2), S(  -4,    2), S( -13,    2), S( -19,   -7), S( -28,    8), S( -32,   -6),
		S(  27,  -24), S(  48,   -1), S(  33,   -5), S(   2,   13), S( -15,    6), S( -13,    0), S( -21,   16), S( -24,    0),
		S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
	},
	{
		S( -74,  -63), S( -65,  -19), S( -15,  -17), S(  17,  -11), S( -30,    6), S( -67,   11), S(-106,   15), S( -89,  -31),
		S(   0,   -7), S(  28,   -2), S(  28,  -10), S(  12,   -1), S(  12,    5), S(  -2,    6), S(  -6,   20), S( -13,   12),
		S(  24,   -6), S(  12,   -4), S(  57,  -18), S(  31,    0), S(  16,    5), S(  14,    3), S(   2,    4), S(  -5,    5),
		S(  39,    3), S(  35,    6), S(  51,    2), S(  34,   12), S(  38,   11), S(  30,    5), S(  18,    3), S(   8,   18),
		S(  10,   14), S(  26,    5), S(  27,    5), S(  25,   17), S(  27,   11), S(  20,   10), S(  22,    0), S(   1,   12),
		S(   0,    0), S(  16,   -7), S(   4,  -13), S(  18,    6), S(   5,    7), S(  -4,   -7), S(  -5,   -6), S( -15,    0),
		S(   4,   11), S(  10,   -2), S(   6,   -9), S(   3,   -4), S(   3,   -6), S( -10,   -7), S( -13,   -1), S( -19,    3),
		S( -14,    7), S( -13,    4), S(  -3,   -8), S(  -4,    1), S( -11,   -4), S( -22,   -9), S( -15,   -1), S( -52,   15),
	},
	{
		S( -40,   -7), S( -34,    4), S( -11,   -5), S( -74,    9), S( -73,   14), S( -59,    4), S( -37,    8), S( -15,   11),
		S( -32,   -2), S( -51,   13), S( -14,   -1), S(  -8,   -4), S( -24,    4), S(  -4,   -4), S(  -8,   -1), S( -12,   -3),
		S(  22,   11), S(  20,    0), S(  41,    6), S(  10,    4), S(  14,   -4), S(   4,    5), S(   8,    3), S(   4,    5),
		S(   3,    5), S(  11,    7), S(  13,   11), S(  19,   14), S(  24,   17), S(  12,    6), S(   5,   10), S(  -8,    7),
		S(  20,  -10), S(   6,    7), S(   9,    5), S(  12,   12), S(  17,   10), S(   1,   12), S(  -1,    7), S(   1,    3),
		S(  19,   -8), S(  21,  -10), S(  11,   -2), S(   5,    7), S(  -3,    5), S(   4,    4), S(  11,    2), S(  -1,   -3),
		S(  25,  -13), S(  31,  -17), S(  22,  -13), S(   3,   -4), S(  -5,   -1), S(  10,  -19), S(   6,  -15), S(  20,   -5),
		S(  36,  -29), S(  21,  -11), S(  -3,    6), S(  14,   -8), S(  -1,   -5), S(   3,    5), S(  14,    1), S(  11,   -6),
	},
	{
		S(  15,    9), S( -24,   31), S( -11,   27), S( -21,   20), S( -44,   34), S( -33,   34), S( -17,   25), S( -16,   25),
		S(  39,   -3), S(  38,    6), S(  25,   10), S(   7,   13), S(  19,   14), S(   2,   25), S(  -2,   22), S(  -6,   18),
		S(  21,   -4), S(  58,   -6), S(  43,   -6), S(  26,    4), S(   6,   10), S(   3,   18), S(  15,   13), S( -11,   19),
		S(  10,    2), S(  14,    7), S(  23,    2), S(  16,    2), S(   6,   10), S(   9,   13), S(   8,   13), S( -10,   19),
		S(  -7,   -2), S(  19,    1), S(   0,    5), S(   9,    2), S(  -3,    5), S(  -7,    8), S( -10,    9), S( -16,    9),
		S(   5,  -23), S(  22,  -25), S(   1,  -15), S(   2,  -14), S( -13,   -6), S( -16,  -10), S( -15,  -10), S( -21,   -6),
		S( -13,  -27), S(  20,  -34), S(   6,  -24), S(   0,  -21), S(  -6,  -18), S(  -8,  -15), S( -17,  -12), S( -22,  -15),
		S( -20,  -21), S( -13,  -11), S(  -3,  -17), S(   4,  -24), S(  -4,  -21), S( -12,  -14), S( -11,  -19), S( -12,  -13),
	},
	{
		S(   6,  -23), S(  58,  -53), S(  -5,   15), S( -16,   14), S(   2,   -3), S( -33,   21), S( -55,   15), S( -27,    0),
		S(  47,   -8), S(   4,    5), S(   9,   22), S( -26,   56), S( -21,   42), S(  -7,   17), S( -11,   -2), S(   0,   -5),
		S(  17,    5), S(  22,    3), S(   6,   26), S(  -1,   36), S(   3,   30), S(   4,   23), S(   2,    1), S(  15,   -2),
		S(  14,   17), S(  11,   38), S(  10,   19), S( -10,   39), S(  -6,   35), S(   8,    9), S(   5,   18), S(   2,   13),
		S(  13,    5), S(  21,   12), S(   5,   20), S(   2,   28), S(  -6,   26), S(  -2,   19), S(   3,   19), S(  -1,   12),
		S(  12,  -26), S(  14,  -11), S(   4,    0), S(  -7,   16), S(  -7,    7), S(  -8,   10), S(   2,   -4), S(   2,   -9),
		S(  12,  -60), S(  16,  -72), S(   9,  -47), S(   4,  -14), S(   1,  -10), S(   2,  -25), S(   1,  -29), S(   9,  -39),
		S(   0,  -53), S( -17,  -52), S( -20,  -24), S(  -8,  -20), S(  -9,  -16), S( -13,  -13), S( -16,  -20), S( -15,  -19),
	},
	{
		S(  65,  -62), S(  29,   -6), S(   6,   -2), S(   9,   -8), S(   7,   -4), S(   7,   -4), S(   7,   -4), S(   7,   -4),
		S( -99,   43), S(  11,   40), S(  10,   35), S(  89,    0), S(   7,   -4), S(   7,   -4), S(   7,   -4), S(   7,   -4),
		S( -77,   31), S(  31,   28), S(  60,   17), S(  41,   13), S(   7,   -4), S(   7,   -4), S(   7,   -4), S(   7,   -4),
		S(-115,   23), S( -30,   18), S( -22,   18), S( -27,    7), S(   7,   -4), S(   7,   -4), S(   7,   -4), S(   7,   -4),
		S(-133,   17), S( -44,   12), S( -21,    7), S( -31,    4), S(   7,   -4), S(   7,   -4), S(   7,   -4), S(   7,   -4),
		S( -68,    8), S(   1,    0), S( -12,    3), S(  -4,   -2), S(   7,   -4), S(   7,   -4), S(   7,   -4), S(   7,   -4),
		S(   8,   -8), S(  32,   -6), S(  11,   -1), S(   2,   -5), S(   7,   -4), S(   7,   -4), S(   7,   -4), S(   7,   -4),
		S(  13,  -39), S(  21,  -14), S(  -9,    0), S(   0,  -18), S(   7,   -4), S(   7,   -4), S(   7,   -4), S(   7,   -4),
	},
};

constexpr PackedScore MOBILITY[4][28] = {
	{S( -15,  -14), S( -43,  -68), S( -18,  -34), S(  -8,   -7), S(   3,    6), S(   6,   18), S(  15,   26), S(  24,   33), S(  32,   32), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -17,  -29), S( -55,  -94), S( -30,  -39), S( -24,  -16), S( -11,   -4), S(  -3,    5), S(   2,   16), S(   7,   21), S(  10,   26), S(  15,   27), S(  15,   30), S(  28,   20), S(  24,   25), S(  45,    8), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -31,  -36), S(  11,  -75), S( -27,  -45), S( -17,  -29), S( -11,  -22), S(  -5,   -7), S(  -1,   -2), S(  -7,    9), S(  -1,   12), S(   2,   18), S(   7,   24), S(   9,   32), S(  13,   37), S(  19,   40), S(  25,   34), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -43,   25), S( -66,  -66), S(-120,  -48), S( -81, -273), S( -85,  -91), S( -40,  -33), S( -30,  -11), S( -22,   -8), S( -15,   -6), S( -13,   20), S( -11,   29), S(  -8,   39), S(  -5,   45), S(  -1,   48), S(   2,   51), S(   5,   54), S(   7,   56), S(   7,   60), S(   8,   62), S(   9,   63), S(  18,   54), S(  26,   38), S(  31,   35), S(  58,    4), S(  69,   -2), S( 107,  -38), S( 123,  -59), S(  62,  -50)}
};

constexpr PackedScore THREAT_BY_PAWN[6] = {S(   8,  -16), S(  67,   32), S(  68,   63), S(  84,   27), S(  77,  -14), S(   0,    0)};
constexpr PackedScore THREAT_BY_KNIGHT[2][6] = {
	{S(   7,   30), S(  32,   30), S(  38,   42), S(  79,    6), S(  46,  -26), S(   0,    0)},
	{S(  -4,   12), S(  14,   48), S(  32,   34), S(  65,   31), S(  56,   -7), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_BISHOP[2][6] = {
	{S(   4,   37), S(  51,   27), S(   1,   35), S(  79,    8), S(  72,   50), S(   0,    0)},
	{S(   1,   10), S(  23,   25), S( -14,    7), S(  46,   45), S(  52,  132), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_ROOK[2][6] = {
	{S(  -1,   46), S(  30,   55), S(  29,   54), S(  21,  -45), S(  76,   -3), S(   0,    0)},
	{S(  -6,   12), S(   5,   19), S(  17,    6), S(  15,  -75), S(  60,   52), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_QUEEN[2][6] = {
	{S(  11,    7), S(  36,   14), S(  18,   49), S(  27,   -5), S(  11,  -67), S( 125,  -17)},
	{S(   0,   14), S(   1,    9), S(  -4,   24), S(  -4,    4), S( -20,  -66), S( 120,   37)}
};
constexpr PackedScore THREAT_BY_KING[6] = {S( -19,   44), S(  33,   42), S(  36,   44), S( 107,    4), S(   0,    0), S(   0,    0)};
constexpr PackedScore PUSH_THREAT = S(  19,   18);

constexpr PackedScore ISOLATED_PAWN[8] = {S(  -6,    8), S(  -2,  -14), S( -10,   -5), S(  -8,  -14), S( -10,  -12), S(  -6,   -4), S(  -1,  -11), S( -11,    9)};
constexpr PackedScore PAWN_PHALANX[8] = {S(   0,    0), S(   3,   -2), S(  14,    5), S(  20,   15), S(  49,   58), S( 122,  191), S(-114,  422), S(   0,    0)};
constexpr PackedScore DEFENDED_PAWN[8] = {S(   0,    0), S(   0,    0), S(  20,   10), S(  14,    8), S(  15,   17), S(  24,   54), S( 157,   51), S(   0,    0)};

constexpr PackedScore PASSED_PAWN[2][2][8] = {
	{
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -28,  -43), S( -14,   20), S( -33,  144), S(  13,  223), S(   0,    0)},
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -15,  -55), S(  16,  -28), S(  19,    8), S(  95,   19), S(   0,    0)}
	},
	{
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -24,  -60), S(   1,  -26), S(  20,   -2), S(  93,  -16), S(   0,    0)},
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -27,  -65), S(   2,  -38), S(  -1,  -28), S(  22,  -55), S(   0,    0)}
	}
};
constexpr PackedScore OUR_PASSER_PROXIMITY[8] = {S(   0,    0), S(   5,   88), S( -10,   64), S(   0,   36), S(   4,   24), S(  10,   16), S(  19,   18), S(  13,   16)};
constexpr PackedScore THEIR_PASSER_PROXIMITY[8] = {S(   0,    0), S( -74,   23), S(  15,    3), S(   8,   30), S(  12,   50), S(   6,   82), S(  11,   82), S(   9,   73)};

constexpr PackedScore PAWN_STORM[3][8] = {
	{S(  40,  -30), S(  18,  -18), S(  13,   -1), S(   8,    0), S(   3,    3), S(  -1,    7), S(   0,    8), S(  11,  -13)},
	{S(   0,    0), S(   2,  -20), S(  12,    7), S(   2,    1), S(  -4,    5), S(  -7,   12), S(  -6,   13), S(  10,   -7)},
	{S(  -2,   -1), S(  -9,    5), S(   1,   10), S(   1,    9), S(   3,    9), S(   3,   11), S(   4,   10), S(  -6,   -5)}
};
constexpr PackedScore PAWN_SHIELD[3][8] = {
	{S(  16,  -17), S(   1,  -10), S(  -4,  -11), S(  -7,   -9), S(   5,  -11), S(  21,  -24), S(  34,  -19), S(  -6,    5)},
	{S(   0,    0), S(  -7,   -2), S( -11,   -2), S(   0,   -2), S(  13,   -6), S(  35,  -24), S(  59,  -29), S(  11,    5)},
	{S(  -5,   -6), S(  -4,   -4), S(   0,   -5), S(   2,   -1), S(   4,    1), S(   3,   -4), S(  13,   -6), S(  -5,    7)}
};
constexpr PackedScore SAFE_KNIGHT_CHECK = S(  80,   -1);
constexpr PackedScore SAFE_BISHOP_CHECK = S(  19,   12);
constexpr PackedScore SAFE_ROOK_CHECK = S(  54,    1);
constexpr PackedScore SAFE_QUEEN_CHECK = S(  20,   17);
constexpr PackedScore KING_ATTACKER_WEIGHT[4] = {S(  20,   -3), S(  13,   -2), S(  16,  -17), S(   5,    1)};
constexpr PackedScore KING_ATTACKS[14] = {S( -70,   35), S( -77,   35), S( -83,   33), S( -84,   38), S( -80,   34), S( -68,   28), S( -47,   18), S( -22,    4), S(  23,  -18), S(  51,  -27), S(  88,  -46), S( 113,  -34), S( 149, -129), S( 111,   19)};
constexpr PackedScore WEAK_KING_RING[9] = {S( -70,   26), S( -67,   16), S( -54,   11), S( -32,    6), S(  -2,   -2), S(  26,   -9), S(  39,  -14), S(  76,  -18), S(  86,  -19)};

constexpr PackedScore KNIGHT_OUTPOST = S(  26,   18);
constexpr PackedScore BISHOP_PAWNS[7] = {S(   6,   24), S(   8,   20), S(   5,   12), S(   1,    4), S(  -4,   -5), S(  -6,  -18), S( -12,  -32)};
constexpr PackedScore BISHOP_PAIR = S(  21,   64);
constexpr PackedScore ROOK_OPEN[2] = {S(  25,    5), S(  16,    4)};

constexpr PackedScore TEMPO = S(  31,   34);

#undef S


}
