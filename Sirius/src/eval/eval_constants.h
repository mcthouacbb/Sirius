#pragma once

#include "../defs.h"

namespace eval
{

// clang-format off
#define S(mg, eg) ScorePair(mg, eg)

constexpr ScorePair MATERIAL[6] = {S(  77,  130), S( 351,  402), S( 378,  391), S( 448,  776), S( 881, 1541), S(0, 0)};

constexpr ScorePair PSQT[6][64] = {
    {
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  88,   65), S(  18,   58), S(   8,   93), S(  31,  109), S(  37,   57), S(  86,   53), S(  67,   74), S(  81,   61),
        S( -11,   -1), S(   3,    8), S(  14,  -35), S(  12,  -22), S( -15,  -22), S(  26,  -39), S(   1,   -3), S(   2,  -14),
        S(  -5,   16), S(   9,   20), S(   5,  -12), S(   8,  -23), S(   4,  -14), S(   7,   -8), S(   5,   19), S( -12,    5),
        S( -17,    0), S(  -2,    7), S(  19,  -28), S(  15,   -7), S(  14,  -13), S(   6,   -6), S(  -6,   16), S( -21,   -1),
        S( -18,    4), S(  19,   12), S(   3,    2), S(   5,    3), S(  -4,    1), S(  -3,   -2), S(  -6,   13), S( -26,   -3),
        S( -11,   -4), S(  20,    5), S(  26,    1), S(   0,    1), S(  -3,   -5), S(  -6,    2), S(   1,   12), S( -23,   -2),
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
    },
    {
        S( -55,  -69), S(-124,   39), S( -49,   26), S(  -3,   15), S( -27,   13), S(-100,   35), S( -80,   10), S(-128,  -44),
        S( -54,   17), S(  44,    6), S(  24,    5), S(  43,   20), S(  -1,   35), S(  24,    7), S(   8,   -9), S(  -9,   -9),
        S(   0,   -1), S(  21,    9), S(  34,   33), S(  16,   36), S(  26,   22), S(  26,   10), S(  20,    8), S( -14,   -6),
        S(  33,   -6), S(  21,    4), S(  33,   20), S(  22,   31), S(  30,   27), S(  15,   21), S(  22,    0), S(  23,   -8),
        S(  18,    1), S(  27,    7), S(  24,   22), S(  20,   24), S(  14,   23), S(  17,   14), S(  11,   -1), S(   5,    6),
        S(  -6,  -21), S(  15,   -2), S(  12,    4), S(   7,    9), S(  16,   11), S(   4,    2), S(  10,   -6), S(  -6,  -21),
        S(   4,  -11), S(   5,    0), S(   7,  -19), S(   7,    2), S(   1,   -5), S(  -2,  -16), S(  -8,   -8), S( -27,  -26),
        S(  21,  -32), S( -10,  -36), S(   1,  -26), S(  26,  -20), S(  -4,  -19), S(  -7,  -15), S( -13,  -33), S( -30,  -78),
    },
    {
        S( -37,  -18), S( -78,   30), S( -27,   22), S( -69,    3), S(   4,    3), S( -36,    6), S( -26,   15), S( -31,  -45),
        S( -35,   -4), S( -34,   27), S(  -7,   20), S( -29,   18), S( -10,   19), S(   1,   -4), S( -13,  -13), S( -13,   -9),
        S(   7,   15), S(  19,   -4), S(  13,   17), S(   8,   20), S(  -3,   27), S(   6,    4), S(  12,    0), S(   3,  -18),
        S(   4,    7), S(   6,   19), S(  29,   -9), S(  16,   28), S(  24,   17), S(  23,   18), S(  10,   15), S(  16,  -15),
        S(   9,    0), S(   2,   -8), S(   4,   26), S(  14,   18), S(  10,   41), S(  15,   18), S(   0,   18), S(   8,  -18),
        S(   4,   -9), S(  22,   12), S(   8,   -1), S(  10,   14), S(  12,    6), S(  -6,   14), S(  24,    7), S(   7,   -3),
        S(  30,  -24), S(  17,  -23), S(  18,  -13), S(   8,   -7), S(  -1,   -5), S(  14,  -30), S(   3,  -13), S(  51,  -26),
        S(  25,  -50), S(  -4,  -16), S( -11,   -8), S(  10,  -18), S(  -1,  -19), S(  -9,    1), S(  12,  -52), S( -21,   15),
    },
    {
        S(  17,   11), S(  36,    8), S(  -4,   40), S(   5,   34), S(  10,   28), S(  -4,   37), S(   0,   27), S(   1,   24),
        S(  12,   15), S(  -2,   26), S(  10,   26), S(  11,   37), S(  31,   32), S(  29,   25), S(  12,   27), S(  23,   26),
        S( -12,   17), S(  33,    6), S(  21,   21), S(  15,   17), S(  -5,   27), S(   8,   29), S(  -6,   33), S(  -9,   38),
        S( -12,   11), S( -27,   28), S(  -1,   22), S( -18,   32), S(   4,    3), S(   0,   25), S(  17,   17), S(  10,   16),
        S( -26,   -4), S( -15,   15), S( -18,   16), S( -26,   19), S( -26,   13), S( -12,   17), S( -16,   12), S(  -5,   -8),
        S( -24,  -26), S(  -9,  -18), S( -19,  -15), S(   0,  -18), S(   2,  -17), S( -12,  -13), S(  -4,  -18), S(  -4,  -31),
        S( -50,  -45), S( -10,  -36), S(  22,  -53), S(  -5,  -33), S(  12,  -36), S(   3,  -34), S(   2,  -37), S(  -6,  -39),
        S(   0,  -50), S( -23,  -31), S(  16,  -43), S(  25,  -43), S(  17,  -38), S(   9,  -29), S(  14,  -40), S(  12,  -39),
    },
    {
        S( -23,   69), S( -10,   34), S(  43,    3), S(  22,    9), S(  19,   51), S(  -5,   57), S(  23,   16), S( -45,   77),
        S(  25,   13), S(   0,   40), S(  -3,   12), S( -18,   26), S(   4,   40), S(  -2,   50), S(  23,    4), S(   4,   10),
        S(  27,  -28), S(   9,   19), S( -23,    5), S( -26,   44), S(  -3,   34), S(   4,    7), S(  13,   16), S(   5,    7),
        S(   9,  -20), S(  -3,   11), S( -19,   27), S( -38,   57), S( -25,   59), S(   1,   15), S(   0,   39), S(  17,  -17),
        S( -20,   17), S(   3,    8), S( -24,   30), S( -23,   41), S( -23,   54), S( -21,   54), S(  -3,   22), S(   7,    3),
        S(   2,  -34), S(   6,  -31), S(  -9,    2), S(  -5,   -6), S(  -6,   11), S(   1,    3), S(  14,   -7), S(   7,  -29),
        S(  15, -105), S(  30, -112), S(  10,  -51), S(   0,  -29), S(  -5,    2), S(  20,  -57), S(  16,  -36), S(   9,  -36),
        S( -33,  -13), S(  43, -170), S( -35,  -19), S(  10,  -70), S(  13,  -58), S(   3,  -35), S(   6,  -44), S(   3,  -40),
    },
    {
        S(-302,  -16), S(  55,   87), S(  83,   18), S(   7,   27), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(-228,   68), S(  21,   93), S(  80,   32), S(  46,   46), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S( 122,  -12), S( 299,  -43), S(   3,   27), S(-122,   23), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S( -33,   36), S(  -3,   66), S(-100,   46), S(-149,   22), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S( -43,   16), S( -47,   45), S( -85,   20), S(-114,    6), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(   7,  -10), S( -18,   25), S( -33,  -11), S( -69,  -20), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  47,  -20), S(  42,   -2), S(   3,  -31), S( -32,  -47), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  46,  -23), S(  54,  -21), S(  16,  -56), S(   9,  -87), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
    },
};

constexpr ScorePair MOBILITY[4][28] = {
    {S(  -4,  -22), S( -25,  -54), S( -14,  -12), S(  -5,    3), S(  -1,   13), S(   4,   21), S(  11,   23), S(  14,   25), S(  21,    6), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S( -12,  -14), S( -34,  -45), S( -20,  -16), S( -12,   -3), S(  -6,    8), S(  -5,   20), S(  -3,   25), S(  -2,   23), S(  -2,   26), S(   6,   18), S(  10,   16), S(  25,  -11), S(  23,    7), S(  41,  -51), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S( -34,  -25), S( -45,  -64), S( -15,  -34), S(  -8,  -25), S(  -3,  -15), S(   1,    1), S(   0,    6), S(   6,    8), S(   7,   13), S(   9,   17), S(  10,   24), S(   8,   32), S(  11,   35), S(   3,   38), S(  64,    3), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S(   0,   36), S( -40,   31), S( -58,  -34), S( -69, -113), S( -28,  -38), S( -18,  -68), S( -10,  -30), S( -10,    6), S(  -7,   -8), S(  -6,   12), S(  -6,   13), S(  -4,   24), S(  -2,   27), S(   2,   25), S(   2,   41), S(   6,   44), S(  -1,   50), S(   4,   43), S(  10,   29), S(   6,   39), S(  18,   20), S(  22,    1), S(  34,    6), S(  46,  -10), S(  50,   -6), S(  56,  -67), S(  16,  -29), S( -12,  -68)}
};

constexpr ScorePair THREAT_BY_PAWN[6] = {S(   1,  -11), S(  59,   29), S(  49,   65), S(  57,   52), S(  34,   60), S(   0,    0)};
constexpr ScorePair THREAT_BY_KNIGHT[2][6] = {
    {S(  11,   39), S(  18,   59), S(  40,   21), S(  77,    7), S(  28,   28), S(   0,    0)},
    {S(  -5,   13), S(  16,   53), S(  39,   15), S(  68,   42), S(  40,   62), S(   0,    0)}
};
constexpr ScorePair THREAT_BY_BISHOP[2][6] = {
    {S(   9,   36), S(  26,   43), S(  -8,   30), S(  43,   26), S(  44,   30), S(   0,    0)},
    {S(  -3,    7), S(  15,   27), S( -11,    1), S(  49,   61), S(  32,  140), S(   0,    0)}
};
constexpr ScorePair THREAT_BY_ROOK[2][6] = {
    {S(  -3,   47), S(  21,   46), S(  34,   35), S( -11,  -35), S(  54,    5), S(   0,    0)},
    {S( -14,    8), S(   3,   16), S(  17,    0), S(  16,  -91), S(  38,  130), S(   0,    0)}
};
constexpr ScorePair THREAT_BY_QUEEN[2][6] = {
    {S(   7,   26), S(  23,   26), S(  25,   43), S(  21,   -7), S(  17,  -71), S( -55,  347)},
    {S(  -2,   18), S(  -2,    7), S(  -7,   16), S(  -4,    5), S(  -3,  -43), S(  33,  156)}
};
constexpr ScorePair THREAT_BY_KING[6] = {S( 102,   -9), S(  46,   20), S( 107,   23), S(  79,    6), S(   0,    0), S(   0,    0)};
constexpr ScorePair KNIGHT_HIT_QUEEN = S(   7,    6);
constexpr ScorePair BISHOP_HIT_QUEEN = S(   9,   32);
constexpr ScorePair ROOK_HIT_QUEEN = S(  17,    0);
constexpr ScorePair PUSH_THREAT = S(  12,   22);
constexpr ScorePair RESTRICTED_SQUARES = S(   2,    1);

constexpr ScorePair ISOLATED_PAWN[8] = {S(   1,    2), S(  -5,  -21), S( -10,  -12), S( -14,  -13), S( -19,   -8), S(  -6,   -9), S(  -7,  -17), S( -12,    4)};
constexpr ScorePair DOUBLED_PAWN[8] = {S(  -7,  -83), S(   1,  -46), S( -17,  -29), S(   0,  -32), S( -14,   -8), S(  -5,  -23), S(  -9,  -43), S(  -5,  -63)};
constexpr ScorePair BACKWARDS_PAWN[8] = {S(   0,    0), S(  -3,  -22), S(   3,  -15), S(  -1,  -14), S( -27,   11), S(   4,  -12), S(   0,    0), S(   0,    0)};
constexpr ScorePair PAWN_PHALANX[8] = {S(   0,    0), S(   4,   -4), S(   9,   -5), S(  14,    5), S(  31,   33), S( 111,   91), S( 106,  119), S(   0,    0)};
constexpr ScorePair DEFENDED_PAWN[8] = {S(   0,    0), S(   0,    0), S(  15,    6), S(   9,    7), S(  19,   17), S(  28,   58), S( 177,   33), S(   0,    0)};
constexpr ScorePair CANDIDATE_PASSER[2][8] = {
    {S(   0,    0), S( -45,   -4), S( -18,    1), S(  -5,   -4), S( -10,   44), S( -20,  124), S(   0,    0), S(   0,    0)},
    {S(   0,    0), S( -14,  -13), S(   3,    7), S(  -5,   23), S(   0,   59), S( -38,  146), S(   0,    0), S(   0,    0)}
};

constexpr ScorePair PASSED_PAWN[2][2][8] = {
    {
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -41,  -27), S( -11,   24), S(   2,  157), S(  77,  209), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -14,  -51), S(   7,  -21), S(  36,   55), S( 148,   34), S(   0,    0)}
    },
    {
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -22,  -51), S(  -4,  -25), S(  18,   69), S(  37,   38), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -24,  -63), S(  21,  -56), S(  -1,   31), S( -17,   15), S(   0,    0)}
    }
};
constexpr ScorePair OUR_PASSER_PROXIMITY[8] = {S( 323,   44), S( 214,   31), S(  75,   64), S( -11,   63), S( -11,   38), S( -18,   29), S(  -5,   17), S( -27,   24)};
constexpr ScorePair THEIR_PASSER_PROXIMITY[8] = {S( -13,  -12), S(   6,   -3), S(  33,   -2), S(  27,   26), S(  15,   62), S(   6,   79), S(  23,   79), S(   7,   63)};
constexpr ScorePair PASSER_DEFENDED_PUSH[8] = {S(   0,    0), S(   0,    0), S(   0,    0), S(  13,   11), S(   8,   34), S(  54,   31), S(  39,   96), S(   0,    0)};

constexpr ScorePair PAWN_STORM[2][4][8] = {
    {
        {S(  17,   60), S( 180, -1347), S(  73, -257), S(  63,  -43), S(  13,   53), S(  -6,   61), S( -27,   64), S(   0,    0)},
        {S(  27,    5), S( 135, -328), S( 128, -202), S(  44,  -57), S(  10,   15), S( -28,   19), S(   2,    8), S(   0,    0)},
        {S(   0,   14), S(  66, -299), S(  74, -152), S(  51,  -46), S(   1,    1), S( -18,   14), S(  -9,    3), S(   0,    0)},
        {S(  -4,   -1), S( 136, -592), S( 111, -169), S(  50,  -32), S(   3,  -13), S( -37,    0), S( -35,    7), S(   0,    0)}
    },
    {
        {S(   0,    0), S(   0,    0), S(  71,   52), S(  14,   27), S( -39,   77), S( -18,   40), S( 167,  -17), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S( 114,  -33), S( -86,   49), S( -47,   68), S( -46,   63), S(  78,   25), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S( 118,   39), S(  30,   19), S( -31,   50), S(  39,   56), S(  25,   -5), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(  69,   55), S(  42,   21), S( -14,   45), S(  -8,   12), S(-148,   29), S(   0,    0)}
    }
};
constexpr ScorePair PAWN_SHIELD[4][8] = {
    {S(  70,   -6), S(   6,   25), S(  11,   16), S(  51,   -6), S(  60,   19), S(-163,   92), S(-165,   93), S(   0,    0)},
    {S(  28,   27), S( -26,   17), S(  25,    7), S(  50,  -16), S(  23,  -16), S( -29,  -25), S( -66, -146), S(   0,    0)},
    {S(  35,   35), S(  -2,   15), S(  11,    4), S(  32,  -48), S(  12,  -36), S( -60,  -16), S(-207,    4), S(   0,    0)},
    {S(  14,   13), S( -30,  -18), S(  -5,  -32), S(   1,  -45), S(  -2,  -38), S(  37,  -20), S( -89,  -15), S(   0,    0)}
};
constexpr ScorePair SAFE_KNIGHT_CHECK = S(  83,  -12);
constexpr ScorePair SAFE_BISHOP_CHECK = S(  55,    9);
constexpr ScorePair SAFE_ROOK_CHECK = S( 106,   -9);
constexpr ScorePair SAFE_QUEEN_CHECK = S(  59,   23);
constexpr ScorePair UNSAFE_KNIGHT_CHECK = S(  15,   -5);
constexpr ScorePair UNSAFE_BISHOP_CHECK = S(  30,   14);
constexpr ScorePair UNSAFE_ROOK_CHECK = S(  47,   -6);
constexpr ScorePair UNSAFE_QUEEN_CHECK = S(  19,   16);
constexpr ScorePair QUEENLESS_ATTACK = S( -31,  236);
constexpr ScorePair KING_ATTACKER_WEIGHT[4] = {S(  38,  -23), S(  21,   10), S(  24,  -23), S(   2,  -48)};
constexpr ScorePair KING_ATTACKS = S(   3,    2);
constexpr ScorePair WEAK_KING_RING = S(   5,    3);
constexpr ScorePair KING_FLANK_ATTACKS[2] = {S(  12,  -13), S(   6,   -1)};
constexpr ScorePair KING_FLANK_DEFENSES[2] = {S(  -7,   -1), S(  -3,   -2)};
constexpr ScorePair SAFETY_OFFSET = S(  53,   16);

constexpr ScorePair MINOR_BEHIND_PAWN = S(   2,   13);
constexpr ScorePair KNIGHT_OUTPOST = S(  19,   19);
constexpr ScorePair BISHOP_PAWNS[7] = {S(   9,    2), S(   4,   26), S(   6,   15), S(   2,    3), S(  -1,  -10), S(  -6,  -13), S( -10,  -22)};
constexpr ScorePair BISHOP_PAIR = S(  16,   72);
constexpr ScorePair LONG_DIAG_BISHOP = S(  12,    7);
constexpr ScorePair ROOK_OPEN[2] = {S(  26,   -2), S(  22,    1)};

constexpr ScorePair TEMPO = S(  19,   13);

constexpr ScorePair COMPLEXITY_PAWNS = S(   0,   16);
constexpr ScorePair COMPLEXITY_PAWNS_BOTH_SIDES = S(   0,  159);
constexpr ScorePair COMPLEXITY_PAWN_ENDGAME = S(   0,  232);
constexpr ScorePair COMPLEXITY_OFFSET = S(   0, -275);

#undef S
// clang-format on

}
