#pragma once

#include "../defs.h"

namespace eval
{

#define S(mg, eg) PackedScore(mg, eg)

constexpr PackedScore MATERIAL[6] = {S(  61,  132), S( 290,  444), S( 311,  453), S( 384,  812), S( 805, 1497), S(0, 0)};

constexpr PackedScore PSQT[6][64] = {
	{
		S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
		S(  67,   75), S(  30,   91), S(  28,   96), S(  53,   75), S(  62,   68), S(  30,   95), S(  29,  106), S(  65,   83),
		S(   9,   12), S(   0,   42), S(  12,    5), S(  29,  -28), S(  16,  -21), S(   4,    1), S( -17,   34), S(  -3,   18),
		S(  16,    9), S(   5,   14), S(   7,   -9), S(  12,  -24), S(   0,  -23), S(  -4,   -9), S(  -9,   14), S( -13,   12),
		S(   9,    0), S(   3,   17), S(   7,  -14), S(  15,  -15), S(   9,  -14), S(  -3,   -8), S( -15,   16), S( -14,    2),
		S(   2,   -2), S(  10,   13), S(  16,   -4), S(  -1,    1), S(  -7,    0), S( -12,   -4), S( -23,   13), S( -26,    0),
		S(  16,   -3), S(  29,    7), S(  15,   -8), S(   6,    6), S(  -7,   -1), S(  -6,   -4), S( -15,   17), S( -17,    4),
		S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
	},
	{
		S( -75,  -97), S( -74,  -29), S( -29,  -16), S(  10,  -13), S( -32,    3), S( -67,    7), S(-104,    8), S( -87,  -55),
		S( -10,  -16), S(  23,   -1), S(  29,   -6), S(   7,    3), S(   9,    6), S(   2,   12), S(  -4,   18), S( -10,    2),
		S(  14,   -9), S(   5,    1), S(  49,  -11), S(  37,    7), S(  22,   14), S(  12,   12), S(   2,    6), S(  -8,    4),
		S(  31,    1), S(  31,    9), S(  41,   12), S(  30,   18), S(  24,   24), S(  31,   12), S(  19,    4), S(   9,   12),
		S(  10,   15), S(  16,   15), S(  23,   16), S(  18,   27), S(  25,   18), S(  19,   18), S(  21,    3), S(   5,    6),
		S(  12,    0), S(  17,    1), S(  16,   -2), S(  13,   15), S(   6,   14), S(   1,    0), S(   2,   -5), S( -11,   -4),
		S(   4,    1), S(  12,   -8), S(   5,   -5), S(   9,    0), S(   3,    0), S(  -6,   -2), S(  -8,   -5), S( -20,   -6),
		S( -13,  -17), S( -14,   -5), S(  -6,   -9), S(   1,    2), S(  -6,    0), S( -22,   -7), S( -16,  -11), S( -49,   -6),
	},
	{
		S( -44,  -14), S( -30,    4), S(  -5,   -2), S( -73,   12), S( -63,   16), S( -49,    2), S( -24,    7), S( -33,   10),
		S( -21,   -7), S( -51,    7), S(  -9,    1), S(  -1,   -2), S( -18,    9), S(   4,    0), S( -15,   -3), S(  -4,   -4),
		S(  15,   11), S(  14,    3), S(  27,    4), S(  13,    8), S(  19,    4), S(  -1,    1), S(  10,    8), S(   5,    3),
		S(  -8,    4), S(   7,    9), S(  10,   14), S(  19,   17), S(  22,   24), S(  18,    9), S(   5,   13), S(  -7,    5),
		S(  17,   -6), S(   2,    9), S(   8,   11), S(  11,   16), S(  20,   13), S(   1,   17), S(   0,    8), S(   1,    0),
		S(  20,  -11), S(  25,   -5), S(   6,   -4), S(   9,   12), S(   0,    8), S(   1,   -1), S(  16,    3), S(   2,   -7),
		S(  27,  -21), S(  20,  -22), S(  26,  -10), S(   5,   -3), S(  -2,    1), S(  10,  -16), S(   2,  -24), S(  13,  -11),
		S(  25,  -40), S(  16,  -16), S( -10,    2), S(  15,   -4), S(   0,   -3), S(  -2,    3), S(  12,   -3), S(   5,  -19),
	},
	{
		S(  14,    7), S( -24,   34), S( -31,   31), S( -11,   17), S( -26,   26), S( -23,   31), S(  -8,   22), S(  -4,   20),
		S(  32,    0), S(  31,    8), S(  11,   15), S(   7,   15), S(  17,   17), S(   3,   29), S(   0,   24), S(   3,   16),
		S(   8,    1), S(  33,    2), S(  16,    3), S(  25,    1), S(   2,   11), S(   0,   19), S(  11,   15), S(  -9,   18),
		S(   4,    5), S(   3,   12), S(  10,    7), S(   9,    0), S(   3,    9), S(   6,   13), S(   6,   13), S(  -6,   14),
		S(  -9,   -1), S(  13,    2), S(  -9,    7), S(   6,    0), S(  -4,    3), S(  -8,    6), S(  -9,    6), S( -12,    6),
		S(   9,  -24), S(  24,  -25), S(   0,  -16), S(   2,  -18), S( -10,  -10), S( -12,  -10), S( -11,  -11), S( -17,   -9),
		S(  -6,  -28), S(  23,  -37), S(   3,  -24), S(   3,  -22), S(  -3,  -19), S(  -3,  -16), S( -13,  -15), S( -16,  -20),
		S(  -7,  -34), S(  -4,  -17), S(   0,  -20), S(   9,  -27), S(   2,  -24), S(  -5,  -16), S(  -5,  -20), S(  -7,  -18),
	},
	{
		S(  -1,  -10), S(  36,  -34), S( -25,   31), S( -20,   21), S(   9,   -9), S( -24,   14), S( -40,    9), S( -29,   11),
		S(  40,    3), S(   2,   15), S( -17,   25), S( -30,   52), S( -20,   37), S(  -4,    8), S(  -2,  -11), S(   7,   -8),
		S(  14,    7), S(   9,   12), S(   0,   19), S( -10,   25), S(   2,   17), S(   8,    9), S(   6,   -7), S(  18,  -11),
		S(   9,   13), S(   5,   29), S(   8,    9), S( -11,   30), S(  -7,   28), S(   8,    5), S(   6,   12), S(   5,    4),
		S(  11,    5), S(  14,   10), S(   0,   14), S(   2,   24), S(  -6,   32), S(  -3,   21), S(   3,   16), S(   1,    6),
		S(  17,  -24), S(  15,   -6), S(   5,    3), S(  -6,   13), S(  -5,   11), S(  -3,   13), S(   9,   -9), S(  10,  -20),
		S(   9,  -47), S(  12,  -65), S(   8,  -40), S(   5,  -11), S(   3,   -5), S(   4,  -19), S(   4,  -23), S(   9,  -37),
		S(   5,  -49), S( -14,  -47), S( -20,  -23), S(  -4,  -23), S(  -4,  -18), S(  -7,  -17), S( -11,  -19), S( -12,  -16),
	},
	{
		S( -41,  -50), S( -45,   14), S( -79,    9), S( -70,    7), S(   9,   -6), S(   9,   -6), S(   9,   -6), S(   9,   -6),
		S( -75,   34), S( -26,   62), S( -36,   51), S(  10,   22), S(   9,   -6), S(   9,   -6), S(   9,   -6), S(   9,   -6),
		S(  12,   16), S(  32,   50), S(  42,   40), S(  16,   40), S(   9,   -6), S(   9,   -6), S(   9,   -6), S(   9,   -6),
		S( -28,   15), S(  -8,   43), S(  -4,   35), S( -26,   30), S(   9,   -6), S(   9,   -6), S(   9,   -6), S(   9,   -6),
		S( -44,    4), S( -17,   27), S(  -3,   15), S( -25,   13), S(   9,   -6), S(   9,   -6), S(   9,   -6), S(   9,   -6),
		S(  -8,  -14), S(  15,    6), S(   3,   -4), S(  -5,   -6), S(   9,   -6), S(   9,   -6), S(   9,   -6), S(   9,   -6),
		S(  27,  -31), S(  28,   -7), S(  10,  -16), S(  -4,  -20), S(   9,   -6), S(   9,   -6), S(   9,   -6), S(   9,   -6),
		S(  17,  -61), S(  22,  -26), S(   3,  -29), S(  11,  -48), S(   9,   -6), S(   9,   -6), S(   9,   -6), S(   9,   -6),
	},
};

constexpr PackedScore MOBILITY[4][28] = {
	{S( -16,  -28), S( -37,  -48), S( -16,  -17), S(  -8,    0), S(   3,    8), S(   7,   19), S(  15,   22), S(  24,   26), S(  35,   19), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -26,  -44), S( -35,  -59), S( -21,  -30), S( -14,  -12), S(  -4,   -3), S(   1,    8), S(   4,   16), S(   8,   19), S(   9,   22), S(  12,   22), S(  14,   21), S(  20,   15), S(  17,   23), S(  27,   -1), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -25,  -52), S( -31,  -75), S( -18,  -49), S(  -5,  -28), S(  -2,  -13), S(  -4,   -2), S(  -3,    4), S(   1,   10), S(   3,   14), S(   7,   19), S(   7,   27), S(   9,   33), S(  13,   37), S(  17,   37), S(  26,   34), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -34,   20), S( -64,  -71), S( -91, -107), S( -31, -199), S( -28,  -72), S( -22,  -10), S( -13,  -21), S( -10,    0), S( -10,   19), S(  -7,   28), S(  -4,   31), S(  -1,   33), S(   0,   44), S(   4,   42), S(   5,   46), S(   7,   46), S(   7,   49), S(  11,   48), S(   9,   50), S(  17,   41), S(  23,   32), S(  33,   15), S(  36,   15), S(  46,   -3), S(  66,  -22), S(  49,  -17), S(  34,  -18), S( -28,  -19)}
};

constexpr PackedScore THREAT_BY_PAWN[6] = {S(   5,  -20), S(  65,   30), S(  60,   61), S(  77,   28), S(  74,   -7), S(   0,    0)};
constexpr PackedScore THREAT_BY_KNIGHT[2][6] = {
	{S(   7,   29), S(  21,   31), S(  40,   45), S(  73,   15), S(  56,  -26), S(   0,    0)},
	{S(  -7,    8), S(  10,   29), S(  28,   29), S(  64,   33), S(  56,    1), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_BISHOP[2][6] = {
	{S(  -2,   36), S(  39,   34), S(  -9,   30), S(  68,   18), S(  67,   60), S(   0,    0)},
	{S(  -4,    6), S(  18,   22), S( -22,  -21), S(  44,   47), S(  45,  122), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_ROOK[2][6] = {
	{S(   0,   43), S(  17,   62), S(  26,   57), S(   9,  -42), S(  73,   15), S(   0,    0)},
	{S(  -7,    7), S(   2,   15), S(  13,    1), S(  10,  -90), S(  64,   48), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_QUEEN[2][6] = {
	{S(   6,   10), S(  23,   20), S(   8,   50), S(  18,   17), S(   9,  -49), S(  90,   62)},
	{S(  -2,   10), S(   0,    5), S(  -8,   17), S(  -6,    3), S( -17,  -72), S( 113,   71)}
};
constexpr PackedScore THREAT_BY_KING[6] = {S( -25,   49), S(   5,   52), S(  32,   44), S(  78,    8), S(   0,    0), S(   0,    0)};
constexpr PackedScore PUSH_THREAT = S(  15,   20);

constexpr PackedScore ISOLATED_PAWN[8] = {S(  -8,    6), S(  -4,  -16), S( -12,   -9), S( -11,  -16), S( -11,  -16), S(  -7,   -8), S(  -1,  -15), S( -10,    7)};
constexpr PackedScore DOUBLED_PAWN[8] = {S(   1,  -63), S(  13,  -38), S(   1,  -29), S(   0,  -21), S(  -3,  -14), S( -12,  -20), S(   7,  -42), S(   8,  -76)};
constexpr PackedScore BACKWARDS_PAWN[8] = {S(   0,    0), S(  -7,  -14), S(  -2,  -14), S(  -9,  -12), S(   2,  -16), S(  29,   -7), S(   0,    0), S(   0,    0)};
constexpr PackedScore PAWN_PHALANX[8] = {S(   0,    0), S(   4,   -4), S(  11,   -2), S(  20,    7), S(  43,   39), S(  95,  227), S( -30,  365), S(   0,    0)};
constexpr PackedScore DEFENDED_PAWN[8] = {S(   0,    0), S(   0,    0), S(  19,    7), S(  11,    7), S(  16,   21), S(  28,   63), S( 135,   75), S(   0,    0)};
constexpr PackedScore CANDIDATE_PASSER[2][8] = {
	{S(   0,    0), S( -38,  -12), S( -20,   -7), S(   0,   29), S(  29,   56), S(  62,   85), S(   0,    0), S(   0,    0)},
	{S(   0,    0), S( -21,   -6), S( -10,   14), S(  -5,   31), S(  20,   44), S(  39,  149), S(   0,    0), S(   0,    0)}
};

constexpr PackedScore PASSED_PAWN[2][2][8] = {
	{
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -39,  -40), S( -17,   26), S(  -3,  153), S(  42,  231), S(   0,    0)},
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -26,  -53), S(   7,  -21), S(  31,   19), S(  57,   35), S(   0,    0)}
	},
	{
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -30,  -56), S(   1,  -23), S(  34,    8), S(  67,   -1), S(   0,    0)},
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -31,  -62), S(   2,  -34), S(  12,  -13), S(  -8,  -14), S(   0,    0)}
	}
};
constexpr PackedScore OUR_PASSER_PROXIMITY[8] = {S(   0,    0), S(  35,   85), S(   5,   69), S(   3,   43), S(   6,   31), S(  13,   23), S(  21,   21), S(  17,   19)};
constexpr PackedScore THEIR_PASSER_PROXIMITY[8] = {S(   0,    0), S( -41,    7), S(  22,    0), S(  16,   27), S(  20,   47), S(  14,   79), S(  16,   80), S(  16,   70)};

constexpr PackedScore PAWN_STORM[2][4][8] = {
	{
		{S(  15,   14), S(-131,  -49), S( -10,   -7), S(   5,  -13), S(   0,    0), S(  -5,    9), S(  -3,    8), S(   0,    0)},
		{S(  12,    3), S( -19,  -98), S(  41,  -41), S(   6,  -11), S(   2,   -5), S( -10,    7), S(  -6,    9), S(   0,    0)},
		{S(  -3,    6), S(  58,  -97), S(  62,  -44), S(  19,  -18), S(   3,   -1), S(  -6,    6), S(  -8,   12), S(   0,    0)},
		{S(   9,   -7), S( 114,  -86), S(  34,  -21), S(  13,   -1), S(  -2,    4), S(  -8,    0), S(  -3,    1), S(   0,    0)}
	},
	{
		{S(   0,    0), S(  -3,  -28), S( -29,  118), S(  12,  -52), S(  -3,    9), S(  -1,    5), S(  -5,    9), S(   0,    0)},
		{S(   0,    0), S(   8,  -91), S(   0,   77), S(  52,  -41), S(   1,    3), S(  -7,    6), S(  -7,    8), S(   0,    0)},
		{S(   0,    0), S(  -6,   26), S( -69, -114), S(  20,  -28), S(   2,    4), S(   0,    5), S(  -8,   11), S(   0,    0)},
		{S(   0,    0), S(  -5,  -47), S(  65,   -6), S(  19,    0), S(   1,    8), S(   1,   -9), S(   0,    5), S(   0,    0)}
	}
};
constexpr PackedScore PAWN_SHIELD[4][8] = {
	{S(  16,    1), S(  -8,   25), S( -15,   17), S(  -2,    8), S(   4,    2), S( -40,  -24), S( -76,  -37), S(   0,    0)},
	{S(  17,    0), S( -13,   10), S( -10,    8), S(  11,   -3), S(   9,  -11), S( -14,  -17), S( -53,  -31), S(   0,    0)},
	{S(   5,    7), S( -16,    8), S(  16,    4), S(   2,   -1), S(  -1,   -2), S(   4,  -19), S( -18,  -38), S(   0,    0)},
	{S(  14,   -4), S(   5,   -3), S(  -3,    0), S(   1,   -6), S(   8,   -9), S(  29,  -22), S( -14,  -22), S(   0,    0)}
};
constexpr PackedScore SAFE_KNIGHT_CHECK = S(  91,   -2);
constexpr PackedScore SAFE_BISHOP_CHECK = S(  18,   22);
constexpr PackedScore SAFE_ROOK_CHECK = S(  72,    9);
constexpr PackedScore SAFE_QUEEN_CHECK = S(  28,   31);
constexpr PackedScore UNSAFE_KNIGHT_CHECK = S(  10,    0);
constexpr PackedScore UNSAFE_BISHOP_CHECK = S(  15,   10);
constexpr PackedScore UNSAFE_ROOK_CHECK = S(  21,   -1);
constexpr PackedScore UNSAFE_QUEEN_CHECK = S(   6,    9);
constexpr PackedScore KING_ATTACKER_WEIGHT[4] = {S(  14,   -5), S(   9,   -4), S(  13,  -18), S(   0,    0)};
constexpr PackedScore KING_ATTACKS[25] = {S(-118,   64), S(-117,   43), S(-112,   40), S(-110,   37), S(-104,   30), S( -95,   24), S( -87,   19), S( -74,   15), S( -61,   13), S( -48,   10), S( -38,    7), S( -30,    9), S( -12,    4), S(  -2,    1), S(   7,    3), S(  19,    0), S(  35,   -3), S(  68,  -18), S(  81,  -29), S(  91,  -32), S( 107,  -42), S( 131,  -51), S( 154,  -52), S( 155,  -64), S( 168,  -31)};

constexpr PackedScore MINOR_BEHIND_PAWN = S(   6,   13);
constexpr PackedScore KNIGHT_OUTPOST = S(  23,   17);
constexpr PackedScore BISHOP_PAWNS[7] = {S(   4,   20), S(   5,   19), S(   4,   12), S(   1,    4), S(  -3,   -5), S(  -3,  -18), S(  -7,  -31)};
constexpr PackedScore BISHOP_PAIR = S(  20,   63);
constexpr PackedScore LONG_DIAG_BISHOP = S(  15,    8);
constexpr PackedScore ROOK_OPEN[2] = {S(  26,    3), S(  14,    3)};

constexpr PackedScore TEMPO = S(  32,   36);

constexpr PackedScore COMPLEXITY_PAWNS = S(   0,    8);
constexpr PackedScore COMPLEXITY_PASSERS = S(   0,    1);
constexpr PackedScore COMPLEXITY_PAWNS_BOTH_SIDES = S(   0,   69);
constexpr PackedScore COMPLEXITY_PAWN_ENDGAME = S(   0,   65);
constexpr PackedScore COMPLEXITY_OFFSET = S(   0, -130);

#undef S


}