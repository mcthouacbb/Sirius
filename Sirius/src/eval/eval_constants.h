#pragma once

#include "../defs.h"

namespace eval
{

#define S(mg, eg) PackedScore(mg, eg)

constexpr PackedScore MATERIAL[6] = {S(  51,  102), S( 252,  453), S( 273,  462), S( 329,  828), S( 746, 1464), S(0, 0)};

constexpr PackedScore PSQT[6][64] = {
	{
		S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
		S(  29,  102), S(  42,  100), S(  76,  106), S(  80,   74), S(  85,   61), S(  52,   77), S(  34,   97), S(  19,   93),
		S(  40,   22), S(  53,   45), S(  69,    6), S(  45,  -13), S(  35,  -12), S(  30,   -3), S(   4,   38), S(   0,   25),
		S(  16,    3), S(   8,   24), S(  25,   -7), S(  15,  -11), S(   4,  -10), S(  -1,   -4), S(  -9,   24), S( -11,   15),
		S(   8,  -13), S(   1,   18), S(  13,  -10), S(   8,   -8), S(   1,   -8), S(  -5,   -7), S( -16,   19), S( -15,   -2),
		S(  13,  -21), S(  12,    6), S(  -2,   -2), S(  -3,    1), S( -10,    1), S( -15,   -7), S( -24,   12), S( -26,   -7),
		S(  26,  -25), S(  40,    4), S(  26,   -2), S(   3,   13), S( -12,    5), S( -10,    0), S( -17,   21), S( -18,    1),
		S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
	},
	{
		S( -55,  -85), S( -59,  -23), S(  -9,  -24), S(  15,  -14), S( -22,    0), S( -58,    9), S(-100,   17), S( -73,  -44),
		S(   0,  -12), S(  23,   -4), S(  28,   -9), S(  10,   -1), S(  10,    6), S(  -1,    8), S(  -6,   19), S( -12,   10),
		S(  20,   -8), S(  13,   -3), S(  53,  -20), S(  31,   -1), S(  16,    4), S(   8,    5), S(   1,    7), S(  -6,    5),
		S(  32,    3), S(  32,    8), S(  40,    5), S(  30,   14), S(  27,   15), S(  24,    8), S(  14,    5), S(   6,   17),
		S(   9,   15), S(  19,    8), S(  23,    7), S(  19,   21), S(  21,   15), S(  15,   13), S(  17,    4), S(   0,   13),
		S(  -1,    0), S(  12,   -4), S(   3,  -10), S(  12,    9), S(   3,   10), S(  -4,   -5), S(  -4,   -4), S( -14,    0),
		S(   3,   12), S(   5,   -1), S(   3,   -5), S(   1,   -1), S(   1,   -2), S(  -9,   -4), S( -11,    1), S( -17,    4),
		S( -11,    1), S( -12,    1), S(  -3,   -6), S(  -4,    4), S( -10,    0), S( -20,   -6), S( -13,   -3), S( -46,   13),
	},
	{
		S( -34,   -7), S( -34,    6), S( -12,   -3), S( -67,   10), S( -63,   14), S( -49,    2), S( -28,    7), S( -13,   10),
		S( -25,   -7), S( -36,   11), S( -10,   -3), S(  -5,   -4), S( -22,    5), S(  -2,   -5), S(  -5,   -2), S(  -8,   -5),
		S(  22,   10), S(  15,   -2), S(  40,    5), S(   7,    2), S(  13,   -5), S(   4,    4), S(   8,    2), S(   5,    4),
		S(  -1,    4), S(  11,    7), S(   8,   10), S(  18,   14), S(  15,   18), S(  11,    4), S(   4,   10), S(  -6,    6),
		S(  16,   -9), S(   4,    6), S(   8,    4), S(  10,   11), S(  15,   10), S(  -3,   12), S(  -1,    5), S(   0,    2),
		S(  15,  -10), S(  18,  -10), S(   9,   -3), S(   4,    7), S(  -4,    5), S(   4,    3), S(   7,    2), S(  -1,   -6),
		S(  21,  -14), S(  26,  -18), S(  17,  -13), S(   3,   -4), S(  -4,   -2), S(   7,  -17), S(   5,  -16), S(  14,   -5),
		S(  30,  -29), S(  19,  -20), S(  -4,    3), S(  11,   -6), S(  -2,   -4), S(   3,    5), S(  11,   -1), S(   9,   -8),
	},
	{
		S(  10,    8), S( -33,   44), S(  -5,   27), S(  -9,   15), S( -28,   28), S( -25,   32), S( -12,   24), S( -12,   24),
		S(  26,   -2), S(  27,    7), S(  18,   11), S(   5,   11), S(  17,   12), S(  -1,   27), S(  -3,   23), S(  -3,   17),
		S(  13,   -1), S(  38,    1), S(  28,   -1), S(  19,    6), S(   2,   13), S(  -2,   23), S(  10,   18), S( -10,   22),
		S(   6,    8), S(   7,   13), S(  15,    9), S(  10,    4), S(   3,   12), S(   5,   17), S(   5,   17), S(  -8,   21),
		S(  -4,   -2), S(  13,    3), S(   0,    4), S(   7,    1), S(  -3,    4), S(  -7,    8), S(  -9,    9), S( -12,    9),
		S(   8,  -28), S(  17,  -28), S(   3,  -18), S(   2,  -17), S(  -9,   -9), S( -13,  -11), S( -12,  -11), S( -16,  -10),
		S(  -7,  -33), S(  18,  -39), S(   6,  -27), S(   2,  -24), S(  -3,  -20), S(  -4,  -18), S( -12,  -14), S( -15,  -19),
		S( -14,  -31), S(  -9,  -16), S(   0,  -22), S(   4,  -28), S(  -2,  -25), S(  -8,  -18), S(  -7,  -21), S(  -7,  -18),
	},
	{
		S(   3,  -21), S(  39,  -51), S(  -3,   13), S(  -9,    9), S(   5,  -10), S( -23,   14), S( -44,   11), S( -23,    1),
		S(  37,   -5), S(   0,    5), S(  -2,   25), S( -33,   54), S( -28,   43), S(  -9,    9), S(  -8,  -10), S(   2,   -9),
		S(  15,    0), S(  20,  -10), S(   6,   17), S(  -4,   25), S(   0,   21), S(   5,   12), S(   4,   -6), S(  13,   -4),
		S(  14,   14), S(  11,   35), S(   9,   13), S(  -8,   32), S(  -5,   29), S(   5,    7), S(   4,   14), S(   3,    9),
		S(  14,    9), S(  18,   15), S(   7,   21), S(   3,   25), S(  -4,   28), S(  -2,   20), S(   3,   18), S(   0,    9),
		S(  13,  -20), S(  13,   -5), S(   4,    8), S(  -5,   22), S(  -6,   14), S(  -6,   18), S(   2,   -2), S(   3,  -11),
		S(  13,  -53), S(  17,  -69), S(   8,  -38), S(   4,   -3), S(   2,    2), S(   3,  -15), S(   2,  -19), S(   8,  -34),
		S(   3,  -46), S( -12,  -47), S( -15,  -19), S(  -6,  -16), S(  -6,  -11), S(  -9,   -5), S( -13,  -12), S( -12,   -9),
	},
	{
		S(  18,  -67), S(  -3,    3), S(   1,   -8), S(  25,  -17), S(   1,   -4), S(   1,   -4), S(   1,   -4), S(   1,   -4),
		S( -67,   47), S(  -2,   55), S(   9,   44), S(  88,   -3), S(   1,   -4), S(   1,   -4), S(   1,   -4), S(   1,   -4),
		S( -47,   34), S(  20,   41), S(  50,   29), S(  50,   21), S(   1,   -4), S(   1,   -4), S(   1,   -4), S(   1,   -4),
		S( -69,   25), S( -17,   28), S(   0,   26), S(   0,   13), S(   1,   -4), S(   1,   -4), S(   1,   -4), S(   1,   -4),
		S( -85,   16), S( -27,   17), S(  -7,   12), S( -15,    8), S(   1,   -4), S(   1,   -4), S(   1,   -4), S(   1,   -4),
		S( -46,    4), S(   4,    0), S(  -4,    2), S(  -1,   -2), S(   1,   -4), S(   1,   -4), S(   1,   -4), S(   1,   -4),
		S(  12,  -19), S(  26,  -13), S(   8,   -7), S(  -4,  -11), S(   1,   -4), S(   1,   -4), S(   1,   -4), S(   1,   -4),
		S(  10,  -53), S(  12,  -27), S( -15,  -12), S( -11,  -29), S(   1,   -4), S(   1,   -4), S(   1,   -4), S(   1,   -4),
	},
};

constexpr PackedScore MOBILITY[4][28] = {
	{S( -10,  -17), S( -35,  -67), S( -15,  -32), S(  -7,   -5), S(   2,    7), S(   5,   20), S(  12,   27), S(  19,   35), S(  26,   35), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -17,  -30), S( -45,  -94), S( -26,  -37), S( -21,  -15), S( -11,   -3), S(  -4,    7), S(   0,   18), S(   4,   22), S(   6,   28), S(  11,   29), S(  11,   32), S(  23,   21), S(  25,   23), S(  42,    4), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -26,  -41), S(  14,  -80), S( -21,  -45), S( -13,  -29), S(  -8,  -22), S(  -3,   -7), S(   0,   -1), S(  -5,    9), S(  -1,   13), S(   2,   19), S(   5,   25), S(   6,   35), S(   9,   40), S(  14,   43), S(  19,   41), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -36,   17), S( -44,  -87), S( -82,  -81), S( -51, -289), S( -62, -111), S( -28,  -35), S( -21,  -12), S( -15,   -6), S(  -9,   -4), S(  -8,   21), S(  -6,   29), S(  -4,   39), S(  -2,   45), S(   1,   48), S(   4,   52), S(   6,   54), S(   7,   56), S(   7,   61), S(   8,   63), S(   8,   64), S(  16,   55), S(  22,   41), S(  28,   34), S(  44,   11), S(  54,    0), S(  58,   -9), S(  47,  -10), S(  31,  -33)}
};

constexpr PackedScore THREAT_BY_PAWN[6] = {S(   7,  -16), S(  55,   34), S(  55,   66), S(  67,   34), S(  64,   -9), S(   0,    0)};
constexpr PackedScore THREAT_BY_KNIGHT[2][6] = {
	{S(   5,   32), S(  27,   33), S(  31,   47), S(  66,    9), S(  39,  -25), S(   0,    0)},
	{S(  -3,   12), S(  13,   47), S(  26,   36), S(  54,   35), S(  46,    2), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_BISHOP[2][6] = {
	{S(   3,   38), S(  42,   30), S(  -4,   30), S(  64,   12), S(  59,   58), S(   0,    0)},
	{S(   1,    9), S(  19,   25), S( -16,    1), S(  37,   48), S(  40,  136), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_ROOK[2][6] = {
	{S(  -1,   47), S(  24,   61), S(  23,   58), S(  15,  -52), S(  66,    3), S(   0,    0)},
	{S(  -5,    8), S(   5,   20), S(  15,    6), S(  11,  -88), S(  51,   56), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_QUEEN[2][6] = {
	{S(   8,    9), S(  29,   18), S(  14,   52), S(  17,    0), S(  11,  -66), S(  94,    1)},
	{S(  -1,   13), S(   2,    9), S(  -4,   23), S(  -5,    4), S( -15,  -72), S(  89,   68)}
};
constexpr PackedScore THREAT_BY_KING[6] = {S( -10,   46), S(  23,   48), S(  20,   48), S(  83,   14), S(   0,    0), S(   0,    0)};
constexpr PackedScore PUSH_THREAT = S(  16,   20);

constexpr PackedScore ISOLATED_PAWN[8] = {S(  -7,   11), S(  -1,  -15), S(  -9,   -6), S(  -8,  -14), S(  -9,  -11), S(  -6,   -4), S(   0,  -13), S( -10,   12)};
constexpr PackedScore PAWN_PHALANX[8] = {S(   0,    0), S(   4,   -4), S(  12,    4), S(  16,   17), S(  39,   62), S(  98,  215), S( -68,  414), S(   0,    0)};
constexpr PackedScore DEFENDED_PAWN[8] = {S(   0,    0), S(   0,    0), S(  17,   10), S(  11,    9), S(  12,   20), S(  19,   58), S( 141,   53), S(   0,    0)};

constexpr PackedScore PASSED_PAWN[2][2][8] = {
	{
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -27,  -42), S( -17,   28), S( -39,  172), S(   5,  259), S(   0,    0)},
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -16,  -57), S(  10,  -30), S(  11,   13), S(  62,   23), S(   0,    0)}
	},
	{
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -25,  -61), S(  -4,  -25), S(   9,    4), S(  59,  -11), S(   0,    0)},
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -26,  -68), S(  -2,  -40), S(  -7,  -26), S(  -5,  -57), S(   0,    0)}
	}
};
constexpr PackedScore OUR_PASSER_PROXIMITY[8] = {S(   0,    0), S(  17,   96), S(  -8,   73), S(   0,   42), S(   4,   29), S(   8,   19), S(  15,   19), S(   8,   19)};
constexpr PackedScore THEIR_PASSER_PROXIMITY[8] = {S(   0,    0), S( -49,   18), S(  20,   -3), S(   9,   29), S(  13,   51), S(   7,   87), S(  14,   87), S(  15,   76)};

constexpr PackedScore PAWN_STORM[3][8] = {
	{S(  47,  -30), S(  24,  -16), S(  16,    2), S(   8,    3), S(   1,    5), S(  -3,    9), S(  -4,    8), S(   5,  -15)},
	{S(   0,    0), S(  18,  -25), S(  19,    8), S(   4,    3), S(  -5,    6), S(  -8,   12), S(  -8,   11), S(   4,   -9)},
	{S(   9,    4), S(  -1,   11), S(   5,   14), S(   4,   12), S(   4,   10), S(   3,   11), S(   3,    9), S(  -7,   -6)}
};
constexpr PackedScore PAWN_SHIELD[3][8] = {
	{S(  12,  -16), S(   0,   -9), S(  -4,  -10), S(  -6,   -7), S(   4,   -9), S(  19,  -26), S(  35,  -24), S(  -9,    9)},
	{S(   0,    0), S(  -7,    0), S( -10,    0), S(  -1,    1), S(  10,   -3), S(  29,  -25), S(  58,  -42), S(   5,    9)},
	{S(  -4,   -5), S(  -4,   -2), S(   0,   -3), S(   0,    1), S(   3,    3), S(   3,    0), S(  15,   -6), S(  -6,   12)}
};
constexpr PackedScore SAFE_KNIGHT_CHECK = S(  72,   -2);
constexpr PackedScore SAFE_BISHOP_CHECK = S(  20,   12);
constexpr PackedScore SAFE_ROOK_CHECK = S(  52,    5);
constexpr PackedScore SAFE_QUEEN_CHECK = S(  18,   23);
constexpr PackedScore UNSAFE_KNIGHT_CHECK = S(   5,    2);
constexpr PackedScore UNSAFE_BISHOP_CHECK = S(  10,   12);
constexpr PackedScore UNSAFE_ROOK_CHECK = S(  17,   -1);
constexpr PackedScore UNSAFE_QUEEN_CHECK = S(   4,   14);
constexpr PackedScore KING_ATTACKER_WEIGHT[4] = {S(  16,    3), S(  12,    4), S(  15,  -13), S(   3,    1)};
constexpr PackedScore KING_ATTACKS[14] = {S( -47,   34), S( -53,   26), S( -59,   21), S( -62,   24), S( -59,   20), S( -51,   14), S( -35,    6), S( -16,   -5), S(  19,  -23), S(  41,  -26), S(  68,  -37), S(  78,  -10), S( 112,  -99), S(  77,   43)};

constexpr PackedScore KNIGHT_OUTPOST = S(  23,   20);
constexpr PackedScore BISHOP_PAWNS[7] = {S(   4,   26), S(   6,   23), S(   4,   14), S(   1,    5), S(  -3,   -6), S(  -4,  -20), S(  -9,  -36)};
constexpr PackedScore BISHOP_PAIR = S(  17,   64);
constexpr PackedScore ROOK_OPEN[2] = {S(  21,    5), S(  12,    9)};

constexpr PackedScore TEMPO = S(  26,   37);

constexpr PackedScore COMPLEXITY_PAWNS = S(   1,    4);
constexpr PackedScore COMPLEXITY_PASSERS = S(   0,    0);
constexpr PackedScore COMPLEXITY_PAWNS_BOTH_SIDES = S(   1,   70);
constexpr PackedScore COMPLEXITY_OFFSET = S(   1,  -85);

#undef S


}