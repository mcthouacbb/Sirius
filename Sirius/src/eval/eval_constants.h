#pragma once

#include "../defs.h"

namespace eval
{

#define S(mg, eg) PackedScore(mg, eg)

constexpr PackedScore MATERIAL[6] = {S(  61,  131), S( 284,  431), S( 306,  444), S( 384,  787), S( 743, 1621), S(0, 0)};

constexpr PackedScore PSQT[6][64] = {
    {
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  54,   79), S(  36,   90), S(  20,  101), S(  56,   76), S(  72,   62), S(  57,   75), S(  45,   95), S(  68,   77),
        S(   4,    0), S( -13,   30), S(   7,   -8), S(   8,  -38), S(   1,  -38), S(   2,  -24), S( -20,   14), S(  -7,    2),
        S(  13,    3), S(  -5,   15), S(  12,  -10), S(  11,  -24), S(  -1,  -24), S(  -1,  -17), S(  -9,    8), S(  -9,    5),
        S(   5,   -5), S(  -5,   15), S(  13,  -21), S(  16,  -16), S(   9,  -16), S(   0,  -15), S( -14,    9), S( -11,   -4),
        S(  -1,   -6), S(   8,    9), S(   4,    0), S(   1,   -1), S(  -8,   -2), S(  -8,   -9), S( -21,    8), S( -22,   -5),
        S(   9,   -7), S(  23,   10), S(  30,  120), S(   9,    0), S(  -2,  -11), S(  -5,   -8), S( -15,   12), S( -14,   -2),
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
    },
    {
        S( -68,  -97), S( -74,  -26), S( -29,  -16), S(  -5,   -9), S( -32,    1), S( -57,    3), S(-100,    2), S( -83,  -59),
        S( -16,  -14), S(  13,    1), S(  24,   -2), S(  -2,    9), S(   3,   12), S(   5,   10), S(   1,   11), S( -10,   -1),
        S(   4,   -7), S(  -9,    8), S(  30,   -2), S(  19,   17), S(   7,   23), S(  15,   12), S(   8,    3), S(  -4,   -1),
        S(  26,    5), S(  22,   17), S(  36,   19), S(  21,   26), S(  22,   27), S(  29,   14), S(  22,    2), S(  13,    8),
        S(  10,   17), S(  15,   17), S(  20,   20), S(  20,   28), S(  21,   21), S(  20,   17), S(  24,    0), S(  11,    2),
        S(  16,    0), S(  17,    5), S(  19,    4), S(  18,   16), S(   8,   16), S(   6,    0), S(   9,   -7), S(  -4,   -7),
        S(  11,    0), S(  13,   -4), S(  11,   -4), S(  15,    0), S(   9,    0), S(  -1,   -3), S(   0,   -7), S( -12,   -8),
        S(  -2,  -16), S(  -4,  -11), S(   5,   -9), S(   9,    2), S(   2,   -2), S( -14,   -9), S(  -7,  -16), S( -39,   -7),
    },
    {
        S( -47,  -13), S( -28,    6), S(  -8,   -3), S( -71,    9), S( -63,   15), S( -57,    5), S( -31,    7), S( -32,    5),
        S( -22,  -10), S( -45,    5), S( -13,    3), S( -10,    3), S( -23,   10), S(   1,   -1), S( -14,   -5), S(  -3,   -7),
        S(  10,   12), S(  -3,    8), S(  21,    6), S(   5,   12), S(  16,    5), S(   1,    0), S(   9,    5), S(   6,    1),
        S( -11,    6), S(   2,   13), S(   2,   17), S(  18,   19), S(  23,   23), S(  19,    8), S(   6,   11), S(  -4,    1),
        S(  16,   -6), S(  -3,   13), S(   8,   12), S(  15,   15), S(  21,   12), S(   6,   14), S(   4,    5), S(   5,   -2),
        S(  20,   -9), S(  22,   -1), S(   4,   -1), S(  10,   12), S(   1,    8), S(   5,   -3), S(  20,    1), S(   6,   -9),
        S(  26,  -19), S(  24,  -24), S(  27,   -9), S(   7,   -3), S(  -1,    0), S(  12,  -16), S(   5,  -26), S(  16,  -12),
        S(  29,  -37), S(  21,  -16), S(  -5,   -2), S(  18,   -5), S(   1,   -2), S(   0,    1), S(  11,   -4), S(   6,  -18),
    },
    {
        S(  13,   10), S( -18,   33), S( -14,   27), S( -20,   23), S( -13,   23), S( -17,   31), S(   5,   19), S(   8,   18),
        S(  23,    2), S(  30,    7), S(  10,   17), S(  -7,   21), S(  23,   14), S(  10,   24), S(   7,   19), S(  10,   12),
        S(  -6,    4), S(  20,    6), S(   3,    8), S(   6,    9), S(   5,    8), S(   0,   17), S(  15,   10), S(  -5,   13),
        S(  -9,   10), S( -14,   19), S(  -4,   15), S(  -6,   10), S(   0,    9), S(   7,   11), S(   6,   10), S(  -7,   13),
        S( -18,    5), S(   1,    9), S( -18,   15), S(  -5,    9), S(  -4,    3), S(  -8,    7), S(  -9,    6), S(  -8,    3),
        S(   5,  -19), S(  23,  -23), S(   0,  -10), S(   0,  -12), S(  -3,  -11), S(  -6,  -13), S(  -4,  -15), S( -11,  -11),
        S(  -4,  -27), S(  28,  -35), S(   8,  -21), S(   4,  -19), S(   6,  -21), S(   3,  -18), S(  -5,  -18), S( -10,  -22),
        S(  -4,  -38), S(  -1,  -18), S(   4,  -18), S(  11,  -24), S(   8,  -25), S(   1,  -19), S(   1,  -23), S(  -1,  -21),
    },
    {
        S(  10,   -7), S(  56,  -34), S( -11,   38), S( -13,   25), S(  17,    3), S( -11,   20), S( -23,    8), S( -17,   13),
        S(  36,    6), S(   9,   17), S(  -7,   27), S( -32,   53), S(  -6,   34), S(  15,    1), S(  25,  -21), S(  20,   -9),
        S(   5,   10), S(   0,   -1), S(  -6,   17), S( -14,   15), S(   9,   11), S(  22,    1), S(  20,  -19), S(  30,  -18),
        S(  -5,   16), S( -15,   33), S(  -9,   17), S( -14,   25), S(  -2,   23), S(  13,    2), S(  11,    4), S(   8,   -2),
        S(  -4,   14), S(  -2,   14), S( -13,   21), S(  -7,   28), S( -10,   34), S(  -1,   18), S(   6,   12), S(   3,    2),
        S(   3,  -11), S(   6,   -5), S(  -6,    9), S( -12,   16), S(  -7,   14), S(  -3,   13), S(  13,  -11), S(  10,  -19),
        S(   3,  -43), S(  11,  -60), S(   3,  -29), S(   2,  -14), S(   0,   -4), S(   3,  -17), S(   5,  -23), S(  11,  -39),
        S(   8,  -57), S( -16,  -40), S( -18,  -23), S(  -9,  -20), S(  -7,  -20), S( -11,  -15), S( -13,  -19), S( -11,  -19),
    },
    {
        S(  44,  -71), S(  14,    3), S( -47,  -24), S( -72,   -1), S(  11,   -6), S(  11,   -6), S(  11,   -6), S(  11,   -6),
        S( -13,   19), S(  15,   57), S( -18,   27), S( -29,   31), S(  11,   -6), S(  11,   -6), S(  11,   -6), S(  11,   -6),
        S(  29,   15), S(  40,   52), S(  18,   29), S( -40,   50), S(  11,   -6), S(  11,   -6), S(  11,   -6), S(  11,   -6),
        S( -16,   19), S( -16,   54), S( -44,   30), S( -91,   46), S(  11,   -6), S(  11,   -6), S(  11,   -6), S(  11,   -6),
        S( -54,   14), S( -49,   44), S( -49,    9), S( -87,   27), S(  11,   -6), S(  11,   -6), S(  11,   -6), S(  11,   -6),
        S( -11,   -2), S(  -6,   22), S( -31,  -10), S( -50,    5), S(  11,   -6), S(  11,   -6), S(  11,   -6), S(  11,   -6),
        S(  41,  -23), S(  34,    0), S(   9,  -32), S( -21,  -19), S(  11,   -6), S(  11,   -6), S(  11,   -6), S(  11,   -6),
        S(  41,  -55), S(  40,  -20), S(  15,  -53), S(   3,  -50), S(  11,   -6), S(  11,   -6), S(  11,   -6), S(  11,   -6),
    },
};

constexpr PackedScore MOBILITY[4][28] = {
    {S(  -3,  -28), S( -38,  -46), S( -16,  -15), S(  -8,    0), S(   2,    8), S(   6,   18), S(  13,   22), S(  20,   26), S(  30,   19), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S( -10,  -45), S( -29,  -61), S( -18,  -32), S( -11,  -14), S(  -3,   -4), S(   2,    6), S(   3,   15), S(   6,   18), S(   6,   21), S(   7,   22), S(   9,   22), S(  13,   17), S(  10,   24), S(  15,    3), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S( -11,  -43), S( -29,  -68), S( -13,  -52), S(  -2,  -31), S(   1,  -16), S(  -1,   -5), S(   0,    2), S(   2,    8), S(   4,   11), S(   6,   17), S(   4,   27), S(   4,   34), S(   5,   38), S(   8,   39), S(  14,   37), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S(   1,    8), S( -32,  -71), S( -59, -113), S( -17, -199), S( -22,  -62), S( -14,  -10), S(  -4,  -23), S(  -2,   -4), S(  -1,   13), S(   1,   22), S(   4,   25), S(   7,   27), S(   8,   38), S(  11,   36), S(  11,   42), S(  13,   43), S(  14,   45), S(  16,   46), S(  15,   46), S(  21,   38), S(  25,   29), S(  32,   12), S(  28,   18), S(  35,   -7), S(  34,   -8), S(   1,    1), S( -15,   -9), S(-120,   13)}
};

constexpr PackedScore THREAT_BY_PAWN[6] = {S(   4,  -20), S(  66,   29), S(  59,   60), S(  81,   24), S(  72,   -2), S(   0,    0)};
constexpr PackedScore THREAT_BY_KNIGHT[2][6] = {
    {S(   4,   28), S(  15,   39), S(  35,   43), S(  73,   14), S(  54,  -29), S(   0,    0)},
    {S(  -8,    9), S(   6,   38), S(  29,   29), S(  64,   33), S(  60,   -1), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_BISHOP[2][6] = {
    {S(  -2,   35), S(  39,   32), S( -14,   36), S(  68,   15), S(  69,   43), S(   0,    0)},
    {S(  -4,    5), S(  17,   22), S( -25,  -11), S(  44,   44), S(  47,  110), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_ROOK[2][6] = {
    {S(  -1,   40), S(  16,   58), S(  25,   53), S( -12,  -28), S(  59,   14), S(   0,    0)},
    {S(  -7,    7), S(   2,   15), S(  14,    3), S( -13,  -65), S(  39,   65), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_QUEEN[2][6] = {
    {S(   6,    5), S(  24,   19), S(  10,   42), S(  14,    1), S(  10,  -55), S( 101,   52)},
    {S(  -3,   12), S(   1,    8), S(  -5,   14), S(  -4,    4), S( -16,  -74), S( 118,   52)}
};
constexpr PackedScore THREAT_BY_KING[6] = {S( -13,   43), S(   9,   48), S(  29,   40), S(  83,    8), S(   0,    0), S(   0,    0)};
constexpr PackedScore KNIGHT_HIT_QUEEN = S(  11,    2);
constexpr PackedScore BISHOP_HIT_QUEEN = S(  17,   11);
constexpr PackedScore ROOK_HIT_QUEEN = S(  20,   -3);
constexpr PackedScore PUSH_THREAT = S(  14,   17);

constexpr PackedScore ISOLATED_PAWN[8] = {S(  -9,    6), S(  -3,  -16), S( -12,   -8), S( -10,  -16), S( -12,  -14), S(  -8,   -7), S(  -4,  -14), S( -12,    7)};
constexpr PackedScore DOUBLED_PAWN[8] = {S(  -1,  -60), S(  14,  -37), S(   0,  -27), S(  -2,  -17), S(  -6,  -12), S(  -8,  -20), S(   5,  -37), S(   6,  -71)};
constexpr PackedScore BACKWARDS_PAWN[8] = {S(   0,    0), S(  -8,  -12), S(  -2,  -14), S(  -8,  -12), S(   1,  -18), S(  32,  -11), S(   0,    0), S(   0,    0)};
constexpr PackedScore PAWN_PHALANX[8] = {S(   0,    0), S(   6,   -4), S(  11,   -2), S(  20,    8), S(  38,   42), S( 116,  214), S(   4,  341), S(   0,    0)};
constexpr PackedScore DEFENDED_PAWN[8] = {S(   0,    0), S(   0,    0), S(  18,    6), S(  11,    8), S(  17,   21), S(  32,   64), S( 143,   75), S(   0,    0)};
constexpr PackedScore CANDIDATE_PASSER[2][8] = {
    {S(   0,    0), S( -32,  -15), S( -18,   -8), S(   0,   25), S(  25,   52), S(  66,  114), S(   0,    0), S(   0,    0)},
    {S(   0,    0), S( -17,  -10), S(  -8,   13), S(  -4,   27), S(  18,   41), S(  28,  179), S(   0,    0), S(   0,    0)}
};

constexpr PackedScore PASSED_PAWN[2][2][8] = {
    {
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -36,  -41), S( -17,   21), S(  10,  159), S(  68,  216), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -22,  -53), S(   3,  -20), S(  37,   41), S(  68,   26), S(   0,    0)}
    },
    {
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -29,  -56), S(  -6,  -18), S(  38,   34), S(  69,   -3), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -30,  -56), S(  -6,  -24), S(  16,   18), S( -11,  -12), S(   0,    0)}
    }
};
constexpr PackedScore OUR_PASSER_PROXIMITY[8] = {S(  75,   98), S(  70,  100), S(  44,   72), S(   7,   58), S(   5,   38), S(   7,   25), S(  12,   18), S(  -7,   25)};
constexpr PackedScore THEIR_PASSER_PROXIMITY[8] = {S( -44,   -9), S(  -3,    3), S(  25,    0), S(  20,   31), S(  14,   64), S(  18,   78), S(  25,   79), S(  29,   69)};

constexpr PackedScore PAWN_STORM[2][4][8] = {
    {
        {S(  41,   37), S(-110,  -48), S( -39,  -34), S(  60,    2), S(  26,   22), S(  -1,   31), S( -10,   31), S(   0,    0)},
        {S(  32,    7), S(  46, -123), S(  93,  -81), S(  59,  -19), S(  16,   -2), S( -22,    8), S(   4,    7), S(   0,    0)},
        {S(   7,   20), S( 103, -101), S( 105,  -51), S(  61,   -2), S(  14,   17), S( -14,   23), S( -15,   27), S(   0,    0)},
        {S(  16,    5), S( 149,  -77), S( 120,  -23), S(  70,    5), S(   9,   15), S( -15,    9), S( -21,   20), S(   0,    0)}
    },
    {
        {S(   0,    0), S(   0,    0), S(  61,   62), S( -21,   33), S( -25,   41), S( -16,   58), S(  -4,   45), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(  98,   17), S(  -4,   18), S( -18,   28), S( -29,   42), S( -39,   33), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S( 109,   17), S(   9,   24), S( -15,   40), S(  15,   43), S(  50,   29), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(  89,   17), S(  16,   24), S( -26,   25), S( -23,   22), S(  -1,   17), S(   0,    0)}
    }
};
constexpr PackedScore PAWN_SHIELD[4][8] = {
    {S(  47,   37), S( -19,   52), S( -12,   42), S(  40,   31), S(  44,   18), S( -29,   -1), S( -72,  -15), S(   0,    0)},
    {S(  49,    9), S( -24,   19), S(   8,    7), S(  53,   -1), S(  43,  -15), S(  13,  -19), S( -44,  -32), S(   0,    0)},
    {S(  22,   -2), S(  17,  117), S(  12,   -1), S(  34,  -21), S(  24,  -18), S(  -6,  -24), S( -61,  -40), S(   0,    0)},
    {S(  15,   16), S(   3,   11), S(   2,   10), S(  28,    5), S(  33,    0), S(   9,    4), S( -83,    7), S(   0,    0)}
};
constexpr PackedScore SAFE_KNIGHT_CHECK = S( 107,    7);
constexpr PackedScore SAFE_BISHOP_CHECK = S(  72,   18);
constexpr PackedScore SAFE_ROOK_CHECK = S( 114,   15);
constexpr PackedScore SAFE_QUEEN_CHECK = S(  55,   26);
constexpr PackedScore UNSAFE_KNIGHT_CHECK = S(  16,    2);
constexpr PackedScore UNSAFE_BISHOP_CHECK = S(  38,   10);
constexpr PackedScore UNSAFE_ROOK_CHECK = S(  39,    3);
constexpr PackedScore UNSAFE_QUEEN_CHECK = S(  16,    4);
constexpr PackedScore QUEENLESS_ATTACK = S(-143,  147);
constexpr PackedScore KING_ATTACKER_WEIGHT[4] = {S(  57,   -5), S(  21,    0), S(  28,  -13), S(   4,  -10)};
constexpr PackedScore KING_ATTACKS = S(   7,   -1);
constexpr PackedScore WEAK_KING_RING = S(   7,   -1);
constexpr PackedScore KING_FLANK_ATTACKS[2] = {S(  11,   -4), S(   6,    1)};
constexpr PackedScore KING_FLANK_DEFENSES[2] = {S(  -6,    0), S( -10,    2)};
constexpr PackedScore SAFETY_OFFSET = S(  78,  211);

constexpr PackedScore MINOR_BEHIND_PAWN = S(   6,   12);
constexpr PackedScore KNIGHT_OUTPOST = S(  22,   16);
constexpr PackedScore BISHOP_PAWNS[7] = {S(   3,   20), S(   4,   19), S(   3,   11), S(   1,    4), S(  -2,   -5), S(  -2,  -18), S(  -6,  -31)};
constexpr PackedScore BISHOP_PAIR = S(  19,   60);
constexpr PackedScore LONG_DIAG_BISHOP = S(  15,    8);
constexpr PackedScore ROOK_OPEN[2] = {S(  23,    4), S(  12,    5)};

constexpr PackedScore INVASION_SQUARES = S(   8,    1);

constexpr PackedScore TEMPO = S(  32,   34);

constexpr PackedScore COMPLEXITY_PAWNS = S(   0,   10);
constexpr PackedScore COMPLEXITY_PAWNS_BOTH_SIDES = S(   0,   64);
constexpr PackedScore COMPLEXITY_PAWN_ENDGAME = S(   0,   80);
constexpr PackedScore COMPLEXITY_OFFSET = S(   0, -134);

#undef S


}