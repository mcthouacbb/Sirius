#pragma once

#include "../defs.h"

namespace eval
{

#define S(mg, eg) PackedScore(mg, eg)

constexpr PackedScore MATERIAL[6] = {S(  62,  111), S( 286,  475), S( 316,  493), S( 388,  861), S( 761, 1640), S(0, 0)};

constexpr PackedScore PSQT[6][64] = {
	{
		S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
		S(  56,  103), S(  42,   78), S(  47,   85), S(  75,   89), S(  80,   86), S(  32,  130), S(  32,  126), S(  48,  125),
		S(  45,   41), S(  29,   54), S(  47,  -18), S(  54,   -7), S(  38,    3), S(  27,   19), S(  -2,   62), S(  13,   50),
		S(  22,   31), S(   2,   28), S(  20,  -16), S(  18,    5), S(   6,    7), S(   0,   20), S(  -9,   41), S( -10,   45),
		S(  10,   19), S(   0,   25), S(  16,  -37), S(  13,   12), S(   6,   14), S(  -5,   18), S( -16,   38), S( -17,   31),
		S(   4,   15), S(  12,   17), S(   0,  -29), S(  -1,   24), S(  -9,   25), S( -16,   19), S( -26,   31), S( -28,   29),
		S(  14,   13), S(  35,    4), S(  30, -576), S(   6,   33), S(  -6,   28), S( -10,   25), S( -18,   39), S( -19,   35),
		S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
	},
	{
		S( -69,  -88), S( -70,  -27), S( -30,  -12), S(   8,  -13), S( -41,    7), S( -68,   13), S(-104,   11), S( -88,  -41),
		S( -11,   -8), S(  20,   -1), S(  36,   -6), S(   9,    3), S(   8,   12), S(   0,   16), S(  -5,   20), S( -13,   13),
		S(  13,   -5), S(  12,   -1), S(  59,  -21), S(  34,    4), S(  19,    8), S(  17,    6), S(   3,    7), S(  -9,    7),
		S(  34,    4), S(  33,    8), S(  51,    4), S(  35,   13), S(  34,   17), S(  30,    9), S(  19,    5), S(   7,   18),
		S(  10,   18), S(  21,   13), S(  28,    9), S(  22,   21), S(  24,   15), S(  20,   14), S(  22,    1), S(   2,   13),
		S(   4,   -2), S(  18,   -2), S(  10,  -10), S(  17,    8), S(   7,    8), S(   0,   -6), S(  -1,   -4), S( -13,   -1),
		S(   3,   10), S(   7,   -4), S(   8,   -7), S(   5,   -2), S(   5,   -1), S(  -7,   -5), S( -13,   -1), S( -18,    1),
		S(  -9,   -4), S(  -9,   -2), S(  -2,   -6), S(  -1,    5), S(  -7,    0), S( -20,   -7), S( -13,   -4), S( -48,    8),
	},
	{
		S( -38,   -4), S( -37,    9), S( -19,    1), S( -73,   14), S( -67,   18), S( -55,    5), S( -29,    9), S( -17,   16),
		S( -24,   -6), S( -35,   13), S( -13,    3), S(  -7,    1), S( -19,    5), S(  -1,   -1), S(  -1,   -1), S(  -3,   -7),
		S(  19,    9), S(   9,    2), S(  39,    8), S(   7,    8), S(  14,    1), S(   6,    4), S(   5,    6), S(   6,    3),
		S(  -5,    6), S(   7,    8), S(   6,   11), S(  17,   16), S(  19,   21), S(  12,    5), S(   3,   10), S(  -9,    9),
		S(  16,   -7), S(   1,    8), S(   6,    5), S(  10,   10), S(  15,    9), S(  -3,   14), S(  -2,    5), S(   0,    1),
		S(  22,  -11), S(  23,   -8), S(  12,   -2), S(   5,    6), S(  -3,    3), S(   6,    4), S(  11,    3), S(   1,   -6),
		S(  24,  -19), S(  31,  -25), S(  22,  -14), S(   4,   -5), S(  -3,   -1), S(  10,  -19), S(   7,  -18), S(  16,   -8),
		S(  38,  -34), S(  23,  -22), S(  -3,    2), S(  17,   -4), S(   1,   -3), S(   4,    4), S(  15,   -8), S(  13,   -6),
	},
	{
		S(  18,    6), S(  24,    9), S(   0,   24), S(   0,    9), S( -22,   22), S( -22,   30), S( -12,   25), S(   0,   17),
		S(  31,   -3), S(  28,    7), S(  22,   12), S(   7,   10), S(  13,   14), S(  -2,   30), S(  -5,   24), S(  -1,   16),
		S(   8,    2), S(  47,   -2), S(  31,   -2), S(  28,   -3), S(   1,   12), S(  -2,   22), S(  10,   20), S( -12,   24),
		S(   4,    9), S(   4,   15), S(  11,   14), S(  10,    3), S(   1,   12), S(   2,   22), S(   4,   18), S( -13,   24),
		S(  -7,   -2), S(  11,    4), S(  -6,    7), S(   5,    1), S(  -9,    8), S( -13,   12), S( -15,   14), S( -18,   13),
		S(   8,  -28), S(  22,  -30), S(   0,  -17), S(   1,  -17), S( -12,   -8), S( -18,   -8), S( -16,   -8), S( -22,   -7),
		S(  -8,  -32), S(  20,  -40), S(   4,  -25), S(   2,  -24), S(  -6,  -18), S(  -8,  -15), S( -17,  -12), S( -20,  -18),
		S( -12,  -33), S(  -6,  -20), S(  -3,  -19), S(   4,  -26), S(  -4,  -23), S( -12,  -14), S( -11,  -19), S( -12,  -16),
	},
	{
		S(   0,   -3), S(  27,  -25), S( -30,   42), S( -31,   33), S(  -5,   -1), S( -37,   31), S( -52,   20), S( -26,    8),
		S(  26,   20), S( -17,   32), S( -21,   44), S( -43,   71), S( -29,   43), S(  -9,   12), S(  -5,  -10), S(   5,   -9),
		S(   3,   25), S(   4,   23), S(  -3,   35), S( -14,   36), S(   3,   15), S(   8,   11), S(   6,   -7), S(  20,  -14),
		S(  11,   21), S(   8,   38), S(   6,   21), S( -12,   37), S(  -6,   30), S(   8,    2), S(   9,   11), S(   6,    5),
		S(  13,    6), S(  18,    7), S(   2,   20), S(   5,   22), S(  -1,   21), S(   0,   12), S(   7,    6), S(   4,    1),
		S(  16,  -29), S(  18,  -15), S(   8,   -1), S(  -2,    6), S(   0,    0), S(   0,    3), S(  10,  -18), S(   8,  -23),
		S(  17,  -68), S(  23,  -75), S(  15,  -47), S(  11,  -17), S(   8,  -16), S(  10,  -31), S(   9,  -34), S(  15,  -48),
		S(  16,  -71), S(  -2,  -60), S( -10,  -31), S(  -1,  -23), S(   0,  -24), S(  -6,  -20), S(  -9,  -24), S(  -8,  -22),
	},
	{
		S(  -6,  -86), S(  -8,   -7), S(-117,   42), S( -80,    8), S(  10,   -2), S(  10,   -2), S(  10,   -2), S(  10,   -2),
		S( -46,   14), S(   6,   50), S( -17,   61), S(  -5,   32), S(  10,   -2), S(  10,   -2), S(  10,   -2), S(  10,   -2),
		S(  -2,    4), S(  47,   36), S(  38,   50), S( -11,   52), S(  10,   -2), S(  10,   -2), S(  10,   -2), S(  10,   -2),
		S( -41,    1), S(   6,   26), S(  -9,   46), S( -67,   48), S(  10,   -2), S(  10,   -2), S(  10,   -2), S(  10,   -2),
		S( -53,  -15), S( -18,    8), S( -20,   25), S( -60,   28), S(  10,   -2), S(  10,   -2), S(  10,   -2), S(  10,   -2),
		S( -10,  -36), S(  17,  -17), S(  -8,    3), S( -30,    7), S(  10,   -2), S(  10,   -2), S(  10,   -2), S(  10,   -2),
		S(  39,  -57), S(  42,  -33), S(  13,  -12), S( -16,   -8), S(  10,   -2), S(  10,   -2), S(  10,   -2), S(  10,   -2),
		S(  31,  -94), S(  33,  -57), S(   0,  -29), S(  -4,  -40), S(  10,   -2), S(  10,   -2), S(  10,   -2), S(  10,   -2),
	},
};

constexpr PackedScore MOBILITY[4][28] = {
	{S( -12,  -19), S( -40,  -68), S( -15,  -33), S(  -7,   -6), S(   3,    8), S(   5,   20), S(  13,   28), S(  21,   36), S(  29,   37), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -22,  -31), S( -52, -100), S( -30,  -39), S( -23,  -17), S( -11,   -4), S(  -4,    5), S(   1,   17), S(   7,   22), S(   9,   28), S(  13,   30), S(  14,   33), S(  26,   24), S(  30,   25), S(  40,   10), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -28,  -39), S(  12,  -72), S( -25,  -51), S( -14,  -30), S(  -7,  -20), S(  -3,   -5), S(   0,    1), S(  -4,   10), S(  -1,   15), S(   3,   20), S(   6,   26), S(   7,   35), S(  10,   42), S(  17,   44), S(  30,   37), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -13,  -19), S( -44,  -89), S( -88,  -96), S( -37, -336), S( -57, -115), S( -18,  -44), S(  -9,  -25), S(   0,  -20), S(   7,  -16), S(   7,   10), S(   8,   18), S(  11,   29), S(  13,   33), S(  16,   37), S(  19,   41), S(  21,   45), S(  22,   47), S(  21,   54), S(  20,   57), S(  20,   60), S(  27,   52), S(  29,   43), S(  26,   46), S(  34,   34), S(  33,   26), S(   4,   44), S(  27,    1), S(-106,   84)}
};

constexpr PackedScore THREAT_BY_PAWN[6] = {S(   9,  -15), S(  64,   34), S(  63,   67), S(  78,   34), S(  75,  -11), S(   0,    0)};
constexpr PackedScore THREAT_BY_KNIGHT[2][6] = {
	{S(   8,   30), S(  25,   34), S(  39,   47), S(  74,   13), S(  50,  -23), S(   0,    0)},
	{S(  -4,   11), S(  12,   31), S(  30,   32), S(  64,   35), S(  57,    1), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_BISHOP[2][6] = {
	{S(   2,   39), S(  42,   39), S( -10,   39), S(  70,   16), S(  68,   66), S(   0,    0)},
	{S(   1,    8), S(  22,   25), S( -23,  -14), S(  44,   49), S(  47,  127), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_ROOK[2][6] = {
	{S(   1,   44), S(  17,   69), S(  27,   64), S(  15,  -47), S(  74,   13), S(   0,    0)},
	{S(  -7,    5), S(   2,   15), S(  14,    1), S(  17, -100), S(  65,   42), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_QUEEN[2][6] = {
	{S(   7,    9), S(  24,   25), S(   9,   57), S(  14,   15), S(  12,  -63), S( 102,   29)},
	{S(  -1,   11), S(   0,    6), S(  -7,   20), S(  -4,    0), S( -18,  -77), S( 118,   47)}
};
constexpr PackedScore THREAT_BY_KING[6] = {S( -28,   48), S(   3,   50), S(  20,   45), S(  86,   22), S(   0,    0), S(   0,    0)};
constexpr PackedScore PUSH_THREAT = S(  15,   22);

constexpr PackedScore ISOLATED_PAWN[8] = {S(  -8,    1), S(  -4,  -13), S( -11,  -10), S( -10,  -17), S( -11,  -13), S(  -8,   -6), S(  -4,  -10), S( -11,    3)};
constexpr PackedScore PAWN_PHALANX[8] = {S(   0,    0), S(   7,   -1), S(  12,    5), S(  19,   16), S(  48,   61), S( 125,  233), S(-195,  515), S(   0,    0)};
constexpr PackedScore DEFENDED_PAWN[8] = {S(   0,    0), S(   0,    0), S(  20,   12), S(  12,   10), S(  13,   19), S(  20,   59), S( 147,   74), S(   0,    0)};

constexpr PackedScore PASSED_PAWN[2][2][8] = {
	{
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -34,  -39), S( -14,   27), S( -18,  167), S(  61,  247), S(   0,    0)},
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -21,  -56), S(  10,  -28), S(  13,   21), S(  65,   34), S(   0,    0)}
	},
	{
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -29,  -61), S(  -2,  -28), S(  16,    8), S(  69,   -9), S(   0,    0)},
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -31,  -67), S(  -1,  -40), S(  -9,  -14), S( -15,  -28), S(   0,    0)}
	}
};
constexpr PackedScore OUR_PASSER_PROXIMITY[8] = {S(   0,    0), S(  87,   78), S(  17,   73), S(   0,   50), S(   1,   39), S(   7,   32), S(  16,   30), S(  10,   30)};
constexpr PackedScore THEIR_PASSER_PROXIMITY[8] = {S(   0,    0), S( -61,    0), S(  18,   -5), S(  15,   23), S(  19,   43), S(  13,   81), S(  16,   81), S(  19,   68)};

constexpr PackedScore PAWN_STORM[2][4][8] = {
	{
		{S(  22,    4), S( -25,  -11), S(   5,    1), S(  13,    1), S(  12,    3), S(   7,    4), S(   5,    4), S(   0,    0)},
		{S(  19,    6), S(  26,   -9), S(  50,   -5), S(  25,    4), S(  14,    7), S(   2,    9), S(   7,    9), S(   0,    0)},
		{S(  13,   -4), S(  56,  -26), S(  45,  -11), S(  27,   -6), S(  15,   -3), S(   7,   -3), S(   2,   -3), S(   0,    0)},
		{S(  12,   13), S(  60,   -3), S(  44,    9), S(  26,   14), S(   9,   16), S(   2,   15), S(   2,   14), S(   0,    0)}
	},
	{
		{S(   0,    0), S(  -3,  -58), S(-129,   36), S(  32,  -11), S(   7,    5), S(  11,    4), S(   4,    5), S(   0,    0)},
		{S(   0,    0), S(  54,  -23), S(  -2,   23), S(  43,   -4), S(  14,    8), S(   4,    9), S(   6,    9), S(   0,    0)},
		{S(   0,    0), S( -24,   23), S( -26,  -28), S(  28,   -9), S(  11,   -2), S(   9,   -3), S(   5,   42), S(   0,    0)},
		{S(   0,    0), S( -62,  -27), S(  62,    4), S(  32,   12), S(   7,   17), S(   9,   12), S(  11,    9), S(   0,    0)}
	}
};
constexpr PackedScore PAWN_SHIELD[4][8] = {
	{S(  16,   26), S(   3,   25), S(   1,   25), S(  15,   22), S(  17,   21), S(  -1,   17), S( -14,    8), S(   0,    0)},
	{S(  21,   26), S(   4,   21), S(   8,   24), S(  19,   21), S(  18,   19), S(  15,   16), S(   4,    6), S(   0,    0)},
	{S(   9,  131), S(   2, -365), S(   6,  119), S(  14,  118), S(  12,  122), S(  12,  118), S(   8,  110), S(   0,    0)},
	{S(  12,   16), S(  10,   14), S(   3,   15), S(   8,   14), S(  15,   12), S(  20,    9), S(   4,    6), S(   0,    0)}
};
constexpr PackedScore SAFE_KNIGHT_CHECK = S(  36,   -1);
constexpr PackedScore SAFE_BISHOP_CHECK = S(  21,    1);
constexpr PackedScore SAFE_ROOK_CHECK = S(  29,    2);
constexpr PackedScore SAFE_QUEEN_CHECK = S(  20,    0);
constexpr PackedScore UNSAFE_KNIGHT_CHECK = S(   4,    1);
constexpr PackedScore UNSAFE_BISHOP_CHECK = S(  12,    2);
constexpr PackedScore UNSAFE_ROOK_CHECK = S(  13,    1);
constexpr PackedScore UNSAFE_QUEEN_CHECK = S(   6,    1);
constexpr PackedScore KING_ATTACKER_WEIGHT[4] = {S(  21,   -1), S(  14,    0), S(  11,   -1), S(   7,    4)};
constexpr PackedScore KING_ATTACKS[14] = {S( -24,   12), S( -26,   11), S( -28,   10), S( -29,   10), S( -28,    8), S( -25,    7), S( -19,    5), S( -16,    3), S(  -9,    2), S(  -5,    3), S(   0,   -2), S(  -3,   11), S(   0,    2), S(   1,    5)};
constexpr PackedScore SAFETY_OFFSET = S(   1,   49);

constexpr PackedScore MINOR_BEHIND_PAWN = S(   7,   15);
constexpr PackedScore KNIGHT_OUTPOST = S(  24,   13);
constexpr PackedScore BISHOP_PAWNS[7] = {S(  -1,   17), S(   1,   16), S(  -1,    6), S(  -4,   -3), S(  -8,  -14), S(  -9,  -29), S( -13,  -37)};
constexpr PackedScore BISHOP_PAIR = S(  20,   66);
constexpr PackedScore ROOK_OPEN[2] = {S(  27,    3), S(  15,    3)};

constexpr PackedScore TEMPO = S(  31,   37);

constexpr PackedScore COMPLEXITY_PAWNS = S(   0,   10);
constexpr PackedScore COMPLEXITY_PASSERS = S(   0,    3);
constexpr PackedScore COMPLEXITY_PAWNS_BOTH_SIDES = S(   0,  104);
constexpr PackedScore COMPLEXITY_PAWN_ENDGAME = S(   0,   87);
constexpr PackedScore COMPLEXITY_OFFSET = S(   0, -198);

#undef S


}