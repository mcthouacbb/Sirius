#pragma once

#include "../defs.h"

namespace eval
{

#define S(mg, eg) PackedScore(mg, eg)

constexpr PackedScore MATERIAL[6] = {S(  61,  131), S( 292,  428), S( 315,  439), S( 396,  782), S( 752, 1596), S(0, 0)};

constexpr PackedScore PSQT[6][64] = {
    {
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  52,   76), S(  31,   89), S(  30,   99), S(  63,   71), S(  70,   64), S(  43,   84), S(  31,  101), S(  56,   82),
        S(  21,    3), S(  -3,   33), S(  18,   -5), S(  25,  -28), S(  13,  -23), S(   7,  -10), S( -18,   28), S(   1,   12),
        S(  15,    4), S(  -4,   12), S(  16,  -23), S(  15,  -27), S(   1,  -25), S(  -1,  -13), S( -10,   10), S( -10,    8),
        S(   6,   -2), S(  -6,   16), S(  13,  -26), S(  18,  -20), S(  11,  -18), S(  -1,  -11), S( -15,   12), S( -13,   -1),
        S(  -1,   -5), S(   8,    8), S(   5,   -3), S(   1,   -3), S(  -6,   -4), S( -10,   -8), S( -23,   10), S( -24,   -3),
        S(  10,   -7), S(  24,    9), S(  33,  119), S(   9,   -1), S(  -3,   -9), S(  -5,   -7), S( -16,   14), S( -15,    1),
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
    },
    {
        S( -75,  -95), S( -76,  -26), S( -29,  -17), S(   1,   -9), S( -32,    2), S( -61,    5), S(-106,    8), S( -94,  -51),
        S( -17,  -13), S(  18,    2), S(  29,   -3), S(   3,    6), S(   4,   11), S(   2,   11), S(  -2,   15), S( -12,    2),
        S(   6,   -5), S(   4,    2), S(  49,  -11), S(  32,   10), S(  18,   18), S(  17,   13), S(   5,    5), S(  -8,    2),
        S(  28,    4), S(  28,   13), S(  44,   13), S(  26,   22), S(  26,   25), S(  32,   12), S(  20,    5), S(   9,   11),
        S(  10,   16), S(  15,   17), S(  23,   18), S(  19,   28), S(  24,   19), S(  19,   18), S(  21,    3), S(   7,    5),
        S(  16,   -2), S(  20,    1), S(  20,    0), S(  16,   15), S(   8,   14), S(   4,    0), S(   5,   -5), S(  -8,   -6),
        S(   8,    0), S(  14,   -6), S(   9,   -3), S(  11,    1), S(   6,    1), S(  -4,   -3), S(  -5,   -6), S( -17,   -6),
        S(  -8,  -14), S( -10,   -8), S(  -1,   -9), S(   4,    3), S(  -3,    0), S( -18,   -7), S( -13,  -13), S( -46,   -5),
    },
    {
        S( -51,  -12), S( -34,    7), S(  -8,   -3), S( -72,   10), S( -66,   16), S( -53,    3), S( -26,    5), S( -33,    5),
        S( -20,   -8), S( -46,    6), S(  -9,    1), S(  -4,   -1), S( -20,    9), S(   2,    0), S( -14,   -5), S(  -3,   -6),
        S(  13,   11), S(   9,    4), S(  30,    2), S(  10,    8), S(  19,    3), S(   0,   -1), S(   9,    6), S(   5,    2),
        S( -11,    6), S(   6,   10), S(   7,   14), S(  19,   17), S(  22,   22), S(  17,    8), S(   4,   11), S(  -8,    4),
        S(  18,   -8), S(   2,    9), S(   9,   10), S(  13,   15), S(  21,   12), S(   1,   15), S(   1,    6), S(   1,   -1),
        S(  22,  -11), S(  27,   -6), S(   7,   -5), S(  11,   11), S(   1,    7), S(   3,   -3), S(  17,    1), S(   3,   -8),
        S(  29,  -21), S(  23,  -23), S(  28,   -9), S(   6,   -3), S(   0,   -1), S(  11,  -16), S(   3,  -25), S(  14,  -11),
        S(  28,  -39), S(  18,  -15), S(  -8,    0), S(  18,   -5), S(   1,   -3), S(   0,    1), S(  13,   -4), S(   5,  -18),
    },
    {
        S(  17,    7), S( -22,   33), S(  -2,   21), S(  -6,   15), S( -22,   23), S( -19,   28), S(  -5,   19), S(  -2,   18),
        S(  28,    2), S(  31,    7), S(  16,   15), S(   8,   13), S(  17,   16), S(   3,   27), S(  -1,   22), S(   1,   16),
        S(  -2,    5), S(  30,    3), S(  11,    6), S(  19,    3), S(   1,   10), S(  -3,   19), S(   9,   14), S( -11,   16),
        S(   2,    5), S(  -1,   14), S(   8,   10), S(  10,    0), S(   2,    8), S(   6,   11), S(   3,   12), S(  -9,   14),
        S(  -8,    0), S(  12,    3), S( -11,   10), S(   7,    1), S(  -3,    2), S(  -8,    5), S( -10,    5), S( -11,    5),
        S(   9,  -23), S(  25,  -25), S(   1,  -13), S(   5,  -17), S(  -7,  -11), S( -12,  -11), S( -10,  -11), S( -16,  -10),
        S(  -7,  -26), S(  23,  -34), S(   5,  -21), S(   5,  -21), S(  -2,  -18), S(  -3,  -16), S( -13,  -14), S( -16,  -19),
        S(  -7,  -38), S(  -3,  -17), S(   1,  -17), S(  10,  -24), S(   2,  -22), S(  -6,  -15), S(  -5,  -19), S(  -7,  -18),
    },
    {
        S(  -2,   -5), S(  31,  -27), S( -28,   42), S( -18,   30), S(   6,    2), S( -29,   27), S( -41,   13), S( -31,   14),
        S(  40,    4), S(  -6,   21), S( -15,   37), S( -39,   69), S( -25,   46), S(  -5,   13), S(  -2,   -7), S(   7,   -8),
        S(   7,   18), S(  10,   10), S(  -2,   32), S( -17,   32), S(  -1,   19), S(   5,   12), S(   6,  -11), S(  17,  -15),
        S(   7,   19), S(   3,   32), S(   5,   20), S( -12,   39), S(  -9,   35), S(   9,    5), S(   9,    4), S(   6,   -5),
        S(  11,   11), S(  15,   11), S(  -1,   19), S(   5,   27), S(  -4,   33), S(  -1,   16), S(   6,   10), S(   6,   -7),
        S(  17,  -21), S(  17,  -10), S(   7,    1), S(  -3,   13), S(  -1,    7), S(   1,    5), S(  14,  -20), S(  14,  -29),
        S(  11,  -49), S(  16,  -65), S(  11,  -36), S(  10,  -20), S(   7,  -12), S(   9,  -27), S(   8,  -33), S(  13,  -49),
        S(  15,  -59), S(  -9,  -53), S( -13,  -31), S(   1,  -29), S(   1,  -29), S(  -4,  -23), S(  -7,  -26), S(  -7,  -25),
    },
    {
        S( -28,  -51), S( -31,   12), S( -90,   -4), S(-104,   16), S(   7,   -6), S(   7,   -6), S(   7,   -6), S(   7,   -6),
        S( -55,   33), S(   1,   59), S( -27,   36), S( -17,   32), S(   7,   -6), S(   7,   -6), S(   7,   -6), S(   7,   -6),
        S(  29,   16), S(  67,   45), S(  53,   25), S(  -1,   46), S(   7,   -6), S(   7,   -6), S(   7,   -6), S(   7,   -6),
        S( -16,   16), S(  15,   40), S(  -3,   22), S( -46,   37), S(   7,   -6), S(   7,   -6), S(   7,   -6), S(   7,   -6),
        S( -41,    6), S( -13,   28), S( -10,    2), S( -47,   21), S(   7,   -6), S(   7,   -6), S(   7,   -6), S(   7,   -6),
        S(  -2,  -12), S(  20,    6), S(  -3,  -16), S( -24,    2), S(   7,   -6), S(   7,   -6), S(   7,   -6), S(   7,   -6),
        S(  33,  -26), S(  34,   -5), S(  10,  -27), S( -18,  -13), S(   7,   -6), S(   7,   -6), S(   7,   -6), S(   7,   -6),
        S(  22,  -53), S(  26,  -17), S(  -3,  -39), S( -10,  -36), S(   7,   -6), S(   7,   -6), S(   7,   -6), S(   7,   -6),
    },
};

constexpr PackedScore MOBILITY[4][28] = {
    {S( -15,  -26), S( -38,  -45), S( -16,  -15), S(  -8,    1), S(   3,    9), S(   7,   18), S(  15,   21), S(  24,   25), S(  35,   18), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S( -24,  -43), S( -35,  -58), S( -22,  -29), S( -14,  -11), S(  -5,   -2), S(   1,    8), S(   3,   16), S(   7,   19), S(   8,   22), S(  11,   22), S(  12,   22), S(  19,   16), S(  19,   22), S(  26,    1), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S( -28,  -43), S( -33,  -69), S( -18,  -49), S(  -5,  -29), S(  -3,  -13), S(  -4,   -3), S(  -3,    4), S(   0,   10), S(   2,   12), S(   6,   17), S(   6,   26), S(   8,   32), S(  12,   35), S(  18,   34), S(  28,   32), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S( -27,    4), S( -62,  -73), S( -82, -126), S( -20, -214), S( -22,  -72), S( -15,  -16), S(  -6,  -27), S(  -4,   -5), S(  -3,   13), S(  -1,   22), S(   1,   26), S(   5,   29), S(   5,   40), S(   8,   39), S(   9,   45), S(  10,   48), S(  11,   50), S(  13,   53), S(  13,   51), S(  18,   46), S(  24,   36), S(  34,   17), S(  30,   25), S(  39,    4), S(  44,   -1), S(  21,    0), S(  17,  -17), S( -79,    9)}
};

constexpr PackedScore THREAT_BY_PAWN[6] = {S(   5,  -19), S(  66,   28), S(  61,   58), S(  77,   27), S(  72,   -1), S(   0,    0)};
constexpr PackedScore THREAT_BY_KNIGHT[2][6] = {
    {S(   7,   29), S(  19,   34), S(  41,   43), S(  74,   14), S(  58,  -32), S(   0,    0)},
    {S(  -7,    8), S(   8,   33), S(  28,   29), S(  65,   32), S(  58,   -5), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_BISHOP[2][6] = {
    {S(  -1,   34), S(  41,   32), S( -10,   32), S(  68,   14), S(  69,   53), S(   0,    0)},
    {S(  -3,    5), S(  18,   22), S( -24,  -14), S(  44,   43), S(  45,  120), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_ROOK[2][6] = {
    {S(   1,   41), S(  17,   59), S(  27,   54), S(   8,  -38), S(  75,   11), S(   0,    0)},
    {S(  -7,    7), S(   2,   15), S(  13,    2), S(   6,  -79), S(  65,   41), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_QUEEN[2][6] = {
    {S(   7,    7), S(  24,   19), S(   9,   47), S(  17,   19), S(  11,  -53), S(  96,   57)},
    {S(  -2,   11), S(   0,    4), S(  -7,   15), S(  -5,    2), S( -17,  -74), S( 124,   46)}
};
constexpr PackedScore THREAT_BY_KING[6] = {S( -23,   46), S(   8,   50), S(  30,   40), S(  86,    7), S(   0,    0), S(   0,    0)};
constexpr PackedScore PUSH_THREAT = S(  14,   19);

constexpr PackedScore ISOLATED_PAWN[8] = {S(  -9,    6), S(  -3,  -15), S( -12,   -8), S( -10,  -16), S( -12,  -15), S(  -8,   -7), S(  -3,  -13), S( -12,    7)};
constexpr PackedScore DOUBLED_PAWN[8] = {S(   2,  -61), S(  15,  -37), S(   1,  -28), S(   0,  -19), S(  -3,  -13), S(  -5,  -21), S(   9,  -41), S(  10,  -74)};
constexpr PackedScore BACKWARDS_PAWN[8] = {S(   0,    0), S(  -8,  -13), S(  -2,  -13), S(  -9,  -11), S(   0,  -16), S(  28,   -1), S(   0,    0), S(   0,    0)};
constexpr PackedScore PAWN_PHALANX[8] = {S(   0,    0), S(   5,   -3), S(  11,   -2), S(  20,    7), S(  41,   40), S( 113,  213), S( -15,  356), S(   0,    0)};
constexpr PackedScore DEFENDED_PAWN[8] = {S(   0,    0), S(   0,    0), S(  19,    7), S(  11,    7), S(  16,   21), S(  31,   61), S( 136,   73), S(   0,    0)};
constexpr PackedScore CANDIDATE_PASSER[2][8] = {
    {S(   0,    0), S( -34,  -17), S( -19,   -8), S(   0,   27), S(  28,   53), S(  62,   87), S(   0,    0), S(   0,    0)},
    {S(   0,    0), S( -20,   -7), S( -10,   14), S(  -4,   29), S(  20,   41), S(  29,  155), S(   0,    0), S(   0,    0)}
};

constexpr PackedScore PASSED_PAWN[2][2][8] = {
    {
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -40,  -40), S( -16,   24), S(   2,  152), S(  54,  225), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -27,  -54), S(   7,  -23), S(  32,   20), S(  61,   29), S(   0,    0)}
    },
    {
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -32,  -56), S(   1,  -24), S(  38,    9), S(  67,   -3), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -33,  -61), S(   0,  -35), S(  12,  -10), S( -20,   -9), S(   0,    0)}
    }
};
constexpr PackedScore OUR_PASSER_PROXIMITY[8] = {S(   0,    0), S(  56,   82), S(  15,   67), S(   2,   44), S(   4,   31), S(  10,   23), S(  18,   20), S(  12,   20)};
constexpr PackedScore THEIR_PASSER_PROXIMITY[8] = {S(   0,    0), S( -61,    8), S(  19,    1), S(  17,   26), S(  22,   46), S(  18,   78), S(  22,   78), S(  23,   69)};

constexpr PackedScore PAWN_STORM[2][4][8] = {
    {
        {S(  30,   40), S(-112,  -57), S( -30,   13), S(  26,   12), S(  11,   25), S( -10,   32), S( -18,   32), S(   0,    0)},
        {S(  22,   14), S(  61, -140), S(  93,  -49), S(  44,   -6), S(  12,    3), S( -29,   13), S(  -8,   12), S(   0,    0)},
        {S(   3,   26), S( 118, -106), S( 109,  -21), S(  56,    7), S(  10,   21), S( -17,   27), S( -28,   32), S(   0,    0)},
        {S(   7,   10), S( 162,  -79), S( 104,  -16), S(  42,   15), S(  -4,   22), S( -26,   15), S( -36,   26), S(   0,    0)}
    },
    {
        {S(   0,    0), S(   0,    0), S(  21,   44), S( -29,   25), S( -10,   30), S(  11,   33), S( -16,   32), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S( 100,    2), S(   9,    7), S(  -7,   18), S(  -6,   18), S(  -8,   12), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(  87,    8), S(   3,   14), S(   0,   27), S(  17,   28), S( -11,   29), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(  39,    5), S(  20,   21), S( -31,   19), S( -12,   14), S( -11,   18), S(   0,    0)}
    }
};
constexpr PackedScore PAWN_SHIELD[4][8] = {
    {S(  37,   33), S( -22,   50), S( -27,   43), S(  11,   37), S(  20,   30), S( -29,   -4), S( -83,  -22), S(   0,    0)},
    {S(  46,    8), S( -27,   19), S(  -6,   11), S(  28,    6), S(  26,   -5), S(  -2,  -19), S( -35,  -39), S(   0,    0)},
    {S(  10,    1), S(   7,  128), S(  -6,    2), S(   7,  -20), S(   7,  -21), S(  -4,  -29), S( -55,  -39), S(   0,    0)},
    {S(  11,   18), S(   2,   14), S( -15,   16), S(   7,   12), S(  17,    9), S(  11,    7), S( -82,    9), S(   0,    0)}
};
constexpr PackedScore SAFE_KNIGHT_CHECK = S( 117,    7);
constexpr PackedScore SAFE_BISHOP_CHECK = S(  60,   20);
constexpr PackedScore SAFE_ROOK_CHECK = S( 105,   21);
constexpr PackedScore SAFE_QUEEN_CHECK = S(  54,   26);
constexpr PackedScore UNSAFE_KNIGHT_CHECK = S(  15,    3);
constexpr PackedScore UNSAFE_BISHOP_CHECK = S(  39,   11);
constexpr PackedScore UNSAFE_ROOK_CHECK = S(  42,    2);
constexpr PackedScore UNSAFE_QUEEN_CHECK = S(  19,    1);
constexpr PackedScore QUEENLESS_ATTACK = S(-165,  142);
constexpr PackedScore KING_ATTACKER_WEIGHT[4] = {S(  54,   -5), S(  27,   -2), S(  28,  -13), S(   8,  -13)};
constexpr PackedScore KING_ATTACKS = S(  15,   -2);
constexpr PackedScore WEAK_KING_RING = S(  16,   -2);
constexpr PackedScore SAFETY_OFFSET = S(  20,  161);

constexpr PackedScore MINOR_BEHIND_PAWN = S(   6,   12);
constexpr PackedScore KNIGHT_OUTPOST = S(  23,   15);
constexpr PackedScore BISHOP_PAWNS[7] = {S(   4,   20), S(   6,   19), S(   4,   11), S(   1,    4), S(  -3,   -5), S(  -3,  -17), S(  -8,  -29)};
constexpr PackedScore BISHOP_PAIR = S(  20,   60);
constexpr PackedScore LONG_DIAG_BISHOP = S(  16,    8);
constexpr PackedScore ROOK_OPEN[2] = {S(  25,    4), S(  13,    4)};

constexpr PackedScore TEMPO = S(  32,   34);

constexpr PackedScore COMPLEXITY_PAWNS = S(   0,    9);
constexpr PackedScore COMPLEXITY_PASSERS = S(   0,   -1);
constexpr PackedScore COMPLEXITY_PAWNS_BOTH_SIDES = S(   0,   66);
constexpr PackedScore COMPLEXITY_PAWN_ENDGAME = S(   0,   78);
constexpr PackedScore COMPLEXITY_OFFSET = S(   0, -128);

#undef S


}