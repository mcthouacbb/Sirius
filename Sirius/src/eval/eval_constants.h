#pragma once

#include "../defs.h"

namespace eval
{

#define S(mg, eg) PackedScore(mg, eg)

constexpr PackedScore MATERIAL[6] = {S(  61,  131), S( 285,  432), S( 306,  443), S( 386,  788), S( 747, 1621), S(0, 0)};

constexpr PackedScore PSQT[6][64] = {
    {
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  57,   78), S(  38,   90), S(  21,  101), S(  54,   76), S(  72,   61), S(  56,   75), S(  45,   95), S(  69,   76),
        S(   6,    0), S( -13,   30), S(   9,   -9), S(   8,  -38), S(   1,  -38), S(   2,  -23), S( -19,   15), S(  -6,    2),
        S(  13,    3), S(  -4,   15), S(  12,  -10), S(  11,  -23), S(  -2,  -24), S(  -1,  -17), S(  -8,    8), S(  -8,    5),
        S(   6,   -5), S(  -5,   15), S(  13,  -21), S(  16,  -17), S(   9,  -16), S(   0,  -15), S( -13,    9), S( -11,   -4),
        S(  -1,   -7), S(   8,    9), S(   4,    0), S(   1,   -1), S(  -8,   -2), S(  -8,   -9), S( -21,    8), S( -22,   -5),
        S(   9,   -7), S(  25,   10), S(  31,  125), S(   9,    0), S(  -1,  -11), S(  -4,   -8), S( -14,   12), S( -14,   -2),
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
    },
    {
        S( -68,  -97), S( -76,  -25), S( -29,  -17), S(  -3,   -9), S( -31,    1), S( -58,    4), S( -98,    1), S( -84,  -59),
        S( -18,  -14), S(  12,    1), S(  23,   -2), S(  -2,    8), S(   3,   11), S(   5,   10), S(   0,   12), S( -10,   -2),
        S(   2,   -7), S( -10,    7), S(  29,   -2), S(  18,   16), S(   7,   22), S(  15,   12), S(   7,    2), S(  -5,   -1),
        S(  26,    4), S(  22,   16), S(  36,   18), S(  21,   25), S(  22,   26), S(  28,   13), S(  21,    2), S(  12,    8),
        S(  10,   16), S(  14,   16), S(  20,   19), S(  19,   27), S(  21,   20), S(  20,   17), S(  23,    0), S(  10,    2),
        S(  15,   -1), S(  16,    4), S(  18,    2), S(  16,   15), S(   7,   15), S(   5,   -1), S(   8,   -8), S(  -5,   -8),
        S(  10,   -1), S(  11,   -6), S(   9,   -5), S(  13,   -1), S(   8,   -1), S(  -2,   -4), S(  -1,   -8), S( -13,   -8),
        S(  -3,  -16), S(  -5,  -12), S(   4,  -10), S(   8,    1), S(   1,   -3), S( -15,  -10), S(  -8,  -16), S( -41,   -8),
    },
    {
        S( -47,  -13), S( -29,    7), S(  -8,   -2), S( -72,   11), S( -64,   16), S( -57,    5), S( -31,    7), S( -32,    6),
        S( -22,   -9), S( -44,    5), S( -13,    3), S( -10,    3), S( -22,   11), S(   1,   -1), S( -13,   -5), S(  -3,   -7),
        S(  10,   13), S(  -2,    8), S(  21,    6), S(   4,   12), S(  16,    6), S(   1,    0), S(  10,    5), S(   6,    1),
        S( -11,    6), S(   2,   13), S(   2,   17), S(  17,   19), S(  23,   23), S(  19,    8), S(   6,   12), S(  -4,    1),
        S(  16,   -6), S(  -3,   13), S(   7,   12), S(  15,   15), S(  21,   12), S(   6,   14), S(   5,    5), S(   5,   -1),
        S(  19,   -9), S(  22,   -1), S(   4,   -1), S(  10,   12), S(   1,    8), S(   5,   -3), S(  20,    1), S(   6,   -9),
        S(  25,  -18), S(  24,  -24), S(  27,   -9), S(   7,   -3), S(  -1,    0), S(  12,  -16), S(   6,  -26), S(  17,  -12),
        S(  28,  -36), S(  21,  -15), S(  -5,   -2), S(  19,   -5), S(   1,   -2), S(   0,    1), S(  11,   -3), S(   6,  -17),
    },
    {
        S(  19,   10), S( -14,   33), S( -11,   27), S( -19,   23), S( -11,   23), S( -14,   31), S(   8,   18), S(  10,   18),
        S(  26,    3), S(  32,    7), S(  11,   18), S(  -5,   21), S(  24,   14), S(  11,   24), S(   8,   20), S(  12,   12),
        S(  -5,    5), S(  23,    7), S(   3,    9), S(   6,   10), S(   6,    9), S(   2,   18), S(  17,   10), S(  -4,   14),
        S( -10,   11), S( -15,   20), S(  -6,   16), S(  -8,   11), S(  -1,   10), S(   6,   11), S(   6,   10), S(  -7,   13),
        S( -18,    5), S(   0,    9), S( -19,   15), S(  -7,    9), S(  -6,    3), S(  -9,    6), S(  -9,    5), S(  -8,    3),
        S(   5,  -20), S(  23,  -24), S(  -1,  -11), S(  -1,  -13), S(  -4,  -12), S(  -7,  -13), S(  -4,  -15), S( -11,  -12),
        S(  -5,  -27), S(  26,  -35), S(   6,  -22), S(   3,  -19), S(   4,  -21), S(   2,  -19), S(  -6,  -18), S( -11,  -22),
        S(  -5,  -39), S(  -2,  -19), S(   2,  -19), S(   9,  -24), S(   7,  -25), S(   0,  -19), S(   0,  -23), S(  -2,  -22),
    },
    {
        S(  12,   -6), S(  54,  -29), S( -10,   38), S( -11,   24), S(  19,    3), S(  -9,   20), S( -22,    8), S( -14,   10),
        S(  38,    5), S(  12,   15), S(  -7,   27), S( -31,   54), S(  -5,   35), S(  16,    2), S(  26,  -21), S(  20,   -8),
        S(   6,   10), S(   0,    1), S(  -7,   18), S( -15,   17), S(   9,   13), S(  22,    2), S(  22,  -17), S(  31,  -17),
        S(  -5,   16), S( -15,   33), S(  -9,   15), S( -16,   25), S(  -3,   23), S(  13,    2), S(  11,    5), S(   8,   -2),
        S(  -4,   14), S(  -2,   12), S( -14,   20), S(  -8,   27), S( -11,   33), S(  -2,   18), S(   6,   12), S(   3,    4),
        S(   3,  -12), S(   6,   -6), S(  -6,    8), S( -13,   15), S(  -8,   13), S(  -3,   13), S(  12,  -11), S(  11,  -19),
        S(   3,  -44), S(  10,  -61), S(   2,  -30), S(   1,  -14), S(  -1,   -5), S(   2,  -17), S(   4,  -23), S(  10,  -38),
        S(   8,  -57), S( -16,  -42), S( -19,  -23), S( -10,  -20), S(  -7,  -20), S( -11,  -15), S( -13,  -18), S( -12,  -18),
    },
    {
        S(  46,  -72), S(  23,    0), S( -42,  -23), S( -68,    2), S(   9,   -5), S(   9,   -5), S(   9,   -5), S(   9,   -5),
        S(  -7,   18), S(  27,   56), S(  -7,   28), S( -15,   33), S(   9,   -5), S(   9,   -5), S(   9,   -5), S(   9,   -5),
        S(  32,   15), S(  49,   52), S(  26,   30), S( -30,   53), S(   9,   -5), S(   9,   -5), S(   9,   -5), S(   9,   -5),
        S( -15,   19), S( -13,   54), S( -41,   32), S( -88,   49), S(   9,   -5), S(   9,   -5), S(   9,   -5), S(   9,   -5),
        S( -55,   14), S( -52,   44), S( -49,   12), S( -87,   31), S(   9,   -5), S(   9,   -5), S(   9,   -5), S(   9,   -5),
        S( -14,   -3), S(  -9,   21), S( -32,   -8), S( -52,    9), S(   9,   -5), S(   9,   -5), S(   9,   -5), S(   9,   -5),
        S(  38,  -24), S(  31,    0), S(   6,  -31), S( -24,  -16), S(   9,   -5), S(   9,   -5), S(   9,   -5), S(   9,   -5),
        S(  37,  -56), S(  37,  -21), S(  12,  -52), S(   0,  -47), S(   9,   -5), S(   9,   -5), S(   9,   -5), S(   9,   -5),
    },
};

constexpr PackedScore MOBILITY[4][28] = {
    {S(  -3,  -29), S( -37,  -46), S( -16,  -16), S(  -8,    0), S(   2,    8), S(   6,   18), S(  13,   22), S(  21,   26), S(  30,   20), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S( -10,  -46), S( -30,  -61), S( -18,  -32), S( -11,  -14), S(  -3,   -4), S(   2,    7), S(   3,   15), S(   6,   19), S(   6,   22), S(   8,   23), S(  10,   23), S(  14,   18), S(  13,   25), S(  19,    4), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S( -13,  -45), S( -30,  -70), S( -14,  -53), S(  -3,  -31), S(   0,  -17), S(  -2,   -6), S(  -1,    1), S(   2,    7), S(   3,   11), S(   6,   17), S(   3,   27), S(   4,   34), S(   6,   39), S(  10,   40), S(  17,   36), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S(  -2,    6), S( -35,  -72), S( -62, -116), S( -18, -203), S( -24,  -64), S( -16,  -14), S(  -6,  -26), S(  -4,   -7), S(  -3,   10), S(   0,   19), S(   3,   22), S(   6,   25), S(   6,   36), S(  10,   35), S(  11,   41), S(  12,   43), S(  13,   45), S(  16,   46), S(  15,   46), S(  22,   39), S(  26,   31), S(  33,   14), S(  30,   19), S(  38,   -5), S(  37,   -5), S(   8,    3), S( -10,   -8), S(-112,   20)}
};

constexpr PackedScore THREAT_BY_PAWN[6] = {S(   4,  -20), S(  66,   29), S(  59,   60), S(  81,   24), S(  72,   -3), S(   0,    0)};
constexpr PackedScore THREAT_BY_KNIGHT[2][6] = {
    {S(   4,   28), S(  15,   39), S(  36,   43), S(  73,   13), S(  55,  -29), S(   0,    0)},
    {S(  -8,    9), S(   6,   39), S(  29,   29), S(  64,   33), S(  60,   -1), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_BISHOP[2][6] = {
    {S(  -2,   35), S(  39,   32), S( -14,   35), S(  68,   15), S(  69,   44), S(   0,    0)},
    {S(  -4,    5), S(  17,   22), S( -25,  -12), S(  44,   44), S(  47,  109), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_ROOK[2][6] = {
    {S(   0,   40), S(  16,   58), S(  25,   53), S( -11,  -29), S(  60,   14), S(   0,    0)},
    {S(  -7,    7), S(   2,   15), S(  13,    3), S( -12,  -66), S(  39,   64), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_QUEEN[2][6] = {
    {S(   7,    5), S(  24,   19), S(  10,   44), S(  15,    1), S(  10,  -56), S(  96,   50)},
    {S(  -3,   12), S(   1,    8), S(  -5,   14), S(  -4,    3), S( -17,  -73), S( 113,   49)}
};
constexpr PackedScore THREAT_BY_KING[6] = {S( -19,   44), S(   8,   48), S(  27,   41), S(  85,    8), S(   0,    0), S(   0,    0)};
constexpr PackedScore KNIGHT_HIT_QUEEN = S(  11,    2);
constexpr PackedScore BISHOP_HIT_QUEEN = S(  17,   11);
constexpr PackedScore ROOK_HIT_QUEEN = S(  20,   -3);
constexpr PackedScore PUSH_THREAT = S(  14,   18);

constexpr PackedScore ISOLATED_PAWN[8] = {S(  -8,    6), S(  -3,  -16), S( -12,   -8), S( -10,  -16), S( -12,  -14), S(  -8,   -7), S(  -4,  -14), S( -11,    7)};
constexpr PackedScore DOUBLED_PAWN[8] = {S(  -1,  -60), S(  13,  -37), S(   0,  -27), S(  -2,  -17), S(  -5,  -12), S(  -8,  -19), S(   5,  -38), S(   6,  -70)};
constexpr PackedScore BACKWARDS_PAWN[8] = {S(   0,    0), S(  -9,  -13), S(  -2,  -14), S(  -8,  -12), S(   2,  -18), S(  32,  -12), S(   0,    0), S(   0,    0)};
constexpr PackedScore PAWN_PHALANX[8] = {S(   0,    0), S(   5,   -4), S(  11,   -2), S(  20,    8), S(  39,   41), S( 115,  214), S(   8,  342), S(   0,    0)};
constexpr PackedScore DEFENDED_PAWN[8] = {S(   0,    0), S(   0,    0), S(  18,    6), S(  11,    8), S(  17,   21), S(  32,   64), S( 140,   75), S(   0,    0)};
constexpr PackedScore CANDIDATE_PASSER[2][8] = {
    {S(   0,    0), S( -32,  -15), S( -18,   -8), S(   0,   26), S(  25,   52), S(  67,  112), S(   0,    0), S(   0,    0)},
    {S(   0,    0), S( -17,  -10), S(  -8,   13), S(  -5,   28), S(  18,   41), S(  28,  180), S(   0,    0), S(   0,    0)}
};

constexpr PackedScore PASSED_PAWN[2][2][8] = {
    {
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -36,  -41), S( -17,   22), S(  10,  159), S(  67,  217), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -23,  -52), S(   2,  -19), S(  37,   41), S(  67,   26), S(   0,    0)}
    },
    {
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -29,  -55), S(  -6,  -17), S(  39,   34), S(  69,   -3), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -30,  -56), S(  -6,  -23), S(  17,   19), S(  -8,  -14), S(   0,    0)}
    }
};
constexpr PackedScore OUR_PASSER_PROXIMITY[8] = {S(  78,   98), S(  68,  101), S(  44,   72), S(   7,   58), S(   5,   38), S(   7,   25), S(  12,   17), S(  -7,   24)};
constexpr PackedScore THEIR_PASSER_PROXIMITY[8] = {S( -49,  -10), S(  -2,    2), S(  25,    0), S(  20,   31), S(  15,   64), S(  19,   78), S(  25,   79), S(  30,   68)};

constexpr PackedScore PAWN_STORM[2][4][8] = {
    {
        {S(  43,   36), S(-134,  -45), S( -56,  -31), S(  58,    1), S(  26,   22), S(   0,   31), S(  -9,   31), S(   0,    0)},
        {S(  34,    6), S(  41, -120), S(  90,  -80), S(  58,  -20), S(  15,   -2), S( -23,    8), S(   4,    6), S(   0,    0)},
        {S(   9,   20), S(  97,  -99), S( 101,  -49), S(  61,   -2), S(  14,   17), S( -14,   23), S( -14,   27), S(   0,    0)},
        {S(  18,    6), S( 144,  -75), S( 118,  -22), S(  69,    5), S(   9,   16), S( -15,   10), S( -22,   20), S(   0,    0)}
    },
    {
        {S(   0,    0), S(   0,    0), S(  60,   62), S( -23,   33), S( -24,   40), S( -16,   57), S(   0,   45), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(  98,   16), S(  -5,   18), S( -18,   27), S( -30,   42), S( -40,   33), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S( 106,   17), S(   7,   24), S( -16,   40), S(  14,   43), S(  49,   29), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(  87,   17), S(  16,   25), S( -26,   25), S( -22,   22), S(  -2,   18), S(   0,    0)}
    }
};
constexpr PackedScore PAWN_SHIELD[4][8] = {
    {S(  46,   36), S( -20,   51), S( -12,   42), S(  40,   31), S(  43,   17), S( -29,   -1), S( -72,  -15), S(   0,    0)},
    {S(  48,    9), S( -24,   19), S(   8,    7), S(  53,   -1), S(  43,  -15), S(  13,  -19), S( -40,  -33), S(   0,    0)},
    {S(  22,   -3), S(  17,  120), S(  12,   -2), S(  34,  -22), S(  24,  -19), S(  -6,  -26), S( -57,  -41), S(   0,    0)},
    {S(  15,   17), S(   3,   12), S(   2,   11), S(  29,    5), S(  34,    2), S(   8,    6), S( -81,    7), S(   0,    0)}
};
constexpr PackedScore SAFE_KNIGHT_CHECK = S( 100,    7);
constexpr PackedScore SAFE_BISHOP_CHECK = S(  63,   18);
constexpr PackedScore SAFE_ROOK_CHECK = S( 104,   16);
constexpr PackedScore SAFE_QUEEN_CHECK = S(  51,   26);
constexpr PackedScore UNSAFE_KNIGHT_CHECK = S(  16,    2);
constexpr PackedScore UNSAFE_BISHOP_CHECK = S(  39,   10);
constexpr PackedScore UNSAFE_ROOK_CHECK = S(  39,    2);
constexpr PackedScore UNSAFE_QUEEN_CHECK = S(  16,    3);
constexpr PackedScore QUEENLESS_ATTACK = S(-140,  146);
constexpr PackedScore KING_ATTACKER_WEIGHT[4] = {S(  56,   -5), S(  22,    0), S(  28,  -13), S(   4,  -10)};
constexpr PackedScore KING_ATTACKS = S(   7,   -1);
constexpr PackedScore WEAK_KING_RING = S(   8,   -1);
constexpr PackedScore KING_FLANK_ATTACKS[2] = {S(  11,   -4), S(   7,    1)};
constexpr PackedScore KING_FLANK_DEFENSES[2] = {S(  -6,    0), S( -10,    2)};
constexpr PackedScore SAFETY_OFFSET = S(  77,  213);

constexpr PackedScore MINOR_BEHIND_PAWN = S(   6,   12);
constexpr PackedScore KNIGHT_OUTPOST = S(  22,   16);
constexpr PackedScore BISHOP_PAWNS[7] = {S(   3,   21), S(   5,   20), S(   3,   12), S(   1,    5), S(  -2,   -4), S(  -2,  -18), S(  -6,  -30)};
constexpr PackedScore BISHOP_PAIR = S(  19,   60);
constexpr PackedScore LONG_DIAG_BISHOP = S(  15,    8);
constexpr PackedScore ROOK_OPEN[2] = {S(  24,    4), S(  12,    5)};

constexpr PackedScore TEMPO = S(  32,   34);

constexpr PackedScore COMPLEXITY_PAWNS = S(   0,   10);
constexpr PackedScore COMPLEXITY_PAWNS_BOTH_SIDES = S(   0,   63);
constexpr PackedScore COMPLEXITY_PAWN_ENDGAME = S(   0,   80);
constexpr PackedScore COMPLEXITY_OFFSET = S(   0, -134);

#undef S


}