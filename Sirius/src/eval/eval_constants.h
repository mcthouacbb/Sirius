#pragma once

#include "../defs.h"

namespace eval
{

// clang-format off
#define S(mg, eg) ScorePair(mg, eg)

constexpr ScorePair MATERIAL[6] = {S(  65,  135), S( 316,  455), S( 331,  474), S( 424,  814), S( 878, 1890), S(0, 0)};

constexpr ScorePair PSQT[6][64] = {
    {
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  72,   87), S(   8,  100), S(  24,   68), S(  64,   73), S(  53,   64), S(  30,   79), S(  38,   92), S(  79,   81),
        S(   5,   11), S(  -5,   19), S(  -2,    4), S(   6,  -15), S(  -5,  -23), S(  -7,  -11), S( -16,   17), S(  -3,   10),
        S(   7,    8), S(   4,   20), S(  12,   -6), S(  10,  -16), S(   3,  -16), S(   0,  -10), S(   1,   10), S(  -8,    9),
        S(  -4,   -4), S(  -6,   14), S(  16,  -26), S(  17,  -19), S(  11,  -18), S(   2,  -13), S( -13,   11), S( -15,   -4),
        S( -11,   -7), S(  13,    5), S(   3,    3), S(   7,   -1), S(  -4,    0), S(  -8,   -3), S( -15,   10), S( -23,   -5),
        S(  -2,   -9), S(  26,    5), S(  23,   60), S(   5,    7), S(  -2,   -2), S(  -5,   -1), S(  -5,   10), S( -17,   -3),
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
    },
    {
        S( -53, -127), S( -84,   18), S(-110,   40), S(   4,    6), S( -30,   20), S( -76,   13), S( -79,    0), S( -89,  -86),
        S(  -5,   -8), S(  -4,    6), S(  22,    9), S(  24,   20), S(  18,   26), S(  12,   12), S(  -8,    5), S(  -8,   -6),
        S(  12,    0), S(   9,   12), S(  32,   16), S(  25,   19), S(  15,   21), S(  21,   15), S(   8,   10), S(   9,   -8),
        S(  30,    8), S(  29,   13), S(  33,   18), S(  27,   30), S(  30,   28), S(  19,   17), S(  21,    8), S(  13,    2),
        S(  20,    7), S(  26,    8), S(  24,   16), S(  17,   29), S(  18,   24), S(  18,   17), S(  17,    3), S(   9,    2),
        S(   6,  -10), S(  20,   -4), S(  15,    2), S(  16,   13), S(  10,   14), S(  -2,   -1), S(   3,   -5), S(  -6,  -12),
        S(   5,   -4), S(   7,    1), S(   8,  -13), S(  12,   -1), S(   2,    1), S(   0,  -12), S(  -2,   -9), S( -14,  -28),
        S( -19,  -19), S( -10,  -21), S(   3,  -17), S(   6,   -9), S(  -3,   -6), S( -12,  -15), S( -15,  -24), S( -21,  -41),
    },
    {
        S( -25,  -37), S( -48,   17), S( -90,   26), S( -54,   15), S( -66,   23), S( -64,   21), S( -50,   19), S( -38,   -5),
        S( -10,   -8), S( -42,    8), S( -10,    9), S( -26,   16), S( -25,   16), S(  -9,    6), S( -16,   -8), S(  -4,   -9),
        S(  19,   -4), S(   9,    9), S(  26,    6), S(  19,   14), S(  17,   14), S(   9,    3), S(  12,    5), S(  12,   -7),
        S(   3,    0), S(  11,   12), S(  14,   16), S(  18,   28), S(  23,   28), S(  15,   12), S(  13,   12), S(   4,   -8),
        S(  18,  -15), S(   9,    4), S(  12,   13), S(  20,   16), S(  22,   17), S(  13,   14), S(   6,    3), S(  16,  -13),
        S(  19,  -10), S(  23,   -3), S(  11,   -7), S(  12,   11), S(   9,    6), S(   6,   -9), S(  23,   -2), S(  14,  -11),
        S(  19,  -17), S(  26,  -28), S(  27,  -17), S(   9,   -5), S(   0,   -6), S(  12,  -17), S(   8,  -25), S(  23,  -11),
        S(  10,  -28), S(  23,  -17), S( -13,   -6), S(   9,  -16), S(   4,  -15), S(  -5,   -7), S(  12,  -21), S(  10,  -23),
    },
    {
        S(  33,    6), S(  27,   12), S(  22,   18), S(  15,   20), S(  22,   19), S(  17,   20), S(  25,   19), S(  26,   16),
        S(  21,   14), S(   9,   21), S(  21,   19), S(  12,   26), S(  25,   24), S(  15,   24), S(   7,   26), S(  15,   24),
        S( -14,   16), S(  11,    8), S(   6,   15), S(  10,   11), S(  15,    8), S(   0,   19), S(   7,   14), S(  -5,   24),
        S( -15,   10), S( -11,   19), S(  -5,   16), S(  -4,    9), S(  -2,    6), S(   1,   12), S(  -4,   14), S( -11,   15),
        S( -22,   -3), S( -10,    5), S( -17,   14), S( -10,    7), S( -12,    4), S( -16,   11), S( -16,    8), S( -17,    3),
        S( -18,  -24), S(   6,  -26), S(  -7,   -9), S(  -4,  -14), S(   0,  -20), S( -10,  -12), S(  -6,  -17), S( -17,  -15),
        S( -47,  -33), S(  -5,  -36), S(   3,  -26), S(   2,  -23), S(  -3,  -23), S(  -4,  -20), S( -11,  -27), S( -20,  -22),
        S( -15,  -36), S( -20,  -19), S(   6,  -25), S(  14,  -29), S(   6,  -27), S(  -2,  -21), S(   0,  -27), S(  -1,  -24),
    },
    {
        S(   3,   28), S(  44,   10), S(  37,   11), S(  10,   28), S(  13,   35), S(  31,    5), S(  12,   12), S(  -7,   29),
        S(  28,    0), S(  26,    2), S(  15,    7), S( -23,   48), S(   7,   25), S(  11,    3), S(  20,  -14), S(  12,   -2),
        S(   2,   18), S(  12,   11), S(  -5,   25), S( -18,   38), S(   5,   26), S(  13,    0), S(  22,  -14), S(  19,  -11),
        S(  -2,   16), S( -12,   25), S( -11,   20), S( -23,   38), S( -22,   47), S(  -1,   17), S(  -2,   23), S(   4,    1),
        S( -12,   19), S(  -3,    9), S( -17,   21), S( -16,   28), S( -20,   44), S(  -5,   22), S(  -4,   13), S(  -2,    3),
        S(  -1,  -14), S(   2,  -14), S(  -5,   -1), S( -15,   10), S(  -7,    8), S(  -5,    9), S(  10,  -10), S(   2,   -3),
        S(   0,  -55), S(   7,  -77), S(   0,  -48), S(  -4,  -19), S(  -6,  -12), S(   7,  -31), S(   1,  -25), S(   1,  -23),
        S(   2,  -58), S( -10,  -76), S( -20,  -51), S(  -8,  -48), S(  -3,  -37), S(  -8,  -38), S( -14,  -28), S(  -8,  -25),
    },
    {
        S(  31, -139), S(  25,   72), S( -18,   25), S( -21,   10), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  48,   14), S(  16,  101), S( -12,   54), S( -53,   35), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  29,   55), S(   1,  109), S( -53,   55), S(-103,    6), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S( -26,   51), S( -39,  100), S( -71,   43), S(-120,   -3), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S( -61,   46), S( -51,   77), S( -80,   24), S(-113,  -14), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  -1,   21), S(  -4,   48), S( -39,   -1), S( -63,  -36), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  59,   -8), S(  45,   21), S(  17,  -35), S(  -9,  -71), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  58,  -40), S(  57,   -4), S(  19,  -57), S(  16, -114), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
    },
};

constexpr ScorePair MOBILITY[4][28] = {
    {S(  -4,  -23), S( -34,  -53), S( -23,  -15), S( -11,    1), S(  -1,   11), S(   6,   19), S(  14,   23), S(  21,   26), S(  32,   18), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S(   0,  -36), S( -39,  -58), S( -22,  -32), S( -11,  -12), S(  -5,    0), S(   0,   10), S(   2,   17), S(   5,   19), S(   4,   21), S(   7,   23), S(   6,   23), S(  12,   15), S(  10,   19), S(  34,  -11), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S( -25,  -64), S( -53,  -69), S( -18,  -42), S( -11,  -26), S(  -2,  -16), S(   2,   -4), S(   2,    7), S(   4,   11), S(   6,   14), S(   8,   20), S(   8,   29), S(   9,   36), S(   8,   41), S(  13,   41), S(  38,   20), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S( -17,   42), S( -23,   -3), S( -29,  -46), S( -46,  -99), S( -25, -126), S( -14,  -73), S(  -8,  -47), S(  -5,  -28), S(  -4,  -13), S(  -4,    3), S(  -2,   12), S(  -2,   21), S(   0,   28), S(   1,   34), S(   2,   37), S(   3,   40), S(   3,   44), S(   5,   41), S(   5,   43), S(   6,   43), S(   9,   37), S(  20,   14), S(  17,   22), S(  33,   -2), S(  22,   -1), S(  29,  -20), S(  12,  -17), S( -13,   -8)}
};

constexpr ScorePair THREAT_BY_PAWN[6] = {S( -11,  -15), S(  75,   39), S(  72,   64), S(  75,   46), S(  58,   20), S(   0,    0)};
constexpr ScorePair THREAT_BY_KNIGHT[2][6] = {
    {S(   8,   34), S(  11,   74), S(  48,   31), S(  86,   12), S(  51,   -9), S(   0,    0)},
    {S(  -8,   10), S(  13,   62), S(  38,   29), S(  72,   45), S(  50,   40), S(   0,    0)}
};
constexpr ScorePair THREAT_BY_BISHOP[2][6] = {
    {S(   4,   34), S(  38,   45), S(   7,   29), S(  56,   37), S(  67,   32), S(   0,    0)},
    {S(  -5,    3), S(  20,   21), S(   2,   -6), S(  59,   66), S(  55,   91), S(   0,    0)}
};
constexpr ScorePair THREAT_BY_ROOK[2][6] = {
    {S(  -2,   50), S(  30,   57), S(  44,   48), S(  -7,  -67), S(  66,   -7), S(   0,    0)},
    {S(  -9,    8), S(   8,   14), S(  20,    4), S(  14, -102), S(  50,   94), S(   0,    0)}
};
constexpr ScorePair THREAT_BY_QUEEN[2][6] = {
    {S(   8,   23), S(  27,   21), S(  17,   59), S(  17,   13), S(   2,  -53), S( 139,   72)},
    {S(  -6,   18), S(   1,    5), S(  -6,   21), S(  -4,   -7), S( -14,  -45), S( 109,  168)}
};
constexpr ScorePair THREAT_BY_KING[6] = {S(  48,   12), S(  18,   42), S(  97,   30), S(  84,    7), S(   0,    0), S(   0,    0)};
constexpr ScorePair KNIGHT_HIT_QUEEN = S(   8,   -1);
constexpr ScorePair BISHOP_HIT_QUEEN = S(  14,   18);
constexpr ScorePair ROOK_HIT_QUEEN = S(  20,   -4);
constexpr ScorePair PUSH_THREAT = S(  13,   18);
constexpr ScorePair RESTRICTED_SQUARES = S(   3,    2);

constexpr ScorePair ISOLATED_PAWN[8] = {S(  -2,    2), S(  -5,  -16), S(  -9,  -12), S( -10,  -15), S( -14,  -14), S( -10,   -6), S(  -5,  -11), S(  -7,    1)};
constexpr ScorePair DOUBLED_PAWN[8] = {S(  -2,  -52), S(   2,  -38), S(  -3,  -24), S(  -8,  -14), S( -12,   -2), S(  -7,  -21), S(   4,  -40), S(   6,  -50)};
constexpr ScorePair BACKWARDS_PAWN[8] = {S(   0,    0), S(  -7,  -14), S(   0,  -15), S(  -7,  -13), S(   4,  -16), S(  11,   33), S(   0,    0), S(   0,    0)};
constexpr ScorePair PAWN_PHALANX[8] = {S(   0,    0), S(   5,   -6), S(  12,   -3), S(  19,   10), S(  37,   37), S(  66,  145), S(  96,  200), S(   0,    0)};
constexpr ScorePair DEFENDED_PAWN[8] = {S(   0,    0), S(   0,    0), S(  17,    5), S(  12,    9), S(  18,   24), S(  45,   60), S( 104,  104), S(   0,    0)};
constexpr ScorePair CANDIDATE_PASSER[2][8] = {
    {S(   0,    0), S( -19,  -11), S(  -7,  -15), S(  -4,    5), S(  14,   25), S(  45,   86), S(   0,    0), S(   0,    0)},
    {S(   0,    0), S( -15,   -6), S(  -7,    8), S(  -6,   25), S(  10,   38), S(  39,  116), S(   0,    0), S(   0,    0)}
};

constexpr ScorePair PASSED_PAWN[2][2][8] = {
    {
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -31,  -30), S( -16,   28), S(  28,  131), S( 120,  203), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -24,  -41), S(  -4,  -11), S(  31,   58), S(  60,   73), S(   0,    0)}
    },
    {
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -25,  -46), S(  -8,  -11), S(  30,   57), S(  31,   38), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -28,  -54), S(  -8,  -25), S(  16,   31), S(  -7,   14), S(   0,    0)}
    }
};
constexpr ScorePair OUR_PASSER_PROXIMITY[8] = {S(  52,  114), S( 105,   70), S(  38,   70), S(  -6,   60), S(  -2,   34), S(   2,   22), S(  16,   11), S(   6,   16)};
constexpr ScorePair THEIR_PASSER_PROXIMITY[8] = {S( -51,    7), S(   9,   -4), S(  27,    1), S(  22,   27), S(  16,   59), S(  16,   76), S(  21,   76), S(  20,   62)};
constexpr ScorePair PASSER_DEFENDED_PUSH[8] = {S(   0,    0), S(   0,    0), S(   0,    0), S(   8,    7), S(  12,   17), S(  30,   36), S(  66,   95), S(   0,    0)};

constexpr ScorePair PAWN_STORM[2][4][8] = {
    {
        {S(  33,   27), S( -71,  -75), S(  -6,  -35), S(  48,   10), S(  22,   22), S(   7,   25), S(  -2,   27), S(   0,    0)},
        {S(  23,   20), S(  50,  -88), S(  68,  -51), S(  38,   -1), S(   9,   17), S( -25,   21), S(   2,   20), S(   0,    0)},
        {S(   8,   17), S( 100,  -85), S( 115,  -48), S(  67,    0), S(  11,   17), S( -15,   22), S(  -5,   19), S(   0,    0)},
        {S(   9,   -1), S( 131,  -85), S( 110,  -48), S(  59,   -4), S(   6,    7), S( -25,    2), S( -27,    5), S(   0,    0)}
    },
    {
        {S(   0,    0), S(   0,    0), S(  78,   45), S(  -4,   24), S(  -6,   32), S(  14,   42), S(  18,   32), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S( 136,   32), S( -25,   27), S( -19,   35), S( -10,   43), S(  14,   29), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S( 125,   21), S(   9,   23), S(  -8,   33), S(   5,   35), S(  38,   22), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S( 131,    7), S(  14,   14), S( -18,   14), S(  -8,   12), S( -19,   -4), S(   0,    0)}
    }
};
constexpr ScorePair PAWN_SHIELD[4][8] = {
    {S(  54,   30), S(  -2,   41), S( -15,   33), S(  30,   27), S(  44,   16), S(   7,   20), S(  -4,   19), S(   0,    0)},
    {S(  41,   22), S( -31,   25), S(   6,   20), S(  39,   13), S(  33,    6), S(  -4,    1), S( -55,  -16), S(   0,    0)},
    {S(  22,   16), S(   3,   57), S(   7,   10), S(  37,   -5), S(  32,   -2), S(   1,    0), S( -49,  -28), S(   0,    0)},
    {S(  14,    9), S( -24,    1), S(   4,   -5), S(  25,   -9), S(  19,   -7), S(  25,   -2), S( -18,   -3), S(   0,    0)}
};
constexpr ScorePair SAFE_KNIGHT_CHECK = S(  98,    1);
constexpr ScorePair SAFE_BISHOP_CHECK = S(  70,   17);
constexpr ScorePair SAFE_ROOK_CHECK = S( 107,    9);
constexpr ScorePair SAFE_QUEEN_CHECK = S(  61,   22);
constexpr ScorePair UNSAFE_KNIGHT_CHECK = S(  17,    0);
constexpr ScorePair UNSAFE_BISHOP_CHECK = S(  36,    6);
constexpr ScorePair UNSAFE_ROOK_CHECK = S(  41,    2);
constexpr ScorePair UNSAFE_QUEEN_CHECK = S(  19,    6);
constexpr ScorePair QUEENLESS_ATTACK = S(-116,  346);
constexpr ScorePair KING_ATTACKER_WEIGHT[4] = {S(  57,   -3), S(  22,    0), S(  22,   -8), S(   4,  -16)};
constexpr ScorePair KING_ATTACKS = S(   7,   -1);
constexpr ScorePair WEAK_KING_RING = S(   4,    0);
constexpr ScorePair KING_FLANK_ATTACKS[2] = {S(  13,   -4), S(   3,    0)};
constexpr ScorePair KING_FLANK_DEFENSES[2] = {S(  -8,    0), S(  -7,    3)};
constexpr ScorePair SAFETY_OFFSET = S(  78,  178);

constexpr ScorePair MINOR_BEHIND_PAWN = S(   2,   10);
constexpr ScorePair KNIGHT_OUTPOST = S(  20,   14);
constexpr ScorePair BISHOP_PAWNS[7] = {S(   8,    7), S(   4,   15), S(   4,    9), S(   1,    4), S(  -2,   -3), S(  -6,  -10), S(  -9,  -21)};
constexpr ScorePair BISHOP_PAIR = S(  22,   67);
constexpr ScorePair LONG_DIAG_BISHOP = S(  12,   11);
constexpr ScorePair ROOK_OPEN[2] = {S(  31,   -1), S(  18,    3)};

constexpr ScorePair TEMPO = S(  29,   19);

constexpr ScorePair COMPLEXITY_PAWNS = S(   0,   10);
constexpr ScorePair COMPLEXITY_PAWNS_BOTH_SIDES = S(   0,  125);
constexpr ScorePair COMPLEXITY_PAWN_ENDGAME = S(   0,  132);
constexpr ScorePair COMPLEXITY_OFFSET = S(   0, -209);

#undef S
// clang-format on

}
