#pragma once

#include "../defs.h"

namespace eval
{

#define S(mg, eg) PackedScore(mg, eg)

constexpr PackedScore MATERIAL[6] = {S(  62,  129), S( 291,  425), S( 311,  437), S( 392,  776), S( 738, 1604), S(0, 0)};

constexpr PackedScore PSQT[6][64] = {
	{
		S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
		S(  61,   75), S(  33,   90), S(  19,  107), S(  57,   76), S(  74,   64), S(  51,   81), S(  39,  100), S(  60,   82), 
		S(  21,    5), S(  -4,   36), S(  10,   -1), S(  17,  -22), S(   9,  -20), S(   7,   -8), S( -17,   28), S(  -1,   13), 
		S(  16,    4), S(  -2,   11), S(  15,  -21), S(  10,  -24), S(  -1,  -23), S(  -1,  -14), S( -10,   11), S( -10,    8), 
		S(   7,   -3), S(  -3,   14), S(  15,  -27), S(  16,  -17), S(   9,  -16), S(  -1,  -11), S( -15,   12), S( -13,   -1), 
		S(   0,   -5), S(   9,    7), S(   5,   -5), S(   1,   -3), S(  -8,   -2), S( -10,   -7), S( -23,   11), S( -24,   -3), 
		S(  11,   -7), S(  27,    9), S(  31,  104), S(   9,    0), S(  -2,   -9), S(  -6,   -6), S( -16,   14), S( -15,    1), 
		S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
	},
	{
		S( -67,  -99), S( -72,  -29), S( -24,  -17), S(   3,  -10), S( -29,    2), S( -57,    5), S( -97,    3), S( -86,  -56), 
		S( -13,  -16), S(  13,    3), S(  26,    1), S(  -4,   12), S(   2,   13), S(   4,   11), S(   1,   11), S(  -9,   -4), 
		S(   4,   -7), S( -10,    8), S(  30,   -1), S(  23,   16), S(  11,   23), S(  14,   15), S(   7,    3), S(  -6,   -2), 
		S(  28,    4), S(  24,   16), S(  36,   19), S(  23,   26), S(  24,   27), S(  31,   13), S(  22,    3), S(  13,    8), 
		S(   9,   16), S(  14,   17), S(  20,   20), S(  20,   29), S(  22,   21), S(  19,   18), S(  24,    0), S(  11,    1), 
		S(  14,   -2), S(  15,    5), S(  16,    4), S(  15,   16), S(   5,   16), S(   3,    0), S(   6,   -6), S(  -6,   -8), 
		S(   9,   -1), S(  10,   -4), S(   8,   -4), S(  12,    1), S(   7,    0), S(  -4,   -3), S(  -2,   -8), S( -13,  -10), 
		S(  -5,  -18), S(  -6,  -11), S(   3,  -11), S(   7,    0), S(   1,   -3), S( -16,   -9), S(  -8,  -16), S( -42,  -10), 
	},
	{
		S( -42,  -17), S( -26,    3), S(   3,   -7), S( -67,    9), S( -62,   17), S( -51,    2), S( -29,    7), S( -31,    4), 
		S( -23,   -9), S( -39,    2), S( -11,    2), S(  -8,    2), S( -21,   12), S(   0,   -1), S( -12,   -7), S(  -1,   -9), 
		S(  11,   12), S(   0,    8), S(  22,    6), S(   4,   12), S(  15,    6), S(   0,   -1), S(  11,    5), S(   7,    0), 
		S( -10,    5), S(   2,   13), S(   2,   16), S(  17,   19), S(  23,   22), S(  20,    8), S(   5,   11), S(  -3,    1), 
		S(  16,   -6), S(  -5,   13), S(   8,   12), S(  15,   14), S(  22,   12), S(   5,   13), S(   4,    5), S(   5,   -3), 
		S(  18,   -8), S(  22,   -2), S(   3,   -2), S(  11,   11), S(   0,    7), S(   5,   -4), S(  19,    0), S(   6,   -9), 
		S(  25,  -19), S(  24,  -25), S(  27,   -8), S(   7,   -4), S(  -1,    0), S(  11,  -16), S(   6,  -27), S(  16,  -13), 
		S(  27,  -37), S(  20,  -16), S(  -5,   -3), S(  20,   -6), S(   1,   -3), S(   2,    0), S(  11,   -4), S(   7,  -19), 
	},
	{
		S(  14,   11), S( -30,   39), S( -16,   30), S( -29,   28), S( -15,   24), S( -14,   29), S(   4,   19), S(   6,   19), 
		S(  33,    1), S(  32,    8), S(  18,   15), S(  -4,   20), S(  28,   11), S(  12,   24), S(   9,   19), S(  11,   12), 
		S(  -1,    5), S(  33,    3), S(  11,    7), S(  10,    9), S(   8,    8), S(   5,   16), S(  18,   10), S(  -2,   14), 
		S(  -6,    9), S( -12,   19), S(  -3,   16), S(  -7,   11), S(  -1,   10), S(   6,   12), S(   6,   11), S(  -6,   13), 
		S( -18,    4), S(   2,    8), S( -18,   13), S(  -8,   10), S(  -6,    3), S(  -9,    5), S(  -8,    3), S(  -9,    3), 
		S(   4,  -20), S(  23,  -24), S(   0,  -12), S(  -2,  -13), S(  -4,  -12), S(  -8,  -13), S(  -5,  -15), S( -12,  -12), 
		S(  -7,  -27), S(  26,  -36), S(   5,  -21), S(   2,  -19), S(   3,  -21), S(   1,  -18), S(  -7,  -18), S( -12,  -22), 
		S(  -9,  -37), S(  -3,  -18), S(   2,  -18), S(   7,  -23), S(   5,  -24), S(  -2,  -18), S(  -1,  -22), S(  -3,  -21), 
	},
	{
		S(   4,   -2), S(  53,  -39), S( -28,   49), S( -28,   33), S(   8,    7), S( -21,   25), S( -34,   15), S( -20,   13), 
		S(  35,   13), S(   9,   18), S( -17,   38), S( -48,   70), S( -16,   42), S(   4,   11), S(  11,   -6), S(  16,   -2), 
		S(   5,   17), S(  -5,   11), S( -14,   30), S( -28,   28), S(   1,   20), S(  11,   14), S(  16,  -11), S(  25,   -9), 
		S(   0,   14), S( -13,   31), S(  -9,   18), S( -27,   38), S( -13,   36), S(   9,    7), S(  10,    6), S(  12,   -5), 
		S(   2,    7), S(   0,   11), S( -11,   17), S(  -5,   25), S(  -8,   34), S(   0,   14), S(   8,   11), S(   9,   -4), 
		S(   9,  -18), S(  11,  -11), S(   1,    1), S(  -7,   10), S(  -2,    9), S(   3,    8), S(  19,  -17), S(  18,  -26), 
		S(  12,  -53), S(  20,  -71), S(  10,  -39), S(  10,  -22), S(   8,  -13), S(  12,  -26), S(  14,  -33), S(  20,  -49), 
		S(  18,  -65), S(  -5,  -54), S( -10,  -32), S(   0,  -28), S(   4,  -31), S(  -1,  -23), S(  -4,  -28), S(  -2,  -26), 
	},
	{
		S(  55,  -68), S(  44,   -2), S( -42,  -15), S( -33,   -4), S(   6,   -6), S(   6,   -6), S(   6,   -6), S(   6,   -6), 
		S( -14,   27), S(  37,   56), S(   7,   30), S(  19,   27), S(   6,   -6), S(   6,   -6), S(   6,   -6), S(   6,   -6), 
		S(  37,   18), S(  59,   53), S(  40,   31), S(  -3,   50), S(   6,   -6), S(   6,   -6), S(   6,   -6), S(   6,   -6), 
		S( -20,   20), S( -14,   54), S( -38,   32), S( -71,   47), S(   6,   -6), S(   6,   -6), S(   6,   -6), S(   6,   -6), 
		S( -61,   12), S( -53,   41), S( -52,   12), S( -78,   28), S(   6,   -6), S(   6,   -6), S(   6,   -6), S(   6,   -6), 
		S( -22,   -6), S( -16,   18), S( -36,  -10), S( -49,    5), S(   6,   -6), S(   6,   -6), S(   6,   -6), S(   6,   -6), 
		S(  30,  -27), S(  23,   -2), S(  -1,  -29), S( -24,  -17), S(   6,   -6), S(   6,   -6), S(   6,   -6), S(   6,   -6), 
		S(  31,  -60), S(  32,  -24), S(   6,  -50), S(  -2,  -45), S(   6,   -6), S(   6,   -6), S(   6,   -6), S(   6,   -6), 
	},
};

constexpr PackedScore MOBILITY[4][28] = {
	{S(  -9,  -28), S( -40,  -44), S( -18,  -15), S(  -9,    1), S(   1,    8), S(   6,   17), S(  14,   20), S(  22,   24), S(  33,   17), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -16,  -43), S( -31,  -59), S( -19,  -31), S( -13,  -13), S(  -4,   -4), S(   1,    7), S(   3,   15), S(   6,   19), S(   7,   22), S(  10,   22), S(  12,   22), S(  17,   16), S(  17,   23), S(  20,    4), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -14,  -38), S( -28,  -68), S( -15,  -51), S(  -3,  -31), S(   0,  -16), S(  -1,   -6), S(  -1,    1), S(   2,    7), S(   3,   11), S(   7,   17), S(   5,   26), S(   7,   33), S(   9,   37), S(  13,   38), S(  20,   35), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S(  -3,   22), S( -42,  -72), S( -64, -131), S( -12, -211), S( -17,  -66), S(  -9,  -16), S(   0,  -28), S(   1,   -7), S(   1,   11), S(   4,   21), S(   6,   24), S(   8,   27), S(   8,   38), S(  11,   37), S(  11,   44), S(  12,   46), S(  12,   49), S(  13,   51), S(  12,   50), S(  19,   40), S(  23,   30), S(  30,   14), S(  24,   22), S(  34,   -3), S(  39,  -13), S(   4,   -6), S( -27,    8), S(-120,    8)}
};

constexpr PackedScore THREAT_BY_PAWN[6] = {S(   5,  -16), S(  65,   26), S(  60,   57), S(  87,   20), S(  73,    7), S(   0,    0)};
constexpr PackedScore THREAT_BY_KNIGHT[2][6] = {
	{S(   7,   27), S(  19,   38), S(  42,   39), S(  80,   10), S(  60,  -20), S(   0,    0)},
	{S(  -8,    9), S(   9,   35), S(  28,   28), S(  70,   27), S(  60,    6), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_BISHOP[2][6] = {
	{S(  -1,   33), S(  42,   27), S( -11,   35), S(  73,   10), S(  69,   63), S(   0,    0)},
	{S(  -4,    6), S(  18,   21), S( -25,   -8), S(  46,   39), S(  45,  130), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_ROOK[2][6] = {
	{S(   2,   40), S(  19,   57), S(  30,   51), S(  12,  -31), S(  81,   19), S(   0,    0)},
	{S(  -8,    7), S(   1,   16), S(  13,    3), S(   3,  -67), S(  67,   56), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_QUEEN[2][6] = {
	{S(   6,   17), S(  24,   33), S(   8,   65), S(  24,   26), S(  11,  -50), S( 109,   40)},
	{S(  -3,   11), S(  -1,    6), S(  -8,   15), S(  -5,    4), S( -18,  -81), S( 122,   48)}
};
constexpr PackedScore THREAT_BY_KING[6] = {S( -17,   43), S(  21,   46), S(  37,   38), S( 117,    2), S(   0,    0), S(   0,    0)};
constexpr PackedScore PUSH_THREAT = S(  14,   17);

constexpr PackedScore ISOLATED_PAWN[8] = {S(  -9,    6), S(  -3,  -14), S( -12,   -8), S( -10,  -16), S( -12,  -15), S(  -8,   -7), S(  -4,  -13), S( -12,    7)};
constexpr PackedScore DOUBLED_PAWN[8] = {S(   0,  -61), S(  14,  -37), S(   0,  -27), S(  -1,  -17), S(  -5,  -11), S(  -6,  -18), S(   5,  -37), S(   8,  -72)};
constexpr PackedScore BACKWARDS_PAWN[8] = {S(   0,    0), S(  -7,  -13), S(  -2,  -13), S(  -9,  -11), S(   2,  -17), S(  32,   -3), S(   0,    0), S(   0,    0)};
constexpr PackedScore PAWN_PHALANX[8] = {S(   0,    0), S(   5,   -4), S(  11,   -2), S(  20,    7), S(  41,   40), S( 112,  214), S(   0,  355), S(   0,    0)};
constexpr PackedScore DEFENDED_PAWN[8] = {S(   0,    0), S(   0,    0), S(  19,    6), S(  11,    7), S(  17,   20), S(  31,   61), S( 145,   68), S(   0,    0)};
constexpr PackedScore CANDIDATE_PASSER[2][8] = {
	{S(   0,    0), S( -41,  -13), S( -20,   -6), S(   1,   25), S(  29,   53), S(  65,   88), S(   0,    0), S(   0,    0)},
	{S(   0,    0), S( -19,   -7), S( -10,   14), S(  -4,   28), S(  20,   40), S(  29,  154), S(   0,    0), S(   0,    0)}
};

constexpr PackedScore PASSED_PAWN[2][2][8] = {
	{
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -40,  -39), S( -15,   23), S(   6,  148), S(  95,  215), S(   0,    0)},
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -27,  -53), S(   6,  -23), S(  31,   20), S(  60,   30), S(   0,    0)}
	},
	{
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -31,  -56), S(   1,  -24), S(  38,    9), S(  58,   -3), S(   0,    0)},
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -33,  -61), S(  -2,  -34), S(  10,  -10), S( -27,  -11), S(   0,    0)}
	}
};
constexpr PackedScore OUR_PASSER_PROXIMITY[8] = {S(   0,    0), S(  58,   81), S(  12,   67), S(   4,   44), S(   5,   32), S(  12,   23), S(  19,   20), S(  16,   19)};
constexpr PackedScore THEIR_PASSER_PROXIMITY[8] = {S(   0,    0), S( -57,    7), S(  18,    0), S(  17,   26), S(  21,   45), S(  19,   76), S(  21,   77), S(  25,   67)};

constexpr PackedScore PAWN_STORM[2][4][8] = {
	{
		{S(  43,   36), S(-130,  -52), S( -19,    9), S(  26,   11), S(  12,   23), S(  -2,   29), S(  -9,   28), S(   0,    0)},
		{S(  26,    7), S(  50, -139), S(  84,  -51), S(  26,   -6), S(  -2,    2), S( -34,    9), S(  -4,    5), S(   0,    0)},
		{S(   7,   20), S( 109, -106), S( 101,  -25), S(  44,    5), S(   4,   18), S( -20,   23), S( -18,   23), S(   0,    0)},
		{S(  16,    5), S( 149,  -79), S( 108,  -22), S(  39,   11), S(  -4,   18), S( -22,   10), S( -19,   18), S(   0,    0)}
	},
	{
		{S(   0,    0), S(   0,    0), S(  36,   41), S( -26,   24), S( -14,   30), S(  19,   31), S(  -6,   28), S(   0,    0)},
		{S(   0,    0), S(   0,    0), S(  86,   -1), S(  -6,    6), S( -33,   19), S( -15,   16), S(  -4,    5), S(   0,    0)},
		{S(   0,    0), S(   0,    0), S(  87,    4), S( -14,   12), S( -11,   24), S(  15,   24), S(  -4,   20), S(   0,    0)},
		{S(   0,    0), S(   0,    0), S(  44,   -3), S(  17,   18), S( -35,   16), S(  -9,    9), S(  -2,   11), S(   0,    0)}
	}
};
constexpr PackedScore PAWN_SHIELD[4][8] = {
	{S(  41,   31), S( -15,   47), S( -17,   40), S(  22,   33), S(  30,   25), S( -12,   -8), S( -75,  -24), S(   0,    0)},
	{S(  36,    4), S( -28,   15), S(  -6,    4), S(  38,   -2), S(  23,  -10), S(  -4,  -21), S( -63,  -34), S(   0,    0)},
	{S(  14,   -1), S(  12,  110), S(  -2,   -3), S(  22,  -24), S(  13,  -22), S(   0,  -27), S( -80,  -26), S(   0,    0)},
	{S(  15,   13), S(   8,    8), S(  -6,   10), S(  18,    6), S(  24,    3), S(  17,    3), S(-105,   10), S(   0,    0)}
};
constexpr PackedScore SAFE_KNIGHT_CHECK = S( 116,    5);
constexpr PackedScore SAFE_BISHOP_CHECK = S(  68,   17);
constexpr PackedScore SAFE_ROOK_CHECK = S( 112,   17);
constexpr PackedScore SAFE_QUEEN_CHECK = S(  56,   23);
constexpr PackedScore UNSAFE_KNIGHT_CHECK = S(  18,    2);
constexpr PackedScore UNSAFE_BISHOP_CHECK = S(  40,   11);
constexpr PackedScore UNSAFE_ROOK_CHECK = S(  42,    3);
constexpr PackedScore UNSAFE_QUEEN_CHECK = S(  18,    1);
constexpr PackedScore QUEENLESS_ATTACK = S(-145,  158);
constexpr PackedScore KING_ATTACKER_WEIGHT[4] = {S(  58,   -5), S(  24,    0), S(  29,  -13), S(   7,  -11)};
constexpr PackedScore KING_ATTACKS = S(   6,    0);
constexpr PackedScore WEAK_KING_RING = S(   7,    0);
constexpr PackedScore KING_FLANK_ATTACKS[2] = {S(  12,   -4), S(   7,    1)};
constexpr PackedScore KING_FLANK_DEFENSES[2] = {S(  -6,    0), S( -11,    2)};
constexpr PackedScore SAFETY_TEMPO = S( 113,    6);
constexpr PackedScore SAFETY_OFFSET = S(  47,  174);

constexpr PackedScore MINOR_BEHIND_PAWN = S(   6,   12);
constexpr PackedScore KNIGHT_OUTPOST = S(  23,   16);
constexpr PackedScore BISHOP_PAWNS[7] = {S(   5,   19), S(   6,   18), S(   4,   11), S(   1,    4), S(  -2,   -6), S(  -2,  -19), S(  -6,  -31)};
constexpr PackedScore BISHOP_PAIR = S(  19,   60);
constexpr PackedScore LONG_DIAG_BISHOP = S(  15,    9);
constexpr PackedScore ROOK_OPEN[2] = {S(  25,    3), S(  13,    4)};

constexpr PackedScore TEMPO = S(   4,   24);

constexpr PackedScore COMPLEXITY_PAWNS = S(   0,    9);
constexpr PackedScore COMPLEXITY_PASSERS = S(   0,   -1);
constexpr PackedScore COMPLEXITY_PAWNS_BOTH_SIDES = S(   0,   64);
constexpr PackedScore COMPLEXITY_PAWN_ENDGAME = S(   0,   79);
constexpr PackedScore COMPLEXITY_OFFSET = S(   0, -124);

#undef S


}