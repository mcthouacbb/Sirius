#pragma once

#include "../defs.h"

namespace eval
{

#define S(mg, eg) PackedScore(mg, eg)

constexpr PackedScore MATERIAL[6] = {S(  61,  132), S( 302,  441), S( 306,  444), S( 385,  790), S( 745, 1617), S(0, 0)};

constexpr PackedScore PSQT[6][64] = {
    {
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  55,   78), S(  38,   88), S(  19,  102), S(  56,   74), S(  73,   61), S(  57,   75), S(  46,   94), S(  68,   76),
        S(   4,   -1), S( -13,   29), S(   8,   -9), S(   9,  -39), S(   2,  -39), S(   2,  -24), S( -19,   13), S(  -6,    1),
        S(  13,    2), S(  -5,   15), S(  11,  -10), S(  11,  -24), S(  -1,  -24), S(  -1,  -17), S(  -8,    7), S(  -8,    5),
        S(   5,   -6), S(  -5,   14), S(  12,  -22), S(  16,  -17), S(   9,  -17), S(   0,  -16), S( -13,    8), S( -11,   -5),
        S(  -1,   -7), S(   8,    8), S(   4,    0), S(   1,   -2), S(  -8,   -3), S(  -8,  -10), S( -21,    7), S( -22,   -6),
        S(   9,   -8), S(  24,    9), S(  31,  133), S(   9,   -1), S(  -1,  -12), S(  -4,   -9), S( -14,   11), S( -14,   -3),
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
    },
    {
        S( -56,  -95), S( -63,  -24), S( -20,  -13), S(   8,   -7), S( -19,    3), S( -49,    8), S( -89,    7), S( -72,  -54),
        S( -10,  -13), S(  19,    3), S(  30,   -1), S(   5,    9), S(   9,   14), S(  11,   13), S(   7,   15), S(  -4,    2),
        S(   5,   -8), S(  -8,    7), S(  32,   -3), S(  21,   16), S(  10,   23), S(  17,   13), S(  10,    4), S(   1,    2),
        S(  24,    3), S(  21,   14), S(  34,   16), S(  19,   24), S(  21,   25), S(  27,   13), S(  23,    4), S(  19,   11),
        S(   4,   13), S(   8,   13), S(  15,   16), S(  14,   24), S(  16,   18), S(  18,   17), S(  25,    1), S(  15,    6),
        S(   7,   -4), S(   7,   -1), S(   9,   -2), S(   8,   11), S(   2,   13), S(   2,   -2), S(   9,   -6), S(  -1,   -4),
        S(  -2,   -7), S(  -1,  -10), S(  -3,  -10), S(   4,   -5), S(   2,   -4), S(  -3,   -4), S(   1,   -6), S(  -8,   -5),
        S( -15,  -19), S( -14,  -16), S(  -8,  -15), S(  -1,   -3), S(  -5,   -5), S( -17,  -10), S(  -7,  -15), S( -35,   -4),
    },
    {
        S( -46,  -14), S( -28,    7), S(  -8,   -2), S( -72,   11), S( -63,   16), S( -57,    5), S( -31,    7), S( -32,    5),
        S( -22,   -9), S( -44,    5), S( -13,    3), S( -10,    3), S( -22,   11), S(   2,    0), S( -13,   -5), S(  -3,   -8),
        S(   9,   12), S(  -2,    8), S(  21,    7), S(   5,   12), S(  16,    6), S(   1,    0), S(  11,    5), S(   7,    1),
        S( -11,    6), S(   2,   13), S(   2,   18), S(  17,   20), S(  23,   23), S(  19,    8), S(   6,   12), S(  -4,    0),
        S(  16,   -6), S(  -3,   14), S(   7,   13), S(  15,   15), S(  21,   13), S(   6,   14), S(   4,    5), S(   5,   -2),
        S(  19,   -9), S(  22,   -1), S(   4,   -1), S(  10,   12), S(   1,    8), S(   5,   -3), S(  20,    1), S(   6,   -9),
        S(  25,  -18), S(  24,  -24), S(  27,   -9), S(   7,   -3), S(  -1,    0), S(  12,  -16), S(   5,  -26), S(  16,  -12),
        S(  28,  -37), S(  21,  -16), S(  -5,   -2), S(  18,   -5), S(   1,   -2), S(   0,    1), S(  11,   -4), S(   6,  -18),
    },
    {
        S(  17,    9), S( -16,   33), S( -11,   27), S( -19,   22), S( -11,   22), S( -15,   30), S(   7,   18), S(  10,   17),
        S(  25,    2), S(  32,    6), S(  12,   17), S(  -5,   21), S(  24,   13), S(  11,   23), S(   8,   19), S(  11,   11),
        S(  -6,    4), S(  22,    7), S(   4,    8), S(   6,    9), S(   6,    8), S(   2,   17), S(  17,   10), S(  -4,   13),
        S( -10,   10), S( -15,   20), S(  -5,   16), S(  -7,   12), S(  -1,    9), S(   6,   11), S(   6,   10), S(  -7,   13),
        S( -19,    5), S(   0,   10), S( -19,   15), S(  -7,   10), S(  -5,    3), S(  -9,    7), S( -10,    5), S(  -8,    2),
        S(   4,  -20), S(  23,  -24), S(  -1,  -11), S(  -1,  -12), S(  -4,  -11), S(  -7,  -13), S(  -4,  -15), S( -11,  -12),
        S(  -6,  -27), S(  26,  -35), S(   6,  -22), S(   3,  -19), S(   4,  -22), S(   2,  -19), S(  -6,  -19), S( -11,  -23),
        S(  -6,  -39), S(  -2,  -19), S(   2,  -19), S(   9,  -24), S(   7,  -25), S(  -1,  -20), S(   0,  -24), S(  -2,  -22),
    },
    {
        S(  11,   -7), S(  53,  -29), S( -11,   38), S( -12,   24), S(  17,    3), S( -10,   19), S( -25,   10), S( -17,   12),
        S(  35,    7), S(   9,   17), S(  -8,   28), S( -33,   56), S(  -5,   34), S(  16,    2), S(  25,  -21), S(  19,  -10),
        S(   4,   11), S(  -1,    1), S(  -8,   19), S( -15,   18), S(   9,   12), S(  22,    2), S(  21,  -18), S(  30,  -17),
        S(  -6,   17), S( -16,   34), S( -10,   18), S( -16,   27), S(  -4,   26), S(  12,    4), S(  10,    5), S(   7,   -2),
        S(  -5,   15), S(  -3,   15), S( -15,   22), S(  -8,   29), S( -12,   36), S(  -2,   19), S(   5,   13), S(   2,    3),
        S(   2,  -11), S(   5,   -4), S(  -7,   10), S( -13,   17), S(  -9,   14), S(  -4,   14), S(  11,  -11), S(  10,  -19),
        S(   2,  -44), S(  10,  -61), S(   1,  -29), S(   0,  -14), S(  -1,   -4), S(   2,  -17), S(   3,  -24), S(  10,  -40),
        S(   7,  -59), S( -17,  -41), S( -19,  -24), S( -10,  -20), S(  -8,  -21), S( -12,  -15), S( -14,  -19), S( -12,  -19),
    },
    {
        S(  49,  -76), S(  23,   -3), S( -45,  -22), S( -71,    5), S(  10,   -5), S(  10,   -5), S(  10,   -5), S(  10,   -5),
        S(  -8,   15), S(  23,   54), S( -10,   29), S( -21,   36), S(  10,   -5), S(  10,   -5), S(  10,   -5), S(  10,   -5),
        S(  33,   11), S(  47,   49), S(  21,   32), S( -36,   57), S(  10,   -5), S(  10,   -5), S(  10,   -5), S(  10,   -5),
        S( -17,   16), S( -14,   51), S( -45,   33), S( -95,   54), S(  10,   -5), S(  10,   -5), S(  10,   -5), S(  10,   -5),
        S( -55,   11), S( -51,   41), S( -53,   13), S( -92,   35), S(  10,   -5), S(  10,   -5), S(  10,   -5), S(  10,   -5),
        S( -11,   -6), S(  -8,   19), S( -35,   -7), S( -57,   13), S(  10,   -5), S(  10,   -5), S(  10,   -5), S(  10,   -5),
        S(  43,  -27), S(  33,   -3), S(   4,  -29), S( -27,  -12), S(  10,   -5), S(  10,   -5), S(  10,   -5), S(  10,   -5),
        S(  44,  -60), S(  41,  -24), S(  13,  -51), S(  -1,  -42), S(  10,   -5), S(  10,   -5), S(  10,   -5), S(  10,   -5),
    },
};

constexpr PackedScore MOBILITY[4][28] = {
    {S(  -5,  -31), S( -38,  -46), S( -17,  -16), S(  -9,    0), S(   1,    8), S(   6,   18), S(  13,   22), S(  20,   26), S(  29,   19), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S( -10,  -45), S( -30,  -60), S( -18,  -32), S( -11,  -13), S(  -3,   -4), S(   2,    7), S(   3,   15), S(   6,   19), S(   6,   22), S(   8,   23), S(   9,   23), S(  14,   18), S(  12,   25), S(  19,    4), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S( -12,  -45), S( -29,  -70), S( -13,  -53), S(  -2,  -31), S(   1,  -17), S(  -1,   -6), S(   0,    1), S(   2,    7), S(   4,   11), S(   7,   17), S(   4,   27), S(   5,   34), S(   7,   38), S(  10,   39), S(  17,   36), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S(  -2,    5), S( -34,  -74), S( -61, -117), S( -18, -201), S( -24,  -63), S( -16,  -11), S(  -6,  -24), S(  -4,   -5), S(  -3,   12), S(   0,   21), S(   3,   24), S(   6,   27), S(   6,   37), S(  10,   36), S(  10,   42), S(  12,   44), S(  13,   45), S(  16,   46), S(  15,   46), S(  21,   39), S(  26,   29), S(  32,   12), S(  30,   17), S(  37,   -7), S(  36,   -8), S(   6,   -2), S( -13,   -9), S(-118,   16)}
};

constexpr PackedScore THREAT_BY_PAWN[6] = {S(   4,  -20), S(  66,   28), S(  60,   60), S(  81,   24), S(  72,   -2), S(   0,    0)};
constexpr PackedScore THREAT_BY_KNIGHT[2][6] = {
    {S(   4,   28), S(  15,   39), S(  35,   44), S(  73,   14), S(  54,  -28), S(   0,    0)},
    {S(  -8,    9), S(   6,   39), S(  29,   30), S(  64,   34), S(  60,    0), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_BISHOP[2][6] = {
    {S(  -2,   34), S(  39,   31), S( -14,   37), S(  68,   15), S(  69,   42), S(   0,    0)},
    {S(  -4,    5), S(  17,   22), S( -26,  -11), S(  44,   44), S(  47,  109), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_ROOK[2][6] = {
    {S(  -1,   40), S(  16,   57), S(  25,   53), S( -11,  -28), S(  60,   14), S(   0,    0)},
    {S(  -7,    7), S(   1,   15), S(  14,    3), S( -12,  -66), S(  40,   64), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_QUEEN[2][6] = {
    {S(   7,    4), S(  24,   17), S(  10,   41), S(  15,    1), S(  10,  -56), S( 102,   50)},
    {S(  -3,   12), S(   1,    7), S(  -5,   14), S(  -4,    3), S( -16,  -75), S( 118,   52)}
};
constexpr PackedScore THREAT_BY_KING[6] = {S( -13,   43), S(   9,   47), S(  29,   40), S(  85,    8), S(   0,    0), S(   0,    0)};
constexpr PackedScore KNIGHT_HIT_QUEEN = S(  11,    3);
constexpr PackedScore BISHOP_HIT_QUEEN = S(  17,   11);
constexpr PackedScore ROOK_HIT_QUEEN = S(  20,   -2);
constexpr PackedScore PUSH_THREAT = S(  14,   18);

constexpr PackedScore ISOLATED_PAWN[8] = {S(  -8,    6), S(  -3,  -16), S( -12,   -8), S( -10,  -16), S( -12,  -14), S(  -8,   -7), S(  -4,  -14), S( -12,    7)};
constexpr PackedScore DOUBLED_PAWN[8] = {S(  -1,  -60), S(  14,  -37), S(   0,  -27), S(  -2,  -17), S(  -6,  -12), S(  -8,  -19), S(   5,  -37), S(   6,  -71)};
constexpr PackedScore BACKWARDS_PAWN[8] = {S(   0,    0), S(  -9,  -13), S(  -2,  -14), S(  -8,  -12), S(   2,  -18), S(  32,  -13), S(   0,    0), S(   0,    0)};
constexpr PackedScore PAWN_PHALANX[8] = {S(   0,    0), S(   5,   -4), S(  11,   -2), S(  20,    8), S(  38,   42), S( 116,  213), S(   6,  342), S(   0,    0)};
constexpr PackedScore DEFENDED_PAWN[8] = {S(   0,    0), S(   0,    0), S(  18,    6), S(  11,    8), S(  17,   21), S(  32,   64), S( 141,   76), S(   0,    0)};
constexpr PackedScore CANDIDATE_PASSER[2][8] = {
    {S(   0,    0), S( -31,  -17), S( -18,   -7), S(   0,   26), S(  25,   52), S(  65,  115), S(   0,    0), S(   0,    0)},
    {S(   0,    0), S( -17,  -10), S(  -8,   13), S(  -5,   28), S(  18,   41), S(  27,  178), S(   0,    0), S(   0,    0)}
};

constexpr PackedScore PASSED_PAWN[2][2][8] = {
    {
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -36,  -41), S( -16,   21), S(  11,  159), S(  66,  218), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -23,  -53), S(   3,  -19), S(  37,   42), S(  69,   26), S(   0,    0)}
    },
    {
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -29,  -55), S(  -6,  -18), S(  39,   34), S(  70,   -3), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -31,  -55), S(  -6,  -23), S(  16,   19), S(  -9,  -12), S(   0,    0)}
    }
};
constexpr PackedScore OUR_PASSER_PROXIMITY[8] = {S(  79,   98), S(  69,  101), S(  45,   72), S(   7,   58), S(   5,   38), S(   7,   25), S(  12,   17), S(  -8,   24)};
constexpr PackedScore THEIR_PASSER_PROXIMITY[8] = {S( -45,  -10), S(  -3,    3), S(  24,    0), S(  20,   31), S(  15,   64), S(  19,   78), S(  25,   80), S(  32,   68)};

constexpr PackedScore PAWN_STORM[2][4][8] = {
    {
        {S(  41,   36), S(-108,  -50), S( -37,  -35), S(  60,    1), S(  26,   21), S(  -1,   31), S( -10,   30), S(   0,    0)},
        {S(  33,    6), S(  46, -123), S(  93,  -83), S(  60,  -20), S(  16,   -2), S( -22,    8), S(   4,    6), S(   0,    0)},
        {S(   7,   21), S( 103, -101), S( 105,  -50), S(  62,   -1), S(  14,   17), S( -13,   24), S( -15,   27), S(   0,    0)},
        {S(  15,    7), S( 148,  -74), S( 120,  -21), S(  70,    6), S(  10,   17), S( -15,   11), S( -20,   22), S(   0,    0)}
    },
    {
        {S(   0,    0), S(   0,    0), S(  61,   62), S( -21,   32), S( -25,   40), S( -17,   57), S(  -4,   46), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(  98,   17), S(  -3,   18), S( -17,   27), S( -29,   42), S( -40,   33), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S( 109,   18), S(   9,   24), S( -15,   40), S(  14,   44), S(  50,   29), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(  87,   20), S(  17,   26), S( -25,   27), S( -24,   24), S(  -2,   19), S(   0,    0)}
    }
};
constexpr PackedScore PAWN_SHIELD[4][8] = {
    {S(  47,   36), S( -20,   51), S( -12,   42), S(  40,   31), S(  45,   17), S( -25,   -2), S( -68,  -17), S(   0,    0)},
    {S(  49,    9), S( -24,   19), S(   8,    7), S(  53,   -1), S(  43,  -15), S(  14,  -19), S( -42,  -32), S(   0,    0)},
    {S(  22,   -4), S(  16,  126), S(  12,   -4), S(  34,  -23), S(  24,  -21), S(  -6,  -27), S( -60,  -42), S(   0,    0)},
    {S(  15,   19), S(   3,   14), S(   2,   12), S(  29,    7), S(  34,    3), S(   8,    7), S( -85,    9), S(   0,    0)}
};
constexpr PackedScore SAFE_KNIGHT_CHECK = S( 109,    7);
constexpr PackedScore SAFE_BISHOP_CHECK = S(  72,   18);
constexpr PackedScore SAFE_ROOK_CHECK = S( 114,   15);
constexpr PackedScore SAFE_QUEEN_CHECK = S(  55,   25);
constexpr PackedScore UNSAFE_KNIGHT_CHECK = S(  16,    2);
constexpr PackedScore UNSAFE_BISHOP_CHECK = S(  38,   10);
constexpr PackedScore UNSAFE_ROOK_CHECK = S(  38,    3);
constexpr PackedScore UNSAFE_QUEEN_CHECK = S(  16,    3);
constexpr PackedScore QUEENLESS_ATTACK = S(-142,  136);
constexpr PackedScore KING_ATTACKER_WEIGHT[4] = {S(  56,   -4), S(  22,    0), S(  29,  -13), S(   4,   -9)};
constexpr PackedScore KING_ATTACKS = S(   7,   -1);
constexpr PackedScore WEAK_KING_RING = S(   7,   -1);
constexpr PackedScore KING_FLANK_ATTACKS[2] = {S(  11,   -4), S(   7,    1)};
constexpr PackedScore KING_FLANK_DEFENSES[2] = {S(  -6,    0), S( -10,    2)};
constexpr PackedScore SAFETY_OFFSET = S(  79,  219);

constexpr PackedScore MINOR_BEHIND_PAWN = S(   6,   12);
constexpr PackedScore KNIGHT_OUTPOST = S(  23,   16);
constexpr PackedScore KNIGHT_PROTECTOR = S(  -4,   -2);
constexpr PackedScore BISHOP_PAWNS[7] = {S(   3,   21), S(   5,   19), S(   3,   12), S(   1,    5), S(  -2,   -5), S(  -2,  -18), S(  -6,  -30)};
constexpr PackedScore BISHOP_PAIR = S(  19,   59);
constexpr PackedScore LONG_DIAG_BISHOP = S(  15,    8);
constexpr PackedScore ROOK_OPEN[2] = {S(  24,    4), S(  12,    5)};

constexpr PackedScore TEMPO = S(  32,   34);

constexpr PackedScore COMPLEXITY_PAWNS = S(   0,   10);
constexpr PackedScore COMPLEXITY_PAWNS_BOTH_SIDES = S(   0,   63);
constexpr PackedScore COMPLEXITY_PAWN_ENDGAME = S(   0,   79);
constexpr PackedScore COMPLEXITY_OFFSET = S(   0, -133);

#undef S


}