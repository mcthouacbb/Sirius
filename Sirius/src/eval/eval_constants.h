#pragma once

#include "../defs.h"

namespace eval
{

#define S(mg, eg) PackedScore(mg, eg)

constexpr PackedScore MATERIAL[6] = {S(  61,  128), S( 288,  442), S( 315,  450), S( 387,  810), S( 796, 1494), S(0, 0)};

constexpr PackedScore PSQT[6][64] = {
	{
		S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
		S(  66,   84), S(  31,   91), S(  34,   96), S(  56,   75), S(  64,   67), S(  31,   97), S(  30,  103), S(  63,   91),
		S(  26,   26), S(  31,   44), S(  31,   14), S(  54,  -19), S(  39,  -12), S(  23,    8), S(   2,   35), S(   9,   32),
		S(  18,   19), S(   8,   13), S(  10,   -4), S(  17,  -16), S(   5,  -16), S(  -1,   -2), S(  -6,   13), S( -11,   22),
		S(   6,    5), S(   7,   10), S(   5,  -17), S(  12,  -13), S(   7,  -12), S(  -5,   -6), S( -13,   10), S( -17,    8),
		S(   0,    1), S(   9,   -3), S(   1,  -23), S(  -1,    1), S(  -7,    0), S( -15,   -6), S( -23,    4), S( -29,    6),
		S(  15,    4), S(  32,   -1), S(  15,   -8), S(   8,   11), S(  -6,    4), S(  -8,   -2), S( -13,   12), S( -18,   12),
		S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
	},
	{
		S( -72,  -87), S( -77,  -22), S( -30,  -15), S(  15,  -13), S( -37,    7), S( -68,    8), S(-115,   19), S( -84,  -44),
		S(  -6,  -10), S(  22,    0), S(  35,   -5), S(  12,    7), S(  17,    7), S(   4,   14), S(  -4,   19), S( -11,   10),
		S(  16,   -8), S(  16,   -2), S(  63,  -17), S(  44,    3), S(  25,   11), S(  18,    7), S(   8,    5), S(  -6,    5),
		S(  34,    2), S(  37,    7), S(  48,    8), S(  38,   15), S(  33,   18), S(  32,   10), S(  19,    5), S(   5,   17),
		S(   9,   15), S(  18,   12), S(  28,   10), S(  20,   22), S(  26,   16), S(  21,   14), S(  21,    4), S(   1,   12),
		S(   1,   -2), S(  16,   -3), S(   9,   -8), S(  17,    9), S(   7,    9), S(  -1,   -3), S(  -1,   -5), S( -16,   -1),
		S(   1,    5), S(   4,   -7), S(   4,   -7), S(   3,   -2), S(   4,   -2), S(  -8,   -6), S( -14,   -3), S( -20,   -2),
		S( -13,   -6), S( -13,   -1), S(  -5,   -9), S(  -4,    3), S( -10,   -1), S( -24,   -6), S( -17,   -3), S( -50,    8),
	},
	{
		S( -40,   -5), S( -37,    6), S( -15,    0), S( -76,   13), S( -71,   18), S( -51,    2), S( -27,    7), S( -18,   16),
		S( -27,   -4), S( -36,   11), S( -12,   -1), S(  -1,   -2), S( -19,    8), S(   3,   -3), S(   0,   -1), S(  -2,   -7),
		S(  20,   11), S(  14,   -2), S(  44,    4), S(  12,    5), S(  18,   -1), S(   9,    4), S(   8,    4), S(   7,    3),
		S(  -3,    4), S(   8,    9), S(   8,   11), S(  20,   13), S(  20,   19), S(  14,    5), S(   5,   10), S(  -7,    7),
		S(  13,   -5), S(   2,    8), S(   4,    6), S(   7,   11), S(  16,    8), S(  -4,   13), S(  -1,    6), S(   0,    2),
		S(  21,  -11), S(  22,  -10), S(  10,   -3), S(   2,    7), S(  -6,    3), S(   5,    3), S(   9,    3), S(   1,   -6),
		S(  22,  -19), S(  28,  -24), S(  19,  -15), S(   2,   -6), S(  -6,   -1), S(   6,  -18), S(   5,  -17), S(  13,   -7),
		S(  33,  -31), S(  17,  -20), S(  -6,    0), S(  12,   -4), S(  -2,   -2), S(  -1,    7), S(   9,   -1), S(  11,   -7),
	},
	{
		S(  12,   10), S( -28,   39), S( -14,   27), S( -12,   15), S( -27,   25), S( -23,   30), S( -10,   23), S(  -3,   19),
		S(  26,    2), S(  31,    5), S(  17,   11), S(   7,   12), S(  17,   14), S(   1,   27), S(   1,   22), S(   3,   14),
		S(  10,    4), S(  39,    2), S(  31,    1), S(  28,    3), S(   4,   15), S(   0,   25), S(  13,   20), S(  -7,   22),
		S(   2,    9), S(   4,   14), S(  14,   10), S(  11,    3), S(   3,   13), S(   5,   18), S(   6,   18), S( -10,   21),
		S(  -9,   -2), S(  11,    2), S(  -5,    6), S(   6,    0), S(  -6,    5), S( -10,    9), S( -12,    9), S( -15,    8),
		S(   9,  -28), S(  19,  -29), S(   0,  -17), S(   1,  -18), S( -11,  -11), S( -16,  -10), S( -14,  -11), S( -20,   -9),
		S(  -5,  -31), S(  21,  -39), S(   4,  -25), S(   3,  -25), S(  -4,  -21), S(  -5,  -18), S( -15,  -14), S( -18,  -20),
		S(  -9,  -35), S(  -6,  -18), S(  -1,  -22), S(   6,  -28), S(  -1,  -25), S(  -9,  -16), S(  -8,  -21), S(  -8,  -17),
	},
	{
		S(  10,  -27), S(  40,  -42), S( -11,   15), S(  -6,    1), S(  12,  -16), S( -16,    5), S( -36,   -2), S( -12,  -15),
		S(  40,    1), S(   0,   11), S( -12,   20), S( -33,   52), S( -20,   34), S(  -2,    6), S(   2,  -17), S(  11,  -14),
		S(  13,    7), S(  12,    7), S(  10,   11), S(  -3,   25), S(   9,   17), S(  14,   13), S(   9,   -5), S(  21,   -7),
		S(   9,   21), S(   7,   41), S(  10,   12), S(  -9,   32), S(  -4,   32), S(   9,    7), S(   7,   17), S(   3,   11),
		S(   9,   10), S(  14,   18), S(   0,   26), S(  -2,   30), S(  -7,   31), S(  -6,   26), S(   2,   20), S(  -2,   10),
		S(  13,  -22), S(  10,   -5), S(   0,    8), S( -11,   23), S(  -9,   15), S( -10,   19), S(   1,   -1), S(   1,   -9),
		S(  12,  -58), S(  15,  -66), S(   5,  -38), S(   1,   -3), S(  -1,    2), S(   1,  -16), S(   0,  -19), S(   7,  -33),
		S(   5,  -52), S( -10,  -53), S( -20,  -21), S( -10,  -15), S(  -9,  -10), S( -14,   -4), S( -17,  -11), S( -17,   -8),
	},
	{
		S(  -9,  -62), S(  -3,    2), S( -33,   -5), S( -30,   -4), S(   8,   -5), S(   8,   -5), S(   8,   -5), S(   8,   -5),
		S( -55,   31), S(  -6,   61), S(  -7,   45), S(  28,   20), S(   8,   -5), S(   8,   -5), S(   8,   -5), S(   8,   -5),
		S( -17,   23), S(  21,   54), S(  30,   42), S(   1,   42), S(   8,   -5), S(   8,   -5), S(   8,   -5), S(   8,   -5),
		S( -55,   21), S( -27,   48), S( -18,   38), S( -46,   33), S(   8,   -5), S(   8,   -5), S(   8,   -5), S(   8,   -5),
		S( -69,    9), S( -37,   31), S( -25,   19), S( -47,   17), S(   8,   -5), S(   8,   -5), S(   8,   -5), S(   8,   -5),
		S( -23,  -10), S(   3,   10), S( -11,   -1), S( -17,   -3), S(   8,   -5), S(   8,   -5), S(   8,   -5), S(   8,   -5),
		S(  31,  -30), S(  33,   -6), S(  12,  -15), S(  -3,  -18), S(   8,   -5), S(   8,   -5), S(   8,   -5), S(   8,   -5),
		S(  21,  -63), S(  22,  -25), S(   3,  -30), S(  14,  -51), S(   8,   -5), S(   8,   -5), S(   8,   -5), S(   8,   -5),
	},
};

constexpr PackedScore MOBILITY[4][28] = {
	{S(  -9,  -20), S( -37,  -61), S( -13,  -30), S(  -6,   -4), S(   4,    8), S(   6,   18), S(  13,   25), S(  21,   31), S(  28,   30), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -19,  -31), S( -52,  -95), S( -30,  -37), S( -23,  -15), S( -11,   -3), S(  -4,    7), S(   1,   17), S(   6,   22), S(   9,   26), S(  14,   27), S(  15,   29), S(  27,   20), S(  26,   24), S(  44,    4), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -23,  -42), S(  14,  -70), S( -25,  -51), S( -13,  -31), S(  -7,  -23), S(  -3,   -6), S(   0,    0), S(  -5,    9), S(  -1,   13), S(   1,   18), S(   5,   25), S(   5,   34), S(   7,   39), S(  13,   41), S(  20,   38), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -26,    5), S( -44,  -84), S( -93,  -78), S( -78, -243), S( -73,  -95), S( -30,  -36), S( -22,  -10), S( -14,   -5), S(  -5,   -4), S(  -5,   19), S(  -3,   26), S(   0,   36), S(   3,   40), S(   6,   43), S(   9,   45), S(  12,   47), S(  13,   47), S(  13,   52), S(  14,   53), S(  15,   53), S(  22,   46), S(  29,   31), S(  32,   28), S(  50,    5), S(  61,   -9), S(  64,  -14), S(  42,   -6), S(   4,  -18)}
};

constexpr PackedScore THREAT_BY_PAWN[6] = {S(   8,  -14), S(  64,   31), S(  65,   64), S(  80,   29), S(  77,   -8), S(   0,    0)};
constexpr PackedScore THREAT_BY_KNIGHT[2][6] = {
	{S(   7,   29), S(  24,   33), S(  38,   43), S(  73,   11), S(  46,  -23), S(   0,    0)},
	{S(  -4,   11), S(  12,   33), S(  30,   31), S(  64,   33), S(  57,    1), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_BISHOP[2][6] = {
	{S(   0,   38), S(  41,   35), S( -10,   33), S(  69,   16), S(  68,   63), S(   0,    0)},
	{S(   1,    8), S(  22,   24), S( -22,  -18), S(  45,   46), S(  49,  122), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_ROOK[2][6] = {
	{S(   0,   43), S(  17,   63), S(  27,   59), S(   6,  -47), S(  73,    8), S(   0,    0)},
	{S(  -8,    8), S(   2,   16), S(  15,    3), S(   9,  -89), S(  65,   45), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_QUEEN[2][6] = {
	{S(   6,   11), S(  23,   22), S(   9,   51), S(  14,    7), S(  12,  -58), S(  90,   43)},
	{S(  -1,   10), S(   0,    8), S(  -6,   20), S(  -4,    3), S( -14,  -73), S( 114,   59)}
};
constexpr PackedScore THREAT_BY_KING[6] = {S( -34,   48), S(  -1,   50), S(  21,   43), S(  80,   19), S(   0,    0), S(   0,    0)};
constexpr PackedScore PUSH_THREAT = S(  16,   20);
constexpr PackedScore RESTRICTED_PIECE = S(   4,    4);

constexpr PackedScore ISOLATED_PAWN[8] = {S(  -6,   -2), S(  -5,  -11), S( -11,  -10), S( -11,  -16), S( -11,  -14), S(  -7,   -7), S(  -2,  -11), S(  -9,   -2)};
constexpr PackedScore PAWN_PHALANX[8] = {S(   0,    0), S(   6,   -3), S(  12,    4), S(  20,   16), S(  48,   61), S( 112,  226), S( -31,  353), S(   0,    0)};
constexpr PackedScore DEFENDED_PAWN[8] = {S(   0,    0), S(   0,    0), S(  20,   10), S(  13,    9), S(  14,   18), S(  22,   57), S( 129,   82), S(   0,    0)};

constexpr PackedScore PASSED_PAWN[2][2][8] = {
	{
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -32,  -35), S( -13,   25), S( -20,  152), S(  35,  238), S(   0,    0)},
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -20,  -49), S(  11,  -24), S(  15,   15), S(  61,   36), S(   0,    0)}
	},
	{
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -27,  -56), S(   0,  -27), S(  15,    0), S(  65,   -2), S(   0,    0)},
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -29,  -61), S(   1,  -37), S(  -8,  -19), S(  -6,  -17), S(   0,    0)}
	}
};
constexpr PackedScore OUR_PASSER_PROXIMITY[8] = {S(   0,    0), S(  46,   82), S(   2,   67), S(   0,   42), S(   3,   31), S(   9,   24), S(  18,   22), S(  12,   21)};
constexpr PackedScore THEIR_PASSER_PROXIMITY[8] = {S(   0,    0), S( -41,    6), S(  21,   -2), S(  13,   25), S(  17,   45), S(  10,   79), S(  13,   79), S(  15,   67)};

constexpr PackedScore PAWN_STORM[2][4][8] = {
	{
		{S(  14,   13), S(-133,  -51), S(  -1,   -9), S(   4,  -12), S(   0,    1), S(  -5,    9), S(  -3,    9), S(   0,    0)},
		{S(  11,    2), S(  -4, -106), S(  55,  -43), S(  10,  -10), S(   2,   -4), S( -11,    6), S(  -7,   10), S(   0,    0)},
		{S(  -3,    5), S(  62, -102), S(  70,  -44), S(  18,  -17), S(   3,   -1), S(  -8,    8), S(  -9,   12), S(   0,    0)},
		{S(   8,   -7), S( 105,  -85), S(  40,  -22), S(  14,   -2), S(  -2,    4), S(  -9,    0), S(  -3,    1), S(   0,    0)}
	},
	{
		{S(   0,    0), S(  -3,  -27), S( -31,  120), S(  17,  -50), S(  -3,    8), S(  -1,    5), S(  -5,   10), S(   0,    0)},
		{S(   0,    0), S(   1,  -84), S(   4,   67), S(  52,  -36), S(   3,    2), S(  -7,    6), S(  -8,   10), S(   0,    0)},
		{S(   0,    0), S(  -8,   12), S( -62, -107), S(  20,  -28), S(   2,    4), S(  -2,    7), S(  -9,   11), S(   0,    0)},
		{S(   0,    0), S( -16,  -56), S(  67,  -10), S(  23,   -3), S(   1,    9), S(   0,   -9), S(   0,    6), S(   0,    0)}
	}
};
constexpr PackedScore PAWN_SHIELD[4][8] = {
	{S(  15,    3), S(  -8,   26), S( -15,   16), S(  -3,    8), S(   4,   -1), S( -32,  -27), S( -76,  -35), S(   0,    0)},
	{S(  18,    2), S( -15,   12), S( -11,    2), S(  13,   -2), S(  10,   -9), S(  -2,  -16), S( -39,  -33), S(   0,    0)},
	{S(   7,   14), S( -15,    9), S(   5,   -9), S(   3,   -1), S(   2,    1), S(  13,  -14), S(  -1,  -41), S(   0,    0)},
	{S(  14,   -3), S(   5,   -2), S(  -3,    0), S(   0,   -6), S(   8,   -9), S(  29,  -21), S( -12,  -22), S(   0,    0)}
};
constexpr PackedScore SAFE_KNIGHT_CHECK = S(  82,   -2);
constexpr PackedScore SAFE_BISHOP_CHECK = S(  23,   11);
constexpr PackedScore SAFE_ROOK_CHECK = S(  61,    5);
constexpr PackedScore SAFE_QUEEN_CHECK = S(  23,   21);
constexpr PackedScore UNSAFE_KNIGHT_CHECK = S(   7,    1);
constexpr PackedScore UNSAFE_BISHOP_CHECK = S(  12,   13);
constexpr PackedScore UNSAFE_ROOK_CHECK = S(  21,    1);
constexpr PackedScore UNSAFE_QUEEN_CHECK = S(   6,   14);
constexpr PackedScore KING_ATTACKER_WEIGHT[4] = {S(  18,    1), S(  15,    2), S(  16,  -14), S(   2,    2)};
constexpr PackedScore KING_ATTACKS[14] = {S( -43,   16), S( -47,   10), S( -53,    6), S( -55,    8), S( -54,    4), S( -47,    1), S( -32,   -3), S( -14,  -11), S(  15,  -21), S(  39,  -17), S(  57,  -24), S(  69,   17), S(  90,  -17), S(  83,   25)};

constexpr PackedScore MINOR_BEHIND_PAWN = S(   8,   14);
constexpr PackedScore KNIGHT_OUTPOST = S(  28,   19);
constexpr PackedScore BISHOP_PAWNS[7] = {S(   4,   24), S(   6,   21), S(   4,   13), S(   1,    4), S(  -3,   -6), S(  -4,  -21), S(  -8,  -35)};
constexpr PackedScore BISHOP_PAIR = S(  20,   63);
constexpr PackedScore ROOK_OPEN[2] = {S(  27,    3), S(  15,    3)};

constexpr PackedScore TEMPO = S(  32,   35);

constexpr PackedScore COMPLEXITY_PAWNS = S(   0,    8);
constexpr PackedScore COMPLEXITY_PASSERS = S(   0,    1);
constexpr PackedScore COMPLEXITY_PAWNS_BOTH_SIDES = S(   0,   69);
constexpr PackedScore COMPLEXITY_PAWN_ENDGAME = S(   0,   63);
constexpr PackedScore COMPLEXITY_OFFSET = S(   0, -132);

#undef S


}