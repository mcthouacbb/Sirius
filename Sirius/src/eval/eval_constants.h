#pragma once

#include "../defs.h"

namespace eval
{

#define S(mg, eg) PackedScore(mg, eg)

constexpr PackedScore MATERIAL[6] = {S(  61,  130), S( 284,  431), S( 305,  444), S( 385,  787), S( 746, 1629), S(0, 0)};

constexpr PackedScore PSQT[6][64] = {
    {
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  55,   79), S(  35,   90), S(  19,  103), S(  51,   78), S(  70,   63), S(  58,   75), S(  45,   95), S(  69,   77),
        S(   4,    1), S( -14,   31), S(   9,  -10), S(   7,  -38), S(   0,  -37), S(   1,  -23), S( -20,   15), S(  -6,    2),
        S(  13,    4), S(  -5,   16), S(  12,  -10), S(  10,  -23), S(  -2,  -23), S(  -1,  -16), S(  -8,    9), S(  -8,    6),
        S(   5,   -5), S(  -5,   15), S(  12,  -21), S(  16,  -16), S(   9,  -15), S(   0,  -14), S( -13,   10), S( -11,   -4),
        S(  -1,   -6), S(   8,   10), S(   4,    1), S(   2,   -1), S(  -8,   -2), S(  -8,   -9), S( -21,    9), S( -22,   -5),
        S(   9,   -7), S(  24,   11), S(  31,  122), S(  10,    1), S(  -1,  -10), S(  -4,   -7), S( -14,   12), S( -14,   -1),
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
    },
    {
        S( -68,  -98), S( -74,  -25), S( -26,  -19), S(  -4,   -9), S( -29,    0), S( -57,    4), S( -96,    1), S( -82,  -60),
        S( -18,  -14), S(  11,    1), S(  21,   -2), S(  -4,    8), S(   1,   12), S(   5,   10), S(   1,   11), S(  -9,   -2),
        S(  -1,   -7), S( -12,    8), S(  26,   -1), S(  16,   17), S(   8,   22), S(  15,   13), S(   8,    2), S(  -4,   -1),
        S(  25,    4), S(  21,   17), S(  36,   19), S(  20,   26), S(  24,   27), S(  29,   14), S(  22,    2), S(  13,    7),
        S(  11,   16), S(  15,   17), S(  21,   20), S(  21,   28), S(  22,   21), S(  21,   18), S(  25,    0), S(  12,    2),
        S(  16,   -1), S(  17,    5), S(  19,    4), S(  18,   16), S(   8,   16), S(   6,   -1), S(   9,   -7), S(  -4,   -8),
        S(  11,   -1), S(  15,   -5), S(  12,   -5), S(  15,    0), S(   9,   -1), S(   0,   -4), S(   0,   -8), S( -12,   -8),
        S(  -2,  -17), S(  -4,  -12), S(   5,  -10), S(   9,    2), S(   2,   -2), S( -14,  -10), S(  -7,  -16), S( -40,   -8),
    },
    {
        S( -44,  -15), S( -28,    6), S(  -6,   -2), S( -72,   11), S( -62,   16), S( -56,    4), S( -31,    7), S( -31,    5),
        S( -21,  -10), S( -49,    6), S( -15,    4), S( -12,    3), S( -23,   10), S(   2,   -1), S( -13,   -5), S(  -3,   -7),
        S(   9,   12), S(  -3,    8), S(  21,    5), S(   4,   13), S(  17,    5), S(   2,    0), S(  11,    5), S(   7,    1),
        S( -11,    5), S(   1,   13), S(   2,   17), S(  17,   19), S(  24,   23), S(  20,    8), S(   6,   12), S(  -3,    0),
        S(  17,   -6), S(  -2,   13), S(   9,   12), S(  16,   15), S(  22,   12), S(   7,   13), S(   6,    4), S(   6,   -2),
        S(  20,   -9), S(  23,   -1), S(   5,   -1), S(  12,   12), S(   2,    8), S(   6,   -4), S(  21,    0), S(   7,  -10),
        S(  27,  -19), S(  26,  -24), S(  29,   -9), S(   8,   -3), S(   0,    0), S(  13,  -17), S(   7,  -26), S(  18,  -12),
        S(  30,  -37), S(  21,  -15), S(  -4,   -2), S(  20,   -5), S(   2,   -2), S(   1,    1), S(  12,   -4), S(   7,  -18),
    },
    {
        S(  20,    9), S( -15,   33), S( -19,   29), S( -21,   23), S( -15,   24), S( -16,   31), S(   7,   19), S(   8,   18),
        S(  26,    2), S(  30,    8), S(   8,   19), S(  -4,   21), S(  25,   14), S(  11,   24), S(   8,   20), S(  12,   11),
        S(  -9,    6), S(  20,    8), S(   0,   11), S(   6,   10), S(   6,    8), S(   1,   17), S(  16,   11), S(  -5,   14),
        S( -11,   11), S( -15,   21), S(  -6,   17), S(  -7,   11), S(  -1,   10), S(   6,   11), S(   6,   10), S(  -8,   13),
        S( -19,    5), S(   1,   10), S( -19,   15), S(  -6,   10), S(  -5,    3), S(  -9,    6), S(  -9,    5), S(  -8,    2),
        S(   3,  -20), S(  24,  -23), S(  -1,  -10), S(  -1,  -12), S(  -4,  -11), S(  -7,  -13), S(  -4,  -15), S( -11,  -11),
        S(  -6,  -28), S(  30,  -36), S(   7,  -22), S(   3,  -19), S(   4,  -21), S(   2,  -19), S(  -7,  -18), S( -11,  -23),
        S(  -5,  -40), S(  -1,  -19), S(   3,  -19), S(   9,  -24), S(   7,  -25), S(   0,  -20), S(   0,  -24), S(  -2,  -22),
    },
    {
        S(  12,   -7), S(  59,  -31), S(  -5,   38), S(  -6,   27), S(  22,    6), S(  -5,   20), S( -22,   12), S( -15,   13),
        S(  38,    4), S(  13,   18), S(   2,   25), S( -24,   57), S(   1,   36), S(  19,    3), S(  26,  -20), S(  18,   -9),
        S(  15,   10), S(   6,    0), S(   0,   25), S( -12,   19), S(  11,   14), S(  21,    3), S(  22,  -20), S(  32,  -20),
        S(  -7,   18), S( -22,   38), S( -11,   20), S( -17,   30), S(  -3,   25), S(  13,    3), S(   9,    4), S(   6,   -4),
        S( -10,   16), S(  -5,   15), S( -19,   21), S( -10,   29), S( -14,   35), S(  -3,   17), S(   4,   11), S(   1,    0),
        S(  -1,  -11), S(   2,   -5), S( -10,    8), S( -16,   15), S( -11,   12), S(  -6,   10), S(  10,  -14), S(   7,  -20),
        S(  -1,  -44), S(   9,  -60), S(  -1,  -31), S(  -2,  -17), S(  -4,   -8), S(   0,  -20), S(   1,  -27), S(   8,  -43),
        S(   4,  -59), S( -20,  -42), S( -22,  -24), S( -13,  -21), S( -10,  -23), S( -15,  -19), S( -16,  -23), S( -15,  -23),
    },
    {
        S(  34,  -68), S(   4,    5), S( -50,  -25), S( -79,   -1), S(  13,   -6), S(  13,   -6), S(  13,   -6), S(  13,   -6),
        S( -18,   21), S(   9,   59), S( -18,   25), S( -29,   29), S(  13,   -6), S(  13,   -6), S(  13,   -6), S(  13,   -6),
        S(  32,   16), S(  39,   55), S(  21,   28), S( -33,   48), S(  13,   -6), S(  13,   -6), S(  13,   -6), S(  13,   -6),
        S( -17,   21), S( -25,   57), S( -43,   29), S( -93,   45), S(  13,   -6), S(  13,   -6), S(  13,   -6), S(  13,   -6),
        S( -53,   16), S( -57,   48), S( -52,    9), S( -87,   26), S(  13,   -6), S(  13,   -6), S(  13,   -6), S(  13,   -6),
        S(  -8,   -1), S( -10,   24), S( -34,  -11), S( -51,    4), S(  13,   -6), S(  13,   -6), S(  13,   -6), S(  13,   -6),
        S(  44,  -21), S(  35,    2), S(  10,  -34), S( -17,  -22), S(  13,   -6), S(  13,   -6), S(  13,   -6), S(  13,   -6),
        S(  44,  -54), S(  43,  -20), S(  18,  -56), S(   9,  -53), S(  13,   -6), S(  13,   -6), S(  13,   -6), S(  13,   -6),
    },
};

constexpr PackedScore MOBILITY[4][28] = {
    {S(  -3,  -29), S( -38,  -46), S( -16,  -16), S(  -8,    0), S(   2,    8), S(   6,   18), S(  13,   21), S(  21,   25), S(  30,   18), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S(  -8,  -46), S( -29,  -61), S( -18,  -32), S( -11,  -14), S(  -3,   -5), S(   2,    6), S(   3,   14), S(   6,   18), S(   6,   21), S(   8,   22), S(   9,   22), S(  13,   17), S(   8,   25), S(  14,    5), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S( -11,  -43), S( -29,  -69), S( -13,  -53), S(  -2,  -32), S(   1,  -17), S(  -1,   -6), S(   0,    1), S(   2,    7), S(   4,   11), S(   7,   17), S(   4,   27), S(   5,   34), S(   7,   39), S(   9,   40), S(  16,   37), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S(  -1,    9), S( -35,  -75), S( -62, -125), S( -18, -206), S( -23,  -67), S( -15,  -14), S(  -6,  -26), S(  -3,   -7), S(  -3,   11), S(   0,   20), S(   3,   23), S(   6,   26), S(   6,   36), S(  10,   36), S(  10,   43), S(  12,   44), S(  13,   46), S(  15,   48), S(  15,   48), S(  22,   40), S(  26,   32), S(  32,   16), S(  30,   21), S(  38,   -3), S(  39,   -4), S(  10,    1), S( -11,   -1), S(-113,   21)}
};

constexpr PackedScore THREAT_BY_PAWN[6] = {S(   4,  -20), S(  66,   28), S(  59,   59), S(  82,   23), S(  71,    2), S(   0,    0)};
constexpr PackedScore THREAT_BY_KNIGHT[2][6] = {
    {S(   4,   28), S(  16,   39), S(  35,   43), S(  73,   14), S(  54,  -27), S(   0,    0)},
    {S(  -8,    9), S(   7,   38), S(  29,   29), S(  64,   33), S(  60,   -2), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_BISHOP[2][6] = {
    {S(  -2,   35), S(  39,   32), S( -12,   35), S(  69,   14), S(  70,   43), S(   0,    0)},
    {S(  -3,    5), S(  17,   22), S( -24,  -13), S(  44,   45), S(  47,  109), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_ROOK[2][6] = {
    {S(   0,   39), S(  16,   57), S(  25,   53), S( -11,  -26), S(  58,   17), S(   0,    0)},
    {S(  -7,    7), S(   2,   15), S(  14,    3), S( -12,  -62), S(  38,   65), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_QUEEN[2][6] = {
    {S(   6,    4), S(  24,   16), S(  10,   39), S(  16,   -3), S(  10,  -59), S( 103,   48)},
    {S(  -3,   13), S(   0,    8), S(  -5,   14), S(  -3,    3), S( -16,  -76), S( 119,   46)}
};
constexpr PackedScore THREAT_BY_KING[6] = {S( -10,   43), S(  15,   47), S(  35,   40), S(  91,    7), S(   0,    0), S(   0,    0)};
constexpr PackedScore KNIGHT_HIT_QUEEN = S(  11,    2);
constexpr PackedScore BISHOP_HIT_QUEEN = S(  18,    9);
constexpr PackedScore ROOK_HIT_QUEEN = S(  20,   -4);
constexpr PackedScore PUSH_THREAT = S(  14,   18);

constexpr PackedScore ISOLATED_PAWN[8] = {S(  -8,    6), S(  -3,  -16), S( -12,   -8), S( -10,  -16), S( -12,  -14), S(  -9,   -7), S(  -4,  -14), S( -12,    7)};
constexpr PackedScore DOUBLED_PAWN[8] = {S(  -1,  -60), S(  13,  -36), S(   0,  -27), S(  -2,  -16), S(  -5,  -12), S(  -8,  -19), S(   6,  -37), S(   6,  -70)};
constexpr PackedScore BACKWARDS_PAWN[8] = {S(   0,    0), S(  -9,  -13), S(  -2,  -14), S(  -7,  -12), S(   2,  -18), S(  33,  -13), S(   0,    0), S(   0,    0)};
constexpr PackedScore PAWN_PHALANX[8] = {S(   0,    0), S(   5,   -4), S(  11,   -2), S(  20,    8), S(  38,   41), S( 114,  214), S(  17,  340), S(   0,    0)};
constexpr PackedScore DEFENDED_PAWN[8] = {S(   0,    0), S(   0,    0), S(  18,    6), S(  11,    8), S(  17,   21), S(  33,   64), S( 141,   76), S(   0,    0)};
constexpr PackedScore CANDIDATE_PASSER[2][8] = {
    {S(   0,    0), S( -33,  -15), S( -18,   -8), S(   0,   25), S(  25,   52), S(  66,  113), S(   0,    0), S(   0,    0)},
    {S(   0,    0), S( -17,  -10), S(  -8,   13), S(  -5,   28), S(  18,   40), S(  29,  178), S(   0,    0), S(   0,    0)}
};

constexpr PackedScore PASSED_PAWN[2][2][8] = {
    {
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -36,  -41), S( -17,   22), S(  10,  159), S(  62,  217), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -22,  -52), S(   3,  -19), S(  38,   41), S(  67,   26), S(   0,    0)}
    },
    {
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -29,  -55), S(  -5,  -18), S(  40,   34), S(  70,   -4), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -30,  -56), S(  -6,  -23), S(  17,   19), S(  -9,  -12), S(   0,    0)}
    }
};
constexpr PackedScore OUR_PASSER_PROXIMITY[8] = {S(  81,   98), S(  70,  101), S(  44,   72), S(   6,   58), S(   4,   38), S(   7,   25), S(  12,   17), S(  -7,   24)};
constexpr PackedScore THEIR_PASSER_PROXIMITY[8] = {S( -47,  -10), S(  -3,    2), S(  25,    0), S(  20,   31), S(  15,   64), S(  19,   78), S(  25,   79), S(  29,   69)};

constexpr PackedScore PAWN_STORM[2][4][8] = {
    {
        {S(  38,   38), S(-116,  -45), S( -43,  -31), S(  57,    4), S(  24,   23), S(  -3,   32), S( -11,   32), S(   0,    0)},
        {S(  32,    6), S(  34, -115), S(  85,  -77), S(  57,  -19), S(  15,   -2), S( -23,    8), S(   4,    6), S(   0,    0)},
        {S(   7,   20), S(  93,  -94), S(  98,  -46), S(  59,   -1), S(  13,   17), S( -14,   23), S( -15,   27), S(   0,    0)},
        {S(  18,    5), S( 151,  -76), S( 114,  -21), S(  68,    5), S(  10,   15), S( -13,    9), S( -18,   19), S(   0,    0)}
    },
    {
        {S(   0,    0), S(   0,    0), S(  62,   62), S( -23,   34), S( -28,   42), S( -20,   58), S(  -1,   46), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(  96,   18), S(  -7,   18), S( -20,   27), S( -29,   41), S( -41,   32), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S( 107,   17), S(   6,   25), S( -18,   40), S(  12,   43), S(  52,   28), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(  84,   18), S(  16,   24), S( -25,   24), S( -23,   21), S(  -6,   17), S(   0,    0)}
    }
};
constexpr PackedScore PAWN_SHIELD[4][8] = {
    {S(  45,   38), S( -23,   52), S( -16,   43), S(  37,   33), S(  43,   19), S( -30,    2), S( -71,  -14), S(   0,    0)},
    {S(  52,    9), S( -32,   19), S(   6,    7), S(  54,   -1), S(  45,  -15), S(  18,  -19), S( -37,  -34), S(   0,    0)},
    {S(  22,   -1), S(  13,  117), S(  11,   -1), S(  31,  -20), S(  23,  -18), S(  -5,  -25), S( -64,  -37), S(   0,    0)},
    {S(  17,   16), S(   0,   12), S(   1,   10), S(  28,    4), S(  35,    0), S(  13,    4), S( -81,    7), S(   0,    0)}
};
constexpr PackedScore SAFE_KNIGHT_CHECK = S( 112,    7);
constexpr PackedScore SAFE_BISHOP_CHECK = S(  74,   23);
constexpr PackedScore SAFE_ROOK_CHECK = S( 120,   15);
constexpr PackedScore SAFE_QUEEN_CHECK = S(  52,   27);
constexpr PackedScore UNSAFE_KNIGHT_CHECK = S(  14,    2);
constexpr PackedScore UNSAFE_BISHOP_CHECK = S(  37,   11);
constexpr PackedScore UNSAFE_ROOK_CHECK = S(  36,    1);
constexpr PackedScore UNSAFE_QUEEN_CHECK = S(  -2,    1);
constexpr PackedScore QUEENLESS_ATTACK = S(-162,  153);
constexpr PackedScore KING_ATTACKER_WEIGHT[4] = {S(  44,   -3), S(   8,    1), S(  11,  -11), S(   7,  -11)};
constexpr PackedScore KING_ATTACKS = S(  15,   -1);
constexpr PackedScore WEAK_KING_RING = S(   9,   -1);
constexpr PackedScore KING_FLANK_ATTACKS[2] = {S(  13,   -4), S(   6,    1)};
constexpr PackedScore KING_FLANK_DEFENSES[2] = {S(  -5,    0), S( -10,    2)};
constexpr PackedScore SAFETY_OFFSET = S(  73,  212);

constexpr PackedScore MINOR_BEHIND_PAWN = S(   5,   12);
constexpr PackedScore KNIGHT_OUTPOST = S(  22,   16);
constexpr PackedScore BISHOP_PAWNS[7] = {S(   3,   20), S(   5,   18), S(   3,   11), S(   1,    4), S(  -2,   -5), S(  -2,  -19), S(  -6,  -31)};
constexpr PackedScore BISHOP_PAIR = S(  19,   60);
constexpr PackedScore LONG_DIAG_BISHOP = S(  15,    8);
constexpr PackedScore ROOK_OPEN[2] = {S(  23,    4), S(  13,    5)};

constexpr PackedScore TEMPO = S(  32,   34);

constexpr PackedScore COMPLEXITY_PAWNS = S(   0,   10);
constexpr PackedScore COMPLEXITY_PAWNS_BOTH_SIDES = S(   0,   64);
constexpr PackedScore COMPLEXITY_PAWN_ENDGAME = S(   0,   80);
constexpr PackedScore COMPLEXITY_OFFSET = S(   0, -133);

#undef S


}