#pragma once

#include "../defs.h"

namespace eval
{

#define S(mg, eg) PackedScore(mg, eg)

constexpr PackedScore MATERIAL[6] = {S(  61,  132), S( 285,  436), S( 307,  448), S( 387,  795), S( 745, 1642), S(0, 0)};

constexpr PackedScore PSQT[6][64] = {
    {
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  61,   77), S(  38,   93), S(  23,   97), S(  52,   79), S(  73,   62), S(  57,   75), S(  46,   95), S(  71,   76),
        S(  16,    4), S(  -7,   37), S(   6,    0), S(  11,  -23), S(   5,  -22), S(   8,  -15), S( -16,   24), S(   1,   10),
        S(  13,    3), S(  -5,   12), S(  12,  -19), S(  10,  -23), S(  -2,  -24), S(   0,  -17), S(  -7,    7), S(  -8,    5),
        S(   5,   -5), S(  -5,   14), S(  13,  -27), S(  16,  -17), S(   9,  -16), S(   0,  -15), S( -13,    8), S( -11,   -4),
        S(  -1,   -6), S(   8,    8), S(   4,   -2), S(   1,   -2), S(  -8,   -2), S(  -8,   -9), S( -21,    8), S( -22,   -5),
        S(   9,   -6), S(  25,   10), S(  30,  146), S(   9,    1), S(  -1,  -10), S(  -4,   -8), S( -13,   11), S( -14,   -1),
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
    },
    {
        S( -66, -100), S( -75,  -27), S( -29,  -17), S(  -2,   -9), S( -27,   -1), S( -58,    5), S(-101,    5), S( -84,  -59),
        S( -18,  -13), S(  12,    2), S(  23,   -1), S(  -2,    9), S(   3,   12), S(   5,   11), S(   0,   12), S( -10,   -1),
        S(   3,   -8), S( -10,    7), S(  29,   -2), S(  19,   17), S(   7,   23), S(  15,   13), S(   6,    3), S(  -6,    0),
        S(  27,    5), S(  23,   16), S(  37,   19), S(  21,   26), S(  22,   28), S(  28,   15), S(  21,    3), S(  13,    8),
        S(  10,   17), S(  15,   17), S(  20,   20), S(  20,   29), S(  21,   21), S(  20,   18), S(  23,    1), S(  11,    2),
        S(  15,   -1), S(  16,    4), S(  18,    3), S(  16,   16), S(   7,   16), S(   5,   -1), S(   8,   -7), S(  -5,   -8),
        S(  10,    0), S(  12,   -5), S(  10,   -5), S(  14,    0), S(   9,   -1), S(  -1,   -4), S(  -1,   -8), S( -13,   -9),
        S(  -3,  -15), S(  -4,  -11), S(   5,  -10), S(   8,    1), S(   1,   -2), S( -14,  -10), S(  -7,  -16), S( -40,  -10),
    },
    {
        S( -45,  -16), S( -27,    5), S(  -8,   -2), S( -70,   10), S( -66,   17), S( -58,    6), S( -31,    8), S( -32,    5),
        S( -23,   -9), S( -45,    5), S( -13,    3), S( -11,    4), S( -23,   12), S(   1,    0), S( -12,   -6), S(  -4,   -6),
        S(   9,   13), S(  -2,    8), S(  21,    6), S(   4,   12), S(  15,    6), S(   0,    0), S(  10,    5), S(   6,    2),
        S( -11,    5), S(   2,   13), S(   2,   17), S(  17,   19), S(  23,   23), S(  19,    8), S(   6,   12), S(  -4,    1),
        S(  16,   -6), S(  -4,   14), S(   7,   12), S(  15,   14), S(  22,   12), S(   6,   13), S(   4,    5), S(   5,   -2),
        S(  19,   -8), S(  22,   -1), S(   4,   -1), S(  10,   12), S(   1,    8), S(   5,   -3), S(  19,    1), S(   6,   -9),
        S(  25,  -18), S(  24,  -24), S(  26,   -8), S(   7,   -3), S(  -1,    0), S(  12,  -16), S(   5,  -26), S(  16,  -12),
        S(  27,  -37), S(  20,  -14), S(  -5,   -2), S(  19,   -5), S(   1,   -3), S(   0,    1), S(  11,   -3), S(   7,  -19),
    },
    {
        S(  17,   10), S( -14,   32), S(  -9,   26), S( -19,   22), S( -11,   22), S( -11,   29), S(  10,   17), S(  11,   17),
        S(  26,    2), S(  30,    8), S(  12,   17), S(  -6,   21), S(  23,   14), S(  11,   23), S(   6,   20), S(  10,   12),
        S(  -6,    5), S(  22,    7), S(   3,    9), S(   6,   10), S(   4,    9), S(   2,   17), S(  15,   11), S(  -5,   13),
        S( -10,   10), S( -16,   20), S(  -7,   16), S(  -9,   11), S(  -2,   10), S(   5,   11), S(   5,   10), S(  -8,   13),
        S( -19,    5), S(  -2,   10), S( -20,   14), S(  -8,    9), S(  -7,    3), S( -10,    6), S( -10,    5), S(  -9,    3),
        S(   3,  -20), S(  22,  -25), S(  -2,  -11), S(  -2,  -13), S(  -6,  -12), S(  -9,  -13), S(  -5,  -15), S( -12,  -12),
        S(  -6,  -28), S(  26,  -37), S(   5,  -23), S(   2,  -20), S(   3,  -22), S(   1,  -20), S(  -8,  -18), S( -12,  -23),
        S(  -6,  -40), S(  -3,  -19), S(   2,  -19), S(   8,  -25), S(   6,  -26), S(  -1,  -20), S(  -1,  -24), S(  -3,  -22),
    },
    {
        S(  12,   -7), S(  51,  -29), S( -16,   44), S( -13,   25), S(  18,    3), S( -10,   20), S( -22,    7), S( -13,    8),
        S(  37,    6), S(  16,   11), S(  -6,   25), S( -32,   56), S(  -6,   37), S(  16,    1), S(  27,  -23), S(  20,   -8),
        S(   5,   11), S(  -1,    4), S(  -8,   21), S( -14,   14), S(   9,   13), S(  21,    5), S(  22,  -18), S(  31,  -18),
        S(  -6,   18), S( -16,   35), S(  -9,   15), S( -16,   25), S(  -4,   24), S(  12,    3), S(  11,    4), S(   8,   -2),
        S(  -5,   16), S(  -3,   14), S( -15,   21), S(  -8,   27), S( -11,   34), S(  -2,   17), S(   5,   14), S(   2,    3),
        S(   1,  -10), S(   5,   -5), S(  -7,    9), S( -13,   16), S(  -9,   14), S(  -4,   13), S(  11,  -11), S(  10,  -19),
        S(   2,  -43), S(  10,  -61), S(   1,  -29), S(   0,  -13), S(  -1,   -4), S(   2,  -17), S(   4,  -24), S(   9,  -38),
        S(   9,  -60), S( -16,  -42), S( -20,  -22), S( -11,  -19), S(  -8,  -20), S( -12,  -14), S( -14,  -19), S( -12,  -18),
    },
    {
        S(  53,  -78), S(  25,   -3), S( -40,  -23), S( -66,    8), S(   9,   -6), S(   9,   -6), S(   9,   -6), S(   9,   -6),
        S(  -9,   18), S(  26,   55), S(  -9,   29), S(  -8,   37), S(   9,   -6), S(   9,   -6), S(   9,   -6), S(   9,   -6),
        S(  33,   13), S(  54,   49), S(  31,   28), S( -22,   56), S(   9,   -6), S(   9,   -6), S(   9,   -6), S(   9,   -6),
        S( -14,   16), S( -11,   51), S( -38,   30), S( -84,   54), S(   9,   -6), S(   9,   -6), S(   9,   -6), S(   9,   -6),
        S( -55,   11), S( -51,   42), S( -48,   10), S( -84,   35), S(   9,   -6), S(   9,   -6), S(   9,   -6), S(   9,   -6),
        S( -13,   -5), S(  -8,   19), S( -29,  -11), S( -50,   12), S(   9,   -6), S(   9,   -6), S(   9,   -6), S(   9,   -6),
        S(  38,  -26), S(  32,   -3), S(   7,  -33), S( -22,  -12), S(   9,   -6), S(   9,   -6), S(   9,   -6), S(   9,   -6),
        S(  38,  -59), S(  38,  -24), S(  13,  -54), S(   2,  -43), S(   9,   -6), S(   9,   -6), S(   9,   -6), S(   9,   -6),
    },
};

constexpr PackedScore MOBILITY[4][28] = {
    {S(  -4,  -30), S( -38,  -47), S( -17,  -16), S(  -9,    1), S(   1,    9), S(   6,   18), S(  13,   22), S(  20,   26), S(  30,   20), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S( -10,  -47), S( -30,  -61), S( -18,  -32), S( -12,  -14), S(  -4,   -4), S(   1,    7), S(   2,   16), S(   5,   19), S(   6,   23), S(   8,   24), S(   9,   24), S(  13,   18), S(  12,   25), S(  16,    6), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S( -14,  -43), S( -29,  -71), S( -14,  -52), S(  -3,  -30), S(  -1,  -16), S(  -2,   -5), S(  -1,    2), S(   1,    9), S(   3,   12), S(   6,   18), S(   3,   29), S(   4,   36), S(   6,   40), S(  10,   41), S(  17,   38), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S(  -1,    7), S( -33,  -79), S( -60, -130), S( -19, -200), S( -22,  -65), S( -14,  -14), S(  -5,  -26), S(  -3,   -6), S(  -2,   12), S(   1,   21), S(   3,   25), S(   7,   27), S(   7,   38), S(  11,   37), S(  11,   43), S(  13,   44), S(  14,   47), S(  17,   48), S(  16,   48), S(  22,   42), S(  26,   33), S(  34,   15), S(  29,   24), S(  39,   -4), S(  37,   -4), S(   4,    6), S(  -2,  -16), S(-130,   31)}
};

constexpr PackedScore THREAT_BY_PAWN[6] = {S(   4,  -18), S(  66,   28), S(  59,   60), S(  80,   25), S(  72,   -3), S(   0,    0)};
constexpr PackedScore THREAT_BY_KNIGHT[2][6] = {
    {S(   4,   29), S(  15,   40), S(  38,   44), S(  73,   16), S(  60,  -31), S(   0,    0)},
    {S(  -8,    9), S(   6,   38), S(  29,   29), S(  64,   34), S(  60,   -1), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_BISHOP[2][6] = {
    {S(  -2,   35), S(  39,   33), S( -13,   33), S(  68,   14), S(  69,   44), S(   0,    0)},
    {S(  -4,    5), S(  17,   22), S( -24,  -14), S(  44,   44), S(  46,  113), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_ROOK[2][6] = {
    {S(  -1,   42), S(  15,   60), S(  25,   55), S( -10,  -26), S(  59,   19), S(   0,    0)},
    {S(  -7,    7), S(   1,   16), S(  13,    3), S( -11,  -67), S(  40,   63), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_QUEEN[2][6] = {
    {S(   7,    8), S(  24,   22), S(   9,   50), S(  18,   15), S(  10,  -55), S(  96,   48)},
    {S(  -3,   12), S(   1,    8), S(  -5,   14), S(  -4,    3), S( -16,  -75), S( 111,   56)}
};
constexpr PackedScore THREAT_BY_KING[6] = {S( -20,   45), S(   9,   48), S(  27,   41), S(  85,    7), S(   0,    0), S(   0,    0)};
constexpr PackedScore KNIGHT_HIT_QUEEN = S(  11,    2);
constexpr PackedScore BISHOP_HIT_QUEEN = S(  17,   11);
constexpr PackedScore ROOK_HIT_QUEEN = S(  20,   -2);
constexpr PackedScore PUSH_THREAT = S(  14,   18);

constexpr PackedScore ISOLATED_PAWN[8] = {S(  -8,    5), S(  -3,  -16), S( -12,   -9), S( -10,  -16), S( -12,  -14), S(  -8,   -7), S(  -4,  -14), S( -11,    6)};
constexpr PackedScore DOUBLED_PAWN[8] = {S(  -1,  -60), S(  13,  -36), S(   1,  -27), S(  -2,  -17), S(  -5,  -12), S(  -6,  -19), S(   5,  -38), S(   7,  -72)};
constexpr PackedScore BACKWARDS_PAWN[8] = {S(   0,    0), S(  -7,  -14), S(  -2,  -14), S(  -8,  -11), S(   1,  -18), S(  26,    2), S(   0,    0), S(   0,    0)};
constexpr PackedScore PAWN_PHALANX[8] = {S(   0,    0), S(   5,   -4), S(  11,   -2), S(  20,    8), S(  40,   41), S( 116,  216), S( -36,  358), S(   0,    0)};
constexpr PackedScore DEFENDED_PAWN[8] = {S(   0,    0), S(   0,    0), S(  18,    6), S(  11,    8), S(  17,   21), S(  30,   64), S( 141,   75), S(   0,    0)};
constexpr PackedScore CANDIDATE_PASSER[2][8] = {
    {S(   0,    0), S( -32,  -18), S( -18,   -7), S(   0,   26), S(  27,   52), S(  59,   87), S(   0,    0), S(   0,    0)},
    {S(   0,    0), S( -19,   -8), S(  -9,   14), S(  -5,   29), S(  19,   41), S(  28,  155), S(   0,    0), S(   0,    0)}
};

constexpr PackedScore PASSED_PAWN[2][2][8] = {
    {
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -37,  -39), S( -16,   26), S(   7,  150), S(  68,  221), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -24,  -49), S(   3,  -15), S(  34,   23), S(  66,   29), S(   0,    0)}
    },
    {
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -30,  -52), S(  -5,  -14), S(  35,   19), S(  69,   -1), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -31,  -51), S(  -6,  -18), S(  13,   -1), S( -10,   -8), S(   0,    0)}
    }
};
constexpr PackedScore OUR_PASSER_PROXIMITY[8] = {S(  70,  102), S(  64,  104), S(  42,   74), S(   6,   59), S(   5,   37), S(   7,   24), S(  12,   16), S(  -7,   22)};
constexpr PackedScore THEIR_PASSER_PROXIMITY[8] = {S( -58,  -17), S(  -3,   -6), S(  27,   -3), S(  20,   31), S(  14,   65), S(  19,   79), S(  25,   82), S(  29,   71)};

constexpr PackedScore PAWN_STORM[2][4][8] = {
    {
        {S(  42,   36), S(-126,  -33), S( -11,   21), S(  31,   18), S(  16,   28), S(  -3,   32), S(  -9,   32), S(   0,    0)},
        {S(  32,    5), S(  47, -111), S(  89,  -42), S(  36,   -4), S(   9,    2), S( -28,    8), S(   1,    6), S(   0,    0)},
        {S(  13,   22), S( 103,  -82), S( 105,  -10), S(  55,   11), S(  12,   23), S( -11,   26), S( -12,   28), S(   0,    0)},
        {S(  20,    7), S( 150,  -65), S( 117,   -6), S(  44,   16), S(   1,   21), S( -16,   13), S( -20,   21), S(   0,    0)}
    },
    {
        {S(   0,    0), S(   0,    0), S(  31,   45), S( -25,   30), S(  -5,   33), S(  21,   33), S(  -8,   31), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(  90,   -1), S(   2,    6), S( -12,   16), S(  -4,   14), S(   1,    6), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(  86,   12), S(   2,   17), S(   1,   29), S(  25,   27), S(   3,   25), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(  43,    6), S(  21,   20), S( -26,   19), S(  -5,   15), S(  -3,   16), S(   0,    0)}
    }
};
constexpr PackedScore PAWN_SHIELD[4][8] = {
    {S(  46,   35), S( -18,   50), S( -14,   42), S(  27,   36), S(  32,   30), S( -25,    1), S( -70,  -12), S(   0,    0)},
    {S(  50,    6), S( -23,   17), S(   5,    7), S(  48,    2), S(  36,   -6), S(  -1,  -14), S( -40,  -28), S(   0,    0)},
    {S(  23,   -5), S(  20,  130), S(   7,   -6), S(  30,  -24), S(  27,  -21), S(   3,  -26), S( -60,  -41), S(   0,    0)},
    {S(  17,   18), S(   6,   14), S(  -6,   14), S(  19,   11), S(  27,    8), S(   9,    9), S( -87,   13), S(   0,    0)}
};
constexpr PackedScore SAFE_KNIGHT_CHECK = S( 111,    5);
constexpr PackedScore SAFE_BISHOP_CHECK = S(  62,   16);
constexpr PackedScore SAFE_ROOK_CHECK = S( 104,   16);
constexpr PackedScore SAFE_QUEEN_CHECK = S(  52,   24);
constexpr PackedScore UNSAFE_KNIGHT_CHECK = S(  17,    2);
constexpr PackedScore UNSAFE_BISHOP_CHECK = S(  38,   10);
constexpr PackedScore UNSAFE_ROOK_CHECK = S(  39,    2);
constexpr PackedScore UNSAFE_QUEEN_CHECK = S(  16,    3);
constexpr PackedScore QUEENLESS_ATTACK = S(-141,  146);
constexpr PackedScore KING_ATTACKER_WEIGHT[4] = {S(  55,   -5), S(  22,    0), S(  28,  -13), S(   3,   -8)};
constexpr PackedScore KING_ATTACKS = S(   7,    0);
constexpr PackedScore WEAK_KING_RING = S(   7,    0);
constexpr PackedScore KING_FLANK_ATTACKS[2] = {S(  12,   -4), S(   7,    1)};
constexpr PackedScore KING_FLANK_DEFENSES[2] = {S(  -6,    0), S( -10,    2)};
constexpr PackedScore SAFETY_OFFSET = S(  75,  234);

constexpr PackedScore MINOR_BEHIND_PAWN = S(   6,   12);
constexpr PackedScore KNIGHT_OUTPOST = S(  22,   16);
constexpr PackedScore BISHOP_PAWNS[7] = {S(   3,   21), S(   5,   19), S(   3,   11), S(   1,    4), S(  -2,   -5), S(  -2,  -19), S(  -6,  -31)};
constexpr PackedScore BISHOP_PAIR = S(  19,   60);
constexpr PackedScore LONG_DIAG_BISHOP = S(  15,    8);
constexpr PackedScore ROOK_OPEN[2] = {S(  23,    4), S(  12,    5)};

constexpr PackedScore TEMPO = S(  32,   34);

constexpr PackedScore COMPLEXITY_PAWNS = S(   0,   10);
constexpr PackedScore COMPLEXITY_PASSERS = S(   0,   -1);
constexpr PackedScore COMPLEXITY_PAWNS_BOTH_SIDES = S(   0,   66);
constexpr PackedScore COMPLEXITY_PAWN_ENDGAME = S(   0,   80);
constexpr PackedScore COMPLEXITY_OFFSET = S(   0, -132);

#undef S


}