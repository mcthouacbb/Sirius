#pragma once

#include "../defs.h"

namespace eval
{

#define S(mg, eg) PackedScore(mg, eg)

constexpr PackedScore MATERIAL[6] = {S(  62,  133), S( 288,  444), S( 315,  452), S( 387,  810), S( 797, 1496), S(0, 0)};

constexpr PackedScore PSQT[6][64] = {
	{
		S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
		S(  67,   75), S(  29,   96), S(  32,   97), S(  56,   75), S(  65,   66), S(  32,   95), S(  30,  106), S(  64,   81),
		S(  27,   17), S(  29,   46), S(  30,   12), S(  55,  -22), S(  40,  -15), S(  24,    4), S(   1,   38), S(  10,   23),
		S(  19,   11), S(   8,   17), S(  10,   -5), S(  17,  -20), S(   6,  -19), S(  -1,   -5), S(  -7,   17), S( -11,   14),
		S(   8,   -1), S(   4,   17), S(   6,  -15), S(  12,  -14), S(   6,  -14), S(  -5,   -8), S( -15,   15), S( -17,    1),
		S(   2,   -5), S(  10,   10), S(  15,   -5), S(  -2,    0), S(  -8,   -2), S( -15,   -6), S( -25,   11), S( -29,   -1),
		S(  16,   -4), S(  32,    7), S(  16,   -8), S(   8,    8), S(  -7,    1), S(  -8,   -3), S( -15,   17), S( -18,    4),
		S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
	},
	{
		S( -69,  -86), S( -76,  -21), S( -30,  -13), S(  15,  -12), S( -36,    7), S( -69,    9), S(-112,   18), S( -84,  -41),
		S(  -7,   -8), S(  22,    1), S(  33,   -6), S(   8,    5), S(  11,    8), S(   2,   13), S(  -4,   19), S( -11,   10),
		S(  16,   -8), S(  13,   -2), S(  57,  -18), S(  38,    2), S(  20,    9), S(  12,    6), S(   4,    4), S(  -7,    5),
		S(  35,    2), S(  37,    6), S(  48,    5), S(  36,   13), S(  30,   17), S(  30,    7), S(  19,    4), S(   7,   16),
		S(  10,   15), S(  20,   11), S(  28,    7), S(  19,   20), S(  25,   13), S(  20,   12), S(  21,    2), S(   2,   12),
		S(   3,   -2), S(  17,   -5), S(   8,  -11), S(  17,    7), S(   7,    7), S(  -1,   -6), S(  -1,   -5), S( -14,   -2),
		S(   3,    6), S(   5,   -6), S(   5,   -8), S(   4,   -3), S(   5,   -3), S(  -7,   -6), S( -13,   -3), S( -18,    0),
		S( -11,   -5), S( -11,   -1), S(  -3,   -9), S(  -2,    3), S(  -9,    0), S( -22,   -7), S( -15,   -3), S( -49,    9),
	},
	{
		S( -40,   -2), S( -34,    5), S( -13,   -1), S( -74,   11), S( -72,   18), S( -53,    3), S( -28,    8), S( -16,   15),
		S( -26,   -5), S( -36,   11), S( -14,    0), S(  -4,   -2), S( -22,    8), S(  -1,   -3), S(  -2,   -1), S(  -3,   -7),
		S(  19,   11), S(  13,   -1), S(  42,    4), S(   9,    4), S(  13,   -1), S(   6,    2), S(   5,    5), S(   5,    2),
		S(  -4,    4), S(   8,    7), S(   6,   10), S(  18,   12), S(  17,   18), S(  11,    3), S(   4,    8), S(  -8,    6),
		S(  12,   -5), S(   1,    7), S(   4,    5), S(   7,   10), S(  15,    7), S(  -5,   11), S(  -3,    4), S(  -1,    2),
		S(  20,  -11), S(  22,  -11), S(  12,   -4), S(   2,    6), S(  -5,    2), S(   5,    2), S(   9,    1), S(   0,   -7),
		S(  22,  -20), S(  29,  -25), S(  20,  -15), S(   3,   -6), S(  -5,   -1), S(   7,  -19), S(   6,  -18), S(  13,   -8),
		S(  34,  -30), S(  18,  -19), S(  -5,    0), S(  14,   -4), S(   0,   -2), S(   1,    7), S(  11,   -2), S(  13,   -9),
	},
	{
		S(  12,    9), S( -25,   37), S( -18,   29), S( -14,   16), S( -29,   25), S( -25,   30), S( -12,   22), S(  -5,   19),
		S(  27,    1), S(  31,    7), S(  15,   13), S(   5,   13), S(  16,   15), S(   0,   27), S(  -2,   22), S(   1,   15),
		S(  10,    3), S(  42,    1), S(  29,    2), S(  26,    4), S(   3,   14), S(  -1,   24), S(  12,   19), S(  -8,   22),
		S(   4,    9), S(   4,   15), S(  14,   11), S(  12,    3), S(   2,   13), S(   6,   18), S(   6,   17), S(  -9,   20),
		S(  -7,   -2), S(  13,    2), S(  -4,    7), S(   7,    1), S(  -5,    6), S(  -8,    9), S( -11,    9), S( -14,    8),
		S(  10,  -28), S(  20,  -28), S(   1,  -16), S(   3,  -17), S( -10,  -10), S( -14,  -11), S( -13,  -12), S( -19,   -9),
		S(  -5,  -30), S(  22,  -39), S(   5,  -25), S(   4,  -25), S(  -3,  -21), S(  -4,  -18), S( -14,  -15), S( -17,  -21),
		S(  -8,  -35), S(  -6,  -17), S(  -1,  -21), S(   7,  -28), S(  -1,  -25), S(  -8,  -17), S(  -7,  -21), S(  -8,  -17),
	},
	{
		S(   9,  -27), S(  37,  -41), S( -14,   17), S( -13,    5), S(  11,  -18), S( -20,    5), S( -37,   -3), S( -14,  -14),
		S(  36,    4), S(  -4,   12), S( -18,   22), S( -38,   54), S( -26,   35), S(  -9,    8), S(  -5,  -13), S(   7,  -12),
		S(  13,    5), S(  10,    7), S(   6,   13), S(  -9,   28), S(   3,   18), S(   9,   12), S(   7,   -7), S(  19,   -9),
		S(  11,   17), S(   8,   39), S(   7,   14), S( -11,   32), S(  -7,   32), S(   6,    6), S(   5,   15), S(   3,    8),
		S(  12,   11), S(  16,   16), S(   2,   25), S(   0,   29), S(  -6,   31), S(  -4,   23), S(   2,   17), S(  -1,    8),
		S(  14,  -22), S(  14,   -6), S(   4,    7), S(  -7,   22), S(  -7,   15), S(  -7,   17), S(   4,   -3), S(   3,  -12),
		S(  14,  -56), S(  19,  -68), S(   9,  -39), S(   4,   -4), S(   2,    1), S(   4,  -16), S(   2,  -20), S(  11,  -36),
		S(   6,  -48), S(  -7,  -55), S( -17,  -21), S(  -7,  -16), S(  -7,  -10), S( -12,   -4), S( -14,  -12), S( -15,  -10),
	},
	{
		S(  -3,  -64), S(   1,    2), S( -31,   -4), S( -21,   -7), S(   8,   -5), S(   8,   -5), S(   8,   -5), S(   8,   -5),
		S( -52,   30), S(  -1,   60), S(  -9,   48), S(  34,   19), S(   8,   -5), S(   8,   -5), S(   8,   -5), S(   8,   -5),
		S( -12,   21), S(  26,   53), S(  35,   42), S(   5,   43), S(   8,   -5), S(   8,   -5), S(   8,   -5), S(   8,   -5),
		S( -54,   20), S( -22,   47), S( -17,   38), S( -44,   34), S(   8,   -5), S(   8,   -5), S(   8,   -5), S(   8,   -5),
		S( -69,    9), S( -37,   32), S( -24,   19), S( -46,   18), S(   8,   -5), S(   8,   -5), S(   8,   -5), S(   8,   -5),
		S( -24,   -9), S(   3,   10), S( -10,   -1), S( -16,   -3), S(   8,   -5), S(   8,   -5), S(   8,   -5), S(   8,   -5),
		S(  30,  -29), S(  32,   -6), S(  12,  -15), S(  -4,  -18), S(   8,   -5), S(   8,   -5), S(   8,   -5), S(   8,   -5),
		S(  20,  -64), S(  22,  -25), S(   2,  -30), S(  13,  -51), S(   8,   -5), S(   8,   -5), S(   8,   -5), S(   8,   -5),
	},
};

constexpr PackedScore MOBILITY[4][28] = {
	{S( -11,  -19), S( -40,  -64), S( -15,  -32), S(  -7,   -5), S(   4,    8), S(   6,   19), S(  14,   26), S(  22,   33), S(  31,   33), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -21,  -33), S( -52,  -97), S( -30,  -39), S( -23,  -17), S( -11,   -4), S(  -4,    5), S(   1,   16), S(   6,   21), S(   8,   26), S(  13,   28), S(  15,   30), S(  27,   22), S(  29,   25), S(  46,    7), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -26,  -44), S(  13,  -73), S( -25,  -52), S( -14,  -31), S(  -7,  -23), S(  -3,   -5), S(   0,    0), S(  -5,   10), S(  -1,   13), S(   2,   19), S(   6,   26), S(   6,   35), S(   9,   40), S(  16,   42), S(  23,   39), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -32,    2), S( -52,  -80), S( -95,  -86), S( -76, -247), S( -74,  -97), S( -29,  -41), S( -22,  -11), S( -14,   -7), S(  -6,   -5), S(  -5,   19), S(  -3,   26), S(   0,   36), S(   2,   40), S(   6,   43), S(   9,   45), S(  12,   47), S(  14,   47), S(  13,   53), S(  14,   54), S(  15,   54), S(  23,   46), S(  30,   32), S(  33,   30), S(  53,    5), S(  60,   -4), S(  62,   -9), S(  40,    0), S(   2,  -15)}
};

constexpr PackedScore THREAT_BY_PAWN[6] = {S(   9,  -13), S(  64,   31), S(  63,   63), S(  80,   29), S(  76,   -8), S(   0,    0)};
constexpr PackedScore THREAT_BY_KNIGHT[2][6] = {
	{S(   8,   29), S(  26,   38), S(  38,   43), S(  73,   14), S(  48,  -23), S(   0,    0)},
	{S(  -4,   10), S(  13,   39), S(  30,   31), S(  64,   34), S(  57,    1), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_BISHOP[2][6] = {
	{S(   1,   38), S(  43,   36), S(  -8,   34), S(  70,   17), S(  69,   64), S(   0,    0)},
	{S(   0,    8), S(  22,   24), S( -21,  -18), S(  44,   47), S(  48,  125), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_ROOK[2][6] = {
	{S(   1,   44), S(  19,   63), S(  29,   57), S(  13,  -49), S(  75,    9), S(   0,    0)},
	{S(  -8,    8), S(   2,   16), S(  14,    3), S(  13,  -92), S(  65,   45), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_QUEEN[2][6] = {
	{S(   7,   11), S(  23,   23), S(   9,   51), S(  14,    8), S(  11,  -57), S(  94,   30)},
	{S(  -1,   10), S(   0,    8), S(  -7,   20), S(  -5,    3), S( -18,  -72), S( 108,   66)}
};
constexpr PackedScore THREAT_BY_KING[6] = {S( -34,   49), S(   0,   50), S(  22,   43), S(  83,   18), S(   0,    0), S(   0,    0)};
constexpr PackedScore PUSH_THREAT = S(  16,   20);

constexpr PackedScore ISOLATED_PAWN[8] = {S(  -7,    8), S(  -4,  -13), S( -11,   -7), S( -10,  -14), S( -10,  -13), S(  -6,   -6), S(  -2,  -12), S(  -8,    9)};
constexpr PackedScore DOUBLED_PAWN[8] = {S(  -6,  -65), S(   7,  -39), S(  -4,  -31), S( -10,  -21), S(  -8,  -16), S( -18,  -21), S(   5,  -43), S(  -3,  -77)};
constexpr PackedScore PAWN_PHALANX[8] = {S(   0,    0), S(   5,   -3), S(  12,    3), S(  20,   16), S(  47,   62), S( 111,  229), S( -31,  363), S(   0,    0)};
constexpr PackedScore DEFENDED_PAWN[8] = {S(   0,    0), S(   0,    0), S(  20,    9), S(  12,    8), S(  13,   19), S(  21,   60), S( 133,   81), S(   0,    0)};

constexpr PackedScore PASSED_PAWN[2][2][8] = {
	{
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -31,  -38), S( -13,   23), S( -20,  151), S(  35,  237), S(   0,    0)},
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -20,  -51), S(  11,  -24), S(  15,   15), S(  60,   34), S(   0,    0)}
	},
	{
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -28,  -56), S(   0,  -26), S(  15,    1), S(  65,   -2), S(   0,    0)},
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -29,  -59), S(   1,  -35), S(  -7,  -18), S(  -4,  -18), S(   0,    0)}
	}
};
constexpr PackedScore OUR_PASSER_PROXIMITY[8] = {S(   0,    0), S(  47,   82), S(   2,   67), S(   0,   41), S(   3,   29), S(   8,   22), S(  18,   20), S(  12,   19)};
constexpr PackedScore THEIR_PASSER_PROXIMITY[8] = {S(   0,    0), S( -39,    5), S(  21,   -3), S(  13,   25), S(  17,   44), S(  11,   77), S(  13,   78), S(  15,   67)};

constexpr PackedScore PAWN_STORM[2][4][8] = {
	{
		{S(  15,   14), S(-137,  -47), S(  -2,   -8), S(   4,  -12), S(   0,    0), S(  -5,    9), S(  -3,    8), S(   0,    0)},
		{S(  11,    3), S(  -9, -102), S(  54,  -43), S(   9,  -11), S(   2,   -5), S( -11,    7), S(  -7,    9), S(   0,    0)},
		{S(  -3,    6), S(  61, -101), S(  69,  -45), S(  18,  -18), S(   3,   -2), S(  -7,    7), S(  -9,   12), S(   0,    0)},
		{S(   8,   -7), S( 104,  -85), S(  39,  -21), S(  14,   -2), S(  -2,    4), S(  -9,   -1), S(  -3,    0), S(   0,    0)}
	},
	{
		{S(   0,    0), S(  -3,  -25), S( -29,  124), S(  14,  -48), S(  -3,    7), S(  -1,    5), S(  -5,    9), S(   0,    0)},
		{S(   0,    0), S(   1,  -80), S(   0,   70), S(  54,  -37), S(   3,    2), S(  -7,    6), S(  -8,    8), S(   0,    0)},
		{S(   0,    0), S(  -7,   14), S( -57, -107), S(  19,  -26), S(   2,    4), S(  -2,    5), S(  -9,   11), S(   0,    0)},
		{S(   0,    0), S( -16,  -57), S(  68,  -11), S(  24,   -4), S(   0,    8), S(   0,  -10), S(   0,    6), S(   0,    0)}
	}
};
constexpr PackedScore PAWN_SHIELD[4][8] = {
	{S(  14,    2), S(  -8,   26), S( -15,   17), S(  -3,    8), S(   3,    0), S( -32,  -28), S( -78,  -36), S(   0,    0)},
	{S(  19,   -1), S( -14,   12), S( -10,    8), S(  12,   -3), S(   9,  -11), S(  -4,  -19), S( -49,  -29), S(   0,    0)},
	{S(   5,    8), S( -16,    8), S(  16,    5), S(   1,   -2), S(  -1,   -1), S(   7,  -18), S(  -9,  -41), S(   0,    0)},
	{S(  14,   -4), S(   6,   -3), S(  -3,    0), S(   0,   -5), S(   9,   -9), S(  29,  -21), S( -14,  -21), S(   0,    0)}
};
constexpr PackedScore SAFE_KNIGHT_CHECK = S(  83,   -2);
constexpr PackedScore SAFE_BISHOP_CHECK = S(  24,   11);
constexpr PackedScore SAFE_ROOK_CHECK = S(  60,    5);
constexpr PackedScore SAFE_QUEEN_CHECK = S(  23,   21);
constexpr PackedScore UNSAFE_KNIGHT_CHECK = S(   7,    1);
constexpr PackedScore UNSAFE_BISHOP_CHECK = S(  12,   12);
constexpr PackedScore UNSAFE_ROOK_CHECK = S(  20,    0);
constexpr PackedScore UNSAFE_QUEEN_CHECK = S(   6,   13);
constexpr PackedScore KING_ATTACKER_WEIGHT[4] = {S(  20,    1), S(  16,    2), S(  18,  -14), S(   5,    1)};
constexpr PackedScore KING_ATTACKS[14] = {S( -37,   16), S( -44,   10), S( -52,    5), S( -56,    7), S( -55,    3), S( -49,   -1), S( -33,   -5), S( -16,  -12), S(  13,  -21), S(  38,  -15), S(  56,  -22), S(  65,   23), S(  90,  -17), S(  81,   28)};

constexpr PackedScore MINOR_BEHIND_PAWN = S(   8,   14);
constexpr PackedScore KNIGHT_OUTPOST = S(  27,   18);
constexpr PackedScore BISHOP_PAWNS[7] = {S(   4,   23), S(   6,   22), S(   4,   13), S(   1,    5), S(  -3,   -5), S(  -4,  -19), S(  -8,  -35)};
constexpr PackedScore BISHOP_PAIR = S(  20,   63);
constexpr PackedScore ROOK_OPEN[2] = {S(  26,    4), S(  15,    5)};

constexpr PackedScore TEMPO = S(  32,   35);

constexpr PackedScore COMPLEXITY_PAWNS = S(   0,    8);
constexpr PackedScore COMPLEXITY_PASSERS = S(   0,    1);
constexpr PackedScore COMPLEXITY_PAWNS_BOTH_SIDES = S(   0,   69);
constexpr PackedScore COMPLEXITY_PAWN_ENDGAME = S(   0,   64);
constexpr PackedScore COMPLEXITY_OFFSET = S(   0, -132);

#undef S


}