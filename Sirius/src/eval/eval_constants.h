#pragma once

#include "../defs.h"

namespace eval
{

#define S(mg, eg) PackedScore(mg, eg)

constexpr PackedScore MATERIAL[6] = {S(  64,  127), S( 291,  443), S( 314,  450), S( 388,  805), S( 787, 1544), S(0, 0)};

constexpr PackedScore PSQT[6][64] = {
	{
		S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
		S(  14,  106), S(  25,   87), S(  65,  100), S(  62,   73), S(  63,   61), S(  29,   76), S(  19,   83), S(  18,   91),
		S(  57,   24), S(  67,   29), S(  82,   -3), S(  48,  -18), S(  39,  -17), S(  33,  -10), S(   3,   22), S(   2,   22),
		S(  31,    9), S(  21,   10), S(  31,  -11), S(  15,  -13), S(  -3,  -12), S(  -6,   -7), S( -20,   11), S( -23,   18),
		S(  19,   -3), S(  14,    7), S(  17,  -10), S(   8,   -7), S(  -1,   -7), S( -13,   -6), S( -31,   10), S( -30,    6),
		S(  19,   -7), S(  26,   -2), S(   4,    0), S(  -1,    3), S( -15,    3), S( -23,   -6), S( -39,    3), S( -40,    4),
		S(  30,  -11), S(  59,   -5), S(  42,   -1), S(   6,   14), S(  -9,    5), S( -14,   -1), S( -27,   11), S( -29,   10),
		S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
	},
	{
		S( -65,  -86), S( -69,  -20), S( -25,  -16), S(  22,  -15), S( -31,    6), S( -62,   10), S(-124,   21), S( -88,  -45),
		S(   5,  -14), S(  19,   -3), S(  49,  -14), S(  24,    1), S(  23,    4), S(   0,   11), S( -10,   21), S( -10,   12),
		S(  36,  -13), S(  19,   -4), S(  70,  -16), S(  44,    1), S(  27,    6), S(  17,    8), S(  -4,    6), S(  -7,    5),
		S(  48,   -5), S(  38,    7), S(  65,    4), S(  46,   10), S(  45,   16), S(  26,   10), S(  18,    5), S(   3,   14),
		S(  14,   15), S(  43,    7), S(  36,    8), S(  30,   21), S(  24,   16), S(  16,   14), S(  18,    2), S(  -6,   14),
		S(  -5,    0), S(  14,   -1), S(   4,   -6), S(  12,   10), S(  -3,   11), S( -10,   -4), S( -11,   -5), S( -24,   -2),
		S(  -7,   10), S(  -2,   -1), S(   3,   -6), S(  -3,   -1), S(  -4,   -2), S( -17,   -6), S( -23,   -2), S( -30,   -1),
		S( -30,   -3), S( -21,   -3), S( -13,   -3), S( -10,    7), S( -17,    1), S( -28,   -8), S( -22,   -5), S( -61,    6),
	},
	{
		S( -37,   -8), S( -41,    6), S( -17,   -2), S( -68,   11), S( -70,   16), S( -59,    4), S( -28,    7), S( -13,   15),
		S( -19,   -8), S( -42,   11), S(  -2,   -4), S(  -4,   -5), S( -28,    9), S(  -4,   -1), S(  -2,   -1), S(   0,   -5),
		S(  21,    7), S(  24,   -2), S(  40,    5), S(  11,    3), S(  13,   -3), S(   4,    2), S(   8,    1), S(   4,    4),
		S(   1,    6), S(   8,    7), S(  17,    6), S(  18,   11), S(  22,   16), S(  13,    2), S(  -1,   10), S(  -9,    7),
		S(  19,   -8), S(   0,    9), S(   7,    6), S(  16,   10), S(  16,    6), S(  -4,   13), S(  -5,    5), S(  -3,    3),
		S(  23,  -10), S(  21,   -8), S(   9,    1), S(   7,    7), S(  -5,    5), S(   1,    3), S(  10,    1), S(  -3,   -6),
		S(  22,  -17), S(  30,  -21), S(  23,  -11), S(  -1,   -3), S(  -6,   -1), S(   9,  -20), S(   2,  -19), S(  17,   -9),
		S(  33,  -29), S(  21,  -18), S(  -9,    6), S(  11,    0), S(  -3,    0), S(   5,    5), S(  20,   -5), S(  11,   -8),
	},
	{
		S(  20,   11), S( -31,   45), S(  15,   24), S(   4,   13), S( -13,   22), S( -19,   32), S( -12,   26), S(  -7,   24),
		S(  47,   -5), S(  44,    3), S(  36,    8), S(   8,   12), S(  12,   15), S(  -5,   27), S(  -6,   22), S(  -4,   16),
		S(  50,   -9), S(  70,   -6), S(  54,   -8), S(  26,    1), S(   1,   11), S(  -6,   23), S(   7,   18), S( -11,   21),
		S(  22,    3), S(  27,    8), S(  20,    8), S(   7,    6), S(  -9,   16), S(  -7,   20), S(  -2,   19), S( -15,   21),
		S(   4,   -5), S(  30,   -2), S(   1,    3), S(  -3,    6), S( -18,    9), S( -21,   12), S( -20,   12), S( -27,   13),
		S(  15,  -30), S(  37,  -33), S(   2,  -19), S(  -7,  -14), S( -25,   -4), S( -30,   -5), S( -25,   -7), S( -32,   -5),
		S(  -6,  -30), S(  28,  -37), S(   7,  -25), S(  -8,  -20), S( -17,  -15), S( -19,  -13), S( -27,   -9), S( -30,  -17),
		S( -19,  -33), S(  -3,  -17), S(  -9,  -17), S(  -4,  -23), S( -15,  -21), S( -23,  -13), S( -19,  -19), S( -20,  -16),
	},
	{
		S(   7,  -11), S(  46,  -28), S(  21,   29), S(   2,   34), S(  28,    0), S( -17,   30), S( -45,   23), S( -19,    2),
		S(  49,    3), S( -11,   36), S(  15,   37), S( -30,   79), S( -26,   53), S( -10,   15), S( -10,   -5), S(  10,  -13),
		S(  54,   14), S(  51,   12), S(  36,   48), S(  -2,   49), S(   7,   26), S(   7,   15), S(  15,  -18), S(  27,  -22),
		S(  25,   29), S(  12,   51), S(  13,   34), S( -12,   48), S( -12,   30), S(   4,   -1), S(   1,    4), S(   6,   -5),
		S(  11,   20), S(  12,   20), S(  -3,   23), S(  -2,   21), S(  -9,   15), S( -13,    5), S(  -5,    0), S( -13,    5),
		S(  13,  -21), S(  10,   -8), S(  -2,    0), S( -15,    4), S( -16,   -5), S( -15,   -7), S(  -7,  -21), S(  -5,  -28),
		S(  13,  -64), S(  15,  -69), S(   7,  -48), S(  -7,  -17), S(  -9,  -19), S(  -6,  -32), S(  -7,  -36), S(   0,  -47),
		S(   7,  -82), S( -20,  -60), S( -31,  -18), S( -22,  -24), S( -21,  -29), S( -25,  -25), S( -26,  -25), S( -26,  -26),
	},
	{
		S(   6,  -71), S(   4,   -5), S( -19,    1), S( -43,   14), S(  21,   -6), S(  21,   -6), S(  21,   -6), S(  21,   -6),
		S( -36,   12), S( -12,   45), S( -44,   58), S(   1,   39), S(  21,   -6), S(  21,   -6), S(  21,   -6), S(  21,   -6),
		S( -33,    7), S(   8,   37), S(  -7,   51), S( -40,   64), S(  21,   -6), S(  21,   -6), S(  21,   -6), S(  21,   -6),
		S( -63,    3), S( -48,   30), S( -65,   50), S(-102,   57), S(  21,   -6), S(  21,   -6), S(  21,   -6), S(  21,   -6),
		S( -84,   -4), S( -59,   17), S( -74,   32), S(-112,   45), S(  21,   -6), S(  21,   -6), S(  21,   -6), S(  21,   -6),
		S( -25,  -19), S(  -6,   -6), S( -53,   14), S( -71,   25), S(  21,   -6), S(  21,   -6), S(  21,   -6), S(  21,   -6),
		S(  55,  -42), S(  48,  -24), S(   7,   -6), S( -19,    3), S(  21,   -6), S(  21,   -6), S(  21,   -6), S(  21,   -6),
		S(  70,  -88), S(  68,  -56), S(  30,  -32), S(  27,  -39), S(  21,   -6), S(  21,   -6), S(  21,   -6), S(  21,   -6),
	},
};

constexpr PackedScore MOBILITY[4][28] = {
	{S( -20,  -18), S( -38,  -64), S( -14,  -32), S(  -6,   -6), S(   4,    7), S(   7,   18), S(  15,   25), S(  23,   32), S(  32,   32), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -41,  -20), S( -59,  -99), S( -36,  -40), S( -28,  -17), S( -14,   -5), S(  -5,    5), S(   1,   16), S(   8,   21), S(  12,   26), S(  18,   28), S(  21,   29), S(  33,   22), S(  40,   23), S(  60,    6), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -39,  -33), S(  19,  -72), S( -31,  -54), S( -18,  -34), S( -13,  -25), S(  -4,   -8), S(  -1,   -2), S(  -7,   10), S(  -3,   13), S(   1,   19), S(   6,   26), S(   9,   35), S(  15,   41), S(  26,   42), S(  33,   42), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -45,  -37), S( -64,  -97), S(-126,  -83), S( -85, -302), S( -76, -157), S( -35,  -69), S( -25,  -49), S( -16,  -45), S(  -7,  -40), S(  -6,  -11), S(  -4,   -1), S(  -1,   12), S(   2,   19), S(   6,   25), S(   9,   31), S(  12,   37), S(  14,   43), S(  14,   55), S(  15,   61), S(  15,   72), S(  24,   68), S(  30,   64), S(  33,   75), S(  54,   61), S(  61,   72), S(  98,   47), S(  79,   76), S(  30,   93)}
};

constexpr PackedScore THREAT_BY_PAWN[6] = {S(  10,  -20), S(  64,   30), S(  66,   62), S(  70,   35), S(  76,   -7), S(   0,    0)};
constexpr PackedScore THREAT_BY_KNIGHT[2][6] = {
	{S(   9,   30), S(  31,   35), S(  42,   44), S(  71,   16), S(  55,  -17), S(   0,    0)},
	{S(  -5,    9), S(  18,   35), S(  30,   31), S(  63,   33), S(  55,    4), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_BISHOP[2][6] = {
	{S(   3,   38), S(  42,   37), S( -10,   43), S(  65,   18), S(  68,   67), S(   0,    0)},
	{S(   3,    9), S(  24,   24), S( -18,   -7), S(  44,   48), S(  48,  123), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_ROOK[2][6] = {
	{S(   1,   45), S(  20,   63), S(  29,   59), S(  20,  -44), S(  72,   16), S(   0,    0)},
	{S(  -5,    6), S(   5,   13), S(  16,    2), S(  27,  -90), S(  64,   42), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_QUEEN[2][6] = {
	{S(   6,   14), S(  24,   17), S(   7,   52), S(  23,    6), S(  10,  -67), S( 149,  -31)},
	{S(  -2,   15), S(  -1,    7), S(  -8,   22), S(  -6,    5), S( -18,  -53), S( 154,    9)}
};
constexpr PackedScore THREAT_BY_KING[6] = {S( -11,   48), S(  -8,   50), S(  14,   53), S(  11,   36), S(   0,    0), S(   0,    0)};
constexpr PackedScore PUSH_THREAT = S(  16,   21);

constexpr PackedScore ISOLATED_PAWN[8] = {S( -11,   -2), S(  -5,  -11), S( -12,  -10), S(  -8,  -17), S( -10,  -15), S(  -7,  -10), S(  -1,  -12), S(  -7,   -5)};
constexpr PackedScore PAWN_PHALANX[8] = {S(   0,    0), S(   3,   -1), S(  14,    4), S(  20,   16), S(  46,   59), S( 109,  212), S( -25,  410), S(   0,    0)};
constexpr PackedScore DEFENDED_PAWN[8] = {S(   0,    0), S(   0,    0), S(  19,   11), S(  14,    8), S(  14,   18), S(  18,   58), S( 148,   53), S(   0,    0)};

constexpr PackedScore PASSED_PAWN[2][2][8] = {
	{
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -25,  -38), S( -15,   27), S( -47,  165), S( -12,  249), S(   0,    0)},
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -11,  -51), S(  16,  -25), S(   7,   18), S(  63,   27), S(   0,    0)}
	},
	{
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -19,  -56), S(   1,  -23), S(   5,    9), S(  65,  -13), S(   0,    0)},
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -18,  -61), S(   5,  -35), S( -12,  -16), S( -11,  -47), S(   0,    0)}
	}
};
constexpr PackedScore OUR_PASSER_PROXIMITY[8] = {S(   0,    0), S(  36,   90), S( -13,   72), S(  -7,   41), S(  -1,   30), S(  13,   22), S(  29,   20), S(  24,   20)};
constexpr PackedScore THEIR_PASSER_PROXIMITY[8] = {S(   0,    0), S( -36,   -7), S(  28,   -4), S(  11,   27), S(  14,   49), S(   5,   85), S(   9,   84), S(   4,   74)};

constexpr PackedScore PAWN_STORM[2][4][8] = {
	{
		{S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
		{S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
		{S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
		{S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)}
	},
	{
		{S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
		{S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
		{S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
		{S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)}
	}
};
constexpr PackedScore PAWN_SHIELD[4][8] = {
	{S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)}
};
constexpr PackedScore SAFE_KNIGHT_CHECK = S(   0,    0);
constexpr PackedScore SAFE_BISHOP_CHECK = S(   0,    0);
constexpr PackedScore SAFE_ROOK_CHECK = S(   0,    0);
constexpr PackedScore SAFE_QUEEN_CHECK = S(   0,    0);
constexpr PackedScore UNSAFE_KNIGHT_CHECK = S(   0,    0);
constexpr PackedScore UNSAFE_BISHOP_CHECK = S(   0,    0);
constexpr PackedScore UNSAFE_ROOK_CHECK = S(   0,    0);
constexpr PackedScore UNSAFE_QUEEN_CHECK = S(   0,    0);
constexpr PackedScore KING_ATTACKER_WEIGHT[4] = {S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)};
constexpr PackedScore KING_ATTACKS[14] = {S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)};

constexpr PackedScore MINOR_BEHIND_PAWN = S(   7,   14);
constexpr PackedScore KNIGHT_OUTPOST = S(  23,   19);
constexpr PackedScore BISHOP_PAWNS[7] = {S(   5,   24), S(   6,   22), S(   5,   13), S(   1,    4), S(  -3,   -6), S(  -4,  -20), S(  -8,  -34)};
constexpr PackedScore BISHOP_PAIR = S(  20,   66);
constexpr PackedScore ROOK_OPEN[2] = {S(  30,    2), S(  18,   -2)};

constexpr PackedScore TEMPO = S(  32,   35);

constexpr PackedScore COMPLEXITY_PAWNS = S(   0,    8);
constexpr PackedScore COMPLEXITY_PASSERS = S(   0,    1);
constexpr PackedScore COMPLEXITY_PAWNS_BOTH_SIDES = S(   0,   68);
constexpr PackedScore COMPLEXITY_PAWN_ENDGAME = S(   0,   59);
constexpr PackedScore COMPLEXITY_OFFSET = S(   0, -128);

#undef S


}