#pragma once

#include "../defs.h"

namespace eval
{

// clang-format off
#define S(mg, eg) ScorePair(mg, eg)

constexpr ScorePair MATERIAL[6] = {S(  66,  132), S( 305,  421), S( 324,  433), S( 408,  772), S( 973, 1536), S(0, 0)};

constexpr ScorePair PSQT[6][64] = {
    {
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S( 121,   66), S(  15,  110), S(  49,   90), S(  76,   86), S( 112,   53), S(  46,   82), S(  24,   99), S(  97,   60),
        S(  -1,    8), S(  -9,   26), S(  -8,   18), S(   3,   -1), S(   4,  -14), S(  -5,   -2), S( -10,   13), S(  -9,    5),
        S(  -1,   11), S(   9,   15), S(   6,   -5), S(  14,  -19), S(  11,  -23), S(   2,  -11), S(   3,    6), S(  -3,   -2),
        S( -12,    0), S(  -4,   20), S(  14,  -14), S(  18,  -16), S(  15,  -15), S(   7,  -14), S(  -9,   12), S( -16,   -8),
        S( -16,    0), S(  20,    6), S(  -5,   10), S(   3,    3), S(  -2,    1), S(  -4,   -2), S(  -7,    7), S( -18,  -11),
        S( -12,   -1), S(  20,   13), S(  21,   24), S(   1,   11), S(  -1,    3), S(  -5,    0), S(   2,    8), S( -20,   -6),
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
    },
    {
        S( -99,  -49), S( -55,    3), S( -97,   27), S(  10,   15), S(  18,   24), S(-112,   30), S(-103,   13), S(-105,  -27),
        S(   4,   -6), S( -14,   11), S(  25,    7), S(  29,   21), S(  15,   15), S(  21,   -8), S( -17,   17), S(  18,  -25),
        S(   7,   -1), S(   3,    7), S(  39,   12), S(  24,   10), S(  19,   17), S(  19,    9), S(  16,  -11), S( -10,  -10),
        S(  29,    0), S(  22,   11), S(  30,   17), S(  22,   24), S(  25,   24), S(  15,   15), S(  16,    5), S(  27,   -5),
        S(  26,    0), S(  14,   11), S(  26,   11), S(  15,   28), S(  15,   23), S(  18,   14), S(  14,    5), S(  13,   -9),
        S(   3,  -12), S(  20,   -2), S(  15,    0), S(  16,   11), S(  17,   10), S(   3,   -7), S(   7,  -12), S(  -1,  -16),
        S(   2,   -5), S(  10,    8), S(  10,  -13), S(  12,   -2), S(   6,   -2), S(   7,  -21), S(   6,  -17), S( -10,  -45),
        S( -49,   22), S(  -8,  -26), S(  -2,  -10), S(   8,   -9), S(  10,  -12), S(   4,  -25), S(  -9,  -27), S(  -1,  -42),
    },
    {
        S( -22,  -20), S( -67,   23), S( -65,   11), S(   6,    4), S( -35,   17), S( -25,    9), S( -34,   19), S( -39,   -9),
        S( -22,   -6), S( -35,   10), S(  -2,    8), S( -41,   23), S(   0,   12), S(  -7,   11), S( -16,  -16), S( -38,    9),
        S(  18,   -9), S(  13,    8), S(  12,   15), S(  25,   13), S(  20,    4), S(   8,    0), S(   3,    7), S(  10,  -10),
        S(  11,   -4), S(  14,   11), S(  14,   16), S(  14,   25), S(  17,   28), S(   9,   12), S(  14,    8), S(  11,  -13),
        S(  24,  -15), S(  11,    8), S(   8,   19), S(  15,   17), S(  14,   19), S(   9,   12), S(   7,    1), S(  20,  -18),
        S(   7,    0), S(  18,   -4), S(   9,   -4), S(   5,   14), S(  13,    3), S(  -4,   -5), S(  21,   -4), S(  12,  -13),
        S(  13,   -2), S(  19,  -26), S(  17,  -12), S(   8,   -9), S(  -1,   -6), S(   5,  -12), S(   7,  -23), S(  21,   -8),
        S(   2,  -33), S(  -5,  -17), S( -17,  -12), S(  13,  -12), S(   9,  -14), S( -11,   -2), S(  15,  -17), S(   2,  -17),
    },
    {
        S(  45,   -1), S(  28,   13), S(  25,   14), S(   4,   28), S(  31,    9), S(  33,   14), S(  17,   24), S(  36,   12),
        S(  21,   10), S(   8,   19), S(  25,   12), S(  17,   22), S(  22,   25), S(  20,   19), S(  15,   20), S(  29,   17),
        S( -21,   18), S(  23,    3), S(  23,    9), S(  24,    7), S(  11,   11), S(   5,   14), S(   0,   19), S(   3,   25),
        S( -19,   17), S( -15,   23), S( -12,   18), S(  -8,   12), S( -18,   13), S(  -2,   14), S(  -5,   18), S( -12,   22),
        S( -25,   -2), S(  -9,   10), S( -10,   10), S(  -5,    7), S( -18,   10), S( -15,   10), S( -26,   12), S(  -9,    0),
        S( -27,  -13), S(  -4,  -21), S( -16,    0), S(  -7,  -12), S(  -2,  -15), S( -19,   -6), S( -13,  -10), S( -19,  -15),
        S( -53,  -30), S(  -8,  -28), S(   1,  -22), S(   2,  -23), S(   5,  -26), S(   3,  -27), S( -10,  -25), S( -18,  -25),
        S( -11,  -41), S( -28,  -11), S(   7,  -23), S(  20,  -32), S(   8,  -27), S(  -4,  -21), S(   1,  -25), S(   0,  -24),
    },
    {
        S(  18,   12), S(  13,   43), S(  25,   20), S(  14,   33), S(  32,   17), S(  20,   37), S(  21,    6), S( -38,   59),
        S(   5,   25), S(   9,   25), S(  29,    3), S( -23,   42), S(  25,    5), S(   1,   15), S(   1,  -10), S(   9,   -8),
        S(  17,   -1), S(  17,  -13), S(   9,    3), S( -21,   34), S(   6,   24), S(  15,    9), S(   4,    6), S(   7,    3),
        S(   0,   10), S( -17,   29), S( -15,   31), S( -28,   50), S( -18,   47), S(   0,   23), S(  -3,   22), S(   2,   11),
        S( -14,   31), S( -13,   35), S( -14,   21), S( -18,   30), S( -23,   50), S(  -8,   24), S(  -3,    3), S(  -3,    8),
        S(  -3,  -32), S(   9,  -11), S(  -7,    0), S( -20,   17), S(  -5,    7), S( -11,   31), S(  12,  -13), S(   1,    9),
        S(  -9,  -50), S(  13,  -94), S(   2,  -47), S(  -4,  -13), S(  -5,  -10), S(  13,  -46), S(  15,  -35), S(   9,  -29),
        S(  15,  -72), S(  -5,  -97), S( -17,  -41), S(   1,  -58), S(   6,  -56), S(  -8,  -33), S(   3,  -59), S(   1,  -26),
    },
    {
        S(-125, -126), S(  66,   72), S(  44,   13), S( 122,  -39), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S( -26,    8), S(  33,   89), S(   3,   54), S(   4,   19), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(   4,   52), S( -22,  111), S( -60,   53), S(-159,   -2), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S( -39,   46), S( -28,   95), S( -78,   44), S(-136,  -18), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S( -46,   35), S( -36,   72), S( -76,   28), S(-107,  -30), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(   4,   22), S(  -7,   51), S( -37,    6), S( -66,  -49), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  55,    0), S(  38,   27), S(   2,  -23), S( -23,  -79), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  57,  -33), S(  57,   -1), S(  16,  -52), S(  18, -125), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
    },
};

constexpr ScorePair MOBILITY[4][28] = {
    {S(  -7,  -20), S( -24,  -58), S( -17,  -17), S(  -9,    0), S(   0,    9), S(   4,   20), S(  10,   25), S(  15,   30), S(  22,   19), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S(  -7,  -28), S( -31,  -67), S( -15,  -32), S(  -7,  -12), S(  -2,   -2), S(  -1,   10), S(   0,   17), S(   1,   24), S(   1,   26), S(   5,   22), S(   5,   24), S(  11,   14), S(  -6,   24), S(  43,  -17), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S( -61,  -43), S( -38,  -71), S( -14,  -49), S( -10,  -28), S(  -4,  -17), S(   1,   -2), S(   0,    6), S(   4,    8), S(   4,   14), S(   9,   19), S(   8,   29), S(  11,   34), S(  15,   37), S(  16,   39), S(  51,   12), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S( -14,   54), S( -24,    7), S( -28,  -20), S( -18, -229), S( -12,  -97), S(  -2,  -75), S(   2,  -41), S(   4,  -31), S(   4,  -15), S(   6,   -1), S(   6,    5), S(   8,   15), S(   9,   15), S(   9,   29), S(  10,   32), S(  10,   29), S(   6,   45), S(   9,   43), S(  10,   45), S(  12,   38), S(   0,   59), S(   8,   31), S(  19,   18), S(  15,   10), S(  36,   -7), S(  -4,    7), S( -55,   19), S( -52,   33)}
};

constexpr ScorePair THREAT_BY_PAWN[6] = {S(  -4,  -19), S(  58,   34), S(  51,   71), S(  56,   51), S(  35,   43), S(   0,    0)};
constexpr ScorePair THREAT_BY_KNIGHT[2][6] = {
    {S(  10,   33), S(  -3,   92), S(  40,   28), S(  63,   14), S(  32,   38), S(   0,    0)},
    {S(  -5,   10), S(   2,   76), S(  33,   29), S(  61,   32), S(  40,   70), S(   0,    0)}
};
constexpr ScorePair THREAT_BY_BISHOP[2][6] = {
    {S(  10,   29), S(  23,   38), S(  -4,   44), S(  32,   32), S(  31,  106), S(   0,    0)},
    {S(  -4,    5), S(  10,   28), S( -16,   10), S(  44,   69), S(  26,  159), S(   0,    0)}
};
constexpr ScorePair THREAT_BY_ROOK[2][6] = {
    {S(  -1,   48), S(  31,   55), S(  35,   45), S( -25,  -57), S(  53,   -6), S(   0,    0)},
    {S( -10,   10), S(   3,   21), S(  14,    8), S(  -7,  -91), S(  35,  102), S(   0,    0)}
};
constexpr ScorePair THREAT_BY_QUEEN[2][6] = {
    {S(   5,   30), S(  19,   28), S(  11,   66), S(  24,    3), S(  -3,  -46), S( 148,  222)},
    {S(  -4,   21), S(  -1,    7), S( -10,   28), S(  -4,   -9), S( -23,  -16), S(  64,  270)}
};
constexpr ScorePair THREAT_BY_KING[6] = {S(  58,   13), S(  30,   34), S(  90,   19), S(  82,    5), S(   0,    0), S(   0,    0)};
constexpr ScorePair KNIGHT_HIT_QUEEN = S(   7,    7);
constexpr ScorePair BISHOP_HIT_QUEEN = S(   9,   34);
constexpr ScorePair ROOK_HIT_QUEEN = S(  19,   -3);
constexpr ScorePair PUSH_THREAT = S(  14,   17);
constexpr ScorePair RESTRICTED_SQUARES = S(   2,    2);

constexpr ScorePair ISOLATED_PAWN[8] = {S(   2,    2), S(  -6,  -16), S(  -7,   -9), S( -14,  -14), S( -12,  -16), S(  -6,  -10), S( -13,   -6), S(  -8,    4)};
constexpr ScorePair DOUBLED_PAWN[8] = {S(  -3,  -51), S(   5,  -41), S( -11,  -22), S(  -5,  -19), S( -11,   -8), S( -10,  -18), S(   4,  -53), S(   3,  -44)};
constexpr ScorePair BACKWARDS_PAWN[8] = {S(   0,    0), S(  -6,  -17), S(   1,  -16), S(  -5,  -14), S(  -3,  -11), S( -14,    4), S(   0,    0), S(   0,    0)};
constexpr ScorePair PAWN_PHALANX[8] = {S(   0,    0), S(   2,   -5), S(   8,   -3), S(  13,   13), S(  37,   40), S( 120,  118), S( 110,  281), S(   0,    0)};
constexpr ScorePair DEFENDED_PAWN[8] = {S(   0,    0), S(   0,    0), S(  12,    7), S(   9,   10), S(  20,   20), S(  50,   51), S(  42,  148), S(   0,    0)};
constexpr ScorePair CANDIDATE_PASSER[2][8] = {
    {S(   0,    0), S( -48,   27), S( -13,  -22), S(  -7,    8), S(  -8,   44), S(   6,  111), S(   0,    0), S(   0,    0)},
    {S(   0,    0), S( -14,  -16), S(  -7,    7), S(  -6,   24), S(   2,   39), S(  -2,  156), S(   0,    0), S(   0,    0)}
};

constexpr ScorePair PASSED_PAWN[2][2][8] = {
    {
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -36,  -23), S(  -9,   29), S(  25,  129), S( 112,  182), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -24,  -38), S(  -2,  -14), S(  23,   51), S(  65,   60), S(   0,    0)}
    },
    {
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -22,  -46), S(  -3,  -10), S(  31,   49), S(  29,   33), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -27,  -57), S(   1,  -33), S(   9,   25), S( -17,    9), S(   0,    0)}
    }
};
constexpr ScorePair OUR_PASSER_PROXIMITY[8] = {S( 100,  110), S( 146,   59), S(  60,   61), S(  -4,   55), S(  -8,   35), S(  -8,   26), S(  10,   17), S( -17,   25)};
constexpr ScorePair THEIR_PASSER_PROXIMITY[8] = {S( -44,    2), S(   3,   -3), S(  27,    0), S(  21,   24), S(  15,   60), S(  10,   79), S(  20,   79), S(  12,   64)};
constexpr ScorePair PASSER_DEFENDED_PUSH[8] = {S(   0,    0), S(   0,    0), S(   0,    0), S(  10,    4), S(  11,   19), S(  44,   24), S(  56,   88), S(   0,    0)};

constexpr ScorePair PAWN_STORM[2][4][8] = {
    {
        {S(  31,   21), S( -58, -128), S(  51,  -69), S(  57,   -4), S(  36,   15), S(   7,   22), S(   9,   25), S(   0,    0)},
        {S(  27,   22), S( 107, -128), S(  72,  -82), S(  21,   -3), S(  19,   16), S( -33,   27), S(   5,   24), S(   0,    0)},
        {S(   6,   11), S(  70, -138), S( 109,  -79), S(  57,  -14), S(  13,   12), S( -16,   15), S(  -8,   14), S(   0,    0)},
        {S(  14,  -13), S(  99, -143), S(  88,  -82), S(  32,  -14), S(  10,   -9), S( -35,  -10), S( -29,   -5), S(   0,    0)}
    },
    {
        {S(   0,    0), S(   0,    0), S(  55,   53), S( -44,   26), S(  -1,   32), S(  -3,   40), S(  22,   20), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S( 111,   22), S( -24,   34), S( -18,   38), S( -24,   60), S(  22,   47), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S( 130,    9), S(  41,   14), S( -19,   40), S(   3,   37), S(  32,   31), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S( 141,  -21), S(  10,   14), S(  -9,    7), S(  -1,    5), S( -44,  -17), S(   0,    0)}
    }
};
constexpr ScorePair PAWN_SHIELD[4][8] = {
    {S(  61,   19), S(   1,   36), S(  -5,   24), S(  36,   18), S(  55,   10), S(  16,    7), S(  23,   -1), S(   0,    0)},
    {S(  43,   29), S( -29,   33), S(  19,   24), S(  43,   16), S(  45,    2), S( -41,    4), S( -67,  -13), S(   0,    0)},
    {S(  33,   17), S(   0,   34), S(  -7,   13), S(  40,   -7), S(  37,  -14), S(  -8,    7), S( -93,  -20), S(   0,    0)},
    {S(  24,   -5), S( -27,  -13), S( -10,  -19), S(  11,  -25), S(  -4,  -24), S(  26,  -21), S( -30,  -21), S(   0,    0)}
};
constexpr ScorePair SAFE_KNIGHT_CHECK = S(  74,    0);
constexpr ScorePair SAFE_BISHOP_CHECK = S(  44,   20);
constexpr ScorePair SAFE_ROOK_CHECK = S( 102,    6);
constexpr ScorePair SAFE_QUEEN_CHECK = S(  50,   35);
constexpr ScorePair UNSAFE_KNIGHT_CHECK = S(  14,    0);
constexpr ScorePair UNSAFE_BISHOP_CHECK = S(  30,   10);
constexpr ScorePair UNSAFE_ROOK_CHECK = S(  41,    3);
constexpr ScorePair UNSAFE_QUEEN_CHECK = S(  16,   14);
constexpr ScorePair QUEENLESS_ATTACK = S(-104,  283);
constexpr ScorePair KING_ATTACKER_WEIGHT[4] = {S(  52,   -3), S(  23,   -1), S(  24,  -12), S(  -3,  -10)};
constexpr ScorePair KING_ATTACKS = S(   5,    1);
constexpr ScorePair WEAK_KING_RING = S(   5,    1);
constexpr ScorePair KING_FLANK_ATTACKS[2] = {S(  12,   -5), S(   6,    1)};
constexpr ScorePair KING_FLANK_DEFENSES[2] = {S(  -9,    1), S(  -5,    3)};
constexpr ScorePair SAFETY_OFFSET = S(  65,   93);

constexpr ScorePair MINOR_BEHIND_PAWN = S(   2,   11);
constexpr ScorePair KNIGHT_OUTPOST = S(  20,   13);
constexpr ScorePair BISHOP_PAWNS[7] = {S(   5,   14), S(   2,   24), S(   2,   14), S(   1,    5), S(  -1,   -3), S(  -3,  -17), S(  -7,  -37)};
constexpr ScorePair BISHOP_PAIR = S(  26,   58);
constexpr ScorePair LONG_DIAG_BISHOP = S(   9,   12);
constexpr ScorePair ROOK_OPEN[2] = {S(  27,   -5), S(  19,    1)};

constexpr ScorePair TEMPO = S(  19,   15);

constexpr ScorePair COMPLEXITY_PAWNS = S(   0,   13);
constexpr ScorePair COMPLEXITY_PAWNS_BOTH_SIDES = S(   0,  121);
constexpr ScorePair COMPLEXITY_PAWN_ENDGAME = S(   0,  142);
constexpr ScorePair COMPLEXITY_OFFSET = S(   0, -222);

#undef S
// clang-format on

}
