#pragma once

#include "../defs.h"

namespace eval
{

// clang-format off
#define S(mg, eg) ScorePair(mg, eg)

constexpr ScorePair MATERIAL[6] = {S(  63,  137), S( 315,  461), S( 332,  482), S( 422,  826), S( 893, 1746), S(0, 0)};

constexpr ScorePair PSQT[6][64] = {
    {
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  76,   83), S(   6,  107), S(  22,   85), S(  58,   88), S(  57,   66), S(  40,   58), S(  45,   86), S(  78,   78),
        S(   2,   16), S( -13,   31), S(  -1,   11), S(   7,  -13), S(  -5,  -19), S(  -8,   -6), S( -16,   17), S(   0,   12),
        S(   6,   10), S(   6,   19), S(  13,   -7), S(   9,  -18), S(   2,  -15), S(   0,   -9), S(   2,   10), S(  -6,   11),
        S(  -8,   -2), S(  -7,   13), S(  16,  -25), S(  18,  -20), S(  11,  -18), S(   2,  -12), S( -13,   11), S( -15,   -4),
        S( -15,   -6), S(  10,    8), S(   4,    3), S(   6,    0), S(  -3,    0), S(  -9,   -1), S( -15,   11), S( -24,   -5),
        S(  -4,  -10), S(  25,    6), S(  23,   39), S(   5,    8), S(  -2,    1), S(  -4,    1), S(  -5,   10), S( -17,   -4),
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
    },
    {
        S( -64, -123), S(-110,   42), S(-119,   37), S(  11,   16), S( -47,   25), S( -88,   17), S( -69,    1), S( -90,  -83),
        S(  -5,  -10), S(   0,    3), S(  23,    5), S(  31,   19), S(  20,   23), S(  18,    5), S( -10,    3), S(  -4,  -14),
        S(  22,   -7), S(  12,   13), S(  38,    9), S(  27,   22), S(  18,   18), S(  25,   10), S(   4,   11), S(   7,  -13),
        S(  28,    8), S(  32,   10), S(  38,   13), S(  30,   28), S(  34,   27), S(  20,   17), S(  22,    7), S(   7,    8),
        S(  21,    8), S(  23,    8), S(  25,   15), S(  21,   28), S(  21,   22), S(  21,   16), S(  18,    5), S(   5,    5),
        S(   4,   -8), S(  22,   -6), S(  17,    1), S(  16,   13), S(  13,   11), S(  -1,    0), S(   4,   -7), S(  -7,  -13),
        S(   9,   -5), S(  12,   -3), S(   8,  -12), S(  11,    1), S(   4,    0), S(   1,  -14), S( -10,   -4), S( -18,  -25),
        S( -31,  -24), S( -13,  -16), S(   5,  -15), S(   7,   -7), S(  -4,   -6), S(   0,  -21), S( -18,  -21), S( -27,  -33),
    },
    {
        S( -27,  -36), S( -54,   20), S( -96,   26), S( -71,   18), S( -63,   21), S( -70,   21), S( -54,   25), S( -40,   -9),
        S( -14,   -7), S( -35,    5), S(  -9,    9), S( -36,   21), S( -20,   14), S( -14,    7), S(  -8,  -13), S(   0,  -12),
        S(  17,   -2), S(   8,    7), S(  22,    8), S(  16,   15), S(  16,   13), S(  13,   -1), S(   6,    9), S(  11,   -7),
        S(   2,    3), S(  12,   12), S(  16,   11), S(  18,   29), S(  28,   22), S(  17,    8), S(  16,   10), S(   1,   -6),
        S(  16,  -11), S(   6,    7), S(  11,   15), S(  20,   15), S(  19,   19), S(  13,   14), S(   7,    2), S(  17,  -13),
        S(  18,   -9), S(  25,   -5), S(  13,   -7), S(  11,   11), S(  11,    5), S(   5,   -9), S(  22,   -4), S(  14,  -13),
        S(  15,  -22), S(  27,  -28), S(  23,  -16), S(  10,   -4), S(  -1,   -2), S(  10,  -16), S(   6,  -23), S(  26,  -11),
        S(   5,  -24), S(  30,  -25), S( -15,   -6), S(  15,  -17), S(   4,  -12), S(  -6,   -4), S(  13,  -18), S(  11,  -24),
    },
    {
        S(  29,    7), S(  33,    7), S(  18,   23), S(   2,   26), S(  28,   16), S(  11,   23), S(  26,   18), S(  30,   17),
        S(  17,   16), S(   6,   27), S(  23,   17), S(  19,   23), S(  21,   27), S(  13,   28), S(   7,   28), S(  15,   27),
        S( -11,   15), S(   8,   13), S(  13,    9), S(  15,    9), S(  24,    5), S(   7,   15), S(  12,   14), S(  -3,   24),
        S( -18,   10), S( -18,   23), S(  -8,   20), S(  -3,    9), S(  -8,   14), S(   0,   11), S(  -5,   15), S( -11,   19),
        S( -23,   -4), S( -14,    9), S( -13,   10), S(  -5,    5), S( -12,    6), S( -17,   13), S( -15,    9), S( -17,    5),
        S( -21,  -25), S(   3,  -25), S( -10,   -5), S(  -4,  -12), S(   4,  -22), S( -10,  -11), S(  -3,  -18), S( -16,  -18),
        S( -58,  -30), S(  -7,  -34), S(   3,  -27), S(   2,  -26), S(   2,  -28), S(  -5,  -19), S( -13,  -24), S( -19,  -22),
        S( -17,  -36), S( -24,  -17), S(   8,  -25), S(  15,  -29), S(   7,  -28), S(  -4,  -19), S(   0,  -26), S(  -2,  -22),
    },
    {
        S(   4,   27), S(  40,    9), S(  42,    6), S(  10,   27), S(  26,   25), S(  22,   14), S(  24,   -1), S( -16,   38),
        S(  33,   -5), S(  25,    1), S(  16,   13), S( -25,   49), S(   3,   27), S(  13,    6), S(  22,  -16), S(  14,   -6),
        S(   7,    4), S(  13,    7), S(  -7,   22), S( -15,   26), S(   9,   22), S(  13,    5), S(  18,   -8), S(  24,  -16),
        S(   1,    8), S( -15,   28), S( -14,   17), S( -24,   33), S( -20,   43), S(  -2,   14), S(  -2,   23), S(   5,    0),
        S( -14,   21), S(  -9,   15), S( -16,   17), S( -18,   31), S( -19,   40), S(  -5,   22), S(  -6,   19), S(  -5,   10),
        S(  -3,  -18), S(  -1,  -13), S(  -6,    0), S( -15,    9), S( -10,   12), S( -11,   14), S(   6,   -5), S(  -2,    2),
        S(  -3,  -56), S(   6,  -62), S(  -1,  -48), S(  -7,  -17), S( -11,   -7), S(   4,  -31), S(   0,  -21), S(   3,  -22),
        S(   2,  -46), S( -16,  -84), S( -18,  -50), S( -15,  -36), S(  -3,  -33), S(  -9,  -35), S(  -9,  -40), S(  -8,  -23),
    },
    {
        S( -28, -170), S(  16,   59), S( -13,   56), S( -43,   34), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  14,   -1), S(  -2,   85), S( -25,   71), S( -41,   69), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  22,   38), S(   5,   93), S( -55,   56), S(-136,   31), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S( -49,   36), S( -34,   82), S( -80,   49), S(-140,   17), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S( -56,   29), S( -41,   55), S( -82,   30), S(-120,    9), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(   8,    1), S(   2,   31), S( -34,    5), S( -61,  -14), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  64,  -23), S(  50,    3), S(  19,  -25), S(  -6,  -48), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  63,  -60), S(  62,  -20), S(  21,  -49), S(  19,  -92), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
    },
};

constexpr ScorePair MOBILITY[4][28] = {
    {S(  -3,  -24), S( -32,  -61), S( -21,  -15), S(  -9,    0), S(   0,   11), S(   6,   23), S(  13,   26), S(  22,   29), S(  32,   19), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S(   1,  -40), S( -41,  -67), S( -23,  -35), S( -12,  -12), S(  -5,   -1), S(  -1,   11), S(   1,   19), S(   4,   21), S(   4,   25), S(   8,   25), S(   4,   29), S(  16,   15), S(   8,   24), S(  36,  -10), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S( -27,  -66), S( -54,  -74), S( -20,  -43), S( -12,  -24), S(  -2,  -16), S(   3,   -3), S(   2,    9), S(   5,   13), S(   6,   16), S(   8,   24), S(   8,   33), S(   9,   39), S(  10,   45), S(  14,   44), S(  50,   15), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S( -18,   55), S( -16,  -19), S( -37,  -67), S( -37, -136), S( -25, -133), S( -16,  -66), S( -10,  -44), S(  -7,  -20), S(  -5,  -10), S(  -5,    8), S(  -4,   20), S(  -1,   25), S(  -2,   37), S(  -1,   40), S(   2,   40), S(   2,   46), S(   3,   49), S(   7,   46), S(   4,   51), S(   5,   53), S(   7,   47), S(  20,   23), S(  17,   30), S(  38,   -5), S(  26,   -2), S(  49,  -25), S( -29,   39), S(  21,  -76)}
};

constexpr ScorePair THREAT_BY_PAWN[6] = {S(  -6,  -23), S(  77,   38), S(  68,   74), S(  77,   55), S(  54,   39), S(   0,    0)};
constexpr ScorePair THREAT_BY_KNIGHT[2][6] = {
    {S(   6,   37), S(  15,   69), S(  46,   36), S(  88,   12), S(  45,    0), S(   0,    0)},
    {S(  -8,   10), S(   9,   66), S(  35,   35), S(  72,   46), S(  50,   58), S(   0,    0)}
};
constexpr ScorePair THREAT_BY_BISHOP[2][6] = {
    {S(   3,   34), S(  41,   44), S(  12,   24), S(  55,   41), S(  59,   63), S(   0,    0)},
    {S(  -5,    4), S(  20,   21), S(   5,  -13), S(  56,   68), S(  63,   89), S(   0,    0)}
};
constexpr ScorePair THREAT_BY_ROOK[2][6] = {
    {S(  -4,   52), S(  34,   55), S(  44,   50), S(   1,  -77), S(  62,    0), S(   0,    0)},
    {S( -11,    9), S(   8,   16), S(  22,    2), S(  15, -107), S(  55,   90), S(   0,    0)}
};
constexpr ScorePair THREAT_BY_QUEEN[2][6] = {
    {S(   7,   26), S(  27,   29), S(  19,   61), S(  12,   18), S(   0,  -46), S( 191,   78)},
    {S(  -6,   20), S(   1,    7), S(  -9,   26), S(  -3,   -9), S( -14,  -45), S( 158,  115)}
};
constexpr ScorePair THREAT_BY_KING[6] = {S(  44,   17), S(  19,   43), S(  97,   33), S(  77,    8), S(   0,    0), S(   0,    0)};
constexpr ScorePair KNIGHT_HIT_QUEEN = S(   7,    2);
constexpr ScorePair BISHOP_HIT_QUEEN = S(  17,   15);
constexpr ScorePair ROOK_HIT_QUEEN = S(  23,   -8);
constexpr ScorePair PUSH_THREAT = S(  13,   19);
constexpr ScorePair RESTRICTED_SQUARES = S(   3,    2);

constexpr ScorePair ISOLATED_PAWN[8] = {S(  -1,    1), S(  -6,  -15), S(  -8,  -12), S(  -9,  -16), S( -13,  -13), S(  -9,   -7), S(  -7,   -9), S(  -6,    1)};
constexpr ScorePair DOUBLED_PAWN[8] = {S(   0,  -55), S(   7,  -43), S(  -1,  -26), S( -15,   -3), S( -14,   -1), S(  -5,  -24), S(   7,  -42), S(   9,  -51)};
constexpr ScorePair BACKWARDS_PAWN[8] = {S(   0,    0), S(  -8,  -14), S(   1,  -16), S(  -7,  -13), S(  10,  -22), S(  21,   29), S(   0,    0), S(   0,    0)};
constexpr ScorePair PAWN_PHALANX[8] = {S(   0,    0), S(   4,   -5), S(  12,   -3), S(  17,   10), S(  40,   35), S(  61,  148), S( 128,  164), S(   0,    0)};
constexpr ScorePair DEFENDED_PAWN[8] = {S(   0,    0), S(   0,    0), S(  17,    5), S(  11,    9), S(  17,   24), S(  44,   63), S( 107,   95), S(   0,    0)};
constexpr ScorePair CANDIDATE_PASSER[2][8] = {
    {S(   0,    0), S( -16,  -14), S(  -9,  -15), S(   5,   -1), S(  14,   23), S(  42,   85), S(   0,    0), S(   0,    0)},
    {S(   0,    0), S( -14,   -7), S(  -8,    9), S(  -3,   25), S(   6,   39), S(  55,   89), S(   0,    0), S(   0,    0)}
};

constexpr ScorePair PASSED_PAWN[2][2][8] = {
    {
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -31,  -29), S( -15,   27), S(  30,  131), S( 147,  199), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -24,  -40), S(  -2,  -11), S(  32,   53), S(  61,   89), S(   0,    0)}
    },
    {
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -27,  -41), S( -10,   -8), S(  26,   53), S(  31,   48), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -30,  -55), S(  -5,  -29), S(  19,   24), S(  -6,   21), S(   0,    0)}
    }
};
constexpr ScorePair OUR_PASSER_PROXIMITY[8] = {S(  86,  105), S( 129,   63), S(  49,   68), S(  -3,   59), S(  -2,   35), S(   1,   23), S(  15,   14), S(   6,   16)};
constexpr ScorePair THEIR_PASSER_PROXIMITY[8] = {S( -52,    8), S(  12,   -6), S(  25,    2), S(  21,   26), S(  16,   58), S(  12,   75), S(  20,   76), S(  19,   57)};
constexpr ScorePair PASSER_DEFENDED_PUSH[8] = {S(   0,    0), S(   0,    0), S(   0,    0), S(   8,    6), S(  12,   19), S(  38,   35), S(  68,   94), S(   0,    0)};

constexpr ScorePair PAWN_STORM[2][4][8] = {
    {
        {S(  30,   18), S( -88, -159), S( -22,  -75), S(  35,   -6), S(  18,   14), S(   6,   17), S(  -2,   23), S(   0,    0)},
        {S(  21,   10), S(  21, -171), S(  63, -112), S(  29,  -16), S(   6,    8), S( -21,   10), S(   2,   11), S(   0,    0)},
        {S(   7,    3), S(  88, -185), S(  98, -100), S(  61,  -24), S(   8,    8), S( -14,    9), S(  -4,    4), S(   0,    0)},
        {S(   6,  -13), S( 112, -199), S( 101, -104), S(  63,  -20), S(   9,   -1), S( -26,   -7), S( -28,   -6), S(   0,    0)}
    },
    {
        {S(   0,    0), S(   0,    0), S(  83,   38), S(  -2,   19), S(   0,   27), S(  24,   36), S(  39,   28), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S( 155,   22), S( -25,   22), S(  -2,   34), S(   8,   39), S(   8,   30), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S( 136,    5), S(   9,   14), S(  -2,   24), S(   2,   31), S(  53,   10), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S( 140,  -12), S(  23,   11), S( -14,   12), S(   0,    8), S( -25,  -35), S(   0,    0)}
    }
};
constexpr ScorePair PAWN_SHIELD[4][8] = {
    {S(  56,   16), S(  10,   30), S( -15,   21), S(  27,   13), S(  41,    1), S(  -3,    5), S(  -9,   -2), S(   0,    0)},
    {S(  43,   11), S( -27,   19), S(   8,   10), S(  37,   -5), S(  35,  -13), S(  -1,  -18), S( -61,  -35), S(   0,    0)},
    {S(  24,    4), S(   5,   39), S(  10,   -8), S(  33,  -29), S(  31,  -29), S(   0,  -15), S( -47,  -28), S(   0,    0)},
    {S(  15,   -1), S( -24,  -14), S(   4,  -24), S(  24,  -31), S(  18,  -29), S(  24,  -19), S( -19,    0), S(   0,    0)}
};
constexpr ScorePair SAFE_KNIGHT_CHECK = S( 101,   -1);
constexpr ScorePair SAFE_BISHOP_CHECK = S(  75,   24);
constexpr ScorePair SAFE_ROOK_CHECK = S( 113,   11);
constexpr ScorePair SAFE_QUEEN_CHECK = S(  69,   32);
constexpr ScorePair UNSAFE_KNIGHT_CHECK = S(  18,    0);
constexpr ScorePair UNSAFE_BISHOP_CHECK = S(  39,    8);
constexpr ScorePair UNSAFE_ROOK_CHECK = S(  46,    0);
constexpr ScorePair UNSAFE_QUEEN_CHECK = S(  20,   20);
constexpr ScorePair QUEENLESS_ATTACK = S(-106,  379);
constexpr ScorePair KING_ATTACKER_WEIGHT[4] = {S(  59,   -7), S(  23,    0), S(  19,  -12), S(   7,  -98)};
constexpr ScorePair KING_ATTACKS = S(   7,   -1);
constexpr ScorePair WEAK_KING_RING = S(   4,    1);
constexpr ScorePair KING_FLANK_ATTACKS[2] = {S(  13,   -6), S(   2,    1)};
constexpr ScorePair KING_FLANK_DEFENSES[2] = {S(  -8,    0), S(  -7,    5)};
constexpr ScorePair SAFETY_OFFSET = S(  79,  -23);

constexpr ScorePair MINOR_BEHIND_PAWN = S(   1,   10);
constexpr ScorePair KNIGHT_OUTPOST = S(  16,   17);
constexpr ScorePair BISHOP_PAWNS[7] = {S(  10,    2), S(   4,   14), S(   2,    9), S(   0,    4), S(  -4,   -2), S(  -7,   -7), S( -10,  -20)};
constexpr ScorePair BISHOP_PAIR = S(  20,   70);
constexpr ScorePair LONG_DIAG_BISHOP = S(  11,   11);
constexpr ScorePair ROOK_OPEN[2] = {S(  32,   -1), S(  20,    1)};

constexpr ScorePair TEMPO = S(  26,   17);

constexpr ScorePair COMPLEXITY_PAWNS = S(   0,   10);
constexpr ScorePair COMPLEXITY_PAWNS_BOTH_SIDES = S(   0,  149);
constexpr ScorePair COMPLEXITY_PAWN_ENDGAME = S(   0,  147);
constexpr ScorePair COMPLEXITY_OFFSET = S(   0, -226);

#undef S
// clang-format on

}
