#pragma once

#include "../defs.h"

namespace eval
{

#define S(mg, eg) PackedScore(mg, eg)

constexpr PackedScore MATERIAL[6] = {S(  66,  152), S( 287,  429), S( 314,  435), S( 389,  784), S( 791, 1455), S(0, 0)};

constexpr PackedScore PSQT[6][64] = {
	{
		S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
		S(  99,  236), S(  61,  250), S(  65,  207), S(  79,  172), S(  79,  179), S(  65,  224), S(  80,  246), S(  99,  225),
		S(   6,  137), S(  17,  153), S(  26,   95), S(  49,   71), S(  40,   85), S(  22,  120), S(  -2,  142), S(   0,  124),
		S(   6,   40), S(   8,   25), S(   7,   -3), S(  16,   -9), S(   7,   -5), S(   2,   11), S(   3,   29), S( -16,   44),
		S(  -4,    8), S(   4,    6), S(  -1,  -29), S(  13,  -18), S(   9,  -16), S(  -3,   -9), S(  -7,   10), S( -22,   15),
		S(   0,    0), S(  22,   -9), S(  -3,  -48), S(  10,   -4), S(   2,   -4), S(  -9,  -11), S(  -5,    6), S( -29,   12),
		S(   3,    1), S(  36,  -12), S(   9,  -32), S(  11,    3), S(  -7,    0), S(  -9,  -10), S(  -4,    9), S( -25,   14),
		S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
	},
	{
		S( -67,  -82), S( -75,  -21), S( -19,  -24), S(  15,  -13), S( -31,    3), S( -69,    6), S(-118,   23), S( -78,  -39),
		S(   3,  -21), S(  25,   -3), S(  37,   -9), S(  15,    0), S(  13,    5), S(   7,    9), S(   0,   18), S(  -2,    2),
		S(  16,  -10), S(  10,   -6), S(  55,  -22), S(  36,   -1), S(  20,    8), S(   8,    7), S(  -2,    5), S(  -5,    2),
		S(  37,   -1), S(  36,    6), S(  48,    5), S(  33,   14), S(  29,   17), S(  27,    9), S(  18,    5), S(   6,   17),
		S(  12,   14), S(  21,   11), S(  29,   12), S(  21,   21), S(  26,   14), S(  19,   18), S(  19,    9), S(   2,   12),
		S(   3,    0), S(  17,   -2), S(   6,   -8), S(  15,   11), S(   4,    9), S(  -3,   -4), S(  -2,   -3), S( -13,   -1),
		S(   2,    7), S(   4,   -5), S(   5,   -5), S(   4,    1), S(   5,    1), S(  -9,   -2), S( -13,    1), S( -20,    4),
		S( -13,    2), S( -12,   -1), S(  -5,   -9), S(  -3,    4), S( -10,    3), S( -25,   -1), S( -15,   -2), S( -52,   18),
	},
	{
		S( -31,   -9), S( -41,    3), S(  -9,   -1), S( -73,   10), S( -72,   19), S( -52,    4), S( -27,    8), S( -13,   13),
		S( -18,  -11), S( -35,   10), S(  -8,   -5), S(  -2,   -2), S( -18,    0), S(   3,   -5), S(  -1,   -1), S(   0,   -9),
		S(  18,    7), S(  13,   -4), S(  38,    1), S(   8,    1), S(  14,   -3), S(   6,   -1), S(   6,    2), S(   5,    3),
		S(  -4,    4), S(   7,   10), S(   8,    9), S(  17,   11), S(  16,   14), S(  12,    4), S(   4,   10), S(  -9,    8),
		S(  14,   -3), S(   2,    7), S(   3,    7), S(   6,    7), S(  15,    4), S(  -6,   13), S(  -3,    9), S(  -1,    0),
		S(  22,   -7), S(  22,   -9), S(  11,   -3), S(   2,    7), S(  -6,    1), S(   5,    5), S(   8,    3), S(   1,   -2),
		S(  22,  -16), S(  27,  -21), S(  19,  -14), S(   2,   -2), S(  -6,    4), S(   6,  -15), S(   4,  -14), S(  15,   -3),
		S(  33,  -23), S(  18,  -15), S(  -6,    3), S(  11,    2), S(  -4,    2), S(   1,    8), S(  11,    3), S(  11,    1),
	},
	{
		S(  20,    2), S( -30,   37), S(  -6,   25), S( -15,   19), S( -24,   25), S( -24,   30), S(  -9,   20), S(  -4,   15),
		S(  32,   -6), S(  29,    7), S(  24,    7), S(   9,    7), S(  19,   12), S(   2,   26), S(   1,   20), S(   3,   11),
		S(   9,   -3), S(  37,    6), S(  35,   -3), S(  25,   -2), S(   5,   10), S(   1,   20), S(  12,   17), S(  -8,   16),
		S(   4,    5), S(   5,    9), S(  19,    7), S(  13,    0), S(   3,    9), S(   6,   16), S(   8,   13), S(  -8,   14),
		S(  -7,   -7), S(  11,    0), S(   0,    4), S(   6,    1), S(  -5,    6), S(  -8,    8), S( -11,    7), S( -14,    5),
		S(   6,  -26), S(  17,  -26), S(   0,  -14), S(  -1,  -14), S( -13,   -8), S( -16,   -9), S( -16,   -9), S( -22,   -7),
		S(  -8,  -23), S(  16,  -31), S(   3,  -18), S(  -1,  -18), S(  -7,  -13), S(  -9,  -11), S( -19,   -7), S( -22,  -12),
		S( -11,  -29), S( -11,  -11), S(  -4,  -16), S(   2,  -23), S(  -5,  -17), S( -12,   -9), S( -12,  -14), S( -13,  -10),
	},
	{
		S(   6,  -24), S(  35,  -41), S(  -2,   13), S(  -4,    1), S(  16,  -23), S( -11,   -3), S( -34,   -6), S( -11,  -22),
		S(  39,   -4), S(  -6,   14), S(  -1,   21), S( -35,   47), S( -27,   33), S(  -7,    5), S(  -6,  -15), S(   9,  -20),
		S(  10,    2), S(  14,    3), S(   3,   16), S(  -7,   27), S(   1,   17), S(   6,   14), S(   6,   -9), S(  20,  -16),
		S(  12,   15), S(   9,   35), S(  11,    8), S( -14,   36), S(  -9,   29), S(   3,    7), S(   3,   14), S(   5,   -1),
		S(  12,    5), S(  16,   15), S(   0,   29), S(  -2,   33), S(  -6,   31), S(  -9,   28), S(   0,   19), S(  -2,    8),
		S(  13,  -19), S(  12,   -3), S(   3,   10), S( -10,   25), S( -10,   17), S(  -9,   20), S(   1,    0), S(   2,  -12),
		S(  12,  -55), S(  17,  -66), S(   7,  -33), S(   2,    0), S(   0,    6), S(   1,  -11), S(   0,  -16), S(   8,  -33),
		S(   3,  -44), S( -11,  -49), S( -20,  -16), S(  -9,  -12), S(  -8,   -5), S( -13,    3), S( -18,   -2), S( -16,   -6),
	},
	{
		S(  -7,  -80), S( -22,   -6), S( -31,  -22), S( -25,  -24), S(   8,   -5), S(   8,   -5), S(   8,   -5), S(   8,   -5),
		S( -55,   17), S( -18,   61), S( -22,   45), S(  18,   22), S(   8,   -5), S(   8,   -5), S(   8,   -5), S(   8,   -5),
		S( -15,   23), S(  30,   57), S(  39,   45), S(  -6,   51), S(   8,   -5), S(   8,   -5), S(   8,   -5), S(   8,   -5),
		S( -58,   26), S( -14,   54), S( -10,   43), S( -38,   41), S(   8,   -5), S(   8,   -5), S(   8,   -5), S(   8,   -5),
		S( -69,   13), S( -23,   35), S( -15,   25), S( -31,   24), S(   8,   -5), S(   8,   -5), S(   8,   -5), S(   8,   -5),
		S( -33,   -6), S(  11,   13), S(  -6,    3), S(  -9,    2), S(   8,   -5), S(   8,   -5), S(   8,   -5), S(   8,   -5),
		S(  21,  -31), S(  33,   -8), S(  10,  -15), S(  -7,  -17), S(   8,   -5), S(   8,   -5), S(   8,   -5), S(   8,   -5),
		S(  20,  -68), S(  23,  -32), S(   4,  -41), S(  13,  -63), S(   8,   -5), S(   8,   -5), S(   8,   -5), S(   8,   -5),
	},
};

constexpr PackedScore MOBILITY[4][28] = {
	{S(  -9,  -21), S( -42,  -61), S( -16,  -29), S(  -7,   -4), S(   3,    8), S(   5,   18), S(  15,   25), S(  23,   31), S(  33,   30), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -20,  -30), S( -58,  -98), S( -30,  -45), S( -23,  -19), S( -11,   -6), S(  -3,    4), S(   2,   17), S(   8,   22), S(  10,   28), S(  14,   29), S(  16,   34), S(  28,   26), S(  32,   25), S(  46,   13), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -27,  -35), S(   6,  -54), S( -23,  -51), S( -13,  -29), S(  -6,  -21), S(  -3,   -3), S(  -1,    4), S(  -5,   10), S(   0,   10), S(   3,   16), S(   9,   21), S(  11,   27), S(  12,   31), S(  17,   31), S(  19,   31), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -29,    9), S( -45,  -84), S( -98,  -65), S( -73, -255), S( -76,  -83), S( -32,  -23), S( -23,   -5), S( -13,   -9), S(  -5,   -6), S(  -4,   19), S(  -2,   27), S(   1,   36), S(   4,   40), S(   8,   42), S(  11,   43), S(  14,   46), S(  16,   46), S(  16,   50), S(  17,   50), S(  19,   49), S(  27,   39), S(  33,   23), S(  35,   22), S(  51,    2), S(  63,  -16), S(  38,   16), S(  38,   -6), S(  16,  -21)}
};

constexpr PackedScore THREAT_BY_PAWN[6] = {S(  12,  -13), S(  61,   31), S(  63,   64), S(  87,   17), S(  79,  -16), S(   0,    0)};
constexpr PackedScore THREAT_BY_KNIGHT[2][6] = {
	{S(  11,   32), S(  26,   32), S(  39,   41), S(  75,    9), S(  48,  -24), S(   0,    0)},
	{S(  -4,    9), S(  13,   36), S(  31,   31), S(  65,   31), S(  59,   -3), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_BISHOP[2][6] = {
	{S(   4,   44), S(  42,   38), S( -12,   42), S(  72,   15), S(  68,   68), S(   0,    0)},
	{S(   0,   10), S(  22,   28), S( -26,   -9), S(  45,   46), S(  49,  126), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_ROOK[2][6] = {
	{S(   1,   47), S(  19,   60), S(  27,   56), S(  12,  -41), S(  74,   11), S(   0,    0)},
	{S( -11,    8), S(   2,   15), S(  15,    1), S(  11,  -83), S(  64,   45), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_QUEEN[2][6] = {
	{S(  10,   13), S(  24,   20), S(  10,   50), S(  15,    9), S(  11,  -54), S( 115,   -7)},
	{S(  -1,   10), S(   1,    8), S(  -6,   18), S(  -5,    4), S( -18,  -72), S( 108,   65)}
};
constexpr PackedScore THREAT_BY_KING[6] = {S(  -5,   54), S(  -1,   52), S(  21,   41), S(  92,   13), S(   0,    0), S(   0,    0)};
constexpr PackedScore PUSH_THREAT = S(  17,   25);

constexpr PackedScore ISOLATED_PAWN[8] = {S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)};
constexpr PackedScore PAWN_PHALANX[8] = {S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)};
constexpr PackedScore DEFENDED_PAWN[8] = {S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)};

constexpr PackedScore PASSED_PAWN[2][2][8] = {
	{
		{S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
		{S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)}
	},
	{
		{S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
		{S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)}
	}
};
constexpr PackedScore OUR_PASSER_PROXIMITY[8] = {S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)};
constexpr PackedScore THEIR_PASSER_PROXIMITY[8] = {S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)};

constexpr PackedScore PAWN_STORM[2][4][8] = {
	{
		{S(  16,   24), S(-203, -119), S(   2,  -78), S(  10,  -28), S(   3,    1), S(  -5,   21), S(  -2,   15), S(   0,    0)},
		{S(  11,    7), S( -73, -187), S(  54, -107), S(   9,  -17), S(   4,   -2), S( -10,   16), S(  -6,   19), S(   0,    0)},
		{S(  -2,   10), S(  23, -145), S(  63, -108), S(  18,  -23), S(   5,    0), S(  -6,   18), S(  -7,   20), S(   0,    0)},
		{S(   8,   -5), S(  63, -134), S(  39,  -65), S(  13,   -7), S(  -1,    7), S(  -7,   10), S(  -3,   12), S(   0,    0)}
	},
	{
		{S(   0,    0), S(  -9,   -9), S( -31,   79), S(  11,  -66), S(  -5,   16), S(   1,   15), S(  -2,   15), S(   0,    0)},
		{S(   0,    0), S(   0, -117), S(  35,   -7), S(  53,  -41), S(   6,    6), S(  -6,   16), S(  -6,   17), S(   0,    0)},
		{S(   0,    0), S(  -3,  -17), S( -45, -196), S(  21,  -38), S(   5,    7), S(   0,   13), S(  -9,   18), S(   0,    0)},
		{S(   0,    0), S( -37,  -34), S(  51,  -30), S(  23,  -10), S(   2,   15), S(   3,   -3), S(  -3,   16), S(   0,    0)}
	}
};
constexpr PackedScore PAWN_SHIELD[4][8] = {
	{S(  19,    6), S(  -8,   34), S( -18,   23), S(  -3,    8), S(  10,  -10), S( -21,  -34), S( -66,  -43), S(   0,    0)},
	{S(  25,    6), S( -16,   17), S( -15,    7), S(  10,   -2), S(   5,  -18), S(  -4,  -43), S( -59,  -46), S(   0,    0)},
	{S(  14,   29), S( -15,    9), S(  -7,  -11), S(   2,    0), S(   0,   -5), S(  18,  -42), S(  -5,  -50), S(   0,    0)},
	{S(  15,    2), S(   4,   10), S(  -6,   12), S(  -2,   -5), S(   8,  -16), S(  37,  -47), S(   1,  -58), S(   0,    0)}
};
constexpr PackedScore SAFE_KNIGHT_CHECK = S(  82,   -3);
constexpr PackedScore SAFE_BISHOP_CHECK = S(  22,   12);
constexpr PackedScore SAFE_ROOK_CHECK = S(  63,    2);
constexpr PackedScore SAFE_QUEEN_CHECK = S(  24,   18);
constexpr PackedScore UNSAFE_KNIGHT_CHECK = S(   7,    1);
constexpr PackedScore UNSAFE_BISHOP_CHECK = S(  11,   13);
constexpr PackedScore UNSAFE_ROOK_CHECK = S(  21,    0);
constexpr PackedScore UNSAFE_QUEEN_CHECK = S(   6,   13);
constexpr PackedScore KING_ATTACKER_WEIGHT[4] = {S(  19,    3), S(  16,    2), S(  18,  -14), S(   5,    0)};
constexpr PackedScore KING_ATTACKS[14] = {S( -44,   24), S( -52,   19), S( -59,   14), S( -64,   18), S( -63,   15), S( -55,   10), S( -40,    5), S( -19,   -5), S(  18,  -21), S(  40,  -21), S(  70,  -31), S(  78,   -3), S( 121,  -86), S(  76,   57)};

constexpr PackedScore MINOR_BEHIND_PAWN = S(   8,   19);
constexpr PackedScore KNIGHT_OUTPOST = S(  29,   18);
constexpr PackedScore BISHOP_PAWNS[7] = {S(   9,   21), S(   6,   19), S(   2,   10), S(  -1,    1), S(  -4,   -8), S(  -4,  -19), S(  -8,  -27)};
constexpr PackedScore BISHOP_PAIR = S(  19,   64);
constexpr PackedScore ROOK_OPEN[2] = {S(  24,   10), S(  14,    8)};

constexpr PackedScore TEMPO = S(  33,   35);

constexpr PackedScore COMPLEXITY_PAWNS = S(   0,    7);
constexpr PackedScore COMPLEXITY_PASSERS = S(   0,    3);
constexpr PackedScore COMPLEXITY_PAWNS_BOTH_SIDES = S(   0,   68);
constexpr PackedScore COMPLEXITY_PAWN_ENDGAME = S(   0,   55);
constexpr PackedScore COMPLEXITY_OFFSET = S(   0, -128);

#undef S


}