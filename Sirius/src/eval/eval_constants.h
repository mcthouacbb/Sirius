#pragma once

#include "../defs.h"

namespace eval
{

#define S(mg, eg) PackedScore(mg, eg)

constexpr PackedScore MATERIAL[6] = {S(  60,   89), S( 283,  370), S( 301,  382), S( 384,  676), S( 777, 1271), S(0, 0)};

constexpr PackedScore PSQT[6][64] = {
	{
		S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
		S(  17,  100), S(  32,   96), S(  71,   99), S(  73,   74), S(  79,   62), S(  47,   74), S(  25,   94), S(  19,   88),
		S(  46,   23), S(  58,   39), S(  78,    5), S(  47,   -6), S(  39,   -5), S(  34,    0), S(  10,   33), S(   7,   22),
		S(  19,    3), S(  13,   19), S(  27,   -6), S(  18,   -8), S(   4,   -7), S(   1,   -3), S(  -6,   19), S(  -8,   13),
		S(   7,   -8), S(   3,   15), S(  14,   -9), S(   7,   -6), S(   2,   -6), S(  -5,   -5), S( -16,   15), S( -16,   -1),
		S(  11,  -17), S(  14,    2), S(  -2,   -2), S(  -3,    1), S( -12,    1), S( -17,   -7), S( -26,    7), S( -29,   -6),
		S(  23,  -21), S(  43,   -1), S(  31,   -6), S(   0,   12), S( -14,    5), S( -14,   -1), S( -21,   14), S( -24,    0),
		S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
	},
	{
		S( -68,  -57), S( -57,  -18), S( -10,  -16), S(  16,  -10), S( -27,    5), S( -63,   11), S(-101,   16), S( -83,  -28),
		S(   0,   -6), S(  24,   -2), S(  24,   -9), S(   8,    0), S(   9,    5), S(  -2,    6), S(  -7,   18), S( -13,   11),
		S(  23,   -5), S(  10,   -3), S(  52,  -16), S(  27,    0), S(  15,    5), S(  11,    3), S(   1,    4), S(  -5,    5),
		S(  35,    3), S(  30,    7), S(  44,    3), S(  30,   11), S(  32,   11), S(  26,    5), S(  15,    3), S(   6,   16),
		S(   8,   15), S(  23,    6), S(  25,    6), S(  21,   18), S(  25,   11), S(  17,   10), S(  19,    0), S(   0,   12),
		S(  -1,    1), S(  14,   -5), S(   3,  -10), S(  16,    7), S(   3,    8), S(  -5,   -5), S(  -5,   -5), S( -15,    0),
		S(   3,   11), S(   6,    0), S(   7,   -8), S(   1,   -3), S(   1,   -5), S( -10,   -5), S( -13,    0), S( -18,    3),
		S( -14,    6), S( -12,    3), S(  -1,   -6), S(  -5,    2), S( -11,   -3), S( -21,   -7), S( -14,   -1), S( -49,   13),
	},
	{
		S( -38,   -6), S( -34,    5), S( -17,   -1), S( -69,   11), S( -71,   15), S( -56,    5), S( -33,    7), S( -12,    9),
		S( -34,    0), S( -53,   14), S( -16,    1), S( -11,   -2), S( -25,    6), S(  -4,   -2), S(  -8,    0), S( -12,   -2),
		S(  15,   11), S(  20,    2), S(  29,    8), S(   7,    5), S(  13,   -4), S(   3,    5), S(   9,    3), S(   4,    6),
		S(   2,    5), S(   8,    7), S(  12,   11), S(  14,   13), S(  22,   15), S(  11,    5), S(   4,   10), S(  -7,    7),
		S(  19,  -10), S(   6,    6), S(   9,    3), S(  16,   10), S(  15,    8), S(   3,   11), S(  -1,    5), S(   1,    3),
		S(  19,   -8), S(  21,  -11), S(  10,   -3), S(   7,    6), S(  -1,    5), S(   4,    2), S(  12,    1), S(   0,   -4),
		S(  24,  -13), S(  29,  -18), S(  23,  -13), S(   4,   -4), S(  -3,   -2), S(  11,  -18), S(   5,  -15), S(  20,   -5),
		S(  33,  -26), S(  21,  -12), S(  -2,    4), S(  14,   -7), S(   1,   -6), S(   4,    4), S(  15,    1), S(  10,   -6),
	},
	{
		S(  17,    6), S( -18,   26), S(   0,   21), S( -12,   16), S( -32,   28), S( -27,   29), S( -14,   22), S( -14,   22),
		S(  39,   -4), S(  39,    4), S(  25,    8), S(   8,   11), S(  19,   11), S(   2,   22), S(  -2,   19), S(  -7,   16),
		S(  21,   -4), S(  52,   -6), S(  38,   -6), S(  20,    4), S(   5,    9), S(   0,   17), S(  12,   12), S( -12,   18),
		S(  11,    1), S(  14,    5), S(  20,    1), S(  13,    2), S(   3,    9), S(   7,   12), S(   6,   11), S( -11,   17),
		S(  -4,   -2), S(  19,    0), S(   1,    4), S(   7,    1), S(  -3,    4), S(  -8,    7), S( -11,    8), S( -16,    8),
		S(   6,  -22), S(  21,  -23), S(   1,  -14), S(   2,  -13), S( -12,   -5), S( -16,   -9), S( -15,   -9), S( -21,   -6),
		S( -10,  -25), S(  19,  -30), S(   7,  -22), S(   0,  -20), S(  -6,  -17), S(  -8,  -14), S( -17,  -12), S( -22,  -14),
		S( -18,  -20), S( -11,  -10), S(  -3,  -16), S(   2,  -22), S(  -6,  -20), S( -13,  -13), S( -12,  -17), S( -13,  -12),
	},
	{
		S(   4,  -11), S(  51,  -39), S(  -3,   21), S( -11,   23), S(   1,   10), S( -29,   27), S( -48,   22), S( -27,   11),
		S(  44,   -3), S(   0,   10), S(   6,   29), S( -30,   61), S( -21,   42), S(  -8,   16), S( -10,   -4), S(   1,   -4),
		S(  18,    9), S(  24,    2), S(   2,   23), S(  -8,   35), S(  -3,   27), S(   1,   15), S(   3,   -3), S(  14,   -8),
		S(  17,   17), S(   5,   38), S(  10,   21), S( -12,   30), S(  -6,   25), S(   7,    4), S(   4,   11), S(   4,    5),
		S(  14,   10), S(  17,    9), S(   4,   20), S(   7,   20), S(  -5,   16), S(   0,   11), S(   3,    9), S(   0,    6),
		S(  15,  -23), S(  13,  -12), S(   4,    0), S(  -5,   14), S(  -5,    7), S(  -6,    0), S(   3,   -9), S(   2,  -14),
		S(  13,  -55), S(  17,  -67), S(  11,  -43), S(   4,  -13), S(   2,  -12), S(   3,  -23), S(   0,  -33), S(   9,  -41),
		S(   3,  -51), S( -13,  -52), S( -18,  -22), S(  -8,  -20), S(  -8,  -21), S( -12,  -19), S( -13,  -24), S( -14,  -27),
	},
	{
		S(  81,  -60), S(  54,  -11), S(  26,   -6), S(  25,  -12), S(   8,   -3), S(   8,   -3), S(   8,   -3), S(   8,   -3),
		S( -73,   35), S(  22,   33), S(  16,   28), S(  85,   -3), S(   8,   -3), S(   8,   -3), S(   8,   -3), S(   8,   -3),
		S( -66,   26), S(  30,   24), S(  48,   16), S(  31,   11), S(   8,   -3), S(   8,   -3), S(   8,   -3), S(   8,   -3),
		S(-105,   20), S( -43,   19), S( -37,   19), S( -39,    8), S(   8,   -3), S(   8,   -3), S(   8,   -3), S(   8,   -3),
		S(-128,   17), S( -59,   15), S( -41,   10), S( -47,    7), S(   8,   -3), S(   8,   -3), S(   8,   -3), S(   8,   -3),
		S( -69,    9), S( -11,    3), S( -23,    6), S( -12,    0), S(   8,   -3), S(   8,   -3), S(   8,   -3), S(   8,   -3),
		S(   7,   -7), S(  25,   -4), S(  12,    0), S(   6,   -5), S(   8,   -3), S(   8,   -3), S(   8,   -3), S(   8,   -3),
		S(  16,  -34), S(  22,  -12), S(  -3,   -1), S(   5,  -16), S(   8,   -3), S(   8,   -3), S(   8,   -3), S(   8,   -3),
	},
};

constexpr PackedScore MOBILITY[4][28] = {
	{S( -14,  -13), S( -38,  -61), S( -16,  -30), S(  -7,   -6), S(   2,    6), S(   5,   18), S(  14,   24), S(  22,   31), S(  30,   29), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -17,  -28), S( -50,  -88), S( -28,  -39), S( -21,  -17), S( -10,   -6), S(  -3,    3), S(   2,   14), S(   7,   18), S(  10,   23), S(  13,   24), S(  13,   27), S(  23,   20), S(  16,   26), S(  33,   13), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -34,  -29), S(  12,  -66), S( -24,  -41), S( -15,  -27), S(  -9,  -21), S(  -4,   -7), S(   0,   -2), S(  -5,    8), S(   0,   11), S(   3,   16), S(   7,   21), S(   9,   29), S(  12,   33), S(  18,   36), S(  25,   31), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -42,    4), S( -60,  -66), S(-110,  -47), S( -74, -250), S( -77,  -98), S( -35,  -45), S( -26,  -23), S( -18,  -21), S( -11,  -16), S( -10,    9), S(  -8,   17), S(  -5,   27), S(  -2,   33), S(   2,   36), S(   5,   40), S(   7,   43), S(   9,   46), S(   9,   52), S(  10,   55), S(  10,   59), S(  17,   54), S(  23,   44), S(  26,   45), S(  50,   20), S(  56,   21), S(  95,  -13), S(  97,  -16), S(  59,  -23)}
};

constexpr PackedScore THREAT_BY_PAWN[6] = {S(   7,  -15), S(  61,   29), S(  61,   57), S(  76,   25), S(  70,  -12), S(   0,    0)};
constexpr PackedScore THREAT_BY_KNIGHT[2][6] = {
	{S(   7,   27), S(  29,   27), S(  34,   39), S(  72,    6), S(  41,  -21), S(   0,    0)},
	{S(  -3,   11), S(  13,   43), S(  29,   31), S(  59,   29), S(  51,   -2), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_BISHOP[2][6] = {
	{S(   4,   34), S(  47,   24), S(  -1,   33), S(  68,    9), S(  67,   40), S(   0,    0)},
	{S(   1,    9), S(  22,   23), S( -13,    8), S(  43,   39), S(  48,  118), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_ROOK[2][6] = {
	{S(  -1,   42), S(  27,   51), S(  25,   50), S(  16,  -38), S(  70,    1), S(   0,    0)},
	{S(  -6,   11), S(   5,   18), S(  16,    6), S(  11,  -64), S(  56,   52), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_QUEEN[2][6] = {
	{S(  12,    6), S(  34,    8), S(  17,   41), S(  23,   -8), S(  11,  -63), S( 128,  -32)},
	{S(   0,   13), S(   1,    7), S(  -4,   21), S(  -3,    3), S( -18,  -55), S( 110,   38)}
};
constexpr PackedScore THREAT_BY_KING[6] = {S( -13,   39), S(  31,   40), S(  30,   46), S(  97,    8), S(   0,    0), S(   0,    0)};
constexpr PackedScore PUSH_THREAT = S(  18,   17);

constexpr PackedScore ISOLATED_PAWN[8] = {S(  -6,    7), S(  -1,  -13), S( -10,   -5), S(  -7,  -13), S(  -9,  -11), S(  -6,   -3), S(  -2,  -10), S( -10,    8)};
constexpr PackedScore PAWN_PHALANX[8] = {S(   0,    0), S(   3,   -2), S(  13,    4), S(  18,   14), S(  44,   53), S( 111,  174), S(-124,  390), S(   0,    0)};
constexpr PackedScore DEFENDED_PAWN[8] = {S(   0,    0), S(   0,    0), S(  17,    9), S(  12,    7), S(  13,   16), S(  23,   49), S( 146,   44), S(   0,    0)};

constexpr PackedScore PASSED_PAWN[2][2][8] = {
	{
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -24,  -41), S( -12,   16), S( -30,  129), S(   0,  192), S(   0,    0)},
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -13,  -51), S(  16,  -28), S(  18,    6), S(  83,    5), S(   0,    0)}
	},
	{
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -21,  -56), S(   2,  -26), S(  18,   -3), S(  79,  -26), S(   0,    0)},
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -23,  -60), S(   3,  -36), S(  -1,  -26), S(  15,  -60), S(   0,    0)}
	}
};
constexpr PackedScore OUR_PASSER_PROXIMITY[8] = {S(   0,    0), S(  15,   78), S(  -8,   58), S(  -1,   34), S(   2,   23), S(   8,   16), S(  17,   17), S(  11,   16)};
constexpr PackedScore THEIR_PASSER_PROXIMITY[8] = {S(   0,    0), S( -67,   21), S(  15,    2), S(   6,   28), S(  10,   47), S(   4,   75), S(   9,   75), S(   7,   66)};

constexpr PackedScore PAWN_STORM[3][8] = {
	{S(  44,  -29), S(  21,  -18), S(  16,   -3), S(   9,   -1), S(   3,    3), S(   0,    7), S(   0,    8), S(  10,  -11)},
	{S(   0,    0), S(  18,  -24), S(  20,    2), S(   4,    1), S(  -4,    6), S(  -6,   13), S(  -6,   14), S(   8,   -5)},
	{S(   1,   -2), S(  -7,    4), S(   3,    7), S(   2,    7), S(   3,    7), S(   3,    9), S(   4,    9), S(  -7,   -4)}
};
constexpr PackedScore PAWN_SHIELD[3][8] = {
	{S(  16,  -16), S(   1,   -9), S(  -2,  -11), S(  -5,   -9), S(   7,  -10), S(  20,  -22), S(  32,  -17), S(  -5,    4)},
	{S(   0,    0), S(  -6,   -1), S( -10,   -4), S(   1,   -2), S(  13,   -8), S(  33,  -21), S(  51,  -26), S(   7,    4)},
	{S(  -5,   -5), S(  -5,   -2), S(   0,   -4), S(   2,    0), S(   4,    1), S(   4,   -2), S(  14,   -5), S(  -5,    8)}
};
constexpr PackedScore SAFE_KNIGHT_CHECK = S(  75,   -3);
constexpr PackedScore SAFE_BISHOP_CHECK = S(  15,   -6);
constexpr PackedScore SAFE_ROOK_CHECK = S(  51,    0);
constexpr PackedScore SAFE_QUEEN_CHECK = S(  28,   14);
constexpr PackedScore KING_ATTACKER_WEIGHT[4] = {S(  14,   -4), S(   8,    0), S(  10,  -17), S(   1,    8)};
constexpr PackedScore KING_ATTACKS[14] = {S( -85,   31), S( -88,   28), S( -89,   26), S( -88,   29), S( -80,   26), S( -66,   23), S( -45,   16), S( -18,    5), S(  25,  -15), S(  54,  -21), S(  90,  -36), S( 116,  -25), S( 153, -114), S( 116,   24)};

constexpr PackedScore KNIGHT_OUTPOST = S(  24,   16);
constexpr PackedScore BISHOP_PAWNS[7] = {S(   5,   21), S(   8,   17), S(   5,   10), S(   1,    3), S(  -4,   -6), S(  -6,  -18), S( -11,  -31)};
constexpr PackedScore BISHOP_PAIR = S(  20,   58);
constexpr PackedScore ROOK_OPEN[2] = {S(  23,    4), S(  14,    4)};

constexpr PackedScore TEMPO = S(  28,   31);

#undef S


}
