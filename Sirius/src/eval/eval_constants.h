#pragma once

#include "../defs.h"

namespace eval
{

#define S(mg, eg) PackedScore(mg, eg)

constexpr PackedScore MATERIAL[6] = {S(  56,  104), S( 273,  446), S( 297,  453), S( 364,  812), S( 767, 1485), S(0, 0)};

constexpr PackedScore PSQT[6][64] = {
	{
		S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
		S(  29,   93), S(  38,   96), S(  85,   95), S(  82,   71), S(  90,   57), S(  51,   76), S(  31,   94), S(  14,   90),
		S(  43,   21), S(  59,   43), S(  76,    6), S(  49,  -12), S(  38,  -10), S(  32,   -2), S(   5,   38), S(  -1,   24),
		S(  17,    3), S(  11,   24), S(  30,   -7), S(  17,  -10), S(   5,   -9), S(   1,   -3), S(  -8,   23), S( -12,   14),
		S(   8,  -13), S(   3,   17), S(  13,   -9), S(  10,   -8), S(   2,   -7), S(  -6,   -6), S( -16,   19), S( -17,   -2),
		S(  13,  -21), S(  13,    6), S(  -2,   -2), S(  -5,    2), S( -12,    1), S( -17,   -7), S( -26,   12), S( -28,   -7),
		S(  28,  -25), S(  44,    3), S(  28,   -3), S(   2,   12), S( -14,    5), S( -12,    0), S( -19,   21), S( -20,    0),
		S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
	},
	{
		S( -59,  -87), S( -70,  -22), S( -26,  -15), S(  15,  -12), S( -33,    7), S( -66,   10), S(-106,   15), S( -81,  -42),
		S(  -2,   -9), S(  26,   -3), S(  33,   -6), S(  12,    5), S(  16,    6), S(  -2,   15), S(  -7,   21), S( -14,   12),
		S(  16,   -8), S(  12,   -2), S(  56,  -18), S(  36,    3), S(  19,    8), S(  11,    4), S(   1,    6), S(  -8,    6),
		S(  34,    2), S(  33,    8), S(  45,    6), S(  33,   14), S(  29,   17), S(  27,    8), S(  15,    5), S(   5,   17),
		S(   9,   15), S(  20,   10), S(  25,    9), S(  20,   21), S(  22,   14), S(  17,   13), S(  18,    2), S(   0,   13),
		S(   1,   -1), S(  16,   -4), S(   6,   -9), S(  15,    7), S(   4,    9), S(  -2,   -4), S(  -2,   -4), S( -14,   -1),
		S(   1,    8), S(   3,   -4), S(   5,   -8), S(   3,   -2), S(   3,   -2), S(  -8,   -7), S( -13,   -2), S( -19,    0),
		S( -12,   -4), S( -13,   -1), S(  -4,   -8), S(  -3,    4), S(  -8,    0), S( -21,   -7), S( -15,   -5), S( -49,   11),
	},
	{
		S( -34,   -4), S( -34,    7), S( -10,   -2), S( -69,   12), S( -64,   15), S( -50,    4), S( -23,    5), S( -15,   14),
		S( -24,   -2), S( -34,   11), S(  -9,    0), S(  -1,   -3), S( -20,    8), S(   0,   -2), S(  -3,    1), S(  -6,   -2),
		S(  21,    9), S(  15,   -1), S(  40,    5), S(   9,    5), S(  14,   -2), S(   4,    5), S(   6,    3), S(   4,    5),
		S(  -2,    4), S(   9,    6), S(   7,   11), S(  17,   13), S(  16,   18), S(  11,    4), S(   2,   11), S(  -8,    7),
		S(  14,   -6), S(   1,    8), S(   5,    5), S(   7,   11), S(  14,    9), S(  -5,   13), S(  -2,    5), S(  -1,    3),
		S(  19,   -9), S(  20,  -10), S(  11,   -2), S(   3,    7), S(  -5,    5), S(   5,    3), S(   8,    3), S(   1,   -5),
		S(  20,  -19), S(  27,  -23), S(  18,  -13), S(   3,   -4), S(  -4,   -1), S(   7,  -18), S(   6,  -17), S(  13,   -7),
		S(  32,  -28), S(  19,  -19), S(  -6,    2), S(  14,   -3), S(   0,   -2), S(   3,    5), S(  11,   -2), S(  12,   -8),
	},
	{
		S(   9,   11), S( -16,   33), S(   2,   23), S(  -9,   15), S( -24,   24), S( -23,   30), S(  -8,   21), S(  -9,   22),
		S(  25,    2), S(  30,    8), S(  20,   12), S(   4,   13), S(  16,   14), S(   0,   27), S(  -2,   23), S(  -2,   16),
		S(  14,    1), S(  43,    1), S(  30,    3), S(  22,    6), S(   3,   14), S(   0,   23), S(  12,   19), S(  -9,   22),
		S(   5,    8), S(   5,   15), S(  16,   10), S(  10,    4), S(   2,   12), S(   5,   18), S(   5,   18), S(  -8,   20),
		S(  -5,   -4), S(  13,    1), S(  -1,    4), S(   6,    1), S(  -5,    5), S(  -9,    9), S( -11,   10), S( -14,    9),
		S(   9,  -29), S(  18,  -29), S(   3,  -19), S(   2,  -18), S( -10,   -9), S( -14,  -10), S( -13,  -11), S( -17,  -10),
		S(  -8,  -32), S(  18,  -38), S(   7,  -27), S(   2,  -24), S(  -4,  -20), S(  -5,  -18), S( -14,  -14), S( -16,  -21),
		S( -15,  -30), S( -10,  -16), S(   0,  -22), S(   5,  -28), S(  -1,  -25), S(  -8,  -17), S(  -7,  -21), S(  -8,  -17),
	},
	{
		S(   4,  -23), S(  34,  -38), S(  -5,   16), S(  -6,    3), S(  14,  -19), S( -10,   -4), S( -40,    2), S( -20,   -8),
		S(  37,    2), S(  -2,    8), S(   1,   18), S( -33,   48), S( -26,   35), S(  -8,    7), S(  -8,  -12), S(   2,  -10),
		S(  15,    1), S(  20,   -4), S(   9,   13), S(  -4,   24), S(   1,   18), S(   4,   16), S(   6,  -11), S(  15,   -8),
		S(  11,   17), S(   9,   37), S(   7,   13), S( -11,   31), S(  -9,   31), S(   4,    6), S(   2,   15), S(   2,    8),
		S(  11,   11), S(  16,   16), S(   2,   25), S(   0,   28), S(  -7,   30), S(  -6,   23), S(   0,   18), S(  -2,    9),
		S(  13,  -22), S(  12,   -5), S(   3,    8), S(  -8,   23), S(  -8,   15), S(  -8,   17), S(   1,   -1), S(   1,   -9),
		S(  13,  -56), S(  17,  -70), S(   7,  -39), S(   3,   -4), S(   0,    2), S(   2,  -15), S(   1,  -20), S(   7,  -32),
		S(   3,  -51), S( -14,  -50), S( -18,  -21), S(  -8,  -17), S(  -8,  -10), S( -11,   -5), S( -15,  -12), S( -14,  -11),
	},
	{
		S(  -4,  -53), S(  10,   -5), S(  -8,   -2), S(  23,  -10), S(   0,   -4), S(   0,   -4), S(   0,   -4), S(   0,   -4),
		S( -61,   41), S(  10,   49), S(  20,   40), S(  79,    7), S(   0,   -4), S(   0,   -4), S(   0,   -4), S(   0,   -4),
		S( -40,   30), S(  37,   35), S(  67,   25), S(  67,   17), S(   0,   -4), S(   0,   -4), S(   0,   -4), S(   0,   -4),
		S( -58,   16), S(   0,   20), S(  16,   20), S(  19,    6), S(   0,   -4), S(   0,   -4), S(   0,   -4), S(   0,   -4),
		S( -83,   10), S( -23,   13), S(   2,    7), S(  -6,    3), S(   0,   -4), S(   0,   -4), S(   0,   -4), S(   0,   -4),
		S( -47,    2), S(   6,   -1), S(  -3,    2), S(   1,   -3), S(   0,   -4), S(   0,   -4), S(   0,   -4), S(   0,   -4),
		S(  11,  -15), S(  25,  -10), S(   6,   -5), S(  -7,   -9), S(   0,   -4), S(   0,   -4), S(   0,   -4), S(   0,   -4),
		S(   6,  -47), S(  10,  -22), S( -21,   -7), S( -16,  -25), S(   0,   -4), S(   0,   -4), S(   0,   -4), S(   0,   -4),
	},
};

constexpr PackedScore MOBILITY[4][28] = {
	{S( -11,  -18), S( -36,  -66), S( -15,  -32), S(  -6,   -6), S(   3,    7), S(   5,   18), S(  12,   25), S(  20,   32), S(  28,   33), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -18,  -32), S( -49,  -96), S( -29,  -39), S( -23,  -16), S( -11,   -4), S(  -5,    6), S(   0,   17), S(   5,   22), S(   7,   27), S(  12,   29), S(  14,   31), S(  26,   22), S(  28,   24), S(  47,    6), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -25,  -44), S(  15,  -77), S( -24,  -49), S( -13,  -29), S(  -8,  -20), S(  -2,   -5), S(   1,    0), S(  -5,   10), S(   0,   13), S(   3,   19), S(   6,   25), S(   7,   35), S(   9,   40), S(  15,   42), S(  21,   40), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -33,    7), S( -49,  -81), S( -86,  -84), S( -66, -255), S( -69,  -98), S( -28,  -38), S( -21,  -12), S( -15,   -7), S(  -7,   -5), S(  -6,   19), S(  -5,   27), S(  -2,   37), S(   0,   42), S(   3,   45), S(   6,   47), S(   9,   50), S(  11,   50), S(  10,   55), S(  12,   56), S(  13,   56), S(  21,   48), S(  29,   31), S(  34,   26), S(  50,    6), S(  57,   -2), S(  54,    0), S(  44,   -5), S(  24,  -33)}
};

constexpr PackedScore THREAT_BY_PAWN[6] = {S(   8,  -15), S(  59,   33), S(  58,   64), S(  72,   34), S(  69,   -5), S(   0,    0)};
constexpr PackedScore THREAT_BY_KNIGHT[2][6] = {
	{S(   7,   29), S(  24,   40), S(  35,   44), S(  69,   13), S(  43,  -20), S(   0,    0)},
	{S(  -4,   10), S(  11,   40), S(  27,   31), S(  60,   34), S(  52,    4), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_BISHOP[2][6] = {
	{S(   1,   37), S(  40,   36), S(  -5,   34), S(  66,   16), S(  63,   68), S(   0,    0)},
	{S(   0,    8), S(  20,   24), S( -17,  -18), S(  41,   48), S(  45,  126), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_ROOK[2][6] = {
	{S(   1,   44), S(  17,   63), S(  26,   58), S(  10,  -50), S(  69,   13), S(   0,    0)},
	{S(  -8,    7), S(   1,   16), S(  12,    3), S(  10,  -92), S(  59,   46), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_QUEEN[2][6] = {
	{S(   6,   12), S(  22,   22), S(   8,   50), S(  13,    9), S(  10,  -55), S(  97,   26)},
	{S(  -2,   12), S(   0,    7), S(  -6,   19), S(  -5,    3), S( -16,  -70), S( 102,   66)}
};
constexpr PackedScore THREAT_BY_KING[6] = {S( -29,   44), S(  -1,   51), S(  20,   45), S(  71,   21), S(   0,    0), S(   0,    0)};
constexpr PackedScore PUSH_THREAT = S(  15,   20);

constexpr PackedScore ISOLATED_PAWN[8] = {S(  -7,   11), S(  -2,  -15), S(  -9,   -6), S(  -8,  -14), S( -10,  -11), S(  -6,   -4), S(  -1,  -12), S( -11,   12)};
constexpr PackedScore PAWN_PHALANX[8] = {S(   0,    0), S(   4,   -4), S(  12,    4), S(  18,   15), S(  44,   60), S( 111,  219), S( -26,  400), S(   0,    0)};
constexpr PackedScore DEFENDED_PAWN[8] = {S(   0,    0), S(   0,    0), S(  18,    9), S(  12,    9), S(  12,   19), S(  19,   59), S( 148,   61), S(   0,    0)};

constexpr PackedScore PASSED_PAWN[2][2][8] = {
	{
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -29,  -41), S( -15,   24), S( -29,  159), S(  41,  242), S(   0,    0)},
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -18,  -54), S(  11,  -28), S(  12,   14), S(  72,   25), S(   0,    0)}
	},
	{
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -28,  -55), S(  -3,  -21), S(  11,    9), S(  74,   -8), S(   0,    0)},
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -29,  -58), S(  -1,  -32), S(  -7,  -15), S( -10,  -37), S(   0,    0)}
	}
};
constexpr PackedScore OUR_PASSER_PROXIMITY[8] = {S(   0,    0), S(  31,   90), S(  -4,   69), S(   1,   41), S(   5,   28), S(   8,   20), S(  15,   20), S(   9,   20)};
constexpr PackedScore THEIR_PASSER_PROXIMITY[8] = {S(   0,    0), S( -44,   12), S(  23,   -4), S(  10,   27), S(  14,   47), S(   9,   82), S(  17,   81), S(  16,   70)};

constexpr PackedScore PAWN_STORM[3][8] = {
	{S(  54,  -30), S(  28,  -17), S(  21,    0), S(  11,    2), S(   2,    5), S(  -4,    9), S(  -5,    9), S(   6,  -14)},
	{S(   0,    0), S(  12,  -25), S(  24,    6), S(   6,    3), S(  -4,    6), S(  -9,   13), S( -10,   13), S(   5,   -9)},
	{S(  15,    1), S(   3,    8), S(   9,   11), S(   6,   10), S(   5,    9), S(   2,   10), S(   2,    9), S(  -8,   -6)}
};
constexpr PackedScore PAWN_SHIELD[3][8] = {
	{S(  11,  -15), S(  -1,   -9), S(  -4,  -10), S(  -5,   -8), S(   6,   -9), S(  23,  -27), S(  35,  -16), S(  -7,    8)},
	{S(   0,    0), S(  -9,    0), S( -10,   -1), S(   0,    1), S(  12,   -3), S(  33,  -24), S(  52,  -27), S(   8,    8)},
	{S(  -6,   -4), S(  -5,   -2), S(   0,   -2), S(   1,    2), S(   4,    4), S(   5,    0), S(  15,   -4), S(  -5,   12)}
};
constexpr PackedScore SAFE_KNIGHT_CHECK = S(  78,   -2);
constexpr PackedScore SAFE_BISHOP_CHECK = S(  21,   12);
constexpr PackedScore SAFE_ROOK_CHECK = S(  56,    6);
constexpr PackedScore SAFE_QUEEN_CHECK = S(  21,   22);
constexpr PackedScore UNSAFE_KNIGHT_CHECK = S(   5,    1);
constexpr PackedScore UNSAFE_BISHOP_CHECK = S(  11,   12);
constexpr PackedScore UNSAFE_ROOK_CHECK = S(  19,    0);
constexpr PackedScore UNSAFE_QUEEN_CHECK = S(   5,   13);
constexpr PackedScore KING_ATTACKER_WEIGHT[4] = {S(  17,    1), S(  13,    4), S(  17,  -14), S(   4,    0)};
constexpr PackedScore KING_ATTACKS[14] = {S( -50,   29), S( -56,   22), S( -63,   17), S( -66,   19), S( -64,   15), S( -56,   11), S( -40,    5), S( -20,   -5), S(  19,  -23), S(  41,  -21), S(  72,  -32), S(  85,   -5), S( 117,  -83), S(  86,   51)};

constexpr PackedScore MINOR_BEHIND_PAWN = S(   7,   15);
constexpr PackedScore KNIGHT_OUTPOST = S(  25,   19);
constexpr PackedScore BISHOP_PAWNS[7] = {S(   4,   22), S(   6,   20), S(   4,   12), S(   1,    4), S(  -3,   -5), S(  -4,  -19), S(  -8,  -33)};
constexpr PackedScore BISHOP_PAIR = S(  18,   64);
constexpr PackedScore ROOK_OPEN[2] = {S(  24,    5), S(  14,    7)};

constexpr PackedScore TEMPO = S(  29,   36);

constexpr PackedScore COMPLEXITY_PAWNS = S(   1,    8);
constexpr PackedScore COMPLEXITY_PASSERS = S(  -1,    1);
constexpr PackedScore COMPLEXITY_PAWNS_BOTH_SIDES = S(   1,   68);
constexpr PackedScore COMPLEXITY_PAWN_ENDGAME = S(   0,   65);
constexpr PackedScore COMPLEXITY_OFFSET = S(   1, -131);

#undef S


}