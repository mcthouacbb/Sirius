#pragma once

#include "../defs.h"

namespace eval
{

#define S(mg, eg) PackedScore(mg, eg)

constexpr PackedScore MATERIAL[6] = {S(  62,  128), S( 288,  445), S( 307,  457), S( 375,  815), S( 789, 1523), S(0, 0)};

constexpr PackedScore PSQT[6][64] = {
	{
		S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
		S(  67,   81), S(  36,   88), S(  36,   97), S(  64,   79), S(  71,   72), S(  37,   96), S(  39,  101), S(  65,   89),
		S(  31,   25), S(  38,   42), S(  46,   12), S(  69,  -19), S(  53,  -12), S(  41,    5), S(  15,   34), S(  15,   31),
		S(  21,   16), S(  23,   12), S(  19,   -6), S(  31,  -17), S(  16,  -16), S(  10,   -3), S(   9,   12), S(  -6,   20),
		S(   6,    3), S(  10,    9), S(   3,  -18), S(  17,  -13), S(  11,  -11), S(  -4,   -7), S(  -6,   10), S( -18,    6),
		S(  -4,    0), S(   6,   -1), S(  -4,  -22), S(  -8,    2), S( -13,    1), S( -18,   -6), S( -24,    6), S( -33,    5),
		S(   5,    4), S(  29,    0), S(  10,   -8), S(   2,   11), S( -18,   -1), S( -14,    1), S( -14,   14), S( -26,   13),
		S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
	},
	{
		S(-109, -133), S( -89,  -34), S( -33,  -18), S(  16,  -15), S( -30,    0), S( -62,    2), S(-117,   -2), S(-126,  -93),
		S( -21,  -28), S(  15,   -5), S(  41,    4), S(  17,   13), S(  24,   15), S(   8,   22), S(  -2,   12), S( -22,  -10),
		S(  16,  -15), S(  24,    9), S(  82,    2), S(  67,   21), S(  50,   29), S(  39,   26), S(  15,   17), S(  -6,   -1),
		S(  30,   -2), S(  49,   20), S(  72,   26), S(  49,   36), S(  47,   39), S(  50,   30), S(  30,   19), S(   4,   11),
		S(   1,    2), S(  24,   22), S(  37,   29), S(  32,   41), S(  33,   35), S(  35,   35), S(  28,   16), S(  -5,    2),
		S(  -6,  -11), S(  22,    5), S(  22,   14), S(  27,   28), S(  21,   29), S(  12,   19), S(   5,    7), S( -22,  -10),
		S( -10,  -18), S(  -5,  -15), S(   2,    3), S(   3,    8), S(   1,    9), S(  -7,    6), S( -25,  -10), S( -38,  -22),
		S( -39,  -50), S( -33,  -33), S(  -8,  -18), S( -18,   -4), S( -22,   -7), S( -39,  -11), S( -41,  -42), S( -68,  -32),
	},
	{
		S( -51,  -13), S( -30,    3), S( -14,    0), S( -78,   13), S( -73,   18), S( -48,    1), S( -21,    4), S( -25,    6),
		S( -25,  -16), S( -29,   17), S(   3,    4), S(   3,    5), S( -14,   15), S(  13,    4), S(  10,    5), S(  -4,  -15),
		S(  16,    9), S(  19,    4), S(  52,   14), S(  26,   12), S(  30,    9), S(  22,   13), S(  16,    9), S(   7,    1),
		S(  -7,    2), S(   8,   18), S(  18,   21), S(  31,   25), S(  30,   32), S(  25,   15), S(  11,   19), S(  -7,    7),
		S(  -5,   -8), S(   8,   14), S(  11,   19), S(  15,   23), S(  25,   22), S(   4,   26), S(   5,   14), S(  -9,    1),
		S(  12,  -21), S(  20,   -7), S(  15,    5), S(   3,   16), S(  -1,   12), S(   9,   14), S(   7,    6), S(  -8,  -11),
		S(   9,  -42), S(  24,  -25), S(  17,  -14), S(   4,   -4), S(  -7,    2), S(   6,  -18), S(   2,  -16), S(  -7,  -26),
		S(  10,  -55), S(   1,  -33), S( -20,  -18), S(  -3,  -12), S( -13,  -11), S( -19,  -26), S( -10,  -14), S( -11,  -32),
	},
	{
		S(  14,   14), S( -24,   41), S(   0,   29), S(   0,   19), S( -14,   28), S( -12,   33), S(  -1,   24), S(  -2,   24),
		S(  24,    7), S(  29,   11), S(  25,   12), S(   5,   17), S(  18,   20), S(   4,   31), S(  -2,   27), S(   4,   19),
		S(  -1,    7), S(  37,    3), S(  30,   -2), S(  24,    0), S(  -1,   12), S(  -3,   24), S(   9,   21), S( -10,   23),
		S(  -3,    7), S(  -1,   12), S(  16,    6), S(  10,   -1), S(   2,   12), S(   5,   17), S(   3,   16), S( -10,   19),
		S( -10,   -6), S(   8,   -2), S(  -5,    2), S(   8,   -3), S(  -5,    5), S( -10,    7), S( -13,    7), S( -15,    4),
		S(   8,  -32), S(  16,  -30), S(  -1,  -18), S(   1,  -19), S( -11,  -11), S( -15,  -11), S( -15,  -12), S( -19,  -13),
		S(  -8,  -34), S(  17,  -40), S(   2,  -25), S(   2,  -26), S(  -6,  -21), S(  -6,  -16), S( -15,  -13), S( -18,  -21),
		S( -10,  -37), S(  -9,  -10), S(   2,  -19), S(  10,  -22), S(   2,  -17), S(  -4,   -9), S(  -5,  -15), S(  -5,  -15),
	},
	{
		S( -18,  -11), S(  35,  -35), S(  -2,   20), S(  -5,   12), S(  18,  -12), S( -10,    6), S( -37,    6), S( -41,    9),
		S(  29,   -1), S(  -5,   17), S(   4,   25), S( -32,   53), S( -18,   33), S(   0,    9), S(  -1,  -11), S(   4,  -14),
		S(   0,    1), S(  15,    4), S(  10,   16), S(  10,   21), S(  14,   16), S(  16,   12), S(   8,   -2), S(  15,  -11),
		S(   5,    9), S(   7,   37), S(  14,   14), S(   1,   28), S(   5,   29), S(  15,    4), S(  10,   14), S(  -2,   11),
		S(   5,    0), S(  14,   16), S(   6,   26), S(   8,   26), S(   2,   28), S(   0,   26), S(   4,   19), S(  -2,    3),
		S(   5,  -29), S(  12,   -7), S(   4,   10), S(  -5,   22), S(  -4,   15), S(  -3,   22), S(   4,   -2), S(  -1,  -16),
		S(   0,  -70), S(  15,  -68), S(   9,  -38), S(   5,   -3), S(   3,    0), S(   4,  -16), S(   2,  -18), S(   1,  -33),
		S( -16,  -50), S( -23,  -51), S( -19,  -25), S(  -7,  -12), S(  -5,   -5), S( -13,    0), S( -17,  -11), S( -16,  -12),
	},
	{
		S(   2,  -68), S(  -1,   -3), S( -35,   -7), S( -38,   -3), S(   8,   -6), S(   8,   -6), S(   8,   -6), S(   8,   -6),
		S( -49,   28), S(  -3,   59), S( -11,   45), S(  22,   22), S(   8,   -6), S(   8,   -6), S(   8,   -6), S(   8,   -6),
		S( -28,   25), S(  20,   52), S(  30,   41), S(   1,   42), S(   8,   -6), S(   8,   -6), S(   8,   -6), S(   8,   -6),
		S( -62,   21), S( -23,   45), S( -19,   38), S( -45,   34), S(   8,   -6), S(   8,   -6), S(   8,   -6), S(   8,   -6),
		S( -82,   12), S( -34,   29), S( -19,   18), S( -41,   19), S(   8,   -6), S(   8,   -6), S(   8,   -6), S(   8,   -6),
		S( -36,   -6), S(  11,    6), S(  -2,   -2), S(  -7,   -2), S(   8,   -6), S(   8,   -6), S(   8,   -6), S(   8,   -6),
		S(  28,  -28), S(  39,   -9), S(  18,  -15), S(   3,  -16), S(   8,   -6), S(   8,   -6), S(   8,   -6), S(   8,   -6),
		S(  20,  -61), S(  20,  -27), S(  -2,  -32), S(   9,  -56), S(   8,   -6), S(   8,   -6), S(   8,   -6), S(   8,   -6),
	},
};

constexpr PackedScore MOBILITY[4][28] = {
	{S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)}
};

constexpr PackedScore THREAT_BY_PAWN[6] = {S(  11,  -17), S(  62,   30), S(  60,   62), S(  77,   31), S(  76,  -10), S(   0,    0)};
constexpr PackedScore THREAT_BY_KNIGHT[2][6] = {
	{S(   6,   28), S(  45,   74), S(  39,   42), S(  75,   11), S(  49,  -22), S(   0,    0)},
	{S( -10,    8), S(  29,   77), S(  29,   34), S(  63,   29), S(  56,   -8), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_BISHOP[2][6] = {
	{S(   0,   35), S(  42,   35), S(  16,   75), S(  74,   18), S(  72,   73), S(   0,    0)},
	{S(  -5,   -1), S(  17,   21), S(   1,   24), S(  48,   45), S(  52,  122), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_ROOK[2][6] = {
	{S(   5,   37), S(  18,   54), S(  27,   49), S(  10,   20), S(  75,   19), S(   0,    0)},
	{S(  -4,   -1), S(   2,    8), S(  15,   -1), S(  11,  -28), S(  67,   51), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_QUEEN[2][6] = {
	{S(   6,   10), S(  23,   20), S(  10,   48), S(  18,   10), S(  14,  -13), S( 100,   23)},
	{S(  -3,    8), S(  -1,    8), S(  -6,   26), S(  -5,   12), S( -15,  -14), S( 115,   48)}
};
constexpr PackedScore THREAT_BY_KING[6] = {S( -32,   46), S(   1,   49), S(  26,   40), S(  90,   16), S(   0,    0), S(   0,    0)};
constexpr PackedScore PUSH_THREAT = S(  17,   21);

constexpr PackedScore ISOLATED_PAWN[8] = {S(  -2,   -1), S(  -5,  -12), S(  -9,  -11), S( -10,  -16), S(  -9,  -14), S(  -6,   -7), S(  -2,  -12), S(  -5,   -1)};
constexpr PackedScore PAWN_PHALANX[8] = {S(   0,    0), S(   6,   -5), S(  16,    2), S(  20,   16), S(  46,   61), S( 110,  222), S( -40,  374), S(   0,    0)};
constexpr PackedScore DEFENDED_PAWN[8] = {S(   0,    0), S(   0,    0), S(  23,    8), S(  16,    9), S(  16,   19), S(  20,   60), S( 130,   78), S(   0,    0)};

constexpr PackedScore PASSED_PAWN[2][2][8] = {
	{
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -30,  -35), S( -15,   24), S( -25,  149), S(  29,  233), S(   0,    0)},
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -22,  -50), S(   8,  -25), S(  16,   14), S(  68,   37), S(   0,    0)}
	},
	{
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -26,  -55), S(  -2,  -27), S(  18,    1), S(  90,    2), S(   0,    0)},
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -30,  -59), S(  -2,  -32), S(  -6,  -13), S(  14,   -1), S(   0,    0)}
	}
};
constexpr PackedScore OUR_PASSER_PROXIMITY[8] = {S(   0,    0), S(  44,   82), S(   1,   67), S(   0,   42), S(   5,   31), S(  11,   24), S(  20,   22), S(  11,   21)};
constexpr PackedScore THEIR_PASSER_PROXIMITY[8] = {S(   0,    0), S( -45,    5), S(  22,   -1), S(  15,   24), S(  19,   43), S(  10,   78), S(  13,   78), S(  16,   66)};

constexpr PackedScore PAWN_STORM[2][4][8] = {
	{
		{S(  12,   14), S(-140,  -52), S(  -3,   -9), S(   4,  -12), S(   1,    0), S(  -4,    9), S(  -4,    9), S(   0,    0)},
		{S(   9,    1), S( -22, -103), S(  51,  -43), S(  10,  -11), S(   3,   -5), S( -10,    6), S(  -7,   10), S(   0,    0)},
		{S(  -5,    5), S(  56, -102), S(  67,  -46), S(  19,  -17), S(   4,   -1), S(  -6,    8), S(  -9,   11), S(   0,    0)},
		{S(   8,   -6), S(  98,  -89), S(  43,  -24), S(  15,   -2), S(  -2,    6), S( -10,    2), S(  -5,    2), S(   0,    0)}
	},
	{
		{S(   0,    0), S(  -3,  -27), S( -32,  123), S(  35,  -61), S(   0,    6), S(   0,    5), S(  -4,   10), S(   0,    0)},
		{S(   0,    0), S(  -9,  -69), S(   5,   75), S(  59,  -41), S(   3,    2), S(  -6,    6), S(  -7,   10), S(   0,    0)},
		{S(   0,    0), S(  -6,   15), S( -53, -111), S(  22,  -27), S(   3,    5), S(   1,    6), S( -10,   11), S(   0,    0)},
		{S(   0,    0), S( -14,  -60), S(  66,   -8), S(  24,   -3), S(   1,   11), S(   0,   -7), S(  -4,    9), S(   0,    0)}
	}
};
constexpr PackedScore PAWN_SHIELD[4][8] = {
	{S(  15,    3), S( -12,   26), S( -14,   16), S(   2,    7), S(   7,   -1), S( -27,  -26), S( -72,  -35), S(   0,    0)},
	{S(  20,    2), S( -16,   11), S( -11,    2), S(  13,   -3), S(  12,   -9), S(  -5,  -15), S( -37,  -33), S(   0,    0)},
	{S(   8,   14), S( -12,    9), S(   6,   -9), S(   1,   -1), S(   1,    0), S(   9,  -11), S(  -8,  -34), S(   0,    0)},
	{S(  14,   -3), S(   6,    1), S(  -3,    1), S(   1,   -5), S(   9,   -9), S(  28,  -18), S(  -8,  -18), S(   0,    0)}
};
constexpr PackedScore SAFE_KNIGHT_CHECK = S(  86,   -1);
constexpr PackedScore SAFE_BISHOP_CHECK = S(  28,   13);
constexpr PackedScore SAFE_ROOK_CHECK = S(  63,    9);
constexpr PackedScore SAFE_QUEEN_CHECK = S(  25,   20);
constexpr PackedScore UNSAFE_KNIGHT_CHECK = S(   6,   -2);
constexpr PackedScore UNSAFE_BISHOP_CHECK = S(  15,   12);
constexpr PackedScore UNSAFE_ROOK_CHECK = S(  24,    2);
constexpr PackedScore UNSAFE_QUEEN_CHECK = S(   7,   13);
constexpr PackedScore KING_ATTACKER_WEIGHT[4] = {S(  20,    3), S(  21,    8), S(  21,   -9), S(   6,    3)};
constexpr PackedScore KING_ATTACKS[14] = {S( -48,   28), S( -56,   21), S( -62,   16), S( -66,   19), S( -64,   14), S( -57,   10), S( -41,    4), S( -22,   -4), S(  18,  -22), S(  40,  -20), S(  72,  -33), S(  76,    9), S( 124,  -93), S(  91,   45)};

constexpr PackedScore MINOR_BEHIND_PAWN = S(   9,   14);
constexpr PackedScore KNIGHT_OUTPOST = S(  23,   17);
constexpr PackedScore BISHOP_PAWNS[7] = {S(   4,   23), S(   7,   20), S(   4,   11), S(   1,    3), S(  -3,   -6), S(  -4,  -19), S(  -9,  -31)};
constexpr PackedScore BISHOP_PAIR = S(  20,   62);
constexpr PackedScore ROOK_OPEN[2] = {S(  33,   17), S(  16,   12)};

constexpr PackedScore TEMPO = S(  32,   34);

constexpr PackedScore COMPLEXITY_PAWNS = S(   0,    8);
constexpr PackedScore COMPLEXITY_PASSERS = S(   0,    1);
constexpr PackedScore COMPLEXITY_PAWNS_BOTH_SIDES = S(   0,   69);
constexpr PackedScore COMPLEXITY_PAWN_ENDGAME = S(   0,   62);
constexpr PackedScore COMPLEXITY_OFFSET = S(   0, -129);

#undef S


}