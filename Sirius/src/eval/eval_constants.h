#pragma once

#include "../defs.h"

namespace eval
{

#define S(mg, eg) PackedScore(mg, eg)

constexpr PackedScore MATERIAL[6] = {S(  62,  132), S( 288,  444), S( 314,  451), S( 387,  811), S( 799, 1495), S(0, 0)};

constexpr PackedScore PSQT[6][64] = {
	{
		S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
		S(  65,   78), S(  31,   95), S(  32,   97), S(  54,   79), S(  65,   68), S(  33,   94), S(  30,  107), S(  64,   82),
		S(  28,   18), S(  31,   44), S(  31,   11), S(  57,  -24), S(  40,  -15), S(  24,    5), S(   1,   37), S(  10,   23),
		S(  20,   12), S(   9,   17), S(  11,   -5), S(  18,  -20), S(   7,  -19), S(  -1,   -4), S(  -7,   18), S( -11,   16),
		S(   8,   -1), S(   5,   17), S(   7,  -16), S(  12,  -14), S(   6,  -13), S(  -5,   -7), S( -15,   16), S( -17,    2),
		S(   2,   -4), S(   9,   10), S(  13,   -8), S(  -3,    1), S(  -8,   -1), S( -16,   -5), S( -25,   12), S( -29,    0),
		S(  16,   -4), S(  31,    6), S(  14,   -6), S(   6,    8), S(  -7,    0), S(  -9,   -3), S( -16,   17), S( -18,    5),
		S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
	},
	{
		S( -71,  -83), S( -78,  -19), S( -28,  -14), S(  13,  -11), S( -35,    5), S( -69,    9), S(-106,   14), S( -85,  -39),
		S(  -6,   -9), S(  21,    2), S(  32,   -6), S(   6,    6), S(  11,    7), S(   3,   11), S(  -4,   20), S( -10,   11),
		S(  14,   -6), S(  13,   -4), S(  56,  -18), S(  38,    0), S(  20,    8), S(  12,    5), S(   4,    5), S(  -7,    5),
		S(  34,    3), S(  37,    6), S(  48,    4), S(  36,   12), S(  30,   16), S(  31,    6), S(  19,    3), S(   7,   16),
		S(  10,   15), S(  19,   11), S(  29,    6), S(  19,   19), S(  25,   12), S(  20,   12), S(  21,    2), S(   2,   12),
		S(   3,   -1), S(  17,   -4), S(   8,  -11), S(  16,    6), S(   7,    6), S(  -1,   -6), S(   0,   -6), S( -14,   -2),
		S(   3,    7), S(   3,   -2), S(   2,   -5), S(   3,   -2), S(   5,   -3), S(  -7,   -7), S( -12,   -3), S( -18,    0),
		S( -10,   -7), S( -11,    0), S(  -3,   -9), S(  -1,    3), S(  -8,    0), S( -21,   -7), S( -15,   -3), S( -48,   10),
	},
	{
		S( -38,   -3), S( -37,    8), S( -11,   -1), S( -72,   10), S( -69,   17), S( -54,    5), S( -28,    8), S( -17,   18),
		S( -29,   -2), S( -36,   12), S( -14,    0), S(  -4,   -1), S( -22,    9), S(   0,   -2), S(  -2,   -1), S(  -3,   -6),
		S(  18,   12), S(  13,   -1), S(  43,    4), S(  10,    3), S(  14,   -1), S(   6,    3), S(   6,    5), S(   6,    4),
		S(  -4,    6), S(   7,    8), S(   7,    9), S(  18,   12), S(  18,   18), S(  11,    5), S(   4,    9), S(  -8,    7),
		S(  13,   -4), S(   1,    7), S(   5,    5), S(   7,   10), S(  15,    8), S(  -4,   12), S(  -3,    5), S(   0,    2),
		S(  21,  -10), S(  22,  -10), S(  11,   -3), S(   1,    7), S(  -5,    3), S(   5,    3), S(  10,    1), S(   0,   -6),
		S(  22,  -19), S(  27,  -19), S(  16,  -11), S(   2,   -4), S(  -6,    0), S(   8,  -19), S(   6,  -18), S(  14,   -7),
		S(  35,  -29), S(  18,  -18), S(  -5,    1), S(  14,   -3), S(   0,   -1), S(   1,    7), S(  11,   -1), S(  13,   -9),
	},
	{
		S(  12,    9), S( -22,   36), S( -18,   29), S( -12,   16), S( -29,   26), S( -27,   32), S( -11,   22), S(  -5,   19),
		S(  30,    0), S(  32,    7), S(  15,   14), S(   7,   12), S(  17,   14), S(   2,   27), S(  -1,   23), S(   1,   16),
		S(  10,    4), S(  41,    2), S(  30,    2), S(  25,    4), S(   4,   14), S(   0,   24), S(  13,   19), S(  -8,   22),
		S(   5,    9), S(   4,   15), S(  14,   11), S(  12,    2), S(   3,   13), S(   6,   18), S(   6,   17), S(  -9,   20),
		S(  -6,   -2), S(  14,    1), S(  -4,    6), S(   7,    1), S(  -5,    6), S(  -8,    9), S( -10,    9), S( -13,    8),
		S(  11,  -28), S(  19,  -28), S(   0,  -17), S(   2,  -18), S( -10,  -10), S( -13,  -11), S( -12,  -12), S( -18,   -9),
		S(  -5,  -30), S(  19,  -37), S(   1,  -21), S(   3,  -24), S(  -3,  -20), S(  -4,  -18), S( -14,  -15), S( -17,  -20),
		S(  -9,  -34), S(  -6,  -16), S(   0,  -21), S(   7,  -28), S(   0,  -25), S(  -7,  -17), S(  -7,  -21), S(  -8,  -17),
	},
	{
		S(   7,  -24), S(  41,  -45), S( -16,   19), S( -15,    6), S(   7,  -15), S( -18,    3), S( -33,   -7), S( -14,  -15),
		S(  39,    1), S(  -3,   14), S( -16,   22), S( -35,   52), S( -23,   35), S(  -7,    7), S(  -4,  -13), S(   8,  -14),
		S(  15,    6), S(  13,    6), S(   9,   12), S(  -7,   24), S(   4,   18), S(   9,   14), S(   8,   -8), S(  21,  -11),
		S(  12,   17), S(   8,   38), S(   8,   13), S( -10,   31), S(  -6,   31), S(   7,    5), S(   5,   14), S(   3,    8),
		S(  11,   12), S(  16,   14), S(   1,   25), S(   0,   29), S(  -6,   30), S(  -4,   23), S(   2,   18), S(  -1,    8),
		S(  14,  -22), S(  13,   -6), S(   3,    8), S( -10,   23), S(  -7,   14), S(  -7,   18), S(   4,   -4), S(   3,  -13),
		S(  15,  -58), S(  15,  -64), S(   4,  -35), S(   2,   -3), S(   1,    1), S(   3,  -16), S(   2,  -19), S(  10,  -36),
		S(   6,  -51), S(  -7,  -57), S( -18,  -21), S(  -8,  -15), S(  -8,  -10), S( -12,   -4), S( -15,  -13), S( -14,  -13),
	},
	{
		S(  11,  -69), S(  10,    1), S( -30,   -4), S( -14,  -12), S(   5,   -5), S(   5,   -5), S(   5,   -5), S(   5,   -5),
		S( -32,   22), S(   7,   61), S(  -9,   50), S(  29,   21), S(   5,   -5), S(   5,   -5), S(   5,   -5), S(   5,   -5),
		S(   0,   16), S(  35,   54), S(  31,   48), S( -11,   54), S(   5,   -5), S(   5,   -5), S(   5,   -5), S(   5,   -5),
		S( -41,   15), S( -13,   47), S( -20,   44), S( -67,   49), S(   5,   -5), S(   5,   -5), S(   5,   -5), S(   5,   -5),
		S( -59,    4), S( -22,   29), S( -19,   22), S( -49,   23), S(   5,   -5), S(   5,   -5), S(   5,   -5), S(   5,   -5),
		S( -17,  -13), S(  18,    4), S(   2,   -5), S(  -5,   -7), S(   5,   -5), S(   5,   -5), S(   5,   -5), S(   5,   -5),
		S(  24,  -30), S(  33,   -9), S(  17,  -20), S(   3,  -25), S(   5,   -5), S(   5,   -5), S(   5,   -5), S(   5,   -5),
		S(   6,  -50), S(  13,  -22), S(  -6,  -32), S(   6,  -55), S(   5,   -5), S(   5,   -5), S(   5,   -5), S(   5,   -5),
	},
};

constexpr PackedScore MOBILITY[4][28] = {
	{S( -13,  -20), S( -40,  -64), S( -15,  -32), S(  -6,   -6), S(   4,    7), S(   6,   18), S(  14,   25), S(  22,   32), S(  31,   32), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -23,  -32), S( -52,  -97), S( -30,  -39), S( -23,  -17), S( -11,   -4), S(  -4,    5), S(   1,   16), S(   6,   21), S(   8,   26), S(  13,   28), S(  15,   30), S(  28,   21), S(  30,   24), S(  46,    7), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -28,  -43), S(  12,  -71), S( -25,  -53), S( -13,  -32), S(  -7,  -23), S(  -3,   -5), S(   0,    0), S(  -5,    9), S(   0,   13), S(   2,   18), S(   6,   25), S(   7,   34), S(   9,   40), S(  16,   42), S(  24,   39), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -36,    6), S( -55,  -79), S( -98,  -79), S( -76, -252), S( -75,  -96), S( -31,  -38), S( -22,  -10), S( -15,   -6), S(  -6,   -5), S(  -5,   19), S(  -3,   27), S(   0,   36), S(   3,   41), S(   6,   43), S(   9,   46), S(  12,   48), S(  14,   49), S(  13,   54), S(  15,   55), S(  16,   56), S(  25,   46), S(  32,   31), S(  36,   28), S(  57,    3), S(  59,    1), S(  62,   -6), S(  54,  -14), S(  12,  -24)}
};

constexpr PackedScore THREAT_BY_PAWN[6] = {S(   9,  -13), S(  64,   31), S(  63,   63), S(  80,   29), S(  75,   -8), S(   0,    0)};
constexpr PackedScore THREAT_BY_KNIGHT[2][6] = {
	{S(   8,   29), S(  25,   41), S(  38,   43), S(  74,   12), S(  48,  -24), S(   0,    0)},
	{S(  -4,   11), S(  12,   41), S(  30,   31), S(  64,   33), S(  57,   -1), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_BISHOP[2][6] = {
	{S(   1,   38), S(  43,   36), S(  -7,   33), S(  71,   15), S(  68,   65), S(   0,    0)},
	{S(   0,    8), S(  22,   24), S( -20,  -19), S(  44,   47), S(  47,  127), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_ROOK[2][6] = {
	{S(   1,   44), S(  18,   63), S(  28,   58), S(  12,  -47), S(  76,    8), S(   0,    0)},
	{S(  -8,    8), S(   2,   16), S(  14,    3), S(  12,  -89), S(  65,   46), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_QUEEN[2][6] = {
	{S(   7,   10), S(  23,   23), S(   9,   50), S(  15,    9), S(  12,  -58), S(  85,   37)},
	{S(  -1,   10), S(   0,    7), S(  -7,   20), S(  -5,    3), S( -18,  -72), S( 100,   70)}
};
constexpr PackedScore THREAT_BY_KING[6] = {S( -29,   46), S(   3,   50), S(  26,   41), S(  84,   18), S(   0,    0), S(   0,    0)};
constexpr PackedScore PUSH_THREAT = S(  16,   20);

constexpr PackedScore ISOLATED_PAWN[8] = {S(  -7,    8), S(  -4,  -13), S( -11,   -7), S( -10,  -14), S( -10,  -14), S(  -6,   -6), S(  -1,  -13), S(  -8,    9)};
constexpr PackedScore DOUBLED_PAWN[8] = {S(  -4,  -63), S(   8,  -38), S(  -2,  -30), S(  -4,  -21), S(  -6,  -15), S( -17,  -19), S(   4,  -41), S(   1,  -76)};
constexpr PackedScore PAWN_PHALANX[8] = {S(   0,    0), S(   5,   -2), S(  12,    4), S(  19,   16), S(  48,   62), S( 115,  224), S( -29,  363), S(   0,    0)};
constexpr PackedScore DEFENDED_PAWN[8] = {S(   0,    0), S(   0,    0), S(  20,    9), S(  12,    8), S(  13,   19), S(  20,   60), S( 128,   86), S(   0,    0)};

constexpr PackedScore PASSED_PAWN[2][2][8] = {
	{
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -32,  -38), S( -13,   24), S( -20,  151), S(  31,  239), S(   0,    0)},
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -20,  -51), S(  11,  -24), S(  15,   16), S(  59,   36), S(   0,    0)}
	},
	{
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -27,  -56), S(   0,  -27), S(  16,    1), S(  68,   -4), S(   0,    0)},
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -29,  -58), S(   1,  -36), S(  -7,  -17), S(  -3,  -19), S(   0,    0)}
	}
};
constexpr PackedScore OUR_PASSER_PROXIMITY[8] = {S(   0,    0), S(  49,   80), S(   1,   69), S(  -1,   42), S(   3,   30), S(   9,   22), S(  19,   19), S(  14,   17)};
constexpr PackedScore THEIR_PASSER_PROXIMITY[8] = {S(   0,    0), S( -38,    5), S(  21,   -3), S(  13,   24), S(  17,   44), S(  10,   78), S(  13,   79), S(  13,   68)};

constexpr PackedScore PAWN_STORM[2][4][8] = {
	{
		{S(  16,   14), S(-134,  -50), S(  -2,   -7), S(   4,  -12), S(   0,    0), S(  -5,    9), S(  -3,    7), S(   0,    0)},
		{S(  11,    3), S(  -4, -107), S(  54,  -41), S(   9,  -10), S(   2,   -5), S( -11,    7), S(  -7,   10), S(   0,    0)},
		{S(  -3,    5), S(  64, -103), S(  70,  -45), S(  18,  -17), S(   2,   -2), S(  -7,    6), S(  -8,   12), S(   0,    0)},
		{S(   8,   -8), S( 109,  -90), S(  39,  -21), S(  13,    0), S(  -2,    4), S(  -9,    0), S(  -4,    1), S(   0,    0)}
	},
	{
		{S(   0,    0), S(  -3,  -26), S( -27,  123), S(  13,  -48), S(  -2,    7), S(  -1,    5), S(  -4,    9), S(   0,    0)},
		{S(   0,    0), S(   2,  -82), S(   0,   67), S(  55,  -38), S(   3,    2), S(  -7,    6), S(  -8,    9), S(   0,    0)},
		{S(   0,    0), S(  -8,   13), S( -58, -100), S(  20,  -27), S(   2,    4), S(  -1,    5), S(  -9,   11), S(   0,    0)},
		{S(   0,    0), S( -17,  -54), S(  67,  -14), S(  21,   -2), S(   0,    8), S(   0,   -9), S(   0,    4), S(   0,    0)}
	}
};
constexpr PackedScore PAWN_SHIELD[4][8] = {
	{S(  14,    3), S(  -7,   24), S( -14,   16), S(  -2,    8), S(   4,    0), S( -32,  -27), S( -80,  -35), S(   0,    0)},
	{S(  15,    2), S( -13,    8), S(  -9,    8), S(  11,   -1), S(   8,  -10), S(  -7,  -17), S( -52,  -28), S(   0,    0)},
	{S(   4,    9), S( -14,    7), S(  15,    3), S(   0,   -1), S(  -2,    0), S(   7,  -16), S(  -8,  -43), S(   0,    0)},
	{S(  13,   -4), S(   8,   -6), S(  -3,    1), S(  -1,   -4), S(   7,   -8), S(  27,  -20), S( -20,  -18), S(   0,    0)}
};
constexpr PackedScore SAFE_KNIGHT_CHECK = S(  82,   -2);
constexpr PackedScore SAFE_BISHOP_CHECK = S(  23,   12);
constexpr PackedScore SAFE_ROOK_CHECK = S(  57,    5);
constexpr PackedScore SAFE_QUEEN_CHECK = S(  21,   22);
constexpr PackedScore UNSAFE_KNIGHT_CHECK = S(   7,    1);
constexpr PackedScore UNSAFE_BISHOP_CHECK = S(  11,   13);
constexpr PackedScore UNSAFE_ROOK_CHECK = S(  19,    0);
constexpr PackedScore UNSAFE_QUEEN_CHECK = S(   4,   14);
constexpr PackedScore KING_ATTACKER_WEIGHT[4] = {S(  18,    2), S(  15,    3), S(  16,  -13), S(   4,    1)};
constexpr PackedScore KING_ATTACKS[14] = {S( -42,   18), S( -48,   11), S( -55,    6), S( -58,    8), S( -56,    4), S( -49,    0), S( -32,   -5), S( -14,  -12), S(  15,  -20), S(  41,  -17), S(  59,  -24), S(  68,   21), S(  93,  -20), S(  84,   21)};
constexpr PackedScore VIRTUAL_MOBILITY[28] = {S(   0,    0), S(   0,    0), S( -21,   38), S( -14,   18), S( -11,    8), S(  -8,    8), S(  -7,    6), S(  -3,    1), S(   2,   -3), S(   9,   -4), S(  10,   -7), S(  19,  -10), S(  24,  -13), S(  33,  -15), S(  38,  -17), S(  41,  -16), S(  40,  -14), S(  40,  -11), S(  33,   -7), S(  25,   -2), S(  24,    0), S(  22,    4), S(   3,    9), S(  -5,   20), S( -28,   34), S( -64,   44), S(   0,    0), S(   0,    0)};

constexpr PackedScore MINOR_BEHIND_PAWN = S(   8,   14);
constexpr PackedScore KNIGHT_OUTPOST = S(  27,   18);
constexpr PackedScore BISHOP_PAWNS[7] = {S(   5,   23), S(   7,   22), S(   5,   13), S(   2,    5), S(  -2,   -5), S(  -3,  -19), S(  -8,  -35)};
constexpr PackedScore BISHOP_PAIR = S(  21,   62);
constexpr PackedScore ROOK_OPEN[2] = {S(  26,    4), S(  15,    5)};

constexpr PackedScore TEMPO = S(  32,   35);

constexpr PackedScore COMPLEXITY_PAWNS = S(   0,    8);
constexpr PackedScore COMPLEXITY_PASSERS = S(   0,    1);
constexpr PackedScore COMPLEXITY_PAWNS_BOTH_SIDES = S(   0,   69);
constexpr PackedScore COMPLEXITY_PAWN_ENDGAME = S(   0,   64);
constexpr PackedScore COMPLEXITY_OFFSET = S(   0, -132);

#undef S


}