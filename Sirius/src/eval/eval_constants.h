#pragma once

#include "../defs.h"

namespace eval
{

#define S(mg, eg) PackedScore(mg, eg)

constexpr PackedScore MATERIAL[6] = {S(  59,   85), S( 288,  362), S( 303,  383), S( 403,  677), S( 861, 1235), S(0, 0)};

constexpr PackedScore PSQT[6][64] = {
	{
		S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
		S(  35,   78), S(  44,   81), S(  29,   87), S(  63,   45), S(  48,   51), S(  35,   60), S( -21,   98), S( -27,   90),
		S(  15,   40), S(  11,   57), S(  37,   15), S(  46,  -14), S(  55,  -15), S(  86,   -6), S(  47,   39), S(  32,   29),
		S(  -8,   24), S(  -3,   27), S(   4,    3), S(   5,   -9), S(  26,   -9), S(  26,   -9), S(  10,   18), S(  13,    1),
		S( -15,    6), S( -12,   21), S(  -3,   -3), S(   6,   -8), S(   8,   -7), S(  12,  -10), S(   2,   10), S(  -1,  -11),
		S( -26,   -1), S( -20,   11), S( -13,   -5), S( -10,   -2), S(   0,   -2), S(  -6,   -6), S(   4,    0), S(  -8,  -18),
		S( -18,    4), S( -11,   17), S(  -5,    1), S(  -5,   -3), S(   4,    9), S(  27,   -7), S(  20,    3), S(  -3,  -16),
		S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
	},
	{
		S( -89,  -40), S( -82,  -12), S( -66,    7), S( -16,   -9), S(   7,   -6), S( -45,  -23), S( -75,   -9), S( -60,  -58),
		S(  -7,    2), S(   5,    7), S(   4,    4), S(  15,    4), S(  12,   -5), S(  30,  -11), S(  17,   -1), S(  12,  -15),
		S(   5,   -2), S(   6,    3), S(   9,   11), S(  12,   15), S(  26,    8), S(  55,  -14), S(  19,   -7), S(  26,  -14),
		S(   8,    9), S(   8,    6), S(  17,   14), S(  28,   18), S(  21,   21), S(  30,   14), S(  20,    9), S(  38,   -1),
		S(   2,    8), S(   9,    2), S(   8,   19), S(  18,   17), S(  10,   27), S(  13,   12), S(  13,    6), S(   6,    7),
		S( -12,   -3), S(  -2,    1), S(  -2,    6), S(   3,   20), S(  18,   17), S(   0,    0), S(  17,   -4), S(   3,    1),
		S( -10,    0), S(  -9,    5), S(  -3,    0), S(  10,    0), S(   8,   -1), S(  11,   -3), S(  12,   -6), S(   9,   12),
		S( -40,   14), S(  -3,  -10), S( -13,   -4), S(  -4,   -1), S(   4,   -1), S(   7,  -11), S(  -3,   -2), S(  -7,   10),
	},
	{
		S( -13,    5), S( -42,    8), S( -40,    4), S( -76,   10), S( -70,   12), S( -58,   -1), S( -29,    2), S( -51,   -4),
		S(  -5,   -9), S(  14,   -7), S(   2,   -5), S( -11,    2), S(  16,  -12), S( -14,   -1), S( -27,    4), S( -40,    2),
		S(   5,    7), S(  18,   -3), S(  20,    1), S(  27,   -9), S(  10,   -1), S(  47,    3), S(  20,    1), S(  24,    5),
		S(  -6,    3), S(   5,    7), S(  15,    1), S(  28,   16), S(  20,    8), S(  10,   10), S(   3,    3), S(  -4,    5),
		S(   1,    1), S(  -5,    5), S(  -3,   12), S(  18,   11), S(  15,   10), S(  -5,    4), S(  -2,    5), S(  12,  -12),
		S(   0,   -1), S(  10,    4), S(   4,    4), S(  -1,   11), S(   3,   12), S(   7,    4), S(  12,   -6), S(  19,   -8),
		S(  18,    7), S(   4,  -12), S(  11,  -10), S(  -9,    0), S(   1,    2), S(  15,   -7), S(  24,   -9), S(  20,  -11),
		S(   7,   -6), S(  15,    9), S(  -2,   -2), S(  -4,   -3), S(   6,   -9), S(  -5,    6), S(  19,  -12), S(  31,  -23),
	},
	{
		S( -10,   15), S( -14,   19), S( -22,   27), S( -27,   24), S( -16,   18), S(   3,   17), S(   0,   21), S(  20,   11),
		S(  -2,   16), S(   2,   23), S(  11,   25), S(  26,   14), S(  12,   15), S(  17,   12), S(  27,    6), S(  29,    3),
		S( -10,   16), S(  17,   12), S(   7,   16), S(   7,   13), S(  28,    5), S(  35,   -3), S(  53,   -2), S(  22,   -4),
		S( -10,   16), S(   2,   11), S(   2,   15), S(   3,   11), S(   8,    0), S(  10,   -2), S(   6,    3), S(   5,    0),
		S( -18,    6), S( -16,    6), S( -10,    4), S(  -3,    1), S(  -3,   -1), S( -17,    2), S(   1,   -5), S( -13,   -4),
		S( -20,   -2), S( -17,   -6), S( -13,   -8), S( -11,   -7), S(  -1,  -12), S(  -6,  -14), S(  16,  -26), S(   0,  -24),
		S( -21,  -10), S( -16,   -9), S(  -7,  -11), S(  -6,  -13), S(  -2,  -19), S(   4,  -22), S(  10,  -25), S( -16,  -20),
		S( -12,   -8), S( -12,  -13), S( -11,   -7), S(  -3,  -14), S(   3,  -21), S(  -2,  -15), S(  -3,  -17), S( -15,  -16),
	},
	{
		S( -14,  -15), S( -32,    1), S( -26,   26), S(   0,   16), S(  -1,   16), S(   7,   11), S(  50,  -39), S(  10,   -9),
		S(   6,  -15), S( -10,   -4), S(  -7,   26), S( -21,   48), S( -21,   61), S(   7,   29), S(   1,    9), S(  40,    9),
		S(   8,   -5), S(   6,    0), S(  -2,   27), S(   3,   32), S(  -9,   48), S(  13,   19), S(  29,    0), S(  28,    1),
		S(  -2,    6), S(  -5,   22), S(   0,   16), S(  -9,   35), S( -18,   40), S(   3,   23), S(   1,   36), S(  11,   15),
		S(  -2,    0), S(  -5,   17), S(  -6,   17), S(  -9,   27), S(  -2,   27), S(  -6,   24), S(   8,    8), S(  14,    2),
		S(   1,  -23), S(   0,   -6), S( -10,    8), S( -10,   15), S(  -6,   18), S(  -2,    5), S(  12,  -16), S(  15,  -25),
		S(   3,  -36), S(  -3,  -35), S(   2,  -25), S(   1,  -13), S(   0,  -11), S(   7,  -38), S(  15,  -68), S(  29,  -85),
		S( -15,  -34), S( -16,  -29), S( -13,  -20), S( -11,  -21), S(  -9,  -21), S( -20,  -30), S(  -9,  -45), S(   8,  -52),
	},
	{
		S(  46,  -51), S(  81,  -29), S( 121,  -33), S(  54,  -10), S(  63,  -33), S( -19,    2), S(  15,    7), S(  92,  -66),
		S( -92,   27), S(  10,   25), S(  30,   13), S( 147,  -17), S(  90,   -9), S(  49,   25), S(  19,   42), S( -87,   47),
		S(-108,   26), S(  48,   15), S(  34,    9), S(  44,    3), S(  84,    1), S( 100,   12), S(   4,   37), S( -67,   31),
		S( -66,    2), S( -20,    7), S( -14,    7), S( -17,    3), S( -22,   -2), S( -32,   16), S( -61,   23), S(-154,   30),
		S( -70,  -10), S( -32,   -1), S( -34,    5), S( -33,    2), S( -37,    2), S( -41,    6), S( -74,   14), S(-155,   19),
		S( -52,   -4), S(   5,   -2), S( -23,    3), S(  -4,    0), S(  -6,   -1), S( -25,    6), S( -16,    3), S( -72,   10),
		S(  34,  -15), S(  24,   -2), S(  21,   -1), S(   3,   -4), S(  -2,   -1), S(   8,    0), S(  24,   -2), S(  19,  -11),
		S(  22,  -32), S(  55,  -25), S(  26,   -9), S( -27,   -1), S(   9,  -18), S( -21,    4), S(  34,  -15), S(  32,  -38),
	},
};

constexpr PackedScore MOBILITY[4][28] = {
	{S( -17,  -18), S( -40,  -50), S( -17,  -21), S(  -7,    1), S(   4,   10), S(   7,   20), S(  18,   22), S(  29,   24), S(  40,   19), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S(  -1,  -27), S( -36,  -78), S( -15,  -34), S(  -7,  -11), S(   5,   -2), S(  12,    5), S(  18,   14), S(  22,   19), S(  25,   24), S(  27,   26), S(  27,   28), S(  35,   23), S(  26,   29), S(  41,   18), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -44,  -29), S(   4,  -55), S( -24,  -44), S( -14,  -31), S(  -9,  -26), S(  -3,  -11), S(  -1,   -5), S(  -4,    2), S(  -0,    2), S(   3,    7), S(   8,   10), S(  10,   16), S(  15,   19), S(  22,   18), S(  28,   13), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -47,   72), S( -69,  -14), S(-111,   -6), S( -74, -247), S( -79, -103), S( -36,  -45), S( -27,  -23), S( -18,  -19), S( -10,  -11), S(  -7,    8), S(  -4,   14), S(   0,   21), S(   4,   26), S(   8,   27), S(  11,   29), S(  14,   32), S(  16,   33), S(  17,   36), S(  17,   39), S(  19,   40), S(  26,   34), S(  33,   21), S(  37,   21), S(  61,   -5), S(  68,   -7), S( 111,  -41), S( 109,  -44), S(  72,  -46)}
};

constexpr PackedScore THREAT_BY_PAWN[6] = {S(   0,    0), S(  56,   15), S(  59,   34), S(  85,  -10), S(  64,  -50), S(   0,    0)};
constexpr PackedScore THREAT_BY_MINOR[6] = {S(   0,    0), S(  -3,  -27), S(  32,   28), S(  67,   -2), S(  48,  -43), S(   0,    0)};
constexpr PackedScore THREAT_BY_ROOK[6] = {S(   0,    0), S(  10,   41), S( -13,  -20), S( -66,  -51), S(  16,   36), S(   0,    0)};
constexpr PackedScore HANGING_PAWN = S(   1,   30);
constexpr PackedScore HANGING_PIECE = S(  18,   24);

constexpr PackedScore PASSED_PAWN[8] = {S(   0,    0), S( -16,  -67), S( -15,  -51), S( -13,  -18), S(  12,   18), S(   0,   86), S(  50,   95), S(   0,    0)};
constexpr PackedScore ISOLATED_PAWN[8] = {S(  -4,    7), S(  -3,  -11), S( -11,   -5), S(  -7,  -13), S( -12,  -13), S(  -7,   -4), S(  -2,  -11), S( -11,    8)};
constexpr PackedScore PAWN_PHALANX[8] = {S(   0,    0), S(   4,   -1), S(  12,    7), S(  22,   17), S(  50,   58), S( 136,  183), S(-156,  448), S(   0,    0)};
constexpr PackedScore DEFENDED_PAWN[8] = {S(   0,    0), S(   0,    0), S(  19,   10), S(  12,    6), S(  14,   13), S(  29,   37), S( 168,   28), S(   0,    0)};
constexpr PackedScore OUR_PASSER_PROXIMITY[8] = {S(   0,    0), S(   5,   52), S(  -5,   40), S(  -5,   23), S(  -2,   13), S(   2,   10), S(  17,    7), S(   6,    6)};
constexpr PackedScore THEIR_PASSER_PROXIMITY[8] = {S(   0,    0), S( -79,   -3), S(   5,    0), S(  -1,   26), S(   5,   35), S(   5,   44), S(   7,   49), S( -11,   49)};

constexpr PackedScore PAWN_STORM[3][8] = {
	{S(  43,  -33), S(  22,  -16), S(  18,   -3), S(   9,   -0), S(   2,    2), S(  -2,    6), S(  -0,    5), S(   8,  -11)},
	{S(   0,    0), S(  14,  -28), S(  28,    1), S(   3,    1), S(  -5,    7), S(  -7,   12), S(  -8,   14), S(   7,   -3)},
	{S(  -1,   -1), S(  -8,    6), S(   3,    9), S(   2,    9), S(   4,    8), S(   4,    9), S(   4,    9), S(  -8,   -4)}
};
constexpr PackedScore PAWN_SHIELD[3][8] = {
	{S(   2,  -13), S(  -9,   -7), S(  -5,  -11), S(  -1,  -11), S(  13,  -14), S(  17,  -26), S(  30,  -31), S(   7,    1)},
	{S(   0,    0), S( -16,    4), S(  -9,   -5), S(   9,   -4), S(  21,  -11), S(  35,  -30), S(  54,  -41), S(  17,    2)},
	{S(  -3,   -9), S(  -2,   -6), S(   1,   -5), S(   1,    0), S(   5,    1), S(   6,    2), S(  23,    6), S(  -8,    7)}
};
constexpr PackedScore SAFE_KNIGHT_CHECK = S(  79,   -5);
constexpr PackedScore SAFE_BISHOP_CHECK = S(  15,   -6);
constexpr PackedScore SAFE_ROOK_CHECK = S(  58,   -4);
constexpr PackedScore SAFE_QUEEN_CHECK = S(  32,   11);
constexpr PackedScore KING_ATTACKER_WEIGHT[4] = {S(  15,   -2), S(  11,    3), S(   7,  -14), S(  -2,   19)};
constexpr PackedScore KING_ATTACKS[14] = {S( -23,   10), S( -26,    5), S( -29,    4), S( -29,    7), S( -22,    5), S(  -7,    2), S(  16,   -7), S(  45,  -20), S(  91,  -42), S( 121,  -47), S( 159,  -63), S( 182,  -50), S( 219, -136), S( 181,   -1)};

constexpr PackedScore KNIGHT_OUTPOST = S(  34,   20);
constexpr PackedScore BISHOP_PAIR = S(  23,   64);
constexpr PackedScore ROOK_OPEN[2] = {S(  21,   10), S(   7,   22)};

constexpr PackedScore TEMPO = S(  27,   29);


#undef S


}
