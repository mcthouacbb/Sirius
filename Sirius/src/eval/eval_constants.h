#pragma once

#include "../defs.h"

namespace eval
{

#define S(mg, eg) PackedScore(mg, eg)

constexpr PackedScore MATERIAL[6] = {S(  61,  132), S( 288,  442), S( 312,  448), S( 389,  811), S( 801, 1486), S(0, 0)};

constexpr PackedScore PSQT[6][64] = {
	{
		S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
		S(  68,   75), S(  33,   93), S(  34,   96), S(  53,   78), S(  65,   68), S(  33,   95), S(  31,  107), S(  64,   83),
		S(  26,   16), S(  27,   44), S(  30,    9), S(  52,  -23), S(  39,  -17), S(  24,    3), S(   0,   37), S(   9,   22),
		S(  19,   10), S(   6,   16), S(  11,   -7), S(  16,  -22), S(   6,  -21), S(  -1,   -7), S(  -7,   16), S( -10,   13),
		S(   7,    0), S(   4,   17), S(   8,  -14), S(  13,  -14), S(   7,  -13), S(  -4,   -7), S( -16,   15), S( -16,    2),
		S(   2,   -3), S(   9,   12), S(  14,   -4), S(  -2,    1), S(  -7,    0), S( -14,   -4), S( -25,   13), S( -28,    0),
		S(  16,   -3), S(  29,    7), S(  16,   -7), S(   7,    7), S(  -6,    2), S(  -7,   -3), S( -16,   18), S( -18,    4),
		S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
	},
	{
		S( -71,  -81), S( -77,  -19), S( -32,  -12), S(  10,  -10), S( -38,    8), S( -66,    8), S(-100,   15), S( -81,  -43),
		S(  -8,   -8), S(  24,    2), S(  29,   -5), S(   7,    5), S(  10,    8), S(   2,   13), S(  -3,   20), S(  -9,   11),
		S(  14,   -7), S(   8,   -1), S(  52,  -17), S(  37,    2), S(  20,   10), S(  13,    6), S(   4,    5), S(  -7,    6),
		S(  32,    4), S(  32,    7), S(  43,    6), S(  35,   13), S(  30,   18), S(  31,    8), S(  19,    4), S(   7,   17),
		S(   8,   17), S(  16,   12), S(  26,    9), S(  18,   22), S(  25,   13), S(  21,   13), S(  21,    3), S(   3,   11),
		S(   2,   -1), S(  16,   -2), S(   6,   -7), S(  15,    9), S(   6,    8), S(   0,   -4), S(   0,   -5), S( -13,   -1),
		S(   5,    5), S(  11,   -7), S(   4,   -7), S(   5,   -3), S(   6,   -3), S(  -7,   -5), S( -11,   -4), S( -17,   -1),
		S( -10,   -8), S( -11,    0), S(  -4,   -9), S(  -3,    5), S(  -8,    1), S( -20,   -6), S( -14,   -2), S( -47,    8),
	},
	{
		S( -32,   -5), S( -31,    5), S( -10,    0), S( -74,   11), S( -67,   17), S( -51,    3), S( -24,    7), S( -17,   16),
		S( -20,   -6), S( -39,   12), S( -12,    0), S(  -3,   -3), S( -19,    7), S(   0,   -2), S(  -5,    1), S(  -4,   -4),
		S(  16,   12), S(  11,    0), S(  32,    7), S(   9,    4), S(  15,    0), S(   5,    5), S(   6,    5), S(   6,    3),
		S(  -6,    5), S(   8,    6), S(   5,   11), S(  15,   13), S(  16,   19), S(  12,    5), S(   4,    9), S(  -7,    7),
		S(  13,   -4), S(   1,    7), S(   5,    6), S(   4,   12), S(  14,    8), S(  -3,   12), S(  -2,    6), S(   1,    2),
		S(  19,   -9), S(  20,   -9), S(   9,   -1), S(   3,    8), S(  -4,    3), S(   6,    3), S(  11,    2), S(   1,   -5),
		S(  23,  -21), S(  22,  -19), S(  19,  -14), S(   4,   -6), S(  -4,   -1), S(   9,  -18), S(   7,  -18), S(  15,   -7),
		S(  32,  -29), S(  18,  -18), S(  -6,    2), S(  14,   -4), S(   2,   -3), S(   3,    7), S(  13,   -2), S(  13,   -9),
	},
	{
		S(  14,   10), S( -26,   38), S( -19,   28), S(  -6,   18), S( -24,   28), S( -17,   32), S(  -6,   25), S(   4,   19),
		S(  31,    2), S(  32,   10), S(  13,   16), S(  10,   15), S(  19,   18), S(   4,   31), S(   3,   25), S(   4,   17),
		S(   8,    3), S(  36,    3), S(  20,    3), S(  27,    3), S(   4,   13), S(   2,   22), S(  13,   18), S(  -7,   20),
		S(   2,    7), S(   5,   12), S(  11,    8), S(  14,    0), S(   6,   10), S(   8,   15), S(   7,   15), S(  -6,   16),
		S( -11,   -1), S(  11,    1), S(  -8,    5), S(   9,   -1), S(  -3,    4), S(  -6,    7), S(  -8,    6), S( -12,    7),
		S(   3,  -25), S(  17,  -27), S(  -4,  -16), S(   3,  -17), S(  -9,   -9), S( -13,  -10), S( -13,  -11), S( -18,   -8),
		S( -10,  -27), S(  17,  -35), S(   0,  -23), S(   2,  -22), S(  -4,  -18), S(  -5,  -15), S( -15,  -12), S( -17,  -19),
		S( -12,  -33), S( -10,  -14), S(  -4,  -21), S(   7,  -27), S(   0,  -24), S(  -8,  -16), S(  -8,  -20), S(  -9,  -18),
	},
	{
		S(  13,  -16), S(  49,  -40), S( -17,   30), S( -16,   24), S(  12,   -4), S( -15,   11), S( -34,    8), S( -10,   -4),
		S(  44,    3), S(   3,   14), S( -18,   31), S( -31,   53), S( -20,   34), S(  -6,   11), S(  -2,  -10), S(   9,   -7),
		S(  17,    9), S(  11,   10), S(   1,   22), S( -11,   27), S(   3,   17), S(   9,    8), S(   8,   -8), S(  21,   -9),
		S(  10,   16), S(   6,   32), S(   7,    9), S( -10,   32), S(  -7,   30), S(   7,    6), S(   6,   14), S(   6,    6),
		S(   9,    7), S(  12,   10), S(  -2,   15), S(   1,   25), S(  -6,   31), S(  -4,   22), S(   3,   15), S(   0,    8),
		S(  10,  -19), S(   9,   -7), S(  -2,    5), S( -10,   15), S(  -7,   12), S(  -6,   16), S(   4,   -4), S(   4,  -14),
		S(   7,  -51), S(   8,  -64), S(   3,  -40), S(   2,   -9), S(   0,   -3), S(   3,  -17), S(   2,  -21), S(  10,  -35),
		S(   0,  -46), S( -14,  -47), S( -24,  -22), S(  -8,  -21), S(  -7,  -17), S( -11,  -14), S( -14,  -16), S( -14,  -15),
	},
	{
		S( -41,  -50), S( -47,   14), S( -82,   10), S( -65,    4), S(   7,   -6), S(   7,   -6), S(   7,   -6), S(   7,   -6),
		S( -71,   34), S( -20,   61), S( -29,   48), S(  18,   19), S(   7,   -6), S(   7,   -6), S(   7,   -6), S(   7,   -6),
		S(  13,   17), S(  33,   51), S(  39,   41), S(  14,   41), S(   7,   -6), S(   7,   -6), S(   7,   -6), S(   7,   -6),
		S( -29,   16), S(  -7,   44), S(  -3,   35), S( -27,   31), S(   7,   -6), S(   7,   -6), S(   7,   -6), S(   7,   -6),
		S( -47,    6), S( -18,   28), S(  -3,   16), S( -25,   14), S(   7,   -6), S(   7,   -6), S(   7,   -6), S(   7,   -6),
		S( -10,  -13), S(  17,    6), S(   2,   -4), S(  -3,   -6), S(   7,   -6), S(   7,   -6), S(   7,   -6), S(   7,   -6),
		S(  29,  -30), S(  30,   -7), S(  13,  -16), S(  -4,  -20), S(   7,   -6), S(   7,   -6), S(   7,   -6), S(   7,   -6),
		S(  14,  -62), S(  19,  -26), S(  -4,  -29), S(   7,  -49), S(   7,   -6), S(   7,   -6), S(   7,   -6), S(   7,   -6),
	},
};

constexpr PackedScore MOBILITY[4][28] = {
	{S(  -9,  -23), S( -41,  -62), S( -15,  -31), S(  -7,   -5), S(   3,    8), S(   6,   19), S(  14,   25), S(  22,   32), S(  31,   32), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -15,  -38), S( -50,  -94), S( -27,  -37), S( -21,  -15), S(  -9,   -3), S(  -2,    6), S(   3,   17), S(   8,   22), S(  10,   27), S(  14,   28), S(  16,   30), S(  26,   21), S(  23,   26), S(  36,    9), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -24,  -36), S(  12,  -65), S( -25,  -53), S( -13,  -32), S(  -7,  -25), S(  -2,   -6), S(   0,    0), S(  -5,    9), S(  -1,   13), S(   3,   18), S(   6,   25), S(   7,   33), S(   9,   39), S(  16,   40), S(  23,   37), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -26,   27), S( -53,  -64), S(-104,  -66), S( -78, -250), S( -72,  -94), S( -29,  -31), S( -21,   -8), S( -13,   -5), S(  -4,   -4), S(  -4,   23), S(  -2,   30), S(   0,   39), S(   3,   43), S(   6,   46), S(  10,   48), S(  12,   50), S(  14,   50), S(  13,   55), S(  15,   53), S(  17,   52), S(  24,   43), S(  34,   22), S(  36,   21), S(  51,    1), S(  60,  -12), S(  60,  -21), S(  33,   -8), S(  10,  -42)}
};

constexpr PackedScore THREAT_BY_PAWN[6] = {S(   9,  -17), S(  65,   31), S(  62,   62), S(  79,   29), S(  76,   -7), S(   0,    0)};
constexpr PackedScore THREAT_BY_KNIGHT[2][6] = {
	{S(   8,   29), S(  26,   30), S(  42,   43), S(  73,   15), S(  56,  -25), S(   0,    0)},
	{S(  -4,   10), S(  13,   28), S(  29,   31), S(  64,   34), S(  58,   -2), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_BISHOP[2][6] = {
	{S(   0,   38), S(  42,   36), S(  -9,   26), S(  71,   16), S(  68,   62), S(   0,    0)},
	{S(   0,    9), S(  22,   23), S( -21,  -23), S(  44,   48), S(  48,  122), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_ROOK[2][6] = {
	{S(   0,   44), S(  18,   64), S(  27,   58), S(   9,  -28), S(  75,   12), S(   0,    0)},
	{S(  -8,    8), S(   2,   16), S(  14,    3), S(   8,  -75), S(  65,   49), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_QUEEN[2][6] = {
	{S(   6,   11), S(  24,   20), S(   9,   50), S(  19,   15), S(  10,  -51), S(  89,   56)},
	{S(  -1,   10), S(   0,    6), S(  -7,   19), S(  -6,    5), S( -17,  -73), S( 111,   69)}
};
constexpr PackedScore THREAT_BY_KING[6] = {S( -31,   49), S(   4,   53), S(  32,   43), S(  77,    8), S(   0,    0), S(   0,    0)};
constexpr PackedScore PUSH_THREAT = S(  16,   19);

constexpr PackedScore ISOLATED_PAWN[8] = {S(  -7,    6), S(  -3,  -16), S( -11,   -8), S( -10,  -17), S( -10,  -16), S(  -6,   -8), S(  -1,  -15), S( -10,    7)};
constexpr PackedScore DOUBLED_PAWN[8] = {S(  -4,  -63), S(  10,  -38), S(  -2,  -30), S(  -3,  -21), S(  -6,  -15), S( -15,  -19), S(   6,  -42), S(   2,  -75)};
constexpr PackedScore BACKWARDS_PAWN[8] = {S(   0,    0), S(  -3,  -12), S(  -1,  -13), S(  -9,  -12), S(   1,  -21), S(  19,   -9), S(   0,    0), S(   0,    0)};
constexpr PackedScore PAWN_PHALANX[8] = {S(   0,    0), S(   5,   -5), S(  11,   -1), S(  19,   13), S(  47,   62), S( 116,  224), S( -24,  348), S(   0,    0)};
constexpr PackedScore DEFENDED_PAWN[8] = {S(   0,    0), S(   0,    0), S(  20,    7), S(  12,    8), S(  15,   21), S(  19,   65), S( 134,   77), S(   0,    0)};

constexpr PackedScore PASSED_PAWN[2][2][8] = {
	{
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -32,  -39), S( -14,   25), S( -17,  152), S(  37,  236), S(   0,    0)},
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -21,  -51), S(  10,  -23), S(  16,   16), S(  62,   34), S(   0,    0)}
	},
	{
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -29,  -56), S(  -1,  -25), S(  17,    2), S(  67,   -4), S(   0,    0)},
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -30,  -60), S(   1,  -35), S(  -5,  -18), S(  -6,  -19), S(   0,    0)}
	}
};
constexpr PackedScore OUR_PASSER_PROXIMITY[8] = {S(   0,    0), S(  36,   84), S(   3,   68), S(   1,   42), S(   4,   30), S(   9,   23), S(  18,   20), S(  13,   18)};
constexpr PackedScore THEIR_PASSER_PROXIMITY[8] = {S(   0,    0), S( -46,    6), S(  19,   -1), S(  13,   26), S(  18,   45), S(  12,   78), S(  15,   78), S(  16,   68)};

constexpr PackedScore PAWN_STORM[2][4][8] = {
	{
		{S(  16,   14), S(-131,  -48), S(  -9,   -7), S(   5,  -13), S(   1,   -1), S(  -6,    9), S(  -4,    8), S(   0,    0)},
		{S(  12,    3), S( -22,  -98), S(  45,  -39), S(   6,  -11), S(   2,   -6), S( -10,    7), S(  -7,    9), S(   0,    0)},
		{S(  -2,    6), S(  60,  -98), S(  61,  -44), S(  17,  -18), S(   3,   -2), S(  -6,    7), S(  -8,   12), S(   0,    0)},
		{S(   8,   -7), S( 109,  -86), S(  37,  -21), S(  14,   -2), S(  -2,    4), S(  -8,    0), S(  -3,    1), S(   0,    0)}
	},
	{
		{S(   0,    0), S(  -3,  -27), S( -31,  120), S(   7,  -32), S(  -1,    7), S(  -2,    5), S(  -5,    9), S(   0,    0)},
		{S(   0,    0), S(  10,  -91), S(   0,   85), S(  53,  -41), S(   3,    2), S(  -7,    6), S(  -8,    8), S(   0,    0)},
		{S(   0,    0), S(  -7,   16), S( -60, -108), S(  20,  -28), S(   2,    4), S(  -1,    5), S(  -8,   11), S(   0,    0)},
		{S(   0,    0), S( -12,  -54), S(  66,  -10), S(  20,   -1), S(   1,    8), S(   1,   -9), S(   0,    6), S(   0,    0)}
	}
};
constexpr PackedScore PAWN_SHIELD[4][8] = {
	{S(  16,    2), S(  -8,   25), S( -15,   17), S(  -3,    8), S(   6,    0), S( -32,  -26), S( -82,  -33), S(   0,    0)},
	{S(  16,    0), S( -12,   11), S( -10,    8), S(  11,   -2), S(   7,  -11), S(  -4,  -19), S( -53,  -30), S(   0,    0)},
	{S(   3,    8), S( -16,    8), S(  16,    4), S(   2,   -1), S(  -1,   -1), S(   6,  -19), S( -12,  -41), S(   0,    0)},
	{S(  14,   -4), S(   4,   -2), S(  -3,    0), S(   0,   -6), S(   9,  -10), S(  30,  -22), S( -10,  -23), S(   0,    0)}
};
constexpr PackedScore SAFE_KNIGHT_CHECK = S(  90,   -3);
constexpr PackedScore SAFE_BISHOP_CHECK = S(  17,   21);
constexpr PackedScore SAFE_ROOK_CHECK = S(  72,    8);
constexpr PackedScore SAFE_QUEEN_CHECK = S(  28,   31);
constexpr PackedScore UNSAFE_KNIGHT_CHECK = S(   9,    1);
constexpr PackedScore UNSAFE_BISHOP_CHECK = S(  15,   10);
constexpr PackedScore UNSAFE_ROOK_CHECK = S(  22,   -2);
constexpr PackedScore UNSAFE_QUEEN_CHECK = S(   6,   10);
constexpr PackedScore KING_ATTACKER_WEIGHT[4] = {S(  17,   -3), S(  14,   -2), S(  15,  -15), S(   4,    5)};
constexpr PackedScore KING_ATTACKS[14] = {S( -39,   11), S( -45,    8), S( -50,    5), S( -53,    8), S( -52,    7), S( -45,    4), S( -30,    0), S( -12,   -8), S(  16,  -21), S(  38,  -17), S(  55,  -24), S(  60,   16), S(  83,  -21), S(  74,   20)};
constexpr PackedScore WEAK_KING_RING[17] = {S( -31,   45), S( -29,   25), S( -25,   22), S( -22,   19), S( -15,   12), S(  -5,    5), S(   6,    0), S(  20,   -3), S(  37,   -6), S(  51,   -9), S(  63,  -11), S(  66,   -7), S(  78,  -10), S(  80,  -12), S(  80,   -8), S(  99,  -12), S( 108,  -14)};

constexpr PackedScore MINOR_BEHIND_PAWN = S(   8,   14);
constexpr PackedScore KNIGHT_OUTPOST = S(  25,   17);
constexpr PackedScore BISHOP_PAWNS[7] = {S(   4,   22), S(   6,   21), S(   3,   13), S(   0,    5), S(  -3,   -5), S(  -3,  -19), S(  -7,  -33)};
constexpr PackedScore BISHOP_PAIR = S(  20,   63);
constexpr PackedScore ROOK_OPEN[2] = {S(  23,    1), S(  13,    1)};
constexpr PackedScore BLOCKED_ROOK = S(  -8,  -15);

constexpr PackedScore TEMPO = S(  32,   35);

constexpr PackedScore COMPLEXITY_PAWNS = S(   0,    8);
constexpr PackedScore COMPLEXITY_PASSERS = S(   0,    1);
constexpr PackedScore COMPLEXITY_PAWNS_BOTH_SIDES = S(   0,   68);
constexpr PackedScore COMPLEXITY_PAWN_ENDGAME = S(   0,   65);
constexpr PackedScore COMPLEXITY_OFFSET = S(   0, -131);

#undef S


}