#pragma once

#include "../defs.h"

namespace eval
{

// clang-format off
#define S(mg, eg) ScorePair(mg, eg)

constexpr ScorePair MATERIAL[6] = {S(  61,  131), S( 286,  432), S( 306,  444), S( 383,  790), S( 743, 1615), S(0, 0)};

constexpr ScorePair PSQT[6][64] = {
    {
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  54,   79), S(  37,   91), S(  22,  100), S(  55,   77), S(  73,   61), S(  57,   76), S(  47,   95), S(  68,   77),
        S(   6,    0), S( -13,   31), S(   9,   -8), S(  10,  -39), S(   1,  -38), S(   3,  -24), S( -19,   14), S(  -5,    2),
        S(  13,    3), S(  -5,   15), S(  10,   -9), S(  12,  -23), S(  -1,  -24), S(   0,  -16), S(  -8,    8), S(  -9,    6),
        S(   4,   -5), S(  -6,   15), S(  12,  -21), S(  16,  -17), S(   9,  -16), S(   0,  -15), S( -13,    9), S( -12,   -4),
        S(  -2,   -6), S(   7,    9), S(   3,    1), S(   1,   -1), S(  -7,   -2), S(  -8,   -9), S( -21,    8), S( -22,   -5),
        S(   8,   -7), S(  23,   10), S(  30,  126), S(   9,    0), S(  -1,  -11), S(  -5,   -8), S( -14,   12), S( -13,   -2),
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
    },
    {
        S( -68,  -98), S( -77,  -23), S( -28,  -18), S(  -2,  -10), S( -30,    0), S( -57,    3), S(-100,    3), S( -82,  -61),
        S( -15,  -14), S(  13,    1), S(  25,   -3), S(   0,    8), S(   4,   11), S(   5,   10), S(   0,   12), S(  -9,   -2),
        S(   3,   -7), S(  -8,    7), S(  31,   -3), S(  20,   15), S(   8,   22), S(  16,   11), S(   9,    1), S(  -5,   -1),
        S(  25,    4), S(  22,   16), S(  34,   18), S(  20,   25), S(  21,   26), S(  27,   13), S(  20,    2), S(  12,    8),
        S(   9,   16), S(  13,   16), S(  18,   20), S(  18,   27), S(  20,   20), S(  19,   17), S(  22,   -1), S(  10,    2),
        S(  15,   -1), S(  16,    5), S(  17,    3), S(  15,   15), S(   6,   15), S(   3,   -1), S(   7,   -8), S(  -6,   -8),
        S(  10,   -1), S(  11,   -5), S(   9,   -5), S(  13,   -1), S(   8,   -1), S(  -3,   -4), S(  -2,   -8), S( -13,   -8),
        S(  -2,  -16), S(  -5,  -11), S(   4,  -11), S(   8,    1), S(   1,   -3), S( -15,  -10), S(  -8,  -17), S( -41,   -6),
    },
    {
        S( -48,  -13), S( -28,    7), S(  -9,   -2), S( -70,   10), S( -62,   16), S( -57,    5), S( -30,    7), S( -32,    5),
        S( -23,   -9), S( -43,    6), S( -11,    3), S(  -7,    2), S( -20,   10), S(   4,    0), S( -11,   -6), S(  -2,   -8),
        S(  11,   13), S(  -1,    8), S(  23,    6), S(   7,   13), S(  18,    6), S(   3,    0), S(  12,    4), S(   7,    1),
        S( -10,    5), S(   3,   13), S(   3,   17), S(  20,   19), S(  25,   23), S(  21,    7), S(   6,   12), S(  -3,    1),
        S(  17,   -6), S(  -2,   13), S(   8,   13), S(  15,   15), S(  23,   12), S(   6,   14), S(   5,    5), S(   5,   -2),
        S(  20,   -9), S(  22,   -1), S(   3,   -1), S(  10,   12), S(   1,    9), S(   4,   -3), S(  19,    1), S(   6,   -9),
        S(  26,  -19), S(  24,  -23), S(  27,   -9), S(   6,   -4), S(  -2,   -1), S(  11,  -16), S(   5,  -26), S(  16,  -12),
        S(  28,  -36), S(  20,  -16), S(  -5,   -3), S(  18,   -5), S(   0,   -3), S(   0,    0), S(  10,   -4), S(   6,  -18),
    },
    {
        S(  18,    8), S( -14,   31), S(  -8,   25), S( -19,   23), S( -10,   21), S( -14,   29), S(   8,   17), S(  10,   16),
        S(  26,    1), S(  32,    6), S(  13,   16), S(  -4,   21), S(  24,   13), S(  11,   23), S(   9,   19), S(  12,   11),
        S(  -5,    4), S(  23,    6), S(   5,    7), S(   7,   10), S(   5,    8), S(   1,   18), S(  16,   11), S(  -4,   14),
        S( -10,   10), S( -16,   20), S(  -6,   16), S(  -7,   11), S(  -1,    9), S(   5,   12), S(   5,   10), S(  -7,   13),
        S( -19,    5), S(  -1,   10), S( -20,   15), S(  -6,    9), S(  -5,    3), S(  -9,    6), S( -10,    5), S(  -8,    2),
        S(   4,  -20), S(  21,  -23), S(  -3,   -8), S(   0,  -13), S(  -4,  -12), S(  -8,  -13), S(  -4,  -15), S( -11,  -12),
        S(  -6,  -27), S(  24,  -33), S(   3,  -18), S(   4,  -19), S(   5,  -21), S(   2,  -18), S(  -7,  -18), S( -10,  -22),
        S(  -6,  -37), S(  -3,  -16), S(  -2,  -13), S(  10,  -24), S(   8,  -25), S(   0,  -19), S(   0,  -23), S(  -1,  -22),
    },
    {
        S(   9,   -6), S(  53,  -32), S( -14,   39), S(  -9,   20), S(  17,    3), S(  -9,   18), S( -24,    9), S( -15,   11),
        S(  34,    8), S(  12,   14), S(  -5,   26), S( -29,   52), S(  -4,   33), S(  18,    2), S(  28,  -23), S(  21,  -10),
        S(   5,   10), S(   0,    0), S(  -5,   16), S( -12,   16), S(  11,   11), S(  24,    0), S(  21,  -17), S(  30,  -16),
        S(  -6,   16), S( -16,   34), S(  -8,   16), S( -15,   25), S(  -3,   23), S(  13,    2), S(  10,    5), S(   6,   -1),
        S(  -6,   15), S(  -3,   14), S( -14,   21), S( -10,   29), S( -12,   35), S(  -4,   19), S(   4,   13), S(   1,    2),
        S(   1,  -12), S(   4,   -5), S(  -7,    9), S( -15,   16), S( -10,   13), S(  -6,   14), S(  10,  -12), S(   9,  -18),
        S(   2,  -44), S(  10,  -61), S(  -1,  -28), S(  -1,  -13), S(  -2,   -5), S(   1,  -18), S(   2,  -23), S(   9,  -39),
        S(   8,  -59), S( -18,  -40), S( -19,  -24), S( -11,  -21), S(  -7,  -22), S( -12,  -16), S( -14,  -19), S( -13,  -19),
    },
    {
        S(  45,  -73), S(  25,   -3), S( -44,  -24), S( -71,    2), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  -9,   17), S(  26,   54), S( -12,   28), S( -21,   33), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  33,   13), S(  47,   51), S(  23,   31), S( -34,   54), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S( -14,   17), S( -13,   53), S( -43,   33), S( -88,   50), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S( -55,   13), S( -49,   43), S( -51,   13), S( -86,   32), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S( -13,   -3), S(  -8,   21), S( -34,   -7), S( -53,   10), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  40,  -25), S(  33,   -1), S(   5,  -29), S( -23,  -15), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  40,  -58), S(  41,  -23), S(   9,  -49), S(   2,  -47), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
    },
};

constexpr ScorePair MOBILITY[4][28] = {
    {S(  -2,  -29), S( -39,  -47), S( -17,  -16), S(  -9,    0), S(   1,    8), S(   6,   18), S(  13,   22), S(  20,   26), S(  30,   19), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S( -10,  -46), S( -30,  -61), S( -18,  -32), S( -11,  -14), S(  -3,   -4), S(   2,    7), S(   3,   15), S(   6,   19), S(   7,   22), S(   9,   22), S(  10,   22), S(  14,   17), S(  12,   24), S(  17,    3), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S( -12,  -43), S( -29,  -70), S( -14,  -52), S(  -2,  -30), S(   0,  -16), S(  -2,   -4), S(  -1,    3), S(   2,    8), S(   3,   12), S(   6,   18), S(   4,   27), S(   5,   34), S(   7,   38), S(  10,   39), S(  17,   36), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S(   1,    7), S( -30,  -73), S( -59, -116), S( -18, -198), S( -23,  -63), S( -15,  -11), S(  -5,  -23), S(  -3,   -4), S(  -2,   13), S(   1,   22), S(   3,   25), S(   7,   27), S(   7,   38), S(  11,   37), S(  11,   43), S(  12,   44), S(  14,   46), S(  16,   47), S(  15,   46), S(  22,   38), S(  26,   28), S(  32,   12), S(  29,   19), S(  36,   -6), S(  36,   -9), S(  10,   -7), S( -15,   -7), S(-119,   14)}
};

constexpr ScorePair THREAT_BY_PAWN[6] = {S(   5,  -20), S(  66,   28), S(  60,   60), S(  81,   24), S(  72,   -1), S(   0,    0)};
constexpr ScorePair THREAT_BY_KNIGHT[2][6] = {
    {S(   4,   27), S(  14,   37), S(  35,   43), S(  73,   13), S(  53,  -30), S(   0,    0)},
    {S(  -7,    9), S(   6,   37), S(  29,   29), S(  64,   34), S(  60,   -1), S(   0,    0)}
};
constexpr ScorePair THREAT_BY_BISHOP[2][6] = {
    {S(  -3,   34), S(  38,   32), S( -15,   36), S(  67,   14), S(  68,   45), S(   0,    0)},
    {S(  -4,    5), S(  17,   22), S( -26,  -11), S(  44,   44), S(  47,  110), S(   0,    0)}
};
constexpr ScorePair THREAT_BY_ROOK[2][6] = {
    {S(  -1,   39), S(  15,   57), S(  25,   53), S( -13,  -30), S(  60,   14), S(   0,    0)},
    {S(  -7,    7), S(   2,   15), S(  14,    3), S( -12,  -68), S(  41,   63), S(   0,    0)}
};
constexpr ScorePair THREAT_BY_QUEEN[2][6] = {
    {S(   6,    4), S(  24,   18), S(  10,   43), S(  13,    2), S(  10,  -55), S( 100,   53)},
    {S(  -3,   12), S(   1,    8), S(  -5,   15), S(  -3,    3), S( -15,  -74), S( 119,   52)}
};
constexpr ScorePair THREAT_BY_KING[6] = {S( -14,   43), S(   8,   48), S(  27,   41), S(  81,    8), S(   0,    0), S(   0,    0)};
constexpr ScorePair KNIGHT_HIT_QUEEN = S(  10,    3);
constexpr ScorePair BISHOP_HIT_QUEEN = S(  16,    9);
constexpr ScorePair ROOK_HIT_QUEEN = S(  18,   -5);
constexpr ScorePair PUSH_THREAT = S(  14,   17);
constexpr ScorePair RESTRICTED_SQUARES = S(   2,    3);

constexpr ScorePair ISOLATED_PAWN[8] = {S(  -8,    6), S(  -4,  -16), S( -12,   -9), S( -10,  -16), S( -12,  -14), S(  -8,   -7), S(  -4,  -14), S( -12,    7)};
constexpr ScorePair DOUBLED_PAWN[8] = {S(  -1,  -60), S(  13,  -36), S(   0,  -27), S(  -2,  -17), S(  -5,  -12), S(  -8,  -20), S(   5,  -38), S(   7,  -71)};
constexpr ScorePair BACKWARDS_PAWN[8] = {S(   0,    0), S(  -8,  -12), S(  -2,  -14), S(  -7,  -12), S(   1,  -18), S(  32,  -14), S(   0,    0), S(   0,    0)};
constexpr ScorePair PAWN_PHALANX[8] = {S(   0,    0), S(   5,   -4), S(  11,   -2), S(  20,    8), S(  39,   42), S( 116,  214), S(   5,  340), S(   0,    0)};
constexpr ScorePair DEFENDED_PAWN[8] = {S(   0,    0), S(   0,    0), S(  18,    6), S(  11,    8), S(  17,   21), S(  32,   64), S( 141,   76), S(   0,    0)};
constexpr ScorePair CANDIDATE_PASSER[2][8] = {
    {S(   0,    0), S( -32,  -16), S( -17,   -8), S(   0,   25), S(  25,   52), S(  65,  114), S(   0,    0), S(   0,    0)},
    {S(   0,    0), S( -17,  -10), S(  -8,   13), S(  -4,   28), S(  19,   40), S(  26,  180), S(   0,    0), S(   0,    0)}
};

constexpr ScorePair PASSED_PAWN[2][2][8] = {
    {
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -36,  -41), S( -16,   22), S(  10,  159), S(  66,  218), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -22,  -52), S(   3,  -20), S(  37,   41), S(  70,   26), S(   0,    0)}
    },        {
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -29,  -55), S(  -6,  -18), S(  39,   33), S(  69,   -4), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -31,  -56), S(  -6,  -24), S(  16,   19), S(  -8,  -12), S(   0,    0)}
    }    };
constexpr ScorePair OUR_PASSER_PROXIMITY[8] = {S(  78,   98), S(  72,  100), S(  46,   72), S(   7,   58), S(   5,   38), S(   7,   25), S(  12,   18), S(  -8,   25)};
constexpr ScorePair THEIR_PASSER_PROXIMITY[8] = {S( -44,  -10), S(  -2,    2), S(  25,    0), S(  20,   31), S(  15,   64), S(  18,   78), S(  25,   79), S(  30,   69)};

constexpr ScorePair PAWN_STORM[2][4][8] = {
    {
        {S(  42,   36), S(-110,  -50), S( -40,  -35), S(  58,    1), S(  26,   21), S(   1,   30), S(  -9,   30), S(   0,    0)},
        {S(  31,    6), S(  42, -125), S(  90,  -83), S(  57,  -20), S(  15,   -2), S( -22,    8), S(   3,    6), S(   0,    0)},
        {S(   8,   20), S(  99, -101), S( 103,  -52), S(  60,   -2), S(  15,   16), S( -13,   23), S( -16,   27), S(   0,    0)},
        {S(  16,    6), S( 146,  -77), S( 117,  -22), S(  68,    6), S(   9,   16), S( -14,    9), S( -20,   20), S(   0,    0)}
    },        {
        {S(   0,    0), S(   0,    0), S(  62,   62), S( -22,   33), S( -24,   40), S( -15,   57), S(   2,   44), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(  95,   18), S(  -4,   19), S( -17,   27), S( -28,   42), S( -39,   34), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S( 108,   16), S(   9,   24), S( -15,   40), S(  15,   44), S(  51,   28), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(  86,   17), S(  15,   25), S( -24,   25), S( -23,   22), S(  -1,   17), S(   0,    0)}
    }    };
constexpr ScorePair PAWN_SHIELD[4][8] = {
    {S(  48,   35), S( -19,   51), S( -11,   41), S(  40,   30), S(  44,   16), S( -24,   -3), S( -65,  -18), S(   0,    0)},
    {S(  48,    9), S( -25,   19), S(   7,    7), S(  52,   -2), S(  42,  -16), S(  12,  -19), S( -45,  -30), S(   0,    0)},
    {S(  22,   -4), S(  16,  121), S(  12,   -3), S(  34,  -23), S(  23,  -20), S(  -6,  -26), S( -61,  -41), S(   0,    0)},
    {S(  14,   17), S(   3,   12), S(   1,   10), S(  28,    5), S(  33,    1), S(   8,    6), S( -85,   10), S(   0,    0)}
};
constexpr ScorePair SAFE_KNIGHT_CHECK = S( 109,    7);
constexpr ScorePair SAFE_BISHOP_CHECK = S(  71,   18);
constexpr ScorePair SAFE_ROOK_CHECK = S( 114,   15);
constexpr ScorePair SAFE_QUEEN_CHECK = S(  55,   26);
constexpr ScorePair UNSAFE_KNIGHT_CHECK = S(  16,    2);
constexpr ScorePair UNSAFE_BISHOP_CHECK = S(  38,   10);
constexpr ScorePair UNSAFE_ROOK_CHECK = S(  37,    3);
constexpr ScorePair UNSAFE_QUEEN_CHECK = S(  16,    4);
constexpr ScorePair QUEENLESS_ATTACK = S(-147,  141);
constexpr ScorePair KING_ATTACKER_WEIGHT[4] = {S(  56,   -4), S(  22,    0), S(  34,  -15), S(   4,   -9)};
constexpr ScorePair KING_ATTACKS = S(   7,    0);
constexpr ScorePair WEAK_KING_RING = S(   8,    0);
constexpr ScorePair KING_FLANK_ATTACKS[2] = {S(  12,   -3), S(   5,   -1)};
constexpr ScorePair KING_FLANK_DEFENSES[2] = {S(  -7,    0), S(  -8,    3)};
constexpr ScorePair SAFETY_OFFSET = S(  79,  208);

constexpr ScorePair MINOR_BEHIND_PAWN = S(   5,   12);
constexpr ScorePair KNIGHT_OUTPOST = S(  23,   16);
constexpr ScorePair BISHOP_PAWNS[7] = {S(   4,   20), S(   5,   19), S(   4,   11), S(   1,    4), S(  -2,   -5), S(  -2,  -18), S(  -5,  -31)};
constexpr ScorePair BISHOP_PAIR = S(  18,   60);
constexpr ScorePair LONG_DIAG_BISHOP = S(  15,    8);
constexpr ScorePair ROOK_OPEN[2] = {S(  24,    3), S(  13,    4)};
constexpr ScorePair ROOK_ON_KING_RING = S(  10,  -11);

constexpr ScorePair TEMPO = S(  32,   34);

constexpr ScorePair COMPLEXITY_PAWNS = S(   0,   10);
constexpr ScorePair COMPLEXITY_PAWNS_BOTH_SIDES = S(   0,   63);
constexpr ScorePair COMPLEXITY_PAWN_ENDGAME = S(   0,   80);
constexpr ScorePair COMPLEXITY_OFFSET = S(   0, -134);

#undef S
// clang-format on

}
