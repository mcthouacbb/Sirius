#pragma once

#include "../defs.h"

namespace eval
{

#define S(mg, eg) PackedScore(mg, eg)
constexpr PackedScore MATERIAL[6] = {S(  58,   85), S( 280,  352), S( 286,  370), S( 398,  652), S( 840, 1198), S(0, 0)};

constexpr PackedScore PSQT[6][64] = {
	{
		S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
		S(  35,   76), S(  43,   78), S(  27,   85), S(  63,   43), S(  48,   50), S(  35,   57), S( -26,   95), S( -30,   89),
		S(  15,   38), S(  10,   54), S(  37,   13), S(  45,  -16), S(  54,  -17), S(  85,   -8), S(  46,   37), S(  30,   27),
		S(  -8,   23), S(  -2,   25), S(   5,    2), S(   5,  -10), S(  25,   -9), S(  27,  -11), S(  11,   16), S(  12,    0),
		S( -15,    6), S( -11,   20), S(  -2,   -3), S(   7,   -8), S(   9,   -7), S(  13,  -11), S(   2,    9), S(   0,  -12),
		S( -25,   -1), S( -19,   10), S( -11,   -6), S(  -9,   -3), S(   1,   -2), S(  -4,   -7), S(   4,   -1), S(  -7,  -18),
		S( -17,    4), S( -10,   16), S(  -4,    1), S(  -4,   -3), S(   4,    9), S(  28,   -7), S(  20,    3), S(  -3,  -16),
		S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
	},
	{
		S( -96,  -33), S( -92,   -6), S( -69,    9), S( -24,   -6), S(   4,   -6), S( -50,  -24), S( -82,   -5), S( -66,  -52),
		S( -14,    6), S(   1,   10), S(   3,    1), S(  13,    1), S(  12,   -9), S(  29,  -14), S(  11,    2), S(   6,  -10),
		S(   3,    0), S(   6,    0), S(  13,    4), S(  19,    3), S(  31,   -3), S(  59,  -23), S(  18,  -10), S(  23,  -14),
		S(   7,   11), S(  11,    2), S(  26,    5), S(  36,    9), S(  31,    9), S(  39,    2), S(  26,    0), S(  36,   -1),
		S(   0,   10), S(  11,    0), S(  14,   11), S(  25,   11), S(  17,   21), S(  19,    4), S(  16,    2), S(   3,   11),
		S( -12,    1), S(  -1,    0), S(   2,    1), S(   8,   15), S(  21,   13), S(   4,   -5), S(  18,   -4), S(   3,    4),
		S( -15,    7), S( -12,   11), S(  -5,    0), S(   8,    2), S(   7,    1), S(   9,   -1), S(  10,   -1), S(   5,   19),
		S( -44,   22), S(  -8,   -1), S( -16,    1), S(  -7,    4), S(   0,    5), S(   4,   -6), S(  -7,    7), S( -12,   17),
	},
	{
		S( -10,    8), S( -42,   11), S( -42,    5), S( -77,   11), S( -71,   11), S( -66,    1), S( -29,    4), S( -44,   -2),
		S(  -4,   -6), S(  -9,   -1), S(  -5,   -5), S( -17,    0), S( -10,   -7), S( -17,   -3), S( -50,    8), S( -34,    3),
		S(   7,    8), S(  17,   -1), S(   6,    1), S(  18,   -7), S(   7,   -2), S(  37,    3), S(  20,    1), S(  24,    7),
		S(  -6,    5), S(  -1,    8), S(   9,    2), S(  21,   12), S(  10,    5), S(   6,    9), S(  -6,    7), S(   0,    5),
		S(   2,    4), S(  -6,    6), S(   1,    5), S(  13,    7), S(  11,    4), S(  -1,    0), S(   0,    4), S(   8,   -6),
		S(   4,    1), S(  17,    2), S(   9,    0), S(   5,    5), S(  10,    8), S(  12,   -1), S(  19,   -6), S(  22,   -6),
		S(  25,    6), S(  11,  -14), S(  19,  -13), S(   1,   -1), S(  10,    0), S(  22,   -9), S(  32,  -12), S(  28,  -10),
		S(  15,   -5), S(  23,   10), S(   9,    3), S(   5,    0), S(  16,   -5), S(   5,   10), S(  27,   -9), S(  38,  -21),
	},
	{
		S( -11,   17), S( -13,   20), S( -20,   29), S( -26,   26), S( -15,   18), S(   3,   16), S(  -1,   21), S(  19,   11),
		S(  -1,   11), S(   5,   17), S(  14,   18), S(  29,    7), S(  14,    8), S(  16,    8), S(  25,    4), S(  29,    1),
		S(  -8,   11), S(  21,    6), S(  11,    9), S(  10,    4), S(  30,   -2), S(  37,   -9), S(  52,   -7), S(  22,   -7),
		S(  -9,   13), S(   5,    7), S(   4,   11), S(   5,    7), S(  11,   -4), S(  13,   -6), S(   8,    0), S(   7,   -3),
		S( -16,    7), S( -14,    7), S(  -8,    5), S(  -2,    3), S(  -1,    1), S( -14,    3), S(   3,   -5), S( -12,   -3),
		S( -20,    2), S( -16,   -2), S( -12,   -4), S( -10,   -2), S(   0,   -7), S(  -4,  -10), S(  16,  -23), S(   1,  -20),
		S( -21,   -4), S( -16,   -4), S(  -7,   -5), S(  -6,   -6), S(  -2,  -12), S(   2,  -15), S(   8,  -20), S( -17,  -15),
		S( -13,   -3), S( -12,   -8), S( -11,   -2), S(  -4,  -10), S(   2,  -16), S(  -3,  -11), S(  -4,  -12), S( -16,  -11),
	},
	{
		S( -16,  -11), S( -34,    3), S( -27,   26), S(  -2,   15), S(  -8,   17), S(   3,   11), S(  47,  -37), S(  13,  -11),
		S(   7,  -14), S(  -7,   -8), S(  -8,   22), S( -20,   40), S( -24,   56), S(   4,   23), S(   8,    3), S(  40,    9),
		S(   9,   -5), S(   6,   -4), S(  -2,   21), S(   0,   25), S( -12,   41), S(  11,   10), S(  27,   -4), S(  28,    0),
		S(  -1,    8), S(  -4,   18), S(   0,   15), S( -11,   29), S( -17,   30), S(   1,   17), S(   1,   32), S(  11,   13),
		S(  -1,    3), S(  -3,   18), S(  -6,   14), S(  -9,   24), S(  -2,   23), S(  -4,   20), S(   9,    7), S(  14,    7),
		S(   4,  -17), S(   2,   -4), S(  -9,    8), S(  -8,   15), S(  -3,   20), S(   0,    6), S(  13,  -14), S(  16,  -20),
		S(   5,  -31), S(  -1,  -30), S(   3,  -20), S(   3,   -5), S(   2,   -5), S(   8,  -32), S(  17,  -64), S(  30,  -76),
		S( -14,  -28), S( -14,  -24), S( -12,  -13), S(  -9,  -13), S(  -8,  -15), S( -18,  -25), S(  -7,  -39), S(  10,  -47),
	},
	{
		S(  47,  -54), S(  87,  -30), S( 123,  -33), S(  57,  -11), S(  65,  -34), S( -19,    2), S(  18,    7), S( 102,  -70),
		S( -97,   28), S(  12,   28), S(  33,   13), S( 150,  -17), S(  92,  -10), S(  45,   27), S(   9,   45), S( -90,   48),
		S(-109,   26), S(  40,   19), S(  36,    9), S(  47,    3), S(  86,    1), S( 104,   13), S(  -6,   43), S( -69,   32),
		S( -64,    2), S( -23,    9), S( -13,    7), S( -13,    2), S( -18,   -2), S( -26,   16), S( -62,   26), S(-151,   29),
		S( -69,  -10), S( -31,    0), S( -30,    4), S( -30,    2), S( -35,    2), S( -38,    6), S( -71,   15), S(-149,   19),
		S( -48,   -5), S(   8,   -2), S( -20,    3), S(  -4,    0), S(  -6,   -1), S( -23,    6), S( -14,    5), S( -71,   10),
		S(  33,  -15), S(  23,   -1), S(  19,   -1), S(   2,   -3), S(  -3,   -1), S(   7,    1), S(  23,   -1), S(  18,  -11),
		S(  20,  -34), S(  52,  -25), S(  25,  -10), S( -30,   -3), S(   7,  -19), S( -23,    3), S(  31,  -15), S(  29,  -39),
	},
};

constexpr PackedScore MOBILITY[4][28] = {
	{S(  -5,   -5), S( -27,  -51), S(  -5,  -21), S(   4,    4), S(  14,   16), S(  17,   27), S(  26,   33), S(  36,   37), S(  45,   36), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S(   5,  -13), S( -29,  -78), S(  -8,  -31), S(  -0,   -8), S(  12,    3), S(  19,   13), S(  24,   24), S(  30,   31), S(  33,   37), S(  37,   40), S(  37,   45), S(  48,   39), S(  42,   46), S(  60,   34), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -45,    6), S(   4,  -32), S( -20,  -31), S( -10,  -15), S(  -5,  -11), S(   1,    5), S(   2,   13), S(  -1,   20), S(   3,   22), S(   7,   26), S(  11,   30), S(  13,   36), S(  17,   39), S(  24,   40), S(  30,   35), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -30,   33), S( -47,  -47), S( -93,  -36), S( -61, -252), S( -65,  -96), S( -23,  -36), S( -14,  -11), S(  -6,   -5), S(   2,    3), S(   5,   25), S(   8,   33), S(  13,   42), S(  16,   49), S(  20,   51), S(  23,   54), S(  26,   58), S(  29,   60), S(  29,   65), S(  29,   69), S(  31,   71), S(  38,   66), S(  45,   54), S(  50,   56), S(  75,   29), S(  79,   31), S( 123,   -4), S( 123,   -7), S(  95,  -16)}
};

constexpr PackedScore THREATS[6][6] = {
	{S(   9,  -14), S(  59,   22), S(  59,   57), S(  85,    4), S(  72,  -26), S(   0,    0)},
	{S(  -5,   12), S(  18,   31), S(  31,   35), S(  67,   14), S(  51,  -24), S(   0,    0)},
	{S(   2,   17), S(  23,   26), S( -12,   14), S(  50,   23), S(  61,   80), S(   0,    0)},
	{S(  -6,   21), S(   4,   22), S(  15,   14), S(  -1,  -22), S(  64,   18), S(   0,    0)},
	{S(  -1,   14), S(   3,   10), S(  -2,   26), S(  -2,    5), S(  -7,  -46), S( 135,   -2)},
	{S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)}
};

constexpr PackedScore PASSED_PAWN[8] = {S(   0,    0), S( -17,  -67), S( -15,  -51), S( -13,  -18), S(  12,   18), S(   1,   86), S(  49,   95), S(   0,    0)};
constexpr PackedScore ISOLATED_PAWN[8] = {S(  -4,    6), S(  -3,  -11), S( -11,   -5), S(  -6,  -12), S( -11,  -13), S(  -7,   -4), S(  -2,  -12), S( -11,    7)};
constexpr PackedScore PAWN_PHALANX[8] = {S(   0,    0), S(   4,   -2), S(  13,    6), S(  22,   17), S(  49,   57), S( 135,  179), S(-164,  436), S(   0,    0)};
constexpr PackedScore DEFENDED_PAWN[8] = {S(   0,    0), S(   0,    0), S(  19,   11), S(  12,    8), S(  12,   16), S(  28,   40), S( 170,   29), S(   0,    0)};
constexpr PackedScore OUR_PASSER_PROXIMITY[8] = {S(   0,    0), S(   5,   52), S(  -5,   39), S(  -4,   23), S(  -1,   12), S(   2,   10), S(  17,    8), S(   5,    7)};
constexpr PackedScore THEIR_PASSER_PROXIMITY[8] = {S(   0,    0), S( -72,   -7), S(   5,    1), S(  -1,   26), S(   5,   36), S(   5,   44), S(   8,   49), S( -11,   48)};

constexpr PackedScore PAWN_STORM[3][8] = {
	{S(  46,  -35), S(  26,  -17), S(  19,   -3), S(   9,   -0), S(   2,    2), S(  -2,    6), S(  -1,    5), S(   8,  -11)},
	{S(   0,    0), S(  13,  -29), S(  29,    1), S(   3,    1), S(  -5,    7), S(  -7,   12), S(  -8,   14), S(   7,   -2)},
	{S(   2,   -2), S(  -6,    5), S(   4,    9), S(   3,    9), S(   4,    8), S(   4,   10), S(   4,    9), S(  -8,   -4)}
};
constexpr PackedScore PAWN_SHIELD[3][8] = {
	{S(   1,  -13), S(  -9,   -7), S(  -5,  -11), S(  -0,  -10), S(  14,  -14), S(  18,  -26), S(  30,  -29), S(   8,    0)},
	{S(   0,    0), S( -16,    3), S(  -9,   -4), S(   9,   -4), S(  21,  -11), S(  36,  -31), S(  52,  -39), S(  17,    2)},
	{S(  -3,   -8), S(  -2,   -6), S(   0,   -5), S(   1,    0), S(   5,    1), S(   6,    1), S(  24,    5), S(  -7,    7)}
};
constexpr PackedScore SAFE_KNIGHT_CHECK = S(  79,   -5);
constexpr PackedScore SAFE_BISHOP_CHECK = S(  16,   -6);
constexpr PackedScore SAFE_ROOK_CHECK = S(  57,   -3);
constexpr PackedScore SAFE_QUEEN_CHECK = S(  32,   10);
constexpr PackedScore KING_ATTACKER_WEIGHT[4] = {S(  15,   -5), S(   9,   -1), S(   7,  -19), S(  -2,   12)};
constexpr PackedScore KING_ATTACKS[14] = {S( -23,    8), S( -26,    4), S( -29,    2), S( -28,    7), S( -20,    4), S(  -5,   -1), S(  17,   -7), S(  47,  -21), S(  93,  -43), S( 122,  -46), S( 159,  -60), S( 183,  -48), S( 219, -128), S( 185,    3)};

constexpr PackedScore KNIGHT_OUTPOST = S(  33,   23);
constexpr PackedScore BISHOP_PAIR = S(  20,   59);
constexpr PackedScore ROOK_OPEN[2] = {S(  22,    6), S(  11,    5)};

constexpr PackedScore TEMPO = S(  28,   25);

#undef S


}
