#pragma once

#include "../defs.h"

namespace eval
{

#define S(mg, eg) PackedScore(mg, eg)

constexpr PackedScore MATERIAL[6] = {S(  56,  104), S( 277,  445), S( 301,  453), S( 366,  810), S( 775, 1473), S(0, 0)};

constexpr PackedScore PSQT[6][64] = {
	{
		S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
		S(  24,   93), S(  43,   85), S(  83,   87), S(  77,   62), S(  86,   47), S(  48,   67), S(  30,   87), S(  11,   89),
		S(  43,   22), S(  58,   43), S(  75,    6), S(  47,  -12), S(  37,  -11), S(  32,   -3), S(   3,   38), S(  -1,   25),
		S(  17,    4), S(   9,   24), S(  27,   -6), S(  15,  -10), S(   3,   -9), S(  -2,   -3), S( -10,   24), S( -12,   15),
		S(   8,  -12), S(   1,   17), S(  13,   -9), S(   8,   -7), S(   1,   -7), S(  -5,   -6), S( -18,   19), S( -17,   -1),
		S(  13,  -21), S(  13,    5), S(  -2,   -2), S(  -4,    1), S( -11,    1), S( -17,   -7), S( -26,   11), S( -28,   -7),
		S(  28,  -25), S(  44,    3), S(  29,   -3), S(   3,   12), S( -13,    5), S( -11,    0), S( -18,   20), S( -20,    0),
		S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
	},
	{
		S( -60,  -84), S( -66,  -21), S( -11,  -21), S(  19,  -15), S( -28,    3), S( -61,    6), S(-109,   17), S( -81,  -43),
		S(  -1,  -10), S(  25,   -4), S(  31,  -10), S(  10,    1), S(  13,    2), S(  -3,   10), S(  -8,   19), S( -15,   11),
		S(  21,   -7), S(  14,   -4), S(  57,  -20), S(  33,   -1), S(  17,    3), S(  10,    2), S(   2,    4), S(  -7,    5),
		S(  34,    5), S(  34,    9), S(  43,    5), S(  33,   14), S(  29,   15), S(  26,    7), S(  15,    5), S(   6,   17),
		S(   9,   16), S(  20,    9), S(  25,    7), S(  20,   20), S(  23,   14), S(  16,   12), S(  18,    2), S(   0,   13),
		S(  -1,    0), S(  13,   -5), S(   4,  -12), S(  14,    8), S(   3,    9), S(  -4,   -6), S(  -5,   -4), S( -15,    0),
		S(   3,   13), S(   5,    0), S(   3,   -7), S(   1,   -2), S(   1,   -3), S(  -9,   -6), S( -13,    1), S( -18,    4),
		S( -12,   -1), S( -13,    2), S(  -3,   -6), S(  -5,    3), S( -11,   -1), S( -22,   -7), S( -15,   -2), S( -51,   15),
	},
	{
		S( -36,   -7), S( -32,    3), S( -10,   -4), S( -73,   10), S( -67,   13), S( -54,    3), S( -28,    4), S( -15,   12),
		S( -28,   -5), S( -39,   10), S( -12,   -2), S(  -5,   -5), S( -23,    5), S(  -2,   -5), S(  -6,   -2), S( -10,   -4),
		S(  23,   12), S(  16,    0), S(  43,    6), S(   8,    2), S(  13,   -4), S(   4,    4), S(   7,    4), S(   4,    6),
		S(  -2,    5), S(  11,    8), S(   8,   11), S(  19,   13), S(  17,   18), S(  11,    5), S(   3,   11), S(  -7,    7),
		S(  18,   -8), S(   3,    7), S(   9,    4), S(  10,   12), S(  15,   11), S(  -3,   13), S(  -1,    6), S(  -1,    3),
		S(  16,   -9), S(  19,  -10), S(   9,   -2), S(   4,    7), S(  -5,    6), S(   4,    4), S(   7,    4), S(  -1,   -5),
		S(  22,  -12), S(  28,  -17), S(  18,  -11), S(   2,   -3), S(  -5,   -1), S(   7,  -17), S(   5,  -15), S(  15,   -2),
		S(  32,  -26), S(  21,  -20), S(  -5,    5), S(  12,   -5), S(  -2,   -4), S(   3,    6), S(  12,   -1), S(  11,   -7),
	},
	{
		S(   8,    8), S(  -6,   25), S(   0,   21), S( -13,   15), S( -27,   23), S( -26,   29), S( -11,   19), S( -10,   18),
		S(  24,    1), S(  28,    8), S(  18,   13), S(   3,   14), S(  15,   14), S(  -2,   27), S(  -4,   23), S(  -3,   16),
		S(  13,    0), S(  37,    5), S(  25,    5), S(  19,    8), S(   0,   14), S(  -3,   25), S(   9,   19), S( -11,   22),
		S(   5,   10), S(   4,   18), S(  15,   11), S(   9,    6), S(   1,   15), S(   4,   19), S(   3,   20), S(  -9,   22),
		S(  -5,   -2), S(  14,    3), S(  -1,    6), S(   7,    2), S(  -5,    6), S(  -8,   10), S( -12,   12), S( -14,   11),
		S(   8,  -27), S(  19,  -27), S(   3,  -17), S(   2,  -16), S(  -9,   -9), S( -14,  -10), S( -13,  -10), S( -17,   -9),
		S(  -9,  -31), S(  19,  -37), S(   7,  -26), S(   2,  -23), S(  -4,  -19), S(  -5,  -17), S( -14,  -13), S( -16,  -20),
		S( -16,  -29), S( -10,  -14), S(   0,  -21), S(   4,  -27), S(  -2,  -24), S(  -9,  -17), S(  -8,  -21), S(  -8,  -16),
	},
	{
		S(   6,  -25), S(  36,  -43), S(  -4,   11), S(  -4,   -1), S(  11,  -20), S( -14,   -3), S( -40,    0), S( -21,   -6),
		S(  37,    2), S(  -3,    7), S(  -1,   17), S( -30,   38), S( -29,   34), S( -10,    5), S( -10,  -13), S(   0,   -7),
		S(  14,    2), S(  18,   -3), S(   8,   11), S(  -6,   23), S(   0,   17), S(   3,   14), S(   5,  -11), S(  14,   -7),
		S(  14,   16), S(  11,   37), S(   9,   12), S(  -9,   30), S(  -7,   31), S(   4,    7), S(   4,   14), S(   2,   10),
		S(  14,   12), S(  19,   16), S(   7,   23), S(   3,   27), S(  -5,   30), S(  -3,   22), S(   2,   19), S(  -1,   12),
		S(  14,  -20), S(  14,   -3), S(   4,   10), S(  -7,   24), S(  -7,   16), S(  -7,   20), S(   1,    1), S(   2,   -9),
		S(  15,  -56), S(  18,  -66), S(   8,  -37), S(   4,   -1), S(   1,    4), S(   2,  -12), S(   2,  -17), S(   8,  -31),
		S(   3,  -44), S( -14,  -42), S( -18,  -15), S(  -7,  -14), S(  -7,   -8), S( -11,   -2), S( -15,   -9), S( -14,   -6),
	},
	{
		S(  -2,  -62), S(   2,   -8), S(   5,  -14), S(  21,  -13), S(  -1,   -3), S(  -1,   -3), S(  -1,   -3), S(  -1,   -3),
		S( -62,   36), S(   5,   44), S(  24,   33), S(  84,    0), S(  -1,   -3), S(  -1,   -3), S(  -1,   -3), S(  -1,   -3),
		S( -42,   30), S(  37,   33), S(  66,   24), S(  72,   14), S(  -1,   -3), S(  -1,   -3), S(  -1,   -3), S(  -1,   -3),
		S( -61,   19), S(   0,   22), S(  16,   21), S(  19,    7), S(  -1,   -3), S(  -1,   -3), S(  -1,   -3), S(  -1,   -3),
		S( -84,   14), S( -21,   15), S(   3,    9), S(  -6,    6), S(  -1,   -3), S(  -1,   -3), S(  -1,   -3), S(  -1,   -3),
		S( -48,    4), S(   5,    1), S(  -4,    4), S(   0,   -1), S(  -1,   -3), S(  -1,   -3), S(  -1,   -3), S(  -1,   -3),
		S(  10,  -14), S(  24,   -8), S(   5,   -3), S(  -9,   -7), S(  -1,   -3), S(  -1,   -3), S(  -1,   -3), S(  -1,   -3),
		S(   5,  -46), S(   8,  -20), S( -22,   -5), S( -17,  -23), S(  -1,   -3), S(  -1,   -3), S(  -1,   -3), S(  -1,   -3),
	},
};

constexpr PackedScore MOBILITY[4][28] = {
	{S( -10,  -16), S( -37,  -68), S( -15,  -33), S(  -7,   -6), S(   3,    7), S(   6,   19), S(  14,   27), S(  22,   35), S(  30,   35), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -18,  -31), S( -49,  -95), S( -28,  -39), S( -22,  -17), S( -11,   -4), S(  -4,    5), S(   0,   16), S(   5,   21), S(   7,   27), S(  12,   28), S(  13,   30), S(  25,   21), S(  28,   22), S(  44,    5), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -29,  -40), S(  15,  -71), S( -23,  -46), S( -14,  -29), S(  -8,  -23), S(  -3,   -7), S(   0,   -2), S(  -5,    8), S(   0,   12), S(   3,   17), S(   7,   24), S(   8,   33), S(  10,   39), S(  17,   41), S(  22,   39), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -35,   14), S( -49,  -77), S( -89,  -77), S( -65, -256), S( -70,  -98), S( -27,  -40), S( -20,  -12), S( -14,   -8), S(  -6,   -7), S(  -5,   17), S(  -3,   26), S(  -1,   35), S(   2,   40), S(   5,   44), S(   8,   47), S(  10,   49), S(  12,   50), S(  11,   56), S(  12,   57), S(  13,   58), S(  21,   50), S(  28,   35), S(  35,   28), S(  49,   10), S(  55,    4), S(  56,    1), S(  35,    8), S(  24,  -29)}
};

constexpr PackedScore THREAT_BY_PAWN[6] = {S(   6,  -11), S(  60,   34), S(  60,   66), S(  73,   34), S(  69,   -2), S(   0,    0)};
constexpr PackedScore THREAT_BY_KNIGHT[2][6] = {
	{S(   6,   31), S(  29,   33), S(  34,   44), S(  72,    9), S(  42,  -25), S(   0,    0)},
	{S(  -4,   11), S(  14,   48), S(  29,   34), S(  59,   35), S(  51,    1), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_BISHOP[2][6] = {
	{S(   4,   37), S(  46,   28), S(  -3,   28), S(  70,   12), S(  63,   61), S(   0,    0)},
	{S(   1,    9), S(  20,   26), S( -17,    0), S(  41,   46), S(  44,  137), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_ROOK[2][6] = {
	{S(   0,   45), S(  26,   59), S(  26,   56), S(  17,  -58), S(  72,    3), S(   0,    0)},
	{S(  -5,    8), S(   6,   19), S(  17,    6), S(  13,  -90), S(  55,   60), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_QUEEN[2][6] = {
	{S(  10,    9), S(  32,   17), S(  16,   48), S(  19,    0), S(  11,  -63), S( 101,    9)},
	{S(  -1,   13), S(   2,    9), S(  -4,   23), S(  -5,    4), S( -18,  -66), S(  99,   65)}
};
constexpr PackedScore THREAT_BY_KING[6] = {S(  -8,   45), S(  25,   47), S(  24,   46), S(  90,   15), S(   0,    0), S(   0,    0)};
constexpr PackedScore PUSH_THREAT = S(  17,   19);

constexpr PackedScore ISOLATED_PAWN[8] = {S(  -7,   10), S(  -1,  -15), S( -10,   -6), S(  -8,  -14), S( -10,  -11), S(  -6,   -4), S(  -1,  -12), S( -11,   12)};
constexpr PackedScore PAWN_PHALANX[8] = {S(   0,    0), S(   4,   -4), S(  13,    4), S(  18,   15), S(  44,   53), S(  89,  165), S( -85,  144), S(   0,    0)};
constexpr PackedScore DEFENDED_PAWN[8] = {S(   0,    0), S(   0,    0), S(  18,   10), S(  12,    9), S(  13,   19), S(  21,   60), S( 151,   62), S(   0,    0)};

constexpr PackedScore PASSED_PAWN[2][2][8] = {
	{
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -31,  -37), S( -14,   25), S( -34,  157), S(  22,  232), S(   0,    0)},
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -21,  -50), S(  12,  -27), S(  12,   10), S(  74,   22), S(   0,    0)}
	},
	{
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -28,  -53), S(  -1,  -20), S(  12,    9), S(  72,   -4), S(   0,    0)},
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -31,  -60), S(  -1,  -35), S(  -8,  -24), S(  -1,  -51), S(   0,    0)}
	}
};
constexpr PackedScore OUR_PASSER_PROXIMITY[8] = {S(   0,    0), S(  26,   85), S(  -6,   68), S(  -1,   39), S(   3,   27), S(   7,   19), S(  15,   19), S(   7,   18)};
constexpr PackedScore THEIR_PASSER_PROXIMITY[8] = {S(   0,    0), S( -45,   11), S(  21,   -7), S(   8,   25), S(  12,   45), S(   6,   80), S(  14,   79), S(  14,   68)};
constexpr PackedScore PASSER_DEFENDED_PUSH[8] = {S(   0,    0), S(   0,    0), S(   0,    0), S(  10,    4), S(   8,   12), S(  19,   36), S(   3,  145), S(   0,    0)};

constexpr PackedScore PAWN_STORM[3][8] = {
	{S(  52,  -31), S(  29,  -17), S(  21,    0), S(  11,    2), S(   2,    5), S(  -4,    9), S(  -5,    9), S(   5,  -14)},
	{S(   0,    0), S(  20,  -26), S(  24,    6), S(   6,    3), S(  -4,    6), S(  -9,   13), S( -10,   13), S(   4,   -9)},
	{S(  13,    1), S(   4,    8), S(   9,   11), S(   6,   10), S(   5,    9), S(   3,   10), S(   2,    9), S(  -8,   -6)}
};
constexpr PackedScore PAWN_SHIELD[3][8] = {
	{S(  11,  -14), S(  -1,   -9), S(  -4,  -10), S(  -5,   -7), S(   7,  -10), S(  24,  -28), S(  36,  -16), S(  -7,    8)},
	{S(   0,    0), S(  -9,    1), S( -11,    0), S(  -1,    1), S(  12,   -3), S(  34,  -28), S(  60,  -37), S(   7,    8)},
	{S(  -6,   -3), S(  -5,   -1), S(   0,   -2), S(   1,    2), S(   4,    4), S(   5,    0), S(  17,   -7), S(  -5,   12)}
};
constexpr PackedScore SAFE_KNIGHT_CHECK = S(  78,   -2);
constexpr PackedScore SAFE_BISHOP_CHECK = S(  22,   11);
constexpr PackedScore SAFE_ROOK_CHECK = S(  56,    6);
constexpr PackedScore SAFE_QUEEN_CHECK = S(  20,   23);
constexpr PackedScore UNSAFE_KNIGHT_CHECK = S(   5,    2);
constexpr PackedScore UNSAFE_BISHOP_CHECK = S(  11,   12);
constexpr PackedScore UNSAFE_ROOK_CHECK = S(  19,   -1);
constexpr PackedScore UNSAFE_QUEEN_CHECK = S(   4,   14);
constexpr PackedScore KING_ATTACKER_WEIGHT[4] = {S(  17,    2), S(  13,    5), S(  16,  -13), S(   4,    0)};
constexpr PackedScore KING_ATTACKS[14] = {S( -51,   32), S( -58,   24), S( -64,   18), S( -67,   21), S( -65,   16), S( -56,   11), S( -39,    5), S( -19,   -4), S(  20,  -24), S(  41,  -22), S(  73,  -35), S(  83,   -2), S( 118,  -85), S(  86,   44)};

constexpr PackedScore KNIGHT_OUTPOST = S(  25,   20);
constexpr PackedScore BISHOP_PAWNS[7] = {S(   5,   23), S(   7,   21), S(   4,   13), S(   1,    5), S(  -4,   -5), S(  -5,  -20), S( -11,  -35)};
constexpr PackedScore BISHOP_PAIR = S(  18,   63);
constexpr PackedScore ROOK_OPEN[2] = {S(  23,    5), S(  14,    8)};

constexpr PackedScore TEMPO = S(  29,   35);

constexpr PackedScore COMPLEXITY_PAWNS = S(   1,    8);
constexpr PackedScore COMPLEXITY_PASSERS = S(  -1,    1);
constexpr PackedScore COMPLEXITY_PAWNS_BOTH_SIDES = S(   1,   68);
constexpr PackedScore COMPLEXITY_PAWN_ENDGAME = S(   0,   66);
constexpr PackedScore COMPLEXITY_OFFSET = S(   1, -130);

#undef S


}