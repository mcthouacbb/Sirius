#pragma once

#include "../defs.h"

namespace eval
{

#define S(mg, eg) PackedScore(mg, eg)

constexpr PackedScore MATERIAL[6] = {S(  66,   97), S( 311,  407), S( 337,  413), S( 423,  744), S( 865, 1377), S(0, 0)};

constexpr PackedScore PSQT[6][64] = {
	{
		S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
		S(  13,  101), S(  30,   97), S(  73,  100), S(  75,   73), S(  84,   59), S(  46,   72), S(  23,   94), S(  12,   87),
		S(  48,   26), S(  65,   44), S(  85,    6), S(  55,   -6), S(  42,   -5), S(  38,    0), S(  10,   37), S(   5,   25),
		S(  20,    4), S(  13,   21), S(  31,   -6), S(  19,   -9), S(   5,   -7), S(   1,   -3), S(  -7,   21), S( -10,   14),
		S(   8,   -8), S(   3,   16), S(  15,  -10), S(   8,   -7), S(   2,   -7), S(  -5,   -6), S( -17,   17), S( -18,   -1),
		S(  13,  -17), S(  14,    3), S(  -2,   -3), S(  -4,    1), S( -13,    1), S( -19,   -7), S( -28,    8), S( -32,   -6),
		S(  25,  -22), S(  45,    0), S(  28,   -4), S(   1,   13), S( -16,    6), S( -13,    0), S( -21,   16), S( -24,    1),
		S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
	},
	{
		S( -74,  -62), S( -61,  -20), S(  -9,  -19), S(  19,  -12), S( -29,    5), S( -65,   11), S(-109,   17), S( -90,  -30),
		S(   0,   -7), S(  29,   -2), S(  33,  -11), S(  11,   -1), S(  12,    6), S(  -1,    7), S(  -8,   21), S( -15,   13),
		S(  24,   -5), S(  17,   -5), S(  61,  -19), S(  34,   -2), S(  17,    5), S(  14,    3), S(   2,    5), S(  -6,    7),
		S(  39,    3), S(  36,    6), S(  51,    2), S(  34,   12), S(  38,   11), S(  30,    6), S(  18,    3), S(   7,   19),
		S(  10,   15), S(  25,    5), S(  27,    5), S(  25,   17), S(  27,   12), S(  20,   10), S(  22,    1), S(   0,   13),
		S(   0,    0), S(  15,   -7), S(   3,  -14), S(  17,    6), S(   5,    7), S(  -5,   -6), S(  -5,   -5), S( -16,    1),
		S(   3,   12), S(   5,   -1), S(   2,   -8), S(   1,   -4), S(   1,   -6), S( -10,   -7), S( -13,    0), S( -20,    4),
		S( -15,    8), S( -15,    5), S(  -7,   -6), S(  -5,    2), S( -14,   -2), S( -24,   -8), S( -16,   -1), S( -54,   16),
	},
	{
		S( -38,   -7), S( -32,    3), S(  -7,   -6), S( -70,    8), S( -71,   13), S( -58,    3), S( -35,    7), S( -15,   10),
		S( -28,   -3), S( -45,   12), S( -14,   -1), S(  -9,   -4), S( -24,    4), S(  -4,   -3), S(  -7,   -1), S( -11,   -3),
		S(  23,   10), S(  22,   -1), S(  46,    4), S(  11,    4), S(  14,   -4), S(   5,    5), S(   8,    3), S(   4,    6),
		S(   2,    4), S(  10,    8), S(  13,   10), S(  19,   13), S(  24,   16), S(  12,    5), S(   4,   10), S(  -8,    7),
		S(  19,  -10), S(   6,    6), S(   9,    4), S(  12,   10), S(  16,    9), S(   1,   11), S(  -2,    6), S(   1,    3),
		S(  19,   -8), S(  20,  -12), S(  10,   -4), S(   4,    6), S(  -4,    5), S(   3,    4), S(  11,    1), S(  -2,   -4),
		S(  24,  -13), S(  28,  -18), S(  18,  -13), S(   2,   -4), S(  -6,   -2), S(   9,  -19), S(   5,  -16), S(  20,   -5),
		S(  36,  -29), S(  14,   -9), S(  -8,    7), S(  11,   -7), S(  -3,   -5), S(   2,    5), S(  13,    1), S(  11,   -7),
	},
	{
		S(  16,    8), S( -18,   29), S(   1,   23), S( -11,   17), S( -35,   31), S( -29,   32), S( -13,   24), S( -14,   25),
		S(  41,   -4), S(  41,    5), S(  30,    8), S(   9,   12), S(  21,   13), S(   2,   25), S(  -3,   21), S(  -6,   18),
		S(  22,   -4), S(  59,   -6), S(  44,   -7), S(  27,    4), S(   5,   10), S(   2,   19), S(  14,   14), S( -13,   20),
		S(  11,    2), S(  15,    6), S(  23,    1), S(  15,    3), S(   5,   10), S(   7,   14), S(   6,   13), S( -11,   20),
		S(  -7,   -1), S(  19,    0), S(   1,    3), S(   8,    1), S(  -4,    5), S(  -9,    8), S( -12,    9), S( -18,    9),
		S(   6,  -24), S(  21,  -26), S(   1,  -17), S(   1,  -16), S( -13,   -6), S( -17,  -10), S( -16,  -10), S( -23,   -6),
		S( -14,  -27), S(  16,  -33), S(   2,  -24), S(  -1,  -22), S(  -8,  -18), S(  -9,  -16), S( -18,  -12), S( -23,  -15),
		S( -22,  -20), S( -19,   -9), S( -10,  -15), S(  -1,  -23), S(  -7,  -20), S( -14,  -14), S( -12,  -19), S( -14,  -12),
	},
	{
		S(   6,  -20), S(  59,  -53), S(   4,   12), S(  -8,   12), S(   9,   -5), S( -29,   19), S( -51,   14), S( -27,    1),
		S(  48,   -9), S(   4,    5), S(   8,   24), S( -29,   58), S( -21,   41), S(  -8,   16), S( -11,   -3), S(   1,   -7),
		S(  22,    4), S(  25,    0), S(  12,   26), S(  -2,   35), S(   1,   30), S(   3,   22), S(   2,    0), S(  15,   -4),
		S(  14,   18), S(  10,   38), S(   9,   20), S( -10,   39), S(  -6,   34), S(   7,    8), S(   4,   16), S(   2,   11),
		S(  13,    8), S(  22,   11), S(   5,   21), S(   2,   28), S(  -6,   26), S(  -2,   18), S(   3,   17), S(  -1,   10),
		S(  13,  -25), S(  14,  -13), S(   4,   -1), S(  -8,   17), S(  -8,    8), S(  -8,   11), S(   2,   -5), S(   2,  -11),
		S(  12,  -57), S(  14,  -72), S(   5,  -45), S(   2,  -12), S(   0,   -9), S(   2,  -26), S(   1,  -29), S(   9,  -40),
		S(   1,  -53), S( -24,  -47), S( -26,  -22), S( -10,  -22), S( -11,  -16), S( -14,  -14), S( -17,  -21), S( -16,  -19),
	},
	{
		S(  72,  -65), S(  41,  -12), S(  18,   -9), S(  19,  -16), S(   4,   -3), S(   4,   -3), S(   4,   -3), S(   4,   -3),
		S( -88,   40), S(  26,   37), S(  23,   31), S( 103,   -5), S(   4,   -3), S(   4,   -3), S(   4,   -3), S(   4,   -3),
		S( -67,   29), S(  42,   27), S(  69,   19), S(  48,   14), S(   4,   -3), S(   4,   -3), S(   4,   -3), S(   4,   -3),
		S(-107,   22), S( -30,   21), S( -22,   23), S( -28,   13), S(   4,   -3), S(   4,   -3), S(   4,   -3), S(   4,   -3),
		S(-130,   19), S( -49,   16), S( -26,   12), S( -35,   11), S(   4,   -3), S(   4,   -3), S(   4,   -3), S(   4,   -3),
		S( -67,   10), S(  -2,    3), S( -13,    6), S(  -4,    1), S(   4,   -3), S(   4,   -3), S(   4,   -3), S(   4,   -3),
		S(   4,   -6), S(  31,   -5), S(   9,   -1), S(   0,   -6), S(   4,   -3), S(   4,   -3), S(   4,   -3), S(   4,   -3),
		S(   3,  -34), S(  16,  -16), S( -15,   -2), S(  -6,  -20), S(   4,   -3), S(   4,   -3), S(   4,   -3), S(   4,   -3),
	},
};

constexpr PackedScore MOBILITY[4][28] = {
	{S( -17,  -13), S( -42,  -68), S( -18,  -33), S(  -7,   -7), S(   3,    7), S(   6,   19), S(  15,   26), S(  24,   34), S(  32,   32), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -22,  -27), S( -56,  -93), S( -31,  -39), S( -24,  -16), S( -12,   -3), S(  -4,    6), S(   1,   17), S(   7,   21), S(   9,   26), S(  15,   27), S(  15,   29), S(  29,   19), S(  28,   23), S(  50,    6), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -34,  -34), S(  11,  -74), S( -26,  -45), S( -16,  -29), S( -10,  -22), S(  -5,   -7), S(  -1,   -1), S(  -6,    8), S(  -1,   13), S(   2,   18), S(   7,   24), S(   9,   32), S(  13,   37), S(  19,   40), S(  26,   34), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -51,   26), S( -68,  -66), S(-118,  -47), S( -77, -278), S( -87,  -94), S( -41,  -35), S( -31,  -12), S( -24,   -8), S( -16,   -5), S( -14,   21), S( -12,   29), S(  -8,   39), S(  -5,   45), S(  -1,   48), S(   2,   51), S(   5,   54), S(   7,   56), S(   7,   60), S(   8,   62), S(  10,   63), S(  19,   54), S(  27,   37), S(  32,   35), S(  61,    3), S(  71,   -3), S( 111,  -40), S( 123,  -59), S(  72,  -55)}
};

constexpr PackedScore THREAT_BY_PAWN[6] = {S(   8,  -17), S(  67,   33), S(  68,   62), S(  83,   27), S(  77,  -13), S(   0,    0)};
constexpr PackedScore THREAT_BY_KNIGHT[2][6] = {
	{S(   8,   30), S(  32,   30), S(  38,   42), S(  79,    6), S(  46,  -26), S(   0,    0)},
	{S(  -4,   12), S(  14,   48), S(  32,   33), S(  65,   31), S(  56,   -6), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_BISHOP[2][6] = {
	{S(   5,   37), S(  51,   26), S(   0,   34), S(  77,    9), S(  73,   49), S(   0,    0)},
	{S(   1,   10), S(  23,   25), S( -15,    7), S(  46,   45), S(  52,  133), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_ROOK[2][6] = {
	{S(  -1,   46), S(  30,   56), S(  29,   54), S(  19,  -43), S(  77,   -3), S(   0,    0)},
	{S(  -6,   12), S(   5,   20), S(  17,    6), S(  13,  -73), S(  61,   53), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_QUEEN[2][6] = {
	{S(  12,    6), S(  36,   13), S(  18,   48), S(  26,   -7), S(  12,  -66), S( 128,  -13)},
	{S(   0,   14), S(   2,    9), S(  -4,   24), S(  -4,    4), S( -20,  -65), S( 123,   43)}
};
constexpr PackedScore THREAT_BY_KING[6] = {S( -13,   42), S(  28,   42), S(  27,   45), S(  97,    6), S(   0,    0), S(   0,    0)};
constexpr PackedScore PUSH_THREAT = S(  20,   18);

constexpr PackedScore ISOLATED_PAWN[8] = {S(  -6,    7), S(  -2,  -14), S( -10,   -5), S(  -8,  -14), S( -10,  -12), S(  -6,   -4), S(  -1,  -11), S( -10,    9)};
constexpr PackedScore PAWN_PHALANX[8] = {S(   0,    0), S(   3,   -2), S(  14,    5), S(  20,   15), S(  49,   58), S( 124,  191), S(-138,  434), S(   0,    0)};
constexpr PackedScore DEFENDED_PAWN[8] = {S(   0,    0), S(   0,    0), S(  20,   10), S(  14,    8), S(  15,   17), S(  25,   53), S( 161,   48), S(   0,    0)};

constexpr PackedScore PASSED_PAWN[2][2][8] = {
	{
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -27,  -43), S( -13,   20), S( -34,  144), S(  11,  223), S(   0,    0)},
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -15,  -55), S(  17,  -29), S(  19,    8), S(  95,   18), S(   0,    0)}
	},
	{
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -23,  -60), S(   2,  -27), S(  19,   -2), S(  93,  -17), S(   0,    0)},
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -26,  -64), S(   3,  -38), S(  -3,  -28), S(  21,  -56), S(   0,    0)}
	}
};
constexpr PackedScore OUR_PASSER_PROXIMITY[8] = {S(   0,    0), S(  13,   85), S( -10,   64), S(   0,   37), S(   4,   25), S(   9,   17), S(  18,   18), S(  13,   16)};
constexpr PackedScore THEIR_PASSER_PROXIMITY[8] = {S(   0,    0), S( -71,   23), S(  18,    2), S(   7,   30), S(  11,   51), S(   5,   82), S(  11,   83), S(   8,   74)};

constexpr PackedScore PAWN_STORM[3][8] = {
	{S(  52,  -31), S(  22,  -20), S(  17,   -3), S(   8,   -1), S(   1,    3), S(  -3,    7), S(  -2,    8), S(   9,  -12)},
	{S(   0,    0), S(  23,  -25), S(  19,    5), S(   3,    1), S(  -6,    7), S(  -9,   14), S(  -8,   14), S(   8,   -7)},
	{S(   2,    0), S(  -8,    5), S(   3,   10), S(   2,    9), S(   3,    9), S(   3,   11), S(   5,   10), S(  -6,   -4)}
};
constexpr PackedScore PAWN_SHIELD[3][8] = {
	{S(  13,  -16), S(  -1,  -10), S(  -4,  -12), S(  -8,   -9), S(   4,  -11), S(  19,  -24), S(  33,  -19), S(  -6,    4)},
	{S(   0,    0), S(  -6,   -1), S( -10,   -2), S(  -1,   -2), S(  11,   -6), S(  32,  -23), S(  55,  -28), S(  10,    4)},
	{S(  -5,   -6), S(  -4,   -4), S(   0,   -6), S(   2,   -2), S(   4,    0), S(   3,   -3), S(  14,   -6), S(  -4,    8)}
};
constexpr PackedScore SAFE_KNIGHT_CHECK = S(  83,   -2);
constexpr PackedScore SAFE_BISHOP_CHECK = S(  19,   11);
constexpr PackedScore SAFE_ROOK_CHECK = S(  56,    0);
constexpr PackedScore SAFE_QUEEN_CHECK = S(  20,   18);
constexpr PackedScore KING_ATTACKER_WEIGHT[4] = {S(  18,    0), S(  11,    1), S(  13,  -15), S(   2,    5)};
constexpr PackedScore KING_ATTACKS[14] = {S( -83,   37), S( -87,   31), S( -91,   27), S( -90,   31), S( -84,   27), S( -70,   21), S( -47,   13), S( -19,    1), S(  28,  -21), S(  58,  -27), S(  96,  -44), S( 119,  -26), S( 157, -117), S( 117,   37)};
constexpr PackedScore VIRTUAL_MOBILITY[28] = {S( -15,   -5), S( -44,  -75), S( -59,    7), S( -38,   12), S( -40,   29), S( -21,    4), S( -19,    6), S( -18,    9), S( -13,    2), S(  -9,    2), S( -11,    4), S(  -5,   -2), S(  -4,    0), S(   2,   -4), S(   8,   -5), S(  14,   -6), S(  21,   -7), S(  30,   -6), S(  30,   -5), S(  29,   -3), S(  23,    1), S(  22,    2), S(  31,    4), S(  17,    6), S(  16,    7), S(  25,    9), S(  30,    5), S(  23,    9)};

constexpr PackedScore KNIGHT_OUTPOST = S(  26,   18);
constexpr PackedScore BISHOP_PAWNS[7] = {S(   6,   24), S(   8,   20), S(   5,   12), S(   0,    4), S(  -5,   -5), S(  -7,  -18), S( -13,  -32)};
constexpr PackedScore BISHOP_PAIR = S(  21,   64);
constexpr PackedScore ROOK_OPEN[2] = {S(  26,    5), S(  15,    4)};

constexpr PackedScore TEMPO = S(  31,   34);

#undef S


}
