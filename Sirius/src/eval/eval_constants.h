#pragma once

#include "../defs.h"

namespace eval
{

#define S(mg, eg) PackedScore(mg, eg)

constexpr PackedScore MATERIAL[6] = {S(  66,   95), S( 301,  390), S( 292,  394), S( 420,  724), S( 851, 1335), S(0, 0)};

constexpr PackedScore PSQT[6][64] = {
	{
		S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
		S(  -6,   74), S(   4,   77), S(  53,   62), S(  66,   25), S(  70,   13), S(  29,   30), S(   5,   59), S(   2,   57),
		S(  46,   38), S(  57,   52), S(  84,    7), S(  54,  -15), S(  45,  -19), S(  38,   -1), S(   5,   46), S(   3,   36),
		S(  21,    8), S(  13,   23), S(  30,   -5), S(  21,  -10), S(   6,   -9), S(   2,   -2), S(  -8,   23), S( -10,   19),
		S(   9,   -8), S(   3,   15), S(  16,  -10), S(   8,   -6), S(   3,   -8), S(  -4,   -6), S( -19,   18), S( -19,    2),
		S(  13,  -20), S(  16,   -2), S(  -1,   -6), S(  -2,   -2), S( -12,   -1), S( -18,   -8), S( -30,    9), S( -34,   -2),
		S(  25,  -23), S(  47,   -4), S(  34,   -8), S(   0,   12), S( -14,    3), S( -15,    1), S( -25,   18), S( -29,    6),
		S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
	},
	{
		S( -73,  -66), S( -58,  -26), S(  -9,  -22), S(  19,  -14), S( -27,    4), S( -68,   10), S(-108,   15), S( -90,  -32),
		S(   1,   -9), S(  27,   -4), S(  27,  -11), S(  11,   -2), S(  12,    2), S(  -1,    5), S(  -7,   20), S( -13,   11),
		S(  27,   -9), S(  12,   -5), S(  58,  -20), S(  30,   -2), S(  17,    4), S(  13,    2), S(   2,    4), S(  -5,    5),
		S(  39,    2), S(  34,    6), S(  48,    3), S(  33,   13), S(  36,   13), S(  29,    6), S(  17,    4), S(   7,   18),
		S(  10,   16), S(  26,    6), S(  28,    7), S(  24,   20), S(  27,   14), S(  18,   13), S(  21,    3), S(   0,   14),
		S(  -1,    2), S(  15,   -5), S(   4,  -10), S(  17,    9), S(   3,   11), S(  -5,   -5), S(  -6,   -3), S( -17,    1),
		S(   3,   14), S(   6,    1), S(   7,   -6), S(   1,   -2), S(   2,   -4), S( -12,   -3), S( -14,    1), S( -20,    5),
		S( -16,   10), S( -13,    4), S(  -2,   -4), S(  -5,    5), S( -12,   -1), S( -24,   -6), S( -16,    1), S( -53,   14),
	},
	{
		S( -42,   -5), S( -40,    6), S( -18,   -3), S( -73,    7), S( -76,   14), S( -60,    4), S( -34,    7), S( -14,    8),
		S( -38,    0), S( -59,   15), S( -17,   -1), S( -11,   -6), S( -27,    4), S(  -5,   -4), S(  -8,   -2), S( -13,   -2),
		S(  17,   11), S(  22,    0), S(  32,    7), S(   7,    4), S(  14,   -7), S(   4,    2), S(  10,    2), S(   4,    5),
		S(   3,    4), S(   8,    7), S(  13,   10), S(  14,   14), S(  24,   15), S(  12,    4), S(   5,    9), S(  -9,    9),
		S(  20,  -12), S(   7,    4), S(  10,    4), S(  17,   10), S(  15,   10), S(   2,   12), S(  -2,    8), S(   0,    4),
		S(  20,   -9), S(  23,  -12), S(  11,   -4), S(   7,    7), S(  -1,    6), S(   4,    4), S(  12,    3), S(  -1,   -4),
		S(  26,  -13), S(  32,  -19), S(  25,  -14), S(   4,   -4), S(  -4,   -2), S(  11,  -18), S(   5,  -16), S(  21,   -6),
		S(  35,  -27), S(  22,  -10), S(  -3,    6), S(  14,   -7), S(   0,   -6), S(   4,    6), S(  16,    3), S(  11,   -7),
	},
	{
		S(  20,    7), S( -22,   30), S(  -2,   25), S( -14,   18), S( -34,   30), S( -27,   31), S( -14,   23), S( -15,   24),
		S(  42,   -6), S(  42,    4), S(  27,    8), S(   9,   10), S(  22,   11), S(   3,   22), S(  -2,   19), S(  -6,   17),
		S(  23,   -8), S(  57,   -7), S(  42,   -8), S(  22,    2), S(   6,    8), S(   2,   16), S(  14,   10), S( -12,   17),
		S(  14,   -3), S(  17,    1), S(  22,   -1), S(  15,    0), S(   5,    7), S(   8,   11), S(   7,   10), S( -11,   17),
		S(  -5,   -5), S(  21,   -4), S(   1,    3), S(   8,    1), S(  -3,    4), S(  -9,    8), S( -12,    9), S( -18,    8),
		S(   5,  -21), S(  21,  -24), S(  -1,  -13), S(   1,  -13), S( -14,   -4), S( -18,   -7), S( -17,   -7), S( -24,   -3),
		S( -13,  -22), S(  20,  -30), S(   6,  -21), S(  -1,  -18), S(  -9,  -14), S( -11,  -11), S( -20,   -8), S( -26,  -11),
		S( -21,  -18), S( -14,   -8), S(  -5,  -13), S(   0,  -21), S(  -8,  -17), S( -16,  -10), S( -15,  -15), S( -16,   -9),
	},
	{
		S(   4,  -14), S(  59,  -48), S(  -2,   21), S(  -7,   19), S(   2,    8), S( -30,   26), S( -49,   20), S( -28,    9),
		S(  49,   -6), S(   1,   10), S(   7,   31), S( -32,   65), S( -23,   46), S(  -8,   17), S( -12,   -4), S(   1,   -5),
		S(  20,    5), S(  26,   -1), S(   2,   24), S(  -9,   39), S(  -3,   30), S(   1,   16), S(   4,   -5), S(  14,   -9),
		S(  19,   15), S(   7,   39), S(  11,   23), S( -14,   34), S(  -7,   29), S(   8,    5), S(   4,   13), S(   3,    7),
		S(  16,    8), S(  19,    9), S(   4,   23), S(   6,   25), S(  -6,   20), S(  -1,   14), S(   3,   13), S(  -1,    8),
		S(  15,  -24), S(  13,  -11), S(   3,    3), S(  -7,   19), S(  -6,   10), S(  -8,    5), S(   2,   -7), S(   1,  -11),
		S(  13,  -56), S(  17,  -68), S(  10,  -42), S(   3,  -10), S(   0,   -9), S(   2,  -21), S(  -1,  -31), S(   8,  -41),
		S(   4,  -57), S( -17,  -51), S( -21,  -19), S( -11,  -18), S( -10,  -17), S( -14,  -16), S( -17,  -21), S( -17,  -27),
	},
	{
		S(  88,  -65), S(  55,  -12), S(  27,   -7), S(  17,   -9), S(   8,   -3), S(   8,   -3), S(   8,   -3), S(   8,   -3),
		S( -89,   41), S(  16,   37), S(  17,   29), S(  90,   -3), S(   8,   -3), S(   8,   -3), S(   8,   -3), S(   8,   -3),
		S( -78,   32), S(  37,   27), S(  58,   16), S(  40,   12), S(   8,   -3), S(   8,   -3), S(   8,   -3), S(   8,   -3),
		S(-115,   21), S( -42,   20), S( -36,   17), S( -40,    6), S(   8,   -3), S(   8,   -3), S(   8,   -3), S(   8,   -3),
		S(-136,   14), S( -65,   13), S( -47,    9), S( -53,    6), S(   8,   -3), S(   8,   -3), S(   8,   -3), S(   8,   -3),
		S( -79,   11), S( -16,    4), S( -29,    7), S( -17,    2), S(   8,   -3), S(   8,   -3), S(   8,   -3), S(   8,   -3),
		S(   5,   -7), S(  24,   -3), S(   9,    1), S(   2,   -3), S(   8,   -3), S(   8,   -3), S(   8,   -3), S(   8,   -3),
		S(  18,  -37), S(  25,  -14), S(  -2,    0), S(   6,  -16), S(   8,   -3), S(   8,   -3), S(   8,   -3), S(   8,   -3),
	},
};

constexpr PackedScore MOBILITY[4][28] = {
	{S(  -6,    1), S( -33,  -51), S( -10,  -16), S(   1,   10), S(  11,   23), S(  15,   35), S(  24,   43), S(  33,   50), S(  41,   49), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S(  -3,  -25), S( -39,  -92), S( -15,  -37), S(  -8,  -13), S(   4,    0), S(  12,   10), S(  17,   22), S(  22,   28), S(  25,   33), S(  29,   36), S(  28,   40), S(  39,   33), S(  31,   39), S(  45,   29), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -37,  -14), S(  13,  -58), S( -24,  -30), S( -14,  -14), S(  -8,   -8), S(  -2,    8), S(   2,   14), S(  -3,   24), S(   2,   28), S(   5,   33), S(  10,   38), S(  12,   44), S(  16,   49), S(  24,   50), S(  31,   45), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -41,   59), S( -58,  -24), S(-112,   -7), S( -73, -228), S( -77,  -64), S( -33,    5), S( -23,   30), S( -15,   32), S(  -7,   39), S(  -5,   65), S(  -3,   74), S(   0,   85), S(   4,   91), S(   8,   94), S(  11,   98), S(  14,  102), S(  16,  105), S(  16,  110), S(  17,  114), S(  17,  117), S(  25,  111), S(  32,   98), S(  36,  100), S(  62,   72), S(  69,   72), S( 116,   32), S( 119,   28), S(  73,   27)}
};

constexpr PackedScore THREAT_BY_PAWN[6] = {S(   8,  -17), S(  67,   31), S(  68,   61), S(  91,    5), S(  79,  -21), S(   0,    0)};
constexpr PackedScore THREAT_BY_KNIGHT[2][6] = {
	{S(   8,   29), S(  32,   28), S(  38,   42), S(  79,    6), S(  46,  -24), S(   0,    0)},
	{S(  -4,   12), S(  14,   46), S(  32,   33), S(  65,   32), S(  56,   -2), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_BISHOP[2][6] = {
	{S(   5,   36), S(  52,   26), S(  -0,   36), S(  75,    8), S(  74,   43), S(   0,    0)},
	{S(   1,   10), S(  24,   25), S( -15,   10), S(  47,   43), S(  52,  130), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_ROOK[2][6] = {
	{S(  -1,   46), S(  30,   54), S(  29,   53), S(  16,  -36), S(  76,    0), S(   0,    0)},
	{S(  -7,   14), S(   5,   19), S(  17,    7), S(  10,  -66), S(  61,   56), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_QUEEN[2][6] = {
	{S(  13,    6), S(  38,    9), S(  19,   45), S(  26,   -9), S(  12,  -69), S( 143,  -38)},
	{S(  -1,   15), S(   2,    8), S(  -4,   23), S(  -3,    3), S( -20,  -60), S( 118,   47)}
};
constexpr PackedScore THREAT_BY_KING[6] = {S( -16,   47), S(  33,   43), S(  33,   50), S( 106,    9), S(   0,    0), S(   0,    0)};
constexpr PackedScore PUSH_THREAT = S(  20,   17);

constexpr PackedScore PASSED_PAWN[8] = {S(   0,    0), S( -22,  -63), S( -22,  -35), S( -21,   -7), S(   7,   19), S(  12,   44), S(  51,   72), S(   0,    0)};
constexpr PackedScore ISOLATED_PAWN[8] = {S(  -8,    8), S(  -2,  -12), S( -10,   -5), S(  -7,  -15), S( -10,  -13), S(  -7,   -4), S(  -2,  -11), S( -11,    7)};
constexpr PackedScore PAWN_PHALANX[8] = {S(   0,    0), S(   3,   -1), S(  13,    7), S(  20,   16), S(  49,   58), S( 127,  175), S(-187,  434), S(   0,    0)};
constexpr PackedScore DEFENDED_PAWN[8] = {S(   0,    0), S(   0,    0), S(  19,   12), S(  13,    9), S(  15,   16), S(  30,   44), S( 190,   26), S(   0,    0)};

constexpr PackedScore OUR_PASSER_PROXIMITY[8] = {S(   0,    0), S(   8,   43), S(  -6,   31), S(  -4,   15), S(   1,    5), S(   3,    4), S(  19,    2), S(   8,    0)};
constexpr PackedScore THEIR_PASSER_PROXIMITY[8] = {S(   0,    0), S( -89,   -1), S(   3,  -12), S(  -2,   18), S(   7,   28), S(  10,   36), S(  15,   41), S(  -2,   39)};
constexpr PackedScore FREE_PASSER[8] = {S(   0,    0), S(  -1,   14), S(   3,   -1), S(   7,    9), S(   4,   25), S( -13,   88), S(  31,  118), S(   0,    0)};

constexpr PackedScore PAWN_STORM[3][8] = {
	{S(  50,  -39), S(  27,  -20), S(  18,   -6), S(   9,   -1), S(   3,    2), S(  -1,    6), S(  -0,    7), S(  12,  -12)},
	{S(   0,    0), S(  19,  -20), S(  22,   -1), S(   3,   -0), S(  -5,    5), S(  -7,   12), S(  -6,   12), S(  10,   -4)},
	{S(   1,   -2), S( -10,    7), S(   2,    9), S(   1,    9), S(   2,    9), S(   2,   10), S(   3,   10), S(  -7,   -5)}
};
constexpr PackedScore PAWN_SHIELD[3][8] = {
	{S(  16,  -18), S(   1,  -10), S(  -2,  -12), S(  -5,   -9), S(   8,  -10), S(  21,  -21), S(  37,  -21), S(  -3,    3)},
	{S(   0,    0), S(  -7,   -0), S( -11,   -3), S(   1,    0), S(  15,   -6), S(  35,  -21), S(  57,  -28), S(  10,    3)},
	{S(  -7,   -6), S(  -6,   -3), S(  -0,   -5), S(   3,   -1), S(   6,    1), S(   4,    0), S(  22,   -4), S(  -3,    7)}
};
constexpr PackedScore SAFE_KNIGHT_CHECK = S(  82,   -4);
constexpr PackedScore SAFE_BISHOP_CHECK = S(  16,   -7);
constexpr PackedScore SAFE_ROOK_CHECK = S(  57,   -2);
constexpr PackedScore SAFE_QUEEN_CHECK = S(  31,   13);
constexpr PackedScore KING_ATTACKER_WEIGHT[4] = {S(  16,   -4), S(   9,   -1), S(  11,  -19), S(   1,    9)};
constexpr PackedScore KING_ATTACKS[14] = {S( -26,    9), S( -29,    6), S( -30,    4), S( -29,    8), S( -21,    5), S(  -6,    2), S(  18,   -6), S(  47,  -18), S(  95,  -39), S( 126,  -45), S( 165,  -62), S( 196,  -54), S( 234, -147), S( 190,   12)};

constexpr PackedScore KNIGHT_OUTPOST = S(  26,   19);
constexpr PackedScore BISHOP_PAWNS[7] = {S(  29,   42), S(  31,   38), S(  29,   29), S(  24,   21), S(  19,   12), S(  17,   -2), S(  11,  -15)};
constexpr PackedScore BISHOP_PAIR = S(  22,   64);
constexpr PackedScore ROOK_OPEN[2] = {S(  24,    8), S(  15,    5)};

constexpr PackedScore TEMPO = S(  31,   33);

#undef S


}
