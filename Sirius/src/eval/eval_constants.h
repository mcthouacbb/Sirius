#pragma once

#include "../defs.h"

namespace eval
{

#define S(mg, eg) PackedScore(mg, eg)

constexpr PackedScore MATERIAL[6] = {S(  60,  128), S( 288,  444), S( 313,  451), S( 387,  811), S( 795, 1497), S(0, 0)};

constexpr PackedScore PSQT[6][64] = {
	{
		S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
		S(  68,   84), S(  29,   92), S(  32,   97), S(  52,   76), S(  62,   68), S(  32,   99), S(  32,  104), S(  66,   90),
		S(  19,   23), S(  15,   41), S(  21,   11), S(  36,  -23), S(  25,  -17), S(  12,    6), S(  -4,   30), S(   5,   29),
		S(  18,   17), S(   9,   12), S(  11,   -6), S(  17,  -18), S(   5,  -18), S(  -1,   -3), S(  -5,   12), S( -10,   21),
		S(   7,    5), S(   7,   10), S(   6,  -17), S(  13,  -13), S(   7,  -13), S(  -4,   -6), S( -13,   10), S( -16,    8),
		S(   0,    2), S(  10,   -2), S(   2,  -22), S(  -1,    2), S(  -7,    0), S( -15,   -6), S( -22,    4), S( -28,    6),
		S(  14,    4), S(  32,   -2), S(  15,   -8), S(   8,    9), S(  -6,    2), S(  -8,   -2), S( -13,   12), S( -18,   12),
		S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
	},
	{
		S( -70,  -86), S( -81,  -17), S( -28,  -13), S(  13,  -11), S( -33,    5), S( -68,    9), S(-111,   16), S( -83,  -41),
		S(  -6,  -10), S(  22,    0), S(  34,   -6), S(   8,    6), S(  12,    7), S(   3,   12), S(  -4,   19), S( -10,   10),
		S(  16,   -9), S(  14,   -3), S(  58,  -19), S(  39,    1), S(  20,    9), S(  12,    5), S(   3,    5), S(  -6,    6),
		S(  35,    3), S(  37,    6), S(  48,    5), S(  36,   14), S(  30,   17), S(  30,    8), S(  19,    5), S(   7,   17),
		S(  10,   16), S(  19,   12), S(  28,    7), S(  20,   21), S(  25,   14), S(  20,   13), S(  21,    3), S(   2,   13),
		S(   2,   -1), S(  17,   -4), S(   8,  -10), S(  17,    7), S(   7,    7), S(  -1,   -5), S(  -1,   -5), S( -14,   -1),
		S(   4,    6), S(   5,   -6), S(   5,   -7), S(   4,   -2), S(   5,   -3), S(  -7,   -7), S( -13,   -4), S( -18,    0),
		S( -11,   -5), S( -12,    0), S(  -4,   -9), S(  -2,    3), S(  -9,    0), S( -22,   -6), S( -15,   -2), S( -49,   10),
	},
	{
		S( -38,   -4), S( -34,    6), S( -12,    0), S( -76,   14), S( -70,   18), S( -51,    3), S( -26,    8), S( -16,   17),
		S( -24,   -5), S( -36,   11), S( -13,   -1), S(  -3,    0), S( -21,    9), S(   1,   -2), S(  -1,   -1), S(  -2,   -6),
		S(  20,   12), S(  14,   -1), S(  43,    4), S(   9,    5), S(  14,    0), S(   7,    4), S(   7,    5), S(   7,    3),
		S(  -3,    6), S(   8,    8), S(   7,   11), S(  18,   13), S(  18,   19), S(  12,    5), S(   5,   10), S(  -7,    8),
		S(  13,   -4), S(   2,    8), S(   5,    6), S(   8,   11), S(  16,    8), S(  -4,   13), S(  -2,    6), S(   0,    2),
		S(  21,  -11), S(  23,  -10), S(  12,   -3), S(   3,    7), S(  -4,    3), S(   6,    3), S(  10,    2), S(   0,   -6),
		S(  23,  -19), S(  30,  -24), S(  21,  -14), S(   4,   -6), S(  -4,   -1), S(   8,  -18), S(   7,  -17), S(  14,   -7),
		S(  35,  -31), S(  19,  -18), S(  -4,    0), S(  15,   -3), S(   0,   -2), S(   2,    8), S(  12,   -1), S(  13,   -7),
	},
	{
		S(  13,    9), S( -28,   38), S( -17,   28), S( -12,   15), S( -29,   26), S( -25,   29), S( -12,   23), S(  -4,   18),
		S(  27,    1), S(  29,    6), S(  15,   12), S(   5,   14), S(  15,   16), S(   0,   28), S(  -2,   23), S(   1,   15),
		S(  10,    3), S(  40,    2), S(  30,    1), S(  26,    4), S(   3,   15), S(  -1,   26), S(  12,   19), S(  -7,   22),
		S(   3,   10), S(   4,   15), S(  13,   13), S(  12,    4), S(   2,   14), S(   6,   19), S(   5,   19), S(  -9,   21),
		S(  -7,   -1), S(  12,    3), S(  -4,    8), S(   7,    1), S(  -4,    6), S(  -8,    8), S( -10,    9), S( -14,    9),
		S(  10,  -27), S(  19,  -28), S(   0,  -15), S(   3,  -16), S(  -9,  -10), S( -14,   -9), S( -13,  -10), S( -19,   -9),
		S(  -5,  -30), S(  22,  -39), S(   5,  -24), S(   4,  -25), S(  -3,  -21), S(  -4,  -18), S( -14,  -14), S( -17,  -19),
		S(  -8,  -35), S(  -6,  -17), S(  -1,  -21), S(   7,  -28), S(  -1,  -24), S(  -8,  -16), S(  -7,  -21), S(  -8,  -17),
	},
	{
		S(   8,  -27), S(  42,  -47), S( -14,   17), S( -19,   11), S(   8,  -16), S( -19,    3), S( -38,   -2), S( -15,  -13),
		S(  38,    3), S(  -5,   14), S( -19,   24), S( -38,   54), S( -25,   35), S(  -9,   10), S(  -5,  -14), S(   9,  -14),
		S(  14,    4), S(  10,    7), S(   5,   14), S(  -8,   27), S(   4,   18), S(   9,   14), S(   6,   -4), S(  20,   -9),
		S(  11,   18), S(   8,   39), S(   8,   11), S( -11,   33), S(  -6,   31), S(   7,    6), S(   5,   15), S(   4,    9),
		S(  12,   10), S(  16,   17), S(   3,   24), S(   1,   28), S(  -5,   31), S(  -4,   22), S(   3,   17), S(   0,    8),
		S(  15,  -24), S(  14,   -7), S(   4,    7), S(  -7,   21), S(  -6,   14), S(  -6,   17), S(   4,   -4), S(   4,  -12),
		S(  15,  -58), S(  19,  -70), S(   9,  -40), S(   5,   -5), S(   3,    0), S(   4,  -18), S(   3,  -22), S(  10,  -35),
		S(   6,  -51), S(  -7,  -55), S( -17,  -23), S(  -7,  -17), S(  -7,  -11), S( -11,   -6), S( -14,  -14), S( -14,  -12),
	},
	{
		S(  -5,  -64), S(   2,    0), S( -28,   -6), S( -28,   -5), S(   8,   -5), S(   8,   -5), S(   8,   -5), S(   8,   -5),
		S( -57,   32), S(  -9,   63), S(  -8,   47), S(  33,   19), S(   8,   -5), S(   8,   -5), S(   8,   -5), S(   8,   -5),
		S( -15,   23), S(  24,   54), S(  32,   43), S(   7,   42), S(   8,   -5), S(   8,   -5), S(   8,   -5), S(   8,   -5),
		S( -56,   22), S( -23,   47), S( -15,   38), S( -42,   33), S(   8,   -5), S(   8,   -5), S(   8,   -5), S(   8,   -5),
		S( -71,   10), S( -36,   31), S( -22,   19), S( -45,   16), S(   8,   -5), S(   8,   -5), S(   8,   -5), S(   8,   -5),
		S( -23,  -10), S(   4,    9), S(  -9,   -2), S( -15,   -4), S(   8,   -5), S(   8,   -5), S(   8,   -5), S(   8,   -5),
		S(  30,  -30), S(  33,   -6), S(  12,  -15), S(  -3,  -18), S(   8,   -5), S(   8,   -5), S(   8,   -5), S(   8,   -5),
		S(  19,  -64), S(  21,  -25), S(   2,  -30), S(  13,  -51), S(   8,   -5), S(   8,   -5), S(   8,   -5), S(   8,   -5),
	},
};

constexpr PackedScore MOBILITY[4][28] = {
	{S( -11,  -20), S( -40,  -64), S( -14,  -32), S(  -7,   -6), S(   4,    7), S(   6,   18), S(  14,   25), S(  22,   32), S(  31,   33), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -22,  -32), S( -52,  -98), S( -30,  -38), S( -23,  -17), S( -11,   -4), S(  -4,    6), S(   1,   17), S(   6,   21), S(   8,   27), S(  13,   28), S(  15,   30), S(  28,   21), S(  29,   24), S(  47,    6), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -26,  -44), S(  16,  -75), S( -25,  -52), S( -13,  -31), S(  -7,  -24), S(  -3,   -6), S(   0,    0), S(  -5,    9), S(  -1,   13), S(   2,   19), S(   6,   25), S(   6,   35), S(   9,   40), S(  15,   42), S(  23,   39), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -33,    6), S( -52,  -79), S( -96,  -80), S( -71, -263), S( -73,  -97), S( -28,  -41), S( -21,  -10), S( -14,   -5), S(  -5,   -4), S(  -5,   20), S(  -3,   27), S(   0,   37), S(   3,   41), S(   6,   44), S(  10,   46), S(  12,   48), S(  14,   49), S(  14,   54), S(  15,   55), S(  16,   56), S(  24,   47), S(  31,   33), S(  36,   28), S(  52,    9), S(  63,   -5), S(  62,   -7), S(  46,   -5), S(   9,  -21)}
};

constexpr PackedScore THREAT_BY_PAWN[6] = {S(   5,  -18), S(  64,   31), S(  63,   62), S(  78,   31), S(  75,   -8), S(   0,    0)};
constexpr PackedScore THREAT_BY_KNIGHT[2][6] = {
	{S(   8,   29), S(  27,   36), S(  38,   44), S(  73,   13), S(  48,  -23), S(   0,    0)},
	{S(  -4,   11), S(  13,   37), S(  30,   31), S(  64,   33), S(  57,    1), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_BISHOP[2][6] = {
	{S(   1,   38), S(  43,   36), S(  -8,   35), S(  70,   17), S(  69,   64), S(   0,    0)},
	{S(   0,    8), S(  22,   24), S( -22,  -18), S(  44,   46), S(  48,  123), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_ROOK[2][6] = {
	{S(   1,   43), S(  18,   63), S(  28,   58), S(  14,  -50), S(  75,    9), S(   0,    0)},
	{S(  -8,    7), S(   2,   17), S(  14,    3), S(  14,  -93), S(  65,   46), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_QUEEN[2][6] = {
	{S(   7,   10), S(  24,   21), S(   9,   52), S(  13,   10), S(  11,  -56), S(  93,   33)},
	{S(  -1,    9), S(   0,    7), S(  -7,   20), S(  -5,    3), S( -18,  -71), S( 109,   64)}
};
constexpr PackedScore THREAT_BY_KING[6] = {S( -34,   48), S(   0,   49), S(  20,   43), S(  81,   19), S(   0,    0), S(   0,    0)};
constexpr PackedScore PUSH_THREAT = S(  16,   21);

constexpr PackedScore ISOLATED_PAWN[8] = {S(  -6,   -3), S(  -5,  -11), S( -11,  -10), S( -11,  -15), S( -11,  -14), S(  -7,   -7), S(  -2,  -10), S(  -9,   -2)};
constexpr PackedScore PAWN_PHALANX[8] = {S(   0,    0), S(   6,   -3), S(  12,    3), S(  20,    9), S(  39,   35), S(  99,  218), S( -32,  352), S(   0,    0)};
constexpr PackedScore DEFENDED_PAWN[8] = {S(   0,    0), S(   0,    0), S(  20,   10), S(  12,    9), S(  14,   19), S(  27,   58), S( 132,   80), S(   0,    0)};

constexpr PackedScore PASSED_PAWN[2][2][8] = {
	{
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -31,  -35), S( -14,   27), S( -15,  157), S(  28,  240), S(   0,    0)},
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -19,  -50), S(   9,  -22), S(  26,   18), S(  59,   37), S(   0,    0)}
	},
	{
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -26,  -56), S(  -2,  -25), S(  25,    4), S(  63,   -1), S(   0,    0)},
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -28,  -62), S(   0,  -36), S(   4,  -16), S(  -5,  -18), S(   0,    0)}
	}
};
constexpr PackedScore OUR_PASSER_PROXIMITY[8] = {S(   0,    0), S(  37,   83), S(  -2,   69), S(   2,   42), S(   6,   30), S(  13,   23), S(  23,   21), S(  15,   21)};
constexpr PackedScore THEIR_PASSER_PROXIMITY[8] = {S(   0,    0), S( -39,    6), S(  27,   -1), S(  16,   24), S(  16,   44), S(   5,   80), S(   8,   81), S(   9,   69)};

constexpr PackedScore PAWN_STORM[2][4][8] = {
	{
		{S(  14,   13), S(-141,  -48), S(  -5,   -8), S(   4,  -11), S(   0,    1), S(  -5,    9), S(  -3,    8), S(   0,    0)},
		{S(  11,    2), S(  -7, -108), S(  50,  -42), S(  11,   -9), S(   2,   -3), S( -10,    7), S(  -7,   11), S(   0,    0)},
		{S(  -4,    5), S(  58, -103), S(  70,  -45), S(  18,  -17), S(   3,    0), S(  -7,    8), S(  -8,   11), S(   0,    0)},
		{S(   8,   -7), S( 103,  -85), S(  35,  -20), S(  14,   -1), S(  -2,    4), S(  -8,    0), S(  -3,    0), S(   0,    0)}
	},
	{
		{S(   0,    0), S(  -3,  -26), S( -33,  121), S(  17,  -51), S(  -2,    7), S(  -1,    6), S(  -4,   10), S(   0,    0)},
		{S(   0,    0), S(  -3,  -87), S(   9,    7), S(  53,  -36), S(   4,    3), S(  -7,    7), S(  -8,   10), S(   0,    0)},
		{S(   0,    0), S(  -8,   13), S( -57, -110), S(  20,  -29), S(   2,    4), S(  -2,    6), S(  -9,   10), S(   0,    0)},
		{S(   0,    0), S( -11,  -54), S(  60,   -5), S(  24,   -3), S(   1,    9), S(   1,   -9), S(   0,    7), S(   0,    0)}
	}
};
constexpr PackedScore PAWN_SHIELD[4][8] = {
	{S(  15,    3), S(  -8,   26), S( -15,   16), S(  -2,    8), S(   4,    0), S( -37,  -26), S( -76,  -35), S(   0,    0)},
	{S(  18,    2), S( -15,   11), S( -10,    2), S(  13,   -2), S(  10,   -9), S(  -8,  -16), S( -40,  -33), S(   0,    0)},
	{S(   7,   14), S( -14,    9), S(   6,   -9), S(   3,    0), S(   2,    1), S(   9,  -13), S(  -1,  -42), S(   0,    0)},
	{S(  15,   -3), S(   6,   -3), S(  -3,    0), S(   0,   -5), S(   9,   -9), S(  26,  -20), S( -13,  -21), S(   0,    0)}
};
constexpr PackedScore SAFE_KNIGHT_CHECK = S(  83,   -2);
constexpr PackedScore SAFE_BISHOP_CHECK = S(  24,   11);
constexpr PackedScore SAFE_ROOK_CHECK = S(  60,    5);
constexpr PackedScore SAFE_QUEEN_CHECK = S(  24,   21);
constexpr PackedScore UNSAFE_KNIGHT_CHECK = S(   7,    1);
constexpr PackedScore UNSAFE_BISHOP_CHECK = S(  12,   12);
constexpr PackedScore UNSAFE_ROOK_CHECK = S(  20,    0);
constexpr PackedScore UNSAFE_QUEEN_CHECK = S(   6,   13);
constexpr PackedScore KING_ATTACKER_WEIGHT[4] = {S(  19,    2), S(  16,    2), S(  18,  -14), S(   4,    2)};
constexpr PackedScore KING_ATTACKS[14] = {S( -37,   15), S( -44,    9), S( -52,    4), S( -56,    6), S( -55,    2), S( -49,   -2), S( -33,   -6), S( -15,  -14), S(  14,  -22), S(  38,  -16), S(  58,  -26), S(  66,   21), S(  89,  -15), S(  76,   40)};

constexpr PackedScore MINOR_BEHIND_PAWN = S(   8,   14);
constexpr PackedScore KNIGHT_OUTPOST = S(  27,   18);
constexpr PackedScore BISHOP_PAWNS[7] = {S(   5,   23), S(   7,   22), S(   5,   13), S(   2,    5), S(  -2,   -5), S(  -3,  -19), S(  -8,  -34)};
constexpr PackedScore BISHOP_PAIR = S(  21,   62);
constexpr PackedScore ROOK_OPEN[2] = {S(  26,    2), S(  15,    3)};

constexpr PackedScore TEMPO = S(  32,   35);

constexpr PackedScore COMPLEXITY_PAWNS = S(   0,    8);
constexpr PackedScore COMPLEXITY_PASSERS = S(   0,    1);
constexpr PackedScore COMPLEXITY_PAWNS_BOTH_SIDES = S(   0,   70);
constexpr PackedScore COMPLEXITY_PAWN_ENDGAME = S(   0,   63);
constexpr PackedScore COMPLEXITY_OFFSET = S(   0, -132);

#undef S


}