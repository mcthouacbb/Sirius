#pragma once

#include "../defs.h"

namespace eval
{

// clang-format off
#define S(mg, eg) ScorePair(mg, eg)

constexpr ScorePair MATERIAL[6] = {S(  64,  135), S( 316,  454), S( 332,  475), S( 424,  813), S( 883, 1860), S(0, 0)};

constexpr ScorePair PSQT[6][64] = {
    {
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  74,   78), S(  14,   97), S(  28,  109), S(  35,   91), S(  66,   60), S(  50,   57), S(  39,   91), S(  83,   80),
        S(   7,   11), S( -10,   23), S(   3,    2), S(   5,   -7), S(  -4,  -17), S(  -2,   -6), S( -14,   18), S(  -2,    9),
        S(   5,    9), S(   4,   18), S(  10,   -6), S(  11,  -17), S(   4,  -17), S(   1,  -10), S(  -1,   12), S(  -7,    9),
        S(  -5,   -4), S(  -8,   16), S(  18,  -26), S(  19,  -18), S(  14,  -18), S(   4,  -13), S( -13,   12), S( -14,   -5),
        S( -11,   -6), S(  12,    7), S(   3,    3), S(   8,   -1), S(  -3,    0), S(  -7,   -2), S( -15,   12), S( -22,   -7),
        S(  -3,   -8), S(  24,    9), S(  25,   54), S(   5,    8), S(  -2,    0), S(  -3,   -1), S(  -7,   11), S( -17,   -3),
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
    },
    {
        S( -60, -121), S( -83,   14), S(-119,   47), S(  -5,   14), S( -19,   14), S( -55,    3), S(-109,    7), S( -90,  -67),
        S(  -1,   -3), S( -13,   24), S(  22,   12), S(  36,   14), S(  22,   20), S(  23,   -6), S( -25,   19), S(  -9,  -10),
        S(  16,   -6), S(  11,   13), S(  36,   12), S(  27,   16), S(  21,   16), S(  23,    8), S(   9,   10), S(   8,  -11),
        S(  30,    7), S(  29,   12), S(  34,   17), S(  29,   26), S(  34,   22), S(  17,   18), S(  19,    6), S(  12,    6),
        S(  21,    6), S(  28,    7), S(  25,   17), S(  18,   31), S(  17,   23), S(  18,   16), S(  17,    3), S(   8,    3),
        S(   3,   -7), S(  19,    0), S(  15,    0), S(  15,   15), S(  12,   11), S(  -1,   -1), S(   4,   -6), S(  -8,   -8),
        S(  10,  -11), S(   2,    2), S(   8,  -14), S(  11,    0), S(   3,    0), S(   2,  -12), S(  -6,   -5), S( -15,  -22),
        S( -26,  -22), S( -11,  -21), S(   2,  -16), S(   5,   -8), S(   0,   -5), S(   1,  -22), S( -17,  -21), S( -21,  -36),
    },
    {
        S( -30,  -37), S( -58,   21), S( -92,   23), S( -70,   22), S( -76,   26), S( -66,   19), S( -56,   21), S( -32,  -14),
        S( -15,   -4), S( -38,    4), S( -14,    9), S( -28,   12), S( -18,   15), S( -15,   12), S( -12,  -12), S( -10,   -1),
        S(  22,  -10), S(   7,   11), S(  20,    6), S(  23,   11), S(  18,   12), S(   8,    1), S(  16,    3), S(   5,   -4),
        S(   7,   -4), S(  11,   15), S(  13,   18), S(  15,   29), S(  26,   25), S(  16,   13), S(  13,    9), S(   6,  -10),
        S(  19,  -11), S(   5,    6), S(  10,   17), S(  21,   15), S(  20,   18), S(  13,   11), S(   7,    6), S(  13,   -9),
        S(  19,  -11), S(  23,   -6), S(  13,   -8), S(  14,   11), S(  12,    4), S(   7,  -10), S(  30,   -8), S(  14,  -13),
        S(  21,  -16), S(  28,  -31), S(  25,  -14), S(  11,   -6), S(   1,   -6), S(  11,  -15), S(   9,  -28), S(  22,  -11),
        S(   9,  -33), S(  18,  -12), S( -12,   -9), S(   7,  -15), S(   4,  -12), S(  -5,   -7), S(  14,  -17), S(   8,  -20),
    },
    {
        S(  18,   15), S(  34,   12), S(  27,   13), S(  13,   27), S(  25,   15), S(  15,   21), S(  21,   21), S(  26,   18),
        S(  25,   12), S(  11,   21), S(  19,   21), S(  12,   24), S(  21,   26), S(  12,   25), S(  12,   23), S(  17,   23),
        S( -18,   19), S(   8,   12), S(  15,   10), S(  17,    8), S(  11,   10), S(   8,   14), S(   6,   18), S(  -2,   21),
        S( -17,   12), S(  -7,   16), S(  -1,   12), S(  -8,   10), S(  -3,    8), S(   0,   10), S(  -2,   14), S(  -5,   11),
        S( -23,   -2), S( -10,    4), S( -13,    9), S(  -9,    6), S( -10,    3), S( -14,    9), S( -14,   10), S( -11,    0),
        S( -17,  -25), S(   6,  -26), S(  -8,   -9), S(   1,  -19), S(   0,  -20), S( -13,  -10), S(  -3,  -19), S( -17,  -15),
        S( -53,  -26), S(  -6,  -36), S(   4,  -26), S(   1,  -24), S(  -1,  -24), S(  -5,  -21), S( -12,  -26), S( -18,  -23),
        S( -15,  -36), S( -22,  -18), S(   7,  -24), S(  15,  -31), S(   7,  -28), S(  -1,  -22), S(   1,  -27), S(   0,  -24),
    },
    {
        S(  11,   28), S(  47,   -2), S(  23,   29), S(  12,   35), S(  18,   28), S(  28,   13), S(  15,   10), S( -19,   37),
        S(  35,   -6), S(  31,   -5), S(  12,   20), S( -17,   44), S(   9,   31), S(  15,    4), S(  18,   -8), S(  10,    3),
        S(   9,    7), S(  13,    7), S(  -4,   25), S( -21,   40), S(   0,   32), S(  13,    3), S(  28,  -26), S(  20,  -12),
        S(  -3,   10), S( -13,   23), S( -11,   21), S( -24,   41), S( -20,   39), S(   6,   10), S(  -1,   23), S(   3,    1),
        S( -14,   26), S( -10,   20), S( -13,   19), S( -17,   31), S( -20,   44), S(  -7,   24), S(  -1,   11), S(  -5,    5),
        S(  -6,  -16), S(  -1,  -15), S(  -8,    1), S( -18,   14), S( -11,   16), S(  -5,    8), S(   7,   -7), S(   4,  -10),
        S(  -3,  -57), S(   9,  -87), S(   2,  -52), S(  -4,  -21), S(  -8,  -13), S(   6,  -33), S(   1,  -30), S(   1,  -20),
        S(  -1,  -53), S( -20,  -71), S( -16,  -51), S(  -8,  -45), S(  -3,  -34), S(  -9,  -35), S( -13,  -29), S( -14,  -14),
    },
    {
        S(  37, -154), S(   7,   77), S(  -8,   23), S( -18,   10), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  20,   13), S(   2,  104), S( -43,   66), S( -61,   50), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  46,   44), S(   1,  112), S( -52,   55), S(-135,   15), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S( -24,   48), S( -44,   97), S( -66,   39), S(-135,    5), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S( -59,   40), S( -56,   75), S( -85,   23), S(-109,  -12), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(   1,   17), S(  -5,   45), S( -38,    1), S( -59,  -35), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  60,  -11), S(  46,   17), S(  18,  -35), S(  -8,  -70), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  59,  -43), S(  59,   -8), S(  20,  -58), S(  18, -113), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
    },
};

constexpr ScorePair MOBILITY[4][28] = {
    {S(  -7,  -21), S( -35,  -55), S( -21,  -16), S( -10,    0), S(   0,    9), S(   6,   19), S(  14,   23), S(  22,   27), S(  32,   18), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S(  -4,  -33), S( -41,  -59), S( -23,  -32), S( -12,  -12), S(  -6,   -1), S(  -2,    9), S(   0,   16), S(   3,   19), S(   3,   22), S(   6,   22), S(   5,   23), S(  12,   15), S(  17,   14), S(  44,  -14), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S( -25,  -64), S( -55,  -64), S( -18,  -43), S( -11,  -26), S(  -3,  -16), S(   3,   -5), S(   1,    6), S(   4,   11), S(   5,   14), S(   7,   20), S(   9,   27), S(  10,   34), S(  10,   39), S(  13,   40), S(  40,   17), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S( -13,   44), S( -33,    5), S( -18,  -63), S( -43, -111), S( -16, -135), S( -13,  -65), S(  -5,  -48), S(  -1,  -31), S(  -2,  -12), S(  -1,    2), S(   1,    8), S(   1,   19), S(   2,   25), S(   3,   34), S(   4,   37), S(   6,   38), S(   4,   44), S(   5,   43), S(   6,   44), S(   8,   39), S(  13,   36), S(  17,   22), S(  16,   22), S(  23,    9), S(  16,   16), S(  19,   -3), S(  23,  -29), S( -24,   -2)}
};

constexpr ScorePair THREAT_BY_PAWN[6] = {S(  -4,  -22), S(  72,   42), S(  65,   71), S(  71,   49), S(  55,   25), S(   0,    0)};
constexpr ScorePair THREAT_BY_KNIGHT[2][6] = {
    {S(   6,   36), S(   7,   81), S(  50,   31), S(  84,   13), S(  39,   13), S(   0,    0)},
    {S(  -8,   11), S(   3,   75), S(  39,   29), S(  72,   44), S(  50,   49), S(   0,    0)}
};
constexpr ScorePair THREAT_BY_BISHOP[2][6] = {
    {S(   3,   33), S(  36,   45), S(   8,   32), S(  58,   36), S(  63,   48), S(   0,    0)},
    {S(  -5,    4), S(  19,   21), S(  -1,    1), S(  54,   76), S(  64,   73), S(   0,    0)}
};
constexpr ScorePair THREAT_BY_ROOK[2][6] = {
    {S(  -2,   50), S(  38,   49), S(  46,   47), S(   4,  -73), S(  70,  -19), S(   0,    0)},
    {S( -10,    9), S(   9,   14), S(  19,    4), S(  20, -104), S(  53,   93), S(   0,    0)}
};
constexpr ScorePair THREAT_BY_QUEEN[2][6] = {
    {S(   7,   23), S(  25,   27), S(  21,   54), S(  15,   14), S(   1,  -52), S( 154,   66)},
    {S(  -6,   18), S(   1,    5), S(  -8,   26), S(  -4,   -7), S( -15,  -44), S( 107,  203)}
};
constexpr ScorePair THREAT_BY_KING[6] = {S(  52,   13), S(  26,   41), S(  97,   31), S(  86,    5), S(   0,    0), S(   0,    0)};
constexpr ScorePair KNIGHT_HIT_QUEEN = S(   7,    0);
constexpr ScorePair BISHOP_HIT_QUEEN = S(  16,   15);
constexpr ScorePair ROOK_HIT_QUEEN = S(  20,   -2);
constexpr ScorePair PUSH_THREAT = S(  13,   18);
constexpr ScorePair RESTRICTED_SQUARES = S(   2,    3);

constexpr ScorePair ISOLATED_PAWN[8] = {S(  -4,    3), S(  -4,  -16), S( -10,  -12), S( -10,  -16), S( -15,  -14), S(  -9,   -8), S(  -6,  -12), S(  -8,    1)};
constexpr ScorePair DOUBLED_PAWN[8] = {S(   1,  -54), S(   6,  -41), S(  -2,  -26), S(  -6,  -15), S( -16,    3), S(  -6,  -18), S(   5,  -41), S(   8,  -45)};
constexpr ScorePair BACKWARDS_PAWN[8] = {S(   0,    0), S(  -8,  -13), S(   0,  -15), S(  -7,  -14), S(   9,  -22), S(   8,   26), S(   0,    0), S(   0,    0)};
constexpr ScorePair PAWN_PHALANX[8] = {S(   0,    0), S(   5,   -6), S(  12,   -2), S(  19,   10), S(  40,   35), S(  72,  142), S( 110,  199), S(   0,    0)};
constexpr ScorePair DEFENDED_PAWN[8] = {S(   0,    0), S(   0,    0), S(  17,    5), S(  11,    9), S(  18,   24), S(  42,   57), S(  69,  123), S(   0,    0)};
constexpr ScorePair CANDIDATE_PASSER[2][8] = {
    {S(   0,    0), S( -21,  -16), S(  -4,  -16), S(  -2,    3), S(  17,   23), S(  41,   81), S(   0,    0), S(   0,    0)},
    {S(   0,    0), S( -15,  -10), S(  -9,    9), S(  -4,   24), S(   9,   36), S(  48,   94), S(   0,    0), S(   0,    0)}
};

constexpr ScorePair PASSED_PAWN[2][2][8] = {
    {
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -33,  -27), S( -10,   26), S(  28,  132), S( 119,  203), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -23,  -39), S(  -1,  -12), S(  31,   56), S(  68,   75), S(   0,    0)}
    },
    {
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -26,  -40), S(  -6,   -9), S(  29,   55), S(  32,   46), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -27,  -51), S(  -3,  -27), S(  18,   29), S(  -2,   15), S(   0,    0)}
    }
};
constexpr ScorePair OUR_PASSER_PROXIMITY[8] = {S(  80,  107), S( 116,   67), S(  46,   67), S(  -5,   59), S(  -2,   33), S(   1,   22), S(  15,   11), S(  -2,   20)};
constexpr ScorePair THEIR_PASSER_PROXIMITY[8] = {S( -51,    6), S(   4,   -3), S(  27,    0), S(  22,   24), S(  12,   59), S(  15,   73), S(  20,   76), S(  20,   60)};
constexpr ScorePair PASSER_DEFENDED_PUSH[8] = {S(   0,    0), S(   0,    0), S(   0,    0), S(   8,    7), S(   8,   21), S(  36,   32), S(  58,  102), S(   0,    0)};

constexpr ScorePair PAWN_STORM[2][4][8] = {
    {
        {S(  29,   26), S( -87,  -76), S(   3,  -36), S(  44,    9), S(  20,   23), S(   4,   24), S(  -3,   28), S(   0,    0)},
        {S(  23,   19), S(  58, -105), S(  77,  -55), S(  33,    0), S(  10,   17), S( -23,   21), S(   3,   19), S(   0,    0)},
        {S(   8,   15), S(  48,  -79), S( 102,  -49), S(  65,   -6), S(   8,   16), S( -17,   19), S(  -5,   16), S(   0,    0)},
        {S(   8,   -2), S( 130,  -97), S( 115,  -54), S(  57,   -5), S(   5,    6), S( -25,    2), S( -25,    3), S(   0,    0)}
    },
    {
        {S(   0,    0), S(   0,    0), S(  74,   41), S(  -6,   28), S(  -2,   33), S(  10,   42), S(  32,   31), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S( 142,   34), S( -29,   28), S( -12,   33), S( -17,   45), S(   2,   31), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S( 132,   12), S(  12,   19), S(  -7,   32), S(  -6,   36), S(  54,   12), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S( 136,    1), S(  13,   15), S( -20,   16), S(  -9,   14), S( -22,  -11), S(   0,    0)}
    }
};
constexpr ScorePair PAWN_SHIELD[4][8] = {
    {S(  56,   28), S(   1,   40), S( -14,   32), S(  31,   26), S(  38,   18), S(   6,   11), S( -20,   19), S(   0,    0)},
    {S(  41,   19), S( -31,   25), S(   5,   20), S(  40,   11), S(  38,    1), S(  -4,   -3), S( -32,  -24), S(   0,    0)},
    {S(  25,   15), S(   8,   51), S(   5,    9), S(  37,   -9), S(  32,   -9), S(   7,   -5), S( -67,    7), S(   0,    0)},
    {S(  12,    8), S( -25,   -2), S(   4,   -7), S(  27,  -13), S(  20,  -11), S(  26,   -3), S( -34,    3), S(   0,    0)}
};
constexpr ScorePair SAFE_KNIGHT_CHECK = S( 100,    1);
constexpr ScorePair SAFE_BISHOP_CHECK = S(  69,   17);
constexpr ScorePair SAFE_ROOK_CHECK = S( 108,   10);
constexpr ScorePair SAFE_QUEEN_CHECK = S(  64,   21);
constexpr ScorePair UNSAFE_KNIGHT_CHECK = S(  17,    0);
constexpr ScorePair UNSAFE_BISHOP_CHECK = S(  35,    7);
constexpr ScorePair UNSAFE_ROOK_CHECK = S(  42,    2);
constexpr ScorePair UNSAFE_QUEEN_CHECK = S(  20,    5);
constexpr ScorePair QUEENLESS_ATTACK = S(-110,  355);
constexpr ScorePair KING_ATTACKER_WEIGHT[4] = {S(  57,   -3), S(  23,   -1), S(  25,  -10), S(   6,  -18)};
constexpr ScorePair KING_ATTACKS = S(   7,    0);
constexpr ScorePair WEAK_KING_RING = S(   5,    0);
constexpr ScorePair KING_FLANK_ATTACKS[2] = {S(  13,   -4), S(   3,    0)};
constexpr ScorePair KING_FLANK_DEFENSES[2] = {S(  -8,    0), S(  -6,    3)};
constexpr ScorePair SAFETY_OFFSET = S(  77,  138);

constexpr ScorePair MINOR_BEHIND_PAWN = S(   2,   10);
constexpr ScorePair KNIGHT_OUTPOST = S(  18,   17);
constexpr ScorePair BISHOP_PAWNS[7] = {S(  11,    5), S(   5,   13), S(   3,    9), S(   0,    3), S(  -4,   -2), S(  -7,   -9), S( -10,  -19)};
constexpr ScorePair BISHOP_PAIR = S(  22,   66);
constexpr ScorePair LONG_DIAG_BISHOP = S(  11,   12);
constexpr ScorePair ROOK_OPEN[2] = {S(  31,    0), S(  19,    2)};

constexpr ScorePair TEMPO = S(  28,   19);

constexpr ScorePair COMPLEXITY_PAWNS = S(   0,   10);
constexpr ScorePair COMPLEXITY_PAWNS_BOTH_SIDES = S(   0,  130);
constexpr ScorePair COMPLEXITY_PAWN_ENDGAME = S(   0,  133);
constexpr ScorePair COMPLEXITY_OFFSET = S(   0, -211);

#undef S
// clang-format on

}
