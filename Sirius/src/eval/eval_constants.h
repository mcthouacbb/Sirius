#pragma once

#include "../defs.h"

namespace eval
{

#define S(mg, eg) PackedScore(mg, eg)

constexpr PackedScore MATERIAL[6] = {S(  62,  132), S( 290,  445), S( 312,  455), S( 387,  816), S( 810, 1501), S(0, 0)};

constexpr PackedScore PSQT[6][64] = {
	{
		S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
		S(  65,   75), S(  28,   92), S(  27,   96), S(  53,   76), S(  60,   70), S(  30,   96), S(  28,  106), S(  62,   84),
		S(  13,   13), S(   3,   43), S(  15,    6), S(  32,  -28), S(  21,  -22), S(   8,    0), S( -14,   35), S(  -1,   19),
		S(  17,    9), S(   7,   14), S(   9,   -8), S(  14,  -24), S(   1,  -22), S(  -3,   -8), S(  -8,   14), S( -12,   12),
		S(   6,    1), S(   3,   17), S(   6,  -14), S(  13,  -15), S(   7,  -14), S(  -5,   -7), S( -17,   16), S( -18,    2),
		S(   4,   -2), S(  11,   13), S(  19,   -4), S(   0,    2), S(  -5,    0), S( -10,   -4), S( -22,   14), S( -25,    1),
		S(  16,   -2), S(  31,    8), S(  15,   -7), S(   9,    5), S(   0,   -2), S(  -6,   -3), S( -13,   18), S( -15,    5),
		S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
	},
	{
		S( -85, -112), S( -82,  -29), S( -29,  -17), S(   7,  -12), S( -32,    2), S( -67,    6), S(-109,    7), S( -95,  -72),
		S( -17,  -19), S(  19,    0), S(  29,   -4), S(   6,    4), S(  10,    8), S(   1,   14), S(  -5,   17), S( -15,   -2),
		S(  13,  -10), S(   8,    1), S(  54,   -6), S(  42,   12), S(  25,   20), S(  16,   18), S(   5,    7), S(  -9,    4),
		S(  32,    1), S(  36,   12), S(  48,   17), S(  35,   22), S(  28,   28), S(  35,   18), S(  22,    8), S(   8,   13),
		S(  11,   15), S(  22,   19), S(  29,   21), S(  23,   32), S(  27,   23), S(  24,   23), S(  24,    6), S(   4,    7),
		S(   8,   -4), S(  16,    2), S(  18,    2), S(  18,   20), S(  12,   18), S(   4,    5), S(  -1,   -2), S( -16,   -6),
		S(   2,   -5), S(  11,  -10), S(   6,   -2), S(  11,    2), S(   3,    3), S(  -6,    0), S( -10,   -8), S( -23,  -11),
		S( -14,  -26), S( -12,   -6), S(  -1,   -6), S(   7,    4), S(  -1,    5), S( -19,   -5), S( -13,  -10), S( -51,  -14),
	},
	{
		S( -49,  -15), S( -30,    3), S(  -6,   -4), S( -75,   11), S( -64,   15), S( -51,    1), S( -24,    6), S( -33,    6),
		S( -24,  -10), S( -49,    6), S( -11,    3), S(   1,   -1), S( -18,   10), S(   4,    1), S( -15,   -4), S(  -5,   -7),
		S(  15,   10), S(  14,    3), S(  27,    5), S(  14,   10), S(  21,    5), S(  -2,    2), S(  11,    8), S(   5,    1),
		S(  -8,    3), S(   9,    9), S(  11,   17), S(  23,   20), S(  24,   26), S(  19,   11), S(   5,   13), S(  -9,    5),
		S(  15,   -7), S(   3,   10), S(  10,   13), S(  12,   19), S(  22,   16), S(   2,   19), S(   0,   10), S(  -2,    0),
		S(  17,  -14), S(  27,   -4), S(   5,   -4), S(   8,   13), S(   0,    9), S(   1,    0), S(  15,    6), S(  -3,   -9),
		S(  22,  -27), S(  19,  -24), S(  24,  -10), S(   5,   -3), S(  -3,    1), S(   9,  -16), S(   2,  -25), S(   5,  -16),
		S(  21,  -46), S(  18,  -19), S(  -7,    1), S(  14,   -3), S(  -2,   -2), S(  -1,    5), S(  12,   -5), S(   1,  -26),
	},
	{
		S(  15,    6), S( -26,   35), S( -24,   29), S( -14,   18), S( -28,   26), S( -23,   31), S(  -8,   21), S(  -3,   19),
		S(  32,    1), S(  33,    8), S(  13,   14), S(   8,   14), S(  17,   17), S(   4,   29), S(   0,   25), S(   3,   16),
		S(  11,    0), S(  35,    2), S(  19,    3), S(  26,    0), S(   3,   10), S(   0,   20), S(  13,   16), S(  -8,   18),
		S(   6,    4), S(   5,   12), S(  11,    8), S(   9,    0), S(   3,    8), S(   7,   13), S(   5,   14), S(  -6,   15),
		S(  -9,   -2), S(  13,    1), S( -10,    7), S(   5,   -1), S(  -6,    2), S(  -9,    5), S( -10,    6), S( -13,    5),
		S(   8,  -24), S(  23,  -24), S(   0,  -12), S(   2,  -14), S( -10,   -6), S( -13,   -7), S( -11,   -9), S( -17,   -8),
		S(  -4,  -27), S(  25,  -35), S(   5,  -20), S(   4,  -18), S(  -3,  -15), S(  -3,  -13), S( -12,  -12), S( -14,  -18),
		S(  -7,  -33), S(  -5,  -16), S(  -1,  -20), S(   7,  -27), S(   0,  -24), S(  -7,  -16), S(  -6,  -20), S(  -8,  -16),
	},
	{
		S(  -8,  -10), S(  36,  -37), S( -25,   32), S( -20,   20), S(   9,   -9), S( -27,   18), S( -43,   10), S( -31,    9),
		S(  38,    2), S(   2,   14), S( -19,   31), S( -30,   51), S( -21,   37), S(  -5,   10), S(  -2,  -11), S(   7,  -10),
		S(  17,    3), S(   7,   14), S(   2,   20), S( -12,   27), S(   4,   16), S(   8,   10), S(   9,  -10), S(  20,  -15),
		S(  10,   11), S(   4,   32), S(  10,    9), S(  -8,   29), S(  -5,   27), S(  10,    4), S(   6,   12), S(   6,    2),
		S(  11,    5), S(  13,   11), S(   1,   14), S(   2,   25), S(  -5,   33), S(  -3,   21), S(   3,   17), S(  -1,    6),
		S(  14,  -20), S(  15,   -3), S(   4,    7), S(  -5,   16), S(  -3,   13), S(  -2,   15), S(   8,   -5), S(   7,  -17),
		S(  13,  -49), S(  15,  -59), S(  10,  -38), S(   6,   -8), S(   5,   -2), S(   7,  -17), S(   5,  -20), S(  10,  -37),
		S(   2,  -48), S(  -9,  -50), S( -19,  -23), S(  -5,  -22), S(  -5,  -18), S(  -7,  -15), S( -10,  -19), S( -12,  -16),
	},
	{
		S( -35,  -53), S( -42,   12), S( -75,    8), S( -66,    5), S(   8,   -6), S(   8,   -6), S(   8,   -6), S(   8,   -6),
		S( -70,   32), S( -23,   62), S( -34,   51), S(  13,   21), S(   8,   -6), S(   8,   -6), S(   8,   -6), S(   8,   -6),
		S(   7,   18), S(  33,   50), S(  39,   41), S(  15,   40), S(   8,   -6), S(   8,   -6), S(   8,   -6), S(   8,   -6),
		S( -31,   16), S(  -9,   44), S(  -4,   35), S( -27,   31), S(   8,   -6), S(   8,   -6), S(   8,   -6), S(   8,   -6),
		S( -50,    6), S( -21,   28), S(  -5,   16), S( -27,   14), S(   8,   -6), S(   8,   -6), S(   8,   -6), S(   8,   -6),
		S( -12,  -13), S(  13,    6), S(   1,   -4), S(  -6,   -6), S(   8,   -6), S(   8,   -6), S(   8,   -6), S(   8,   -6),
		S(  27,  -31), S(  27,   -7), S(  10,  -16), S(  -5,  -20), S(   8,   -6), S(   8,   -6), S(   8,   -6), S(   8,   -6),
		S(  16,  -61), S(  22,  -26), S(   3,  -29), S(   9,  -47), S(   8,   -6), S(   8,   -6), S(   8,   -6), S(   8,   -6),
	},
};

constexpr PackedScore MOBILITY[4][28] = {
	{S( -25,  -31), S( -28,  -30), S( -13,   -8), S(  -4,    0), S(   3,    7), S(   8,   17), S(  16,   18), S(  23,   19), S(  28,   10), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -45,  -36), S( -28,  -35), S( -16,  -22), S( -11,   -6), S(  -2,    1), S(   1,    9), S(   4,   15), S(   7,   17), S(   8,   19), S(  10,   19), S(  16,   13), S(  21,    9), S(  21,   13), S(  22,   -6), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -42,  -52), S( -26,  -58), S(  -5,  -38), S(  -4,  -20), S(  -3,  -13), S(  -5,   -4), S(  -2,    3), S(   1,    6), S(   4,   12), S(   9,   17), S(   7,   24), S(  10,   30), S(  14,   34), S(  20,   32), S(  28,   29), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -42,   17), S( -75,  -77), S( -72,  -92), S( -29,  -95), S( -23,  -35), S( -18,  -26), S( -17,    2), S( -15,   13), S( -12,   21), S(  -9,   25), S(  -6,   28), S(  -4,   34), S(   0,   31), S(   1,   40), S(   2,   40), S(   5,   37), S(   5,   43), S(   7,   39), S(   8,   40), S(  18,   26), S(  25,   18), S(  41,   -2), S(  38,    5), S(  49,  -25), S(  61,  -29), S(  46,  -37), S(  30,  -20), S( -14,  -43)}
};

constexpr PackedScore THREAT_BY_PAWN[6] = {S(   7,  -20), S(  65,   30), S(  60,   61), S(  77,   29), S(  74,   -8), S(   0,    0)};
constexpr PackedScore THREAT_BY_KNIGHT[2][6] = {
	{S(   7,   29), S(  19,   29), S(  40,   45), S(  73,   15), S(  56,  -25), S(   0,    0)},
	{S(  -8,    7), S(   6,   26), S(  29,   29), S(  64,   34), S(  57,   -1), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_BISHOP[2][6] = {
	{S(  -2,   36), S(  39,   34), S( -16,   37), S(  68,   17), S(  67,   56), S(   0,    0)},
	{S(  -4,    4), S(  17,   21), S( -30,  -13), S(  43,   47), S(  44,  121), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_ROOK[2][6] = {
	{S(   0,   43), S(  17,   61), S(  26,   55), S(   6,  -38), S(  72,   15), S(   0,    0)},
	{S(  -8,    7), S(   2,   14), S(  12,    1), S(   6,  -86), S(  64,   46), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_QUEEN[2][6] = {
	{S(   5,   10), S(  22,   20), S(   9,   46), S(  17,   17), S(   8,  -46), S( 101,   42)},
	{S(  -2,   10), S(   0,    5), S(  -9,   17), S(  -7,    4), S( -19,  -69), S( 116,   63)}
};
constexpr PackedScore THREAT_BY_KING[6] = {S( -26,   49), S(   5,   52), S(  33,   42), S(  73,   10), S(   0,    0), S(   0,    0)};
constexpr PackedScore PUSH_THREAT = S(  14,   20);

constexpr PackedScore ISOLATED_PAWN[8] = {S(  -9,    6), S(  -4,  -16), S( -11,   -9), S( -11,  -17), S( -11,  -16), S(  -6,   -8), S(  -1,  -15), S( -10,    7)};
constexpr PackedScore DOUBLED_PAWN[8] = {S(  -4,  -63), S(   8,  -39), S(  -3,  -30), S(  -2,  -20), S(  -6,  -14), S( -17,  -20), S(   4,  -43), S(   2,  -76)};
constexpr PackedScore BACKWARDS_PAWN[8] = {S(   0,    0), S(  -7,  -14), S(  -3,  -14), S(  -8,  -12), S(   2,  -16), S(  32,   -8), S(   0,    0), S(   0,    0)};
constexpr PackedScore PAWN_PHALANX[8] = {S(   0,    0), S(   5,   -5), S(  13,   -3), S(  20,    7), S(  40,   39), S(  94,  228), S( -19,  351), S(   0,    0)};
constexpr PackedScore DEFENDED_PAWN[8] = {S(   0,    0), S(   0,    0), S(  18,    7), S(  12,    8), S(  17,   21), S(  26,   64), S( 135,   76), S(   0,    0)};
constexpr PackedScore CANDIDATE_PASSER[2][8] = {
	{S(   0,    0), S( -40,  -11), S( -24,   -8), S(   0,   29), S(  31,   55), S(  61,   85), S(   0,    0), S(   0,    0)},
	{S(   0,    0), S( -20,   -6), S( -10,   15), S(  -5,   31), S(  20,   43), S(  38,  150), S(   0,    0), S(   0,    0)}
};

constexpr PackedScore PASSED_PAWN[2][2][8] = {
	{
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -36,  -41), S( -17,   26), S(  -7,  154), S(  35,  235), S(   0,    0)},
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -24,  -53), S(   7,  -22), S(  28,   19), S(  58,   34), S(   0,    0)}
	},
	{
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -28,  -57), S(   0,  -24), S(  31,    7), S(  68,    0), S(   0,    0)},
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -29,  -62), S(   2,  -34), S(   9,  -13), S(  -7,  -13), S(   0,    0)}
	}
};
constexpr PackedScore OUR_PASSER_PROXIMITY[8] = {S(   0,    0), S(  37,   85), S(   5,   69), S(   2,   43), S(   5,   31), S(  12,   23), S(  21,   21), S(  16,   19)};
constexpr PackedScore THEIR_PASSER_PROXIMITY[8] = {S(   0,    0), S( -40,    7), S(  22,    0), S(  15,   27), S(  19,   47), S(  13,   79), S(  15,   80), S(  16,   69)};

constexpr PackedScore PAWN_STORM[2][4][8] = {
	{
		{S(  15,   15), S(-132,  -49), S( -11,   -9), S(   3,  -13), S(   0,   -1), S(  -5,    9), S(  -3,    8), S(   0,    0)},
		{S(  12,    4), S( -22,  -99), S(  39,  -42), S(   6,  -12), S(   2,   -5), S( -10,    7), S(  -6,    9), S(   0,    0)},
		{S(  -2,    6), S(  59,  -99), S(  60,  -44), S(  18,  -18), S(   2,   -1), S(  -5,    6), S(  -8,   12), S(   0,    0)},
		{S(   8,   -7), S( 109,  -86), S(  34,  -21), S(  14,   -1), S(  -2,    4), S(  -8,    0), S(  -1,    1), S(   0,    0)}
	},
	{
		{S(   0,    0), S(  -3,  -29), S( -27,  120), S(  15,  -53), S(  -2,    9), S(  -2,    5), S(  -5,    9), S(   0,    0)},
		{S(   0,    0), S(   3,  -91), S(   5,   76), S(  51,  -41), S(   1,    3), S(  -6,    6), S(  -7,    9), S(   0,    0)},
		{S(   0,    0), S(  -6,   20), S( -64, -118), S(  21,  -30), S(   2,    4), S(   0,    4), S(  -8,   11), S(   0,    0)},
		{S(   0,    0), S(  -9,  -50), S(  64,   -4), S(  21,    0), S(   1,    8), S(   0,  -10), S(   3,    5), S(   0,    0)}
	}
};
constexpr PackedScore PAWN_SHIELD[4][8] = {
	{S(  16,    1), S(  -8,   25), S( -14,   16), S(  -2,    8), S(   3,    1), S( -39,  -25), S( -77,  -37), S(   0,    0)},
	{S(  16,    0), S( -12,   10), S( -11,    8), S(  11,   -2), S(   9,  -12), S( -15,  -16), S( -56,  -30), S(   0,    0)},
	{S(   5,    8), S( -17,    7), S(  16,    4), S(   3,   -1), S(   0,   -1), S(   4,  -17), S( -17,  -39), S(   0,    0)},
	{S(  14,   -4), S(   3,   -3), S(  -3,    0), S(   1,   -5), S(   8,   -9), S(  27,  -22), S( -14,  -22), S(   0,    0)}
};
constexpr PackedScore SAFE_KNIGHT_CHECK = S(  91,   -2);
constexpr PackedScore SAFE_BISHOP_CHECK = S(  17,   22);
constexpr PackedScore SAFE_ROOK_CHECK = S(  73,    9);
constexpr PackedScore SAFE_QUEEN_CHECK = S(  28,   32);
constexpr PackedScore UNSAFE_KNIGHT_CHECK = S(  10,    0);
constexpr PackedScore UNSAFE_BISHOP_CHECK = S(  16,   11);
constexpr PackedScore UNSAFE_ROOK_CHECK = S(  21,   -1);
constexpr PackedScore UNSAFE_QUEEN_CHECK = S(   6,   10);
constexpr PackedScore KING_ATTACKER_WEIGHT[4] = {S(  17,   -3), S(  13,   -2), S(  13,  -15), S(   3,    4)};
constexpr PackedScore KING_ATTACKS[14] = {S( -39,    8), S( -46,    6), S( -50,    4), S( -53,    7), S( -52,    6), S( -44,    4), S( -29,    0), S( -11,   -9), S(  17,  -20), S(  38,  -16), S(  56,  -23), S(  61,   20), S(  86,  -20), S(  74,   24)};
constexpr PackedScore WEAK_KING_RING[17] = {S( -29,   45), S( -28,   25), S( -23,   22), S( -20,   19), S( -14,   12), S(  -5,    6), S(   5,    1), S(  18,   -2), S(  35,   -6), S(  48,   -9), S(  60,  -11), S(  64,   -7), S(  75,  -11), S(  77,  -12), S(  77,   -9), S(  97,  -13), S( 104,  -14)};

constexpr PackedScore MINOR_BEHIND_PAWN = S(   7,   13);
constexpr PackedScore KNIGHT_OUTPOST = S(  22,   16);
constexpr PackedScore BISHOP_PAWNS[7] = {S(   3,   19), S(   5,   18), S(   3,   11), S(   1,    4), S(  -2,   -5), S(  -1,  -18), S(  -4,  -29)};
constexpr PackedScore BISHOP_PAIR = S(  20,   63);
constexpr PackedScore LONG_DIAG_BISHOP = S(  15,   10);
constexpr PackedScore ROOK_OPEN[2] = {S(  25,    2), S(  13,    2)};

constexpr PackedScore TEMPO = S(  32,   36);

constexpr PackedScore COMPLEXITY_PAWNS = S(   0,    8);
constexpr PackedScore COMPLEXITY_PASSERS = S(   0,    1);
constexpr PackedScore COMPLEXITY_PAWNS_BOTH_SIDES = S(   0,   69);
constexpr PackedScore COMPLEXITY_PAWN_ENDGAME = S(   0,   65);
constexpr PackedScore COMPLEXITY_OFFSET = S(   0, -131);

#undef S


}