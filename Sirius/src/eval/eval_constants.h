#pragma once

#include "../defs.h"

namespace eval
{

#define S(mg, eg) PackedScore(mg, eg)

constexpr PackedScore MATERIAL[6] = {S(  61,  133), S( 288,  444), S( 313,  451), S( 389,  812), S( 801, 1491), S(0, 0)};

constexpr PackedScore PSQT[6][64] = {
	{
		S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
		S(  66,   76), S(  32,   94), S(  32,   96), S(  55,   77), S(  65,   68), S(  33,   96), S(  31,  108), S(  65,   84),
		S(  24,   16), S(  27,   43), S(  27,   10), S(  53,  -25), S(  38,  -18), S(  23,    2), S(  -1,   37), S(   7,   21),
		S(  19,   10), S(   8,   15), S(   9,   -7), S(  16,  -22), S(   5,  -21), S(  -1,   -7), S(  -7,   16), S( -11,   13),
		S(   9,    0), S(   5,   17), S(   7,  -14), S(  13,  -14), S(   8,  -13), S(  -4,   -7), S( -15,   15), S( -15,    2),
		S(   3,   -3), S(  11,   12), S(  15,   -4), S(  -2,    2), S(  -7,    1), S( -15,   -4), S( -25,   13), S( -27,    1),
		S(  17,   -3), S(  30,    8), S(  16,   -7), S(   7,    8), S(  -6,    2), S(  -7,   -3), S( -15,   18), S( -17,    5),
		S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
	},
	{
		S( -71,  -81), S( -76,  -19), S( -30,  -12), S(  14,  -13), S( -38,    8), S( -68,   10), S(-102,   15), S( -80,  -43),
		S(  -8,   -9), S(  23,    2), S(  30,   -5), S(   5,    5), S(   7,   10), S(   2,   12), S(  -4,   21), S( -10,   10),
		S(  15,   -8), S(  10,   -2), S(  55,  -18), S(  37,    1), S(  21,    9), S(  13,    6), S(   4,    5), S(  -7,    6),
		S(  33,    3), S(  34,    7), S(  46,    5), S(  35,   13), S(  31,   18), S(  31,    7), S(  20,    4), S(   8,   16),
		S(   9,   17), S(  17,   13), S(  27,    9), S(  19,   22), S(  26,   14), S(  21,   13), S(  21,    4), S(   3,   11),
		S(   3,   -1), S(  16,   -2), S(   7,   -8), S(  15,   10), S(   6,    9), S(  -1,   -4), S(   0,   -5), S( -13,   -1),
		S(   5,    6), S(   9,   -6), S(   4,   -7), S(   5,   -3), S(   6,   -3), S(  -7,   -5), S( -12,   -2), S( -18,    0),
		S( -11,   -6), S( -11,    0), S(  -4,   -9), S(  -3,    5), S(  -9,    1), S( -21,   -6), S( -14,   -2), S( -48,    9),
	},
	{
		S( -32,   -5), S( -33,    6), S(  -9,    0), S( -73,   12), S( -67,   18), S( -51,    4), S( -24,    8), S( -17,   17),
		S( -19,   -6), S( -36,   12), S( -12,   -1), S(  -4,   -3), S( -21,    9), S(   1,   -2), S(  -4,    2), S(  -3,   -4),
		S(  18,   11), S(  13,    0), S(  38,    6), S(   8,    4), S(  15,    0), S(   5,    5), S(   7,    5), S(   7,    4),
		S(  -5,    4), S(   7,    7), S(   5,   11), S(  16,   12), S(  16,   19), S(  13,    5), S(   4,   10), S(  -7,    6),
		S(  14,   -4), S(   2,    8), S(   5,    6), S(   5,   11), S(  15,    8), S(  -3,   12), S(  -2,    6), S(   1,    1),
		S(  20,   -9), S(  21,   -9), S(  10,   -1), S(   3,    8), S(  -4,    3), S(   7,    3), S(  11,    2), S(   2,   -6),
		S(  24,  -20), S(  24,  -20), S(  20,  -14), S(   5,   -5), S(  -3,   -1), S(   9,  -18), S(   8,  -18), S(  15,   -8),
		S(  33,  -29), S(  19,  -17), S(  -5,    2), S(  15,   -3), S(   3,   -3), S(   3,    7), S(  13,   -2), S(  14,   -9),
	},
	{
		S(  16,   10), S( -23,   38), S(  -7,   26), S(  -2,   16), S( -17,   25), S( -17,   32), S(  -7,   25), S(   3,   20),
		S(  29,    4), S(  34,    9), S(  15,   15), S(   9,   14), S(  18,   17), S(   3,   30), S(   0,   26), S(   1,   18),
		S(  10,    3), S(  35,    4), S(  19,    4), S(  24,    3), S(   1,   13), S(  -1,   23), S(  11,   18), S(  -9,   20),
		S(   4,    6), S(   5,   13), S(   9,    9), S(  11,    2), S(   3,   11), S(   6,   16), S(   5,   16), S(  -8,   18),
		S(  -9,   -1), S(  12,    2), S(  -9,    7), S(   6,    0), S(  -5,    4), S(  -9,    7), S( -10,    7), S( -15,    7),
		S(   6,  -25), S(  19,  -28), S(  -5,  -16), S(   0,  -18), S( -11,  -10), S( -16,  -10), S( -15,  -11), S( -21,   -9),
		S(  -9,  -28), S(  18,  -37), S(  -1,  -24), S(   0,  -23), S(  -6,  -19), S(  -7,  -17), S( -16,  -14), S( -19,  -19),
		S( -12,  -33), S(  -9,  -15), S(  -5,  -21), S(   5,  -28), S(  -3,  -24), S( -10,  -17), S(  -9,  -21), S( -10,  -17),
	},
	{
		S(  11,  -14), S(  49,  -43), S(  -7,   24), S(  -4,   13), S(  15,   -7), S(  -8,    3), S( -30,    4), S( -12,   -1),
		S(  45,    1), S(   3,   13), S( -18,   31), S( -34,   53), S( -22,   35), S(  -6,    8), S(  -3,  -12), S(   9,  -10),
		S(  21,    6), S(  12,   10), S(   6,   19), S( -14,   26), S(  -1,   17), S(   7,    8), S(   9,  -14), S(  22,  -15),
		S(  11,   15), S(   4,   36), S(   5,   10), S( -11,   32), S(  -8,   29), S(   6,    5), S(   6,   10), S(   6,    2),
		S(   9,   10), S(  13,   11), S(  -3,   18), S(   2,   24), S(  -5,   31), S(  -4,   21), S(   3,   13), S(   0,    6),
		S(  12,  -17), S(  10,   -5), S(  -2,    6), S( -10,   19), S(  -7,   13), S(  -6,   17), S(   4,   -5), S(   4,  -14),
		S(   9,  -48), S(  10,  -58), S(   4,  -37), S(   2,   -6), S(   0,   -1), S(   3,  -17), S(   2,  -20), S(   9,  -35),
		S(   4,  -51), S( -12,  -45), S( -23,  -20), S(  -8,  -20), S(  -7,  -16), S( -10,  -14), S( -13,  -17), S( -13,  -15),
	},
	{
		S( -16,  -59), S( -17,    4), S( -55,    2), S( -34,   -7), S(   7,   -5), S(   7,   -5), S(   7,   -5), S(   7,   -5),
		S( -64,   33), S( -10,   60), S( -19,   47), S(  29,   17), S(   7,   -5), S(   7,   -5), S(   7,   -5), S(   7,   -5),
		S(  -2,   21), S(  28,   53), S(  37,   43), S(  11,   43), S(   7,   -5), S(   7,   -5), S(   7,   -5), S(   7,   -5),
		S( -41,   20), S( -15,   46), S(  -7,   37), S( -32,   33), S(   7,   -5), S(   7,   -5), S(   7,   -5), S(   7,   -5),
		S( -59,    9), S( -28,   31), S( -12,   18), S( -33,   16), S(   7,   -5), S(   7,   -5), S(   7,   -5), S(   7,   -5),
		S( -16,  -11), S(   9,    8), S(  -5,   -2), S(  -9,   -4), S(   7,   -5), S(   7,   -5), S(   7,   -5), S(   7,   -5),
		S(  30,  -30), S(  29,   -6), S(  13,  -15), S(  -4,  -19), S(   7,   -5), S(   7,   -5), S(   7,   -5), S(   7,   -5),
		S(  15,  -62), S(  20,  -26), S(  -2,  -29), S(   8,  -49), S(   7,   -5), S(   7,   -5), S(   7,   -5), S(   7,   -5),
	},
};

constexpr PackedScore MOBILITY[4][28] = {
	{S(  -9,  -24), S( -41,  -62), S( -15,  -31), S(  -7,   -5), S(   4,    8), S(   6,   19), S(  14,   25), S(  22,   32), S(  31,   32), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -18,  -40), S( -51,  -95), S( -28,  -37), S( -21,  -16), S( -10,   -3), S(  -3,    6), S(   2,   17), S(   7,   21), S(   9,   26), S(  14,   27), S(  15,   30), S(  27,   21), S(  26,   24), S(  42,    6), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -27,  -37), S(  13,  -65), S( -24,  -53), S( -13,  -32), S(  -7,  -24), S(  -3,   -6), S(   0,   -1), S(  -5,    9), S(  -1,   12), S(   2,   18), S(   5,   24), S(   6,   33), S(   8,   38), S(  15,   40), S(  22,   37), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -30,   14), S( -53,  -68), S(-102,  -73), S( -78, -244), S( -73,  -95), S( -28,  -37), S( -22,   -9), S( -13,   -5), S(  -5,   -4), S(  -5,   23), S(  -3,   30), S(   0,   39), S(   3,   43), S(   6,   46), S(   9,   47), S(  12,   50), S(  13,   50), S(  13,   54), S(  14,   54), S(  16,   53), S(  25,   43), S(  34,   24), S(  38,   22), S(  55,    0), S(  51,    4), S(  59,  -13), S(  39,  -10), S(  15,  -40)}
};

constexpr PackedScore THREAT_BY_PAWN[6] = {S(   9,  -18), S(  65,   31), S(  62,   62), S(  79,   28), S(  75,   -5), S(   0,    0)};
constexpr PackedScore THREAT_BY_KNIGHT[2][6] = {
	{S(   9,   30), S(  26,   30), S(  42,   44), S(  74,   14), S(  56,  -25), S(   0,    0)},
	{S(  -5,   10), S(  13,   28), S(  29,   31), S(  64,   33), S(  57,    0), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_BISHOP[2][6] = {
	{S(   1,   38), S(  43,   35), S(  -9,   26), S(  70,   17), S(  69,   63), S(   0,    0)},
	{S(   0,    8), S(  22,   24), S( -22,  -24), S(  44,   47), S(  47,  127), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_ROOK[2][6] = {
	{S(   0,   45), S(  18,   65), S(  27,   58), S(   9,  -29), S(  75,   16), S(   0,    0)},
	{S(  -8,    9), S(   2,   16), S(  14,    3), S(   7,  -75), S(  66,   48), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_QUEEN[2][6] = {
	{S(   6,   10), S(  25,   20), S(  10,   49), S(  18,   16), S(  10,  -51), S(  97,   46)},
	{S(  -1,   10), S(   0,    7), S(  -6,   19), S(  -6,    6), S( -17,  -73), S( 112,   72)}
};
constexpr PackedScore THREAT_BY_KING[6] = {S( -28,   49), S(   4,   53), S(  30,   44), S(  75,    9), S(   0,    0), S(   0,    0)};
constexpr PackedScore PUSH_THREAT = S(  16,   19);

constexpr PackedScore ISOLATED_PAWN[8] = {S(  -8,    6), S(  -4,  -16), S( -11,   -9), S( -11,  -17), S( -11,  -16), S(  -6,   -8), S(  -1,  -15), S(  -9,    7)};
constexpr PackedScore DOUBLED_PAWN[8] = {S(  -4,  -64), S(   9,  -38), S(  -1,  -30), S(  -3,  -21), S(  -6,  -15), S( -15,  -20), S(   5,  -42), S(   2,  -76)};
constexpr PackedScore BACKWARDS_PAWN[8] = {S(   0,    0), S(  -5,  -12), S(  -2,  -14), S( -10,  -12), S(   1,  -21), S(  23,  -11), S(   0,    0), S(   0,    0)};
constexpr PackedScore PAWN_PHALANX[8] = {S(   0,    0), S(   5,   -5), S(  11,   -1), S(  19,   13), S(  48,   62), S( 116,  223), S( -26,  353), S(   0,    0)};
constexpr PackedScore DEFENDED_PAWN[8] = {S(   0,    0), S(   0,    0), S(  20,    7), S(  12,    8), S(  15,   21), S(  20,   65), S( 131,   78), S(   0,    0)};

constexpr PackedScore PASSED_PAWN[2][2][8] = {
	{
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -32,  -40), S( -13,   25), S( -16,  154), S(  33,  239), S(   0,    0)},
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -21,  -52), S(  11,  -23), S(  17,   18), S(  61,   34), S(   0,    0)}
	},
	{
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -29,  -57), S(   0,  -25), S(  18,    4), S(  67,   -3), S(   0,    0)},
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -30,  -60), S(   1,  -35), S(  -5,  -17), S(  -5,  -19), S(   0,    0)}
	}
};
constexpr PackedScore OUR_PASSER_PROXIMITY[8] = {S(   0,    0), S(  43,   83), S(   2,   69), S(   1,   42), S(   4,   30), S(  10,   23), S(  19,   21), S(  13,   20)};
constexpr PackedScore THEIR_PASSER_PROXIMITY[8] = {S(   0,    0), S( -37,    5), S(  22,   -1), S(  13,   26), S(  17,   46), S(  11,   79), S(  14,   79), S(  16,   68)};

constexpr PackedScore PAWN_STORM[2][4][8] = {
	{
		{S(  16,   14), S(-134,  -49), S(  -4,  -10), S(   4,  -13), S(   0,   -1), S(  -6,    9), S(  -4,    8), S(   0,    0)},
		{S(  12,    3), S( -15, -100), S(  51,  -42), S(   7,  -11), S(   2,   -5), S( -11,    7), S(  -7,    9), S(   0,    0)},
		{S(  -3,    6), S(  59,  -99), S(  66,  -45), S(  19,  -18), S(   3,   -2), S(  -6,    7), S(  -8,   12), S(   0,    0)},
		{S(   8,   -7), S( 102,  -84), S(  38,  -22), S(  14,   -2), S(  -1,    3), S(  -8,    0), S(  -3,    0), S(   0,    0)}
	},
	{
		{S(   0,    0), S(  -3,  -28), S( -25,  120), S(   9,  -41), S(  -3,    8), S(  -2,    4), S(  -5,    9), S(   0,    0)},
		{S(   0,    0), S(   9,  -89), S(  -3,   85), S(  54,  -39), S(   3,    2), S(  -7,    6), S(  -8,    8), S(   0,    0)},
		{S(   0,    0), S(  -6,   17), S( -53, -115), S(  21,  -28), S(   2,    4), S(  -1,    5), S(  -9,   12), S(   0,    0)},
		{S(   0,    0), S(  -7,  -52), S(  66,  -12), S(  22,   -2), S(   1,    8), S(   1,   -9), S(   0,    5), S(   0,    0)}
	}
};
constexpr PackedScore PAWN_SHIELD[4][8] = {
	{S(  17,    1), S(  -8,   25), S( -15,   17), S(  -3,    8), S(   3,    1), S( -33,  -26), S( -78,  -37), S(   0,    0)},
	{S(  17,    0), S( -13,   11), S( -10,    8), S(  11,   -2), S(   7,  -12), S(  -4,  -20), S( -52,  -30), S(   0,    0)},
	{S(   4,    8), S( -16,    8), S(  17,    4), S(   1,   -1), S(  -2,   -1), S(   5,  -18), S( -14,  -42), S(   0,    0)},
	{S(  14,   -4), S(   4,   -1), S(  -3,    0), S(   0,   -6), S(   9,   -9), S(  30,  -22), S( -15,  -20), S(   0,    0)}
};
constexpr PackedScore SAFE_KNIGHT_CHECK = S(  97,   -4);
constexpr PackedScore SAFE_BISHOP_CHECK = S(  18,   22);
constexpr PackedScore SAFE_ROOK_CHECK = S(  74,    8);
constexpr PackedScore SAFE_QUEEN_CHECK = S(  29,   31);
constexpr PackedScore UNSAFE_KNIGHT_CHECK = S(   8,    0);
constexpr PackedScore UNSAFE_BISHOP_CHECK = S(  15,   10);
constexpr PackedScore UNSAFE_ROOK_CHECK = S(  22,   -2);
constexpr PackedScore UNSAFE_QUEEN_CHECK = S(   6,   11);
constexpr PackedScore KING_ATTACKER_WEIGHT[4] = {S(  15,   -3), S(  12,   -2), S(  12,  -15), S(   1,    6)};
constexpr PackedScore KING_ATTACKS[14] = {S( -54,    7), S( -57,    5), S( -60,    1), S( -60,    5), S( -58,    4), S( -48,    3), S( -31,    0), S( -10,   -7), S(  20,  -19), S(  44,  -12), S(  63,  -20), S(  72,   19), S(  95,  -14), S(  86,   28)};
constexpr PackedScore WEAK_KING_RING[9] = {S( -15,   35), S( -14,   16), S(  -9,   13), S(  -5,    9), S(   5,    3), S(  22,   -5), S(  31,   -8), S(  41,   -9), S(  31,   -3)};

constexpr PackedScore MINOR_BEHIND_PAWN = S(   7,   14);
constexpr PackedScore KNIGHT_OUTPOST = S(  26,   18);
constexpr PackedScore BISHOP_PAWNS[7] = {S(   4,   23), S(   6,   21), S(   3,   13), S(   0,    5), S(  -3,   -5), S(  -4,  -19), S(  -8,  -33)};
constexpr PackedScore BISHOP_PAIR = S(  20,   64);
constexpr PackedScore ROOK_OPEN[2] = {S(  26,    3), S(  15,    4)};

constexpr PackedScore TEMPO = S(  32,   36);

constexpr PackedScore COMPLEXITY_PAWNS = S(   0,    8);
constexpr PackedScore COMPLEXITY_PASSERS = S(   0,    1);
constexpr PackedScore COMPLEXITY_PAWNS_BOTH_SIDES = S(   0,   69);
constexpr PackedScore COMPLEXITY_PAWN_ENDGAME = S(   0,   65);
constexpr PackedScore COMPLEXITY_OFFSET = S(   0, -133);

#undef S


}