#pragma once

#include "../defs.h"

namespace eval
{

#define S(mg, eg) PackedScore(mg, eg)

constexpr PackedScore MATERIAL[6] = {S(  61,  132), S( 288,  442), S( 311,  449), S( 388,  810), S( 802, 1489), S(0, 0)};

constexpr PackedScore PSQT[6][64] = {
	{
		S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
		S(  66,   77), S(  30,   93), S(  33,   93), S(  53,   77), S(  64,   67), S(  34,   94), S(  29,  108), S(  64,   84),
		S(  14,   12), S(   5,   41), S(  14,    6), S(  30,  -28), S(  19,  -22), S(   6,    0), S( -12,   33), S(  -1,   18),
		S(  17,    9), S(   4,   14), S(   7,   -9), S(  11,  -24), S(   0,  -22), S(  -3,   -8), S( -10,   14), S( -12,   12),
		S(   8,    1), S(   4,   17), S(   7,  -14), S(  15,  -15), S(   9,  -14), S(  -4,   -7), S( -16,   16), S( -15,    3),
		S(   3,   -2), S(  10,   13), S(  16,   -4), S(  -2,    1), S(  -7,    0), S( -13,   -4), S( -25,   13), S( -26,    1),
		S(  16,   -3), S(  29,    7), S(  16,   -7), S(   6,    6), S(  -7,    0), S(  -7,   -3), S( -15,   18), S( -16,    4),
		S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
	},
	{
		S( -69,  -84), S( -77,  -20), S( -28,  -12), S(  12,  -11), S( -35,    8), S( -64,    8), S(-100,   15), S( -79,  -44),
		S(  -8,   -8), S(  24,    2), S(  31,   -5), S(   7,    5), S(  11,    9), S(   3,   13), S(  -3,   21), S(  -8,   10),
		S(  16,   -8), S(   9,   -1), S(  52,  -17), S(  38,    2), S(  21,   10), S(  13,    6), S(   4,    6), S(  -7,    7),
		S(  32,    4), S(  33,    7), S(  44,    6), S(  34,   13), S(  28,   19), S(  31,    8), S(  20,    4), S(   8,   17),
		S(   9,   17), S(  16,   12), S(  25,   10), S(  20,   22), S(  27,   13), S(  20,   13), S(  21,    4), S(   3,   12),
		S(   1,    0), S(  15,   -1), S(   7,   -8), S(  14,   10), S(   6,    9), S(   0,   -5), S(   0,   -5), S( -14,   -1),
		S(   5,    6), S(  10,   -6), S(   4,   -7), S(   5,   -3), S(   5,   -2), S(  -7,   -5), S( -11,   -3), S( -18,    0),
		S( -10,   -7), S( -11,    0), S(  -5,   -8), S(  -4,    5), S(  -9,    1), S( -21,   -6), S( -14,   -2), S( -47,    8),
	},
	{
		S( -43,  -10), S( -30,    6), S(  -6,    0), S( -71,   12), S( -63,   18), S( -47,    3), S( -23,    8), S( -30,   11),
		S( -19,   -6), S( -48,    7), S( -10,    1), S(   2,   -2), S( -17,    9), S(   4,   -1), S( -15,   -4), S(  -3,   -4),
		S(  17,   13), S(  14,    1), S(  28,    1), S(  13,    5), S(  19,    2), S(  -2,    0), S(   9,    7), S(   7,    4),
		S(  -4,    5), S(  11,    7), S(  10,   12), S(  20,   15), S(  20,   21), S(  17,    7), S(   7,   11), S(  -5,    7),
		S(  15,   -4), S(   3,    9), S(   8,    8), S(  10,   13), S(  19,   10), S(   0,   15), S(   1,    8), S(   1,    3),
		S(  19,   -9), S(  22,   -7), S(   2,   -7), S(   5,   10), S(  -1,    5), S(   0,   -3), S(  12,    3), S(   2,   -4),
		S(  24,  -19), S(  18,  -24), S(  21,  -12), S(   5,   -4), S(  -3,    0), S(  10,  -16), S(   2,  -23), S(  15,   -7),
		S(  27,  -35), S(  17,  -17), S(  -7,    3), S(  13,   -2), S(   1,   -1), S(   1,    8), S(  12,   -1), S(   8,  -14),
	},
	{
		S(  14,   12), S( -25,   38), S( -19,   29), S(  -6,   18), S( -24,   28), S( -17,   32), S(  -5,   24), S(   3,   20),
		S(  30,    3), S(  32,   10), S(  12,   16), S(   9,   15), S(  18,   18), S(   4,   30), S(   1,   25), S(   4,   18),
		S(   9,    3), S(  35,    4), S(  18,    4), S(  26,    2), S(   3,   12), S(   1,   22), S(  13,   18), S(  -7,   21),
		S(   4,    6), S(   4,   13), S(  10,    8), S(  11,    1), S(   4,   10), S(   7,   15), S(   6,   16), S(  -6,   17),
		S( -11,   -1), S(  11,    1), S(  -9,    6), S(   8,   -1), S(  -4,    3), S(  -8,    7), S(  -9,    6), S( -14,    7),
		S(   5,  -26), S(  19,  -28), S(  -3,  -17), S(   1,  -18), S( -11,  -10), S( -14,  -11), S( -14,  -11), S( -19,   -9),
		S( -10,  -27), S(  17,  -37), S(   0,  -24), S(   1,  -23), S(  -5,  -19), S(  -6,  -16), S( -15,  -14), S( -18,  -20),
		S( -12,  -33), S(  -9,  -15), S(  -4,  -22), S(   6,  -29), S(  -2,  -25), S(  -9,  -17), S(  -8,  -21), S(  -9,  -18),
	},
	{
		S(  14,  -16), S(  48,  -39), S( -16,   29), S( -11,   19), S(  13,   -5), S( -15,   12), S( -33,    7), S( -11,   -2),
		S(  44,    4), S(   3,   13), S( -18,   31), S( -30,   52), S( -20,   36), S(  -5,   10), S(  -3,  -10), S(   9,   -8),
		S(  19,    7), S(  12,    9), S(   1,   20), S(  -9,   26), S(   3,   16), S(   9,    9), S(   8,   -9), S(  21,  -11),
		S(  11,   15), S(   5,   33), S(   8,    9), S( -10,   31), S(  -7,   29), S(   8,    6), S(   6,   14), S(   6,    6),
		S(   9,    8), S(  13,   10), S(  -1,   14), S(   1,   26), S(  -6,   32), S(  -5,   22), S(   3,   16), S(   0,    9),
		S(  10,  -18), S(   9,   -7), S(  -2,    5), S( -10,   16), S(  -7,   13), S(  -7,   17), S(   4,   -4), S(   4,  -14),
		S(   8,  -53), S(   8,  -63), S(   3,  -39), S(   1,   -9), S(   0,   -2), S(   3,  -17), S(   3,  -21), S(   9,  -33),
		S(   0,  -45), S( -13,  -52), S( -24,  -21), S(  -8,  -22), S(  -7,  -17), S( -10,  -14), S( -13,  -16), S( -14,  -13),
	},
	{
		S( -43,  -50), S( -51,   16), S( -79,    9), S( -66,    5), S(   8,   -6), S(   8,   -6), S(   8,   -6), S(   8,   -6),
		S( -73,   35), S( -22,   62), S( -30,   50), S(  21,   18), S(   8,   -6), S(   8,   -6), S(   8,   -6), S(   8,   -6),
		S(  10,   18), S(  34,   50), S(  42,   41), S(  17,   41), S(   8,   -6), S(   8,   -6), S(   8,   -6), S(   8,   -6),
		S( -27,   16), S(  -7,   44), S(  -2,   35), S( -25,   31), S(   8,   -6), S(   8,   -6), S(   8,   -6), S(   8,   -6),
		S( -48,    6), S( -18,   28), S(  -1,   16), S( -24,   14), S(   8,   -6), S(   8,   -6), S(   8,   -6), S(   8,   -6),
		S(  -9,  -13), S(  18,    6), S(   4,   -4), S(  -2,   -6), S(   8,   -6), S(   8,   -6), S(   8,   -6), S(   8,   -6),
		S(  30,  -31), S(  31,   -7), S(  14,  -16), S(  -3,  -20), S(   8,   -6), S(   8,   -6), S(   8,   -6), S(   8,   -6),
		S(  15,  -62), S(  19,  -26), S(  -3,  -28), S(   7,  -48), S(   8,   -6), S(   8,   -6), S(   8,   -6), S(   8,   -6),
	},
};

constexpr PackedScore MOBILITY[4][28] = {
	{S(  -9,  -23), S( -42,  -62), S( -15,  -30), S(  -7,   -4), S(   3,    8), S(   6,   19), S(  13,   26), S(  22,   33), S(  31,   33), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -14,  -39), S( -47,  -93), S( -25,  -37), S( -18,  -15), S(  -7,   -3), S(  -1,    6), S(   2,   17), S(   7,   21), S(   9,   25), S(  12,   27), S(  13,   28), S(  23,   20), S(  20,   24), S(  31,    7), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -25,  -35), S(  17,  -67), S( -24,  -52), S( -13,  -31), S(  -7,  -24), S(  -3,   -6), S(   0,    0), S(  -5,    9), S(  -1,   13), S(   2,   18), S(   5,   25), S(   5,   33), S(   7,   39), S(  14,   41), S(  21,   37), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -26,   25), S( -52,  -68), S(-102,  -74), S( -76, -257), S( -73,  -92), S( -29,  -32), S( -22,   -7), S( -14,   -4), S(  -5,   -5), S(  -5,   23), S(  -3,   30), S(  -1,   40), S(   2,   43), S(   5,   46), S(   9,   48), S(  11,   50), S(  13,   51), S(  13,   55), S(  14,   53), S(  16,   52), S(  24,   43), S(  33,   23), S(  36,   22), S(  51,    2), S(  54,   -5), S(  54,  -15), S(  41,  -17), S(  10,  -42)}
};

constexpr PackedScore THREAT_BY_PAWN[6] = {S(   3,  -22), S(  66,   30), S(  61,   62), S(  79,   28), S(  75,   -7), S(   0,    0)};
constexpr PackedScore THREAT_BY_KNIGHT[2][6] = {
	{S(   8,   29), S(  26,   27), S(  42,   44), S(  74,   15), S(  56,  -25), S(   0,    0)},
	{S(  -5,   10), S(  13,   26), S(  30,   31), S(  64,   34), S(  57,    1), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_BISHOP[2][6] = {
	{S(  -2,   38), S(  41,   36), S(  -9,   29), S(  68,   18), S(  68,   60), S(   0,    0)},
	{S(  -3,    8), S(  18,   24), S( -22,  -21), S(  43,   48), S(  46,  124), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_ROOK[2][6] = {
	{S(   0,   44), S(  17,   64), S(  27,   58), S(   9,  -27), S(  74,   16), S(   0,    0)},
	{S(  -8,    9), S(   2,   16), S(  14,    4), S(   9,  -74), S(  65,   49), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_QUEEN[2][6] = {
	{S(   6,   10), S(  24,   20), S(   9,   49), S(  18,   17), S(  11,  -52), S(  96,   44)},
	{S(  -1,   11), S(   0,    6), S(  -7,   19), S(  -6,    6), S( -16,  -74), S( 113,   67)}
};
constexpr PackedScore THREAT_BY_KING[6] = {S( -27,   49), S(   4,   53), S(  32,   42), S(  76,    9), S(   0,    0), S(   0,    0)};
constexpr PackedScore PUSH_THREAT = S(  16,   19);

constexpr PackedScore ISOLATED_PAWN[8] = {S(  -9,    6), S(  -4,  -16), S( -12,   -8), S( -11,  -16), S( -11,  -16), S(  -7,   -8), S(  -2,  -15), S( -11,    7)};
constexpr PackedScore DOUBLED_PAWN[8] = {S(  -5,  -63), S(   9,  -38), S(  -2,  -31), S(  -4,  -21), S(  -6,  -15), S( -17,  -20), S(   6,  -43), S(   1,  -75)};
constexpr PackedScore BACKWARDS_PAWN[8] = {S(   0,    0), S(  -6,  -14), S(  -2,  -14), S(  -9,  -12), S(   3,  -17), S(  31,   -8), S(   0,    0), S(   0,    0)};
constexpr PackedScore PAWN_PHALANX[8] = {S(   0,    0), S(   4,   -4), S(  11,   -2), S(  20,    7), S(  41,   40), S( 100,  222), S( -22,  348), S(   0,    0)};
constexpr PackedScore DEFENDED_PAWN[8] = {S(   0,    0), S(   0,    0), S(  19,    7), S(  11,    7), S(  17,   21), S(  28,   63), S( 134,   77), S(   0,    0)};
constexpr PackedScore CANDIDATE_PASSER[2][8] = {
	{S(   0,    0), S( -39,  -11), S( -20,   -7), S(  -1,   30), S(  30,   56), S(  61,   85), S(   0,    0), S(   0,    0)},
	{S(   0,    0), S( -21,   -6), S( -10,   15), S(  -5,   31), S(  21,   43), S(  37,  150), S(   0,    0), S(   0,    0)}
};

constexpr PackedScore PASSED_PAWN[2][2][8] = {
	{
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -36,  -40), S( -15,   26), S(  -4,  155), S(  36,  236), S(   0,    0)},
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -24,  -53), S(   9,  -21), S(  29,   21), S(  60,   34), S(   0,    0)}
	},
	{
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -32,  -58), S(  -1,  -24), S(  29,    7), S(  66,   -4), S(   0,    0)},
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -33,  -62), S(  -1,  -34), S(   8,  -14), S(  -6,  -19), S(   0,    0)}
	}
};
constexpr PackedScore OUR_PASSER_PROXIMITY[8] = {S(   0,    0), S(  37,   85), S(   4,   69), S(   2,   43), S(   6,   31), S(  12,   23), S(  21,   21), S(  16,   18)};
constexpr PackedScore THEIR_PASSER_PROXIMITY[8] = {S(   0,    0), S( -42,    7), S(  22,    0), S(  15,   27), S(  19,   47), S(  13,   79), S(  15,   80), S(  17,   69)};

constexpr PackedScore PAWN_STORM[2][4][8] = {
	{
		{S(  16,   14), S(-132,  -49), S( -13,   -7), S(   3,  -13), S(   0,   -1), S(  -5,    9), S(  -3,    8), S(   0,    0)},
		{S(  12,    4), S( -22, -100), S(  37,  -41), S(   7,  -12), S(   2,   -5), S( -10,    7), S(  -7,    9), S(   0,    0)},
		{S(  -3,    6), S(  55,  -96), S(  62,  -45), S(  18,  -18), S(   3,   -1), S(  -6,    7), S(  -8,   12), S(   0,    0)},
		{S(   9,   -7), S( 107,  -85), S(  33,  -22), S(  14,   -2), S(  -2,    3), S(  -8,    0), S(  -3,    1), S(   0,    0)}
	},
	{
		{S(   0,    0), S(  -3,  -28), S( -31,  120), S(   7,  -31), S(  -3,    8), S(  -2,    5), S(  -4,    9), S(   0,    0)},
		{S(   0,    0), S(  10,  -94), S(  -9,   73), S(  52,  -39), S(   3,    2), S(  -7,    6), S(  -7,    8), S(   0,    0)},
		{S(   0,    0), S(  -6,   18), S( -61, -114), S(  21,  -27), S(   3,    4), S(  -1,    5), S(  -9,   11), S(   0,    0)},
		{S(   0,    0), S(  -7,  -47), S(  61,   -7), S(  21,   -1), S(   0,    8), S(   1,  -10), S(   0,    7), S(   0,    0)}
	}
};
constexpr PackedScore PAWN_SHIELD[4][8] = {
	{S(  16,    1), S(  -7,   25), S( -15,   16), S(  -3,    8), S(   4,    1), S( -40,  -25), S( -81,  -33), S(   0,    0)},
	{S(  17,    0), S( -12,   10), S( -10,    8), S(  11,   -2), S(   8,  -12), S( -13,  -17), S( -54,  -29), S(   0,    0)},
	{S(   4,    8), S( -16,    8), S(  16,    4), S(   2,   -1), S(  -2,   -1), S(   4,  -19), S( -16,  -40), S(   0,    0)},
	{S(  14,   -4), S(   5,   -3), S(  -3,    0), S(   1,   -6), S(   8,   -9), S(  28,  -22), S( -10,  -24), S(   0,    0)}
};
constexpr PackedScore SAFE_KNIGHT_CHECK = S(  90,   -3);
constexpr PackedScore SAFE_BISHOP_CHECK = S(  16,   21);
constexpr PackedScore SAFE_ROOK_CHECK = S(  72,    8);
constexpr PackedScore SAFE_QUEEN_CHECK = S(  28,   32);
constexpr PackedScore UNSAFE_KNIGHT_CHECK = S(   9,    0);
constexpr PackedScore UNSAFE_BISHOP_CHECK = S(  15,   10);
constexpr PackedScore UNSAFE_ROOK_CHECK = S(  22,   -2);
constexpr PackedScore UNSAFE_QUEEN_CHECK = S(   6,   10);
constexpr PackedScore KING_ATTACKER_WEIGHT[4] = {S(  18,   -3), S(  14,   -3), S(  15,  -16), S(   4,    5)};
constexpr PackedScore KING_ATTACKS[14] = {S( -37,    9), S( -44,    7), S( -49,    5), S( -52,    8), S( -51,    7), S( -44,    4), S( -29,    1), S( -12,   -7), S(  16,  -20), S(  38,  -15), S(  55,  -23), S(  60,   18), S(  83,  -18), S(  73,   24)};
constexpr PackedScore WEAK_KING_RING[17] = {S( -31,   46), S( -30,   26), S( -24,   22), S( -22,   19), S( -15,   12), S(  -5,    6), S(   5,    1), S(  20,   -3), S(  37,   -6), S(  51,   -9), S(  63,  -11), S(  66,   -7), S(  78,  -10), S(  80,  -12), S(  80,   -8), S(  99,  -13), S( 108,  -14)};

constexpr PackedScore MINOR_BEHIND_PAWN = S(   7,   14);
constexpr PackedScore KNIGHT_OUTPOST = S(  25,   17);
constexpr PackedScore BISHOP_PAWNS[7] = {S(   4,   23), S(   6,   21), S(   4,   13), S(   1,    5), S(  -3,   -5), S(  -3,  -19), S(  -7,  -33)};
constexpr PackedScore BISHOP_PAIR = S(  20,   63);
constexpr PackedScore LONG_DIAG_BISHOP = S(  15,    8);
constexpr PackedScore ROOK_OPEN[2] = {S(  26,    3), S(  15,    4)};

constexpr PackedScore TEMPO = S(  32,   35);

constexpr PackedScore COMPLEXITY_PAWNS = S(   0,    8);
constexpr PackedScore COMPLEXITY_PASSERS = S(   0,    1);
constexpr PackedScore COMPLEXITY_PAWNS_BOTH_SIDES = S(   0,   69);
constexpr PackedScore COMPLEXITY_PAWN_ENDGAME = S(   0,   65);
constexpr PackedScore COMPLEXITY_OFFSET = S(   0, -131);

#undef S


}