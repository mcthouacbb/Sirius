#pragma once

#include "../defs.h"

namespace eval
{

#define S(mg, eg) PackedScore(mg, eg)

constexpr PackedScore MATERIAL[6] = {S(  61,  134), S( 288,  445), S( 315,  451), S( 389,  814), S( 800, 1494), S(0, 0)};

constexpr PackedScore PSQT[6][64] = {
	{
		S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
		S(  66,   75), S(  30,   95), S(  33,   93), S(  54,   76), S(  65,   67), S(  32,   95), S(  31,  106), S(  64,   83),
		S(  23,   15), S(  27,   43), S(  28,    8), S(  53,  -26), S(  38,  -18), S(  22,    1), S(  -1,   37), S(   6,   20),
		S(  18,    9), S(   7,   15), S(   9,   -8), S(  16,  -23), S(   5,  -22), S(  -2,   -8), S(  -7,   15), S( -12,   12),
		S(   9,    0), S(   5,   16), S(   7,  -15), S(  13,  -15), S(   8,  -14), S(  -4,   -8), S( -15,   14), S( -15,    1),
		S(   3,   -3), S(   9,   12), S(  13,   -4), S(  -2,    1), S(  -7,    0), S( -15,   -5), S( -25,   12), S( -27,    0),
		S(  17,   -4), S(  31,    7), S(  15,   -8), S(   7,    7), S(  -6,    1), S(  -8,   -4), S( -16,   17), S( -17,    4),
		S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
	},
	{
		S( -69,  -85), S( -78,  -19), S( -31,  -12), S(  13,  -12), S( -40,    8), S( -69,   10), S(-108,   17), S( -81,  -44),
		S( -10,   -8), S(  22,    1), S(  31,   -6), S(   6,    3), S(   7,    9), S(   1,   12), S(  -5,   20), S( -11,   10),
		S(  13,   -7), S(  12,   -2), S(  55,  -19), S(  37,    1), S(  20,    9), S(  12,    6), S(   3,    6), S(  -8,    6),
		S(  33,    3), S(  34,    7), S(  46,    5), S(  35,   13), S(  30,   18), S(  30,    7), S(  19,    3), S(   7,   16),
		S(  12,   16), S(  20,   12), S(  30,    8), S(  20,   22), S(  25,   14), S(  21,   13), S(  20,    2), S(   2,   11),
		S(   3,   -1), S(  18,   -3), S(  10,   -9), S(  17,    9), S(   7,    8), S(  -1,   -5), S(   0,   -5), S( -14,   -1),
		S(   4,    7), S(   5,   -4), S(   5,   -8), S(   4,   -2), S(   5,   -2), S(  -7,   -5), S( -12,   -3), S( -19,   -1),
		S( -10,   -6), S( -11,    0), S(  -2,   -9), S(  -1,    3), S(  -9,    1), S( -22,   -6), S( -15,   -3), S( -49,   10),
	},
	{
		S( -35,   -5), S( -35,    6), S( -10,    0), S( -73,   11), S( -68,   18), S( -50,    3), S( -22,    7), S( -14,   16),
		S( -21,   -6), S( -38,   12), S( -13,    0), S(  -5,   -2), S( -22,    9), S(   1,   -3), S(  -1,    1), S(  -3,   -5),
		S(  17,   11), S(  12,    0), S(  38,    6), S(   8,    4), S(  14,    0), S(   7,    4), S(   6,    6), S(   6,    4),
		S(  -6,    5), S(   6,    8), S(   5,   11), S(  16,   13), S(  17,   19), S(  12,    5), S(   3,    9), S(  -8,    6),
		S(  13,   -4), S(   2,    8), S(   5,    6), S(   8,   11), S(  14,    8), S(  -4,   13), S(  -3,    6), S(  -1,    2),
		S(  22,   -9), S(  23,   -9), S(  13,   -2), S(   3,    8), S(  -5,    4), S(   6,    3), S(  10,    2), S(   0,   -5),
		S(  23,  -19), S(  30,  -23), S(  20,  -13), S(   4,   -5), S(  -4,    0), S(   8,  -18), S(   6,  -18), S(  14,   -7),
		S(  35,  -28), S(  20,  -18), S(  -4,    1), S(  15,   -3), S(   0,   -1), S(   1,    8), S(  11,   -1), S(  12,   -9),
	},
	{
		S(  16,    9), S( -21,   37), S(  -3,   24), S(  -1,   15), S( -15,   24), S( -18,   31), S(  -7,   24), S(   1,   20),
		S(  28,    4), S(  35,    8), S(  17,   15), S(   7,   15), S(  15,   18), S(   0,   30), S(  -2,   25), S(  -1,   18),
		S(  10,    3), S(  37,    4), S(  23,    3), S(  22,    3), S(  -1,   13), S(  -4,   23), S(   8,   19), S( -11,   20),
		S(   6,    6), S(   8,   12), S(  11,   10), S(   9,    2), S(   1,   12), S(   4,   16), S(   3,   16), S( -10,   17),
		S(  -7,   -2), S(  14,    1), S(  -7,    7), S(   5,    1), S(  -7,    4), S( -10,    8), S( -12,    7), S( -16,    7),
		S(   9,  -27), S(  22,  -29), S(  -2,  -17), S(   0,  -17), S( -12,  -10), S( -16,  -10), S( -15,  -12), S( -21,   -9),
		S(  -4,  -30), S(  23,  -38), S(   3,  -24), S(   2,  -24), S(  -5,  -20), S(  -6,  -18), S( -16,  -14), S( -19,  -20),
		S( -10,  -35), S(  -6,  -16), S(  -3,  -21), S(   4,  -28), S(  -3,  -24), S( -10,  -17), S( -10,  -20), S( -11,  -17),
	},
	{
		S(   8,  -14), S(  45,  -40), S(  -8,   25), S(   0,    6), S(  17,  -12), S( -13,    7), S( -36,    9), S( -13,    0),
		S(  42,    3), S(   0,   13), S( -19,   30), S( -39,   53), S( -26,   35), S(  -9,    7), S(  -5,  -13), S(   7,  -11),
		S(  22,    4), S(  14,    6), S(   9,   19), S( -16,   23), S(  -2,   15), S(   6,    6), S(   8,  -16), S(  19,  -15),
		S(  12,   16), S(   5,   35), S(   6,   12), S( -11,   31), S(  -9,   30), S(   4,    4), S(   3,   10), S(   3,    1),
		S(  11,   14), S(  16,   12), S(  -2,   21), S(   3,   26), S(  -6,   31), S(  -7,   21), S(   1,   12), S(  -2,    4),
		S(  16,  -16), S(  15,   -5), S(   2,    7), S(  -9,   21), S(  -8,   15), S(  -8,   17), S(   3,   -7), S(   2,  -17),
		S(  14,  -48), S(  18,  -58), S(   7,  -35), S(   3,   -2), S(   1,    0), S(   3,  -16), S(   2,  -20), S(   9,  -35),
		S(   5,  -44), S(  -9,  -43), S( -18,  -17), S(  -8,  -16), S(  -8,  -13), S( -12,  -11), S( -15,  -15), S( -15,  -11),
	},
	{
		S(  -3,  -63), S(   3,   -3), S( -36,   -3), S( -20,  -10), S(   6,   -5), S(   6,   -5), S(   6,   -5), S(   6,   -5),
		S( -57,   31), S(  -5,   59), S( -16,   48), S(  30,   18), S(   6,   -5), S(   6,   -5), S(   6,   -5), S(   6,   -5),
		S(  -6,   22), S(  28,   53), S(  34,   43), S(   6,   43), S(   6,   -5), S(   6,   -5), S(   6,   -5), S(   6,   -5),
		S( -43,   19), S( -19,   47), S(  -9,   37), S( -36,   33), S(   6,   -5), S(   6,   -5), S(   6,   -5), S(   6,   -5),
		S( -64,    9), S( -34,   31), S( -17,   19), S( -39,   17), S(   6,   -5), S(   6,   -5), S(   6,   -5), S(   6,   -5),
		S( -21,  -10), S(   2,    9), S( -10,   -1), S( -16,   -3), S(   6,   -5), S(   6,   -5), S(   6,   -5), S(   6,   -5),
		S(  29,  -31), S(  28,   -7), S(  11,  -15), S(  -6,  -19), S(   6,   -5), S(   6,   -5), S(   6,   -5), S(   6,   -5),
		S(  17,  -62), S(  18,  -25), S(  -1,  -30), S(   9,  -50), S(   6,   -5), S(   6,   -5), S(   6,   -5), S(   6,   -5),
	},
};

constexpr PackedScore MOBILITY[4][28] = {
	{S( -11,  -25), S( -40,  -62), S( -15,  -30), S(  -7,   -5), S(   4,    8), S(   6,   19), S(  14,   26), S(  22,   33), S(  31,   33), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -23,  -40), S( -51,  -96), S( -29,  -38), S( -22,  -15), S( -11,   -3), S(  -4,    6), S(   1,   17), S(   6,   21), S(   8,   27), S(  13,   28), S(  15,   30), S(  27,   21), S(  27,   25), S(  44,    6), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -32,  -36), S(  12,  -64), S( -25,  -54), S( -13,  -33), S(  -6,  -25), S(  -2,   -7), S(   0,   -1), S(  -4,    8), S(   0,   12), S(   3,   17), S(   6,   24), S(   7,   32), S(   9,   38), S(  16,   40), S(  24,   36), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -39,   13), S( -56,  -71), S(-103,  -73), S( -78, -246), S( -74,  -94), S( -29,  -38), S( -22,   -8), S( -13,   -7), S(  -5,   -5), S(  -4,   21), S(  -2,   28), S(   1,   38), S(   3,   42), S(   7,   44), S(  10,   47), S(  13,   49), S(  14,   50), S(  14,   54), S(  16,   54), S(  18,   53), S(  27,   43), S(  35,   25), S(  39,   22), S(  57,    1), S(  61,   -5), S(  65,  -16), S(  44,  -13), S(  11,  -33)}
};

constexpr PackedScore THREAT_BY_PAWN[6] = {S(   9,  -16), S(  64,   31), S(  62,   62), S(  79,   28), S(  75,   -5), S(   0,    0)};
constexpr PackedScore THREAT_BY_KNIGHT[2][6] = {
	{S(   9,   30), S(  26,   28), S(  42,   44), S(  73,   15), S(  57,  -26), S(   0,    0)},
	{S(  -4,   10), S(  13,   27), S(  30,   31), S(  64,   34), S(  58,    2), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_BISHOP[2][6] = {
	{S(   1,   38), S(  43,   35), S(  -9,   26), S(  70,   16), S(  69,   63), S(   0,    0)},
	{S(   0,    8), S(  22,   24), S( -22,  -22), S(  44,   48), S(  47,  128), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_ROOK[2][6] = {
	{S(   0,   44), S(  18,   64), S(  28,   58), S(   9,  -29), S(  75,   14), S(   0,    0)},
	{S(  -8,    9), S(   2,   17), S(  14,    4), S(   7,  -74), S(  65,   51), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_QUEEN[2][6] = {
	{S(   6,   11), S(  25,   20), S(  10,   48), S(  18,   16), S(  10,  -50), S(  97,   45)},
	{S(  -1,   11), S(   0,    7), S(  -6,   19), S(  -6,    7), S( -17,  -71), S( 111,   75)}
};
constexpr PackedScore THREAT_BY_KING[6] = {S( -29,   49), S(   3,   53), S(  29,   44), S(  75,    8), S(   0,    0), S(   0,    0)};
constexpr PackedScore PUSH_THREAT = S(  16,   19);

constexpr PackedScore ISOLATED_PAWN[8] = {S(  -7,    6), S(  -4,  -16), S( -11,   -9), S( -11,  -17), S( -11,  -16), S(  -6,   -8), S(  -2,  -15), S(  -9,    7)};
constexpr PackedScore DOUBLED_PAWN[8] = {S(  -3,  -64), S(   9,  -38), S(  -1,  -30), S(  -3,  -21), S(  -6,  -15), S( -16,  -19), S(   6,  -42), S(   2,  -76)};
constexpr PackedScore BACKWARDS_PAWN[8] = {S(   0,    0), S(  -6,  -12), S(  -1,  -14), S(  -9,  -12), S(   1,  -21), S(  21,   -9), S(   0,    0), S(   0,    0)};
constexpr PackedScore PAWN_PHALANX[8] = {S(   0,    0), S(   5,   -5), S(  12,   -1), S(  19,   13), S(  48,   63), S( 116,  223), S( -23,  352), S(   0,    0)};
constexpr PackedScore DEFENDED_PAWN[8] = {S(   0,    0), S(   0,    0), S(  20,    7), S(  12,    8), S(  15,   21), S(  20,   65), S( 132,   77), S(   0,    0)};

constexpr PackedScore PASSED_PAWN[2][2][8] = {
	{
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -32,  -40), S( -13,   25), S( -16,  154), S(  34,  239), S(   0,    0)},
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -21,  -52), S(  11,  -23), S(  18,   18), S(  60,   36), S(   0,    0)}
	},
	{
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -30,  -56), S(   0,  -25), S(  17,    4), S(  66,   -2), S(   0,    0)},
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -30,  -61), S(   1,  -34), S(  -5,  -17), S(  -5,  -20), S(   0,    0)}
	}
};
constexpr PackedScore OUR_PASSER_PROXIMITY[8] = {S(   0,    0), S(  45,   83), S(   1,   69), S(   1,   42), S(   4,   30), S(  10,   23), S(  20,   20), S(  13,   20)};
constexpr PackedScore THEIR_PASSER_PROXIMITY[8] = {S(   0,    0), S( -37,    5), S(  22,   -1), S(  13,   26), S(  17,   46), S(  11,   79), S(  13,   80), S(  16,   68)};

constexpr PackedScore PAWN_STORM[2][4][8] = {
	{
		{S(  16,   14), S(-134,  -50), S(  -3,  -10), S(   5,  -13), S(   0,   -1), S(  -5,   10), S(  -4,    8), S(   0,    0)},
		{S(  11,    3), S( -11, -102), S(  53,  -42), S(   8,  -11), S(   2,   -5), S( -11,    7), S(  -7,    9), S(   0,    0)},
		{S(  -3,    6), S(  59,  -98), S(  68,  -45), S(  19,  -18), S(   3,   -1), S(  -7,    7), S(  -8,   12), S(   0,    0)},
		{S(   7,   -7), S( 106,  -87), S(  39,  -22), S(  14,   -2), S(  -2,    3), S(  -9,    0), S(  -3,    0), S(   0,    0)}
	},
	{
		{S(   0,    0), S(  -3,  -27), S( -25,  120), S(  10,  -43), S(  -2,    8), S(  -2,    5), S(  -5,    9), S(   0,    0)},
		{S(   0,    0), S(   8,  -89), S(  -2,   83), S(  57,  -42), S(   3,    2), S(  -7,    6), S(  -8,    8), S(   0,    0)},
		{S(   0,    0), S(  -6,   18), S( -48, -118), S(  22,  -29), S(   2,    4), S(  -2,    5), S(  -9,   11), S(   0,    0)},
		{S(   0,    0), S( -12,  -52), S(  66,  -12), S(  22,   -2), S(   1,    8), S(   0,   -9), S(   0,    5), S(   0,    0)}
	}
};
constexpr PackedScore PAWN_SHIELD[4][8] = {
	{S(  17,    1), S(  -8,   26), S( -15,   17), S(  -3,    9), S(   3,    1), S( -32,  -26), S( -77,  -38), S(   0,    0)},
	{S(  19,   -1), S( -15,   12), S( -10,    8), S(  12,   -2), S(   9,  -12), S(  -3,  -19), S( -50,  -30), S(   0,    0)},
	{S(   5,    8), S( -15,    7), S(  16,    5), S(   2,   -1), S(  -1,   -1), S(   6,  -19), S( -14,  -41), S(   0,    0)},
	{S(  13,   -4), S(   5,   -2), S(  -3,    0), S(   0,   -5), S(   8,   -9), S(  30,  -21), S( -14,  -22), S(   0,    0)}
};
constexpr PackedScore SAFE_KNIGHT_CHECK = S(  99,   -4);
constexpr PackedScore SAFE_BISHOP_CHECK = S(  18,   22);
constexpr PackedScore SAFE_ROOK_CHECK = S(  75,    8);
constexpr PackedScore SAFE_QUEEN_CHECK = S(  30,   31);
constexpr PackedScore UNSAFE_KNIGHT_CHECK = S(   8,    0);
constexpr PackedScore UNSAFE_BISHOP_CHECK = S(  15,   10);
constexpr PackedScore UNSAFE_ROOK_CHECK = S(  22,   -2);
constexpr PackedScore UNSAFE_QUEEN_CHECK = S(   6,   11);
constexpr PackedScore KING_ATTACKER_WEIGHT[4] = {S(  15,   -3), S(  11,   -2), S(  12,  -15), S(   1,    5)};
constexpr PackedScore KING_ATTACKS[14] = {S( -54,    6), S( -57,    3), S( -60,    0), S( -60,    4), S( -57,    3), S( -47,    2), S( -30,   -1), S( -10,   -8), S(  21,  -20), S(  45,  -14), S(  64,  -19), S(  70,   27), S(  99,  -18), S(  88,   30)};

constexpr PackedScore MINOR_BEHIND_PAWN = S(   7,   14);
constexpr PackedScore KNIGHT_OUTPOST = S(  26,   18);
constexpr PackedScore BISHOP_PAWNS[7] = {S(   4,   23), S(   6,   21), S(   3,   13), S(   0,    5), S(  -4,   -5), S(  -4,  -19), S(  -9,  -33)};
constexpr PackedScore BISHOP_PAIR = S(  20,   63);
constexpr PackedScore ROOK_OPEN[2] = {S(  26,    3), S(  15,    4)};

constexpr PackedScore TEMPO = S(  32,   36);

constexpr PackedScore COMPLEXITY_PAWNS = S(   0,    8);
constexpr PackedScore COMPLEXITY_PASSERS = S(   0,    1);
constexpr PackedScore COMPLEXITY_PAWNS_BOTH_SIDES = S(   0,   69);
constexpr PackedScore COMPLEXITY_PAWN_ENDGAME = S(   0,   65);
constexpr PackedScore COMPLEXITY_OFFSET = S(   0, -133);

#undef S


}