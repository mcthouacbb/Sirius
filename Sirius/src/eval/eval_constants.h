#pragma once

#include "../defs.h"

namespace eval
{

#define S(mg, eg) PackedScore(mg, eg)

constexpr PackedScore MATERIAL[6] = {S(  61,  132), S( 337,  421), S( 321,  438), S( 411,  797), S( 830, 1522), S(0, 0)};

constexpr PackedScore PSQT[6][64] = {
	{
		S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
		S(  65,   76), S(  26,   95), S(  30,   92), S(  51,   76), S(  63,   67), S(  33,   94), S(  28,  107), S(  65,   83),
		S(   7,   14), S(  -1,   43), S(  12,    5), S(  27,  -26), S(  16,  -20), S(   5,    1), S( -16,   35), S(  -2,   19),
		S(  14,   10), S(   4,   15), S(   8,   -9), S(  11,  -23), S(  -1,  -22), S(  -4,   -8), S(  -9,   14), S( -11,   12),
		S(   6,    2), S(   2,   18), S(   8,  -14), S(  15,  -14), S(   9,  -13), S(  -3,   -7), S( -15,   16), S( -13,    2),
		S(   0,   -1), S(  10,   14), S(  16,   -3), S(  -1,    2), S(  -6,    0), S( -11,   -4), S( -23,   13), S( -25,    0),
		S(  13,   -2), S(  28,    8), S(  15,   -7), S(   8,    6), S(  -6,   -1), S(  -5,   -4), S( -14,   17), S( -15,    4),
		S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
	},
	{
		S( -76,  -99), S( -79,  -28), S( -39,  -11), S(  -2,   -8), S( -41,    7), S( -71,    8), S(-101,    7), S( -83,  -58),
		S( -19,  -14), S(  10,    4), S(  13,    3), S(  -3,    8), S(   1,   11), S(  -7,   18), S(  -5,   19), S(  -6,    1),
		S(  -2,   -3), S(  -9,    7), S(  33,   -4), S(  23,   14), S(  11,   21), S(   3,   17), S(   1,    8), S(  -3,    2),
		S(  24,    5), S(  25,   13), S(  34,   16), S(  23,   22), S(  17,   28), S(  23,   16), S(  18,    6), S(  15,   11),
		S(   9,   16), S(  16,   15), S(  23,   17), S(  17,   27), S(  18,   22), S(  13,   21), S(  21,    4), S(  13,    4),
		S(  14,    0), S(  19,    1), S(  18,   -2), S(  14,   15), S(   7,   14), S(   2,    0), S(   4,   -4), S(  -3,   -7),
		S(  14,   -3), S(  22,  -10), S(  15,   -9), S(  20,   -5), S(  14,   -4), S(   4,   -6), S(   3,   -9), S(  -8,  -11),
		S(   7,  -25), S(   7,  -15), S(  14,  -19), S(  22,   -7), S(  14,   -9), S(  -1,  -15), S(   5,  -21), S( -30,  -13),
	},
	{
		S( -43,  -16), S( -30,    4), S(  -5,   -2), S( -75,   15), S( -63,   17), S( -51,    3), S( -22,    4), S( -32,    6),
		S( -25,   -6), S( -50,    9), S( -13,    5), S(  -3,    3), S( -21,   14), S(   1,    3), S( -17,   -2), S(  -4,   -6),
		S(  11,   16), S(   9,    6), S(  21,   11), S(   8,   13), S(  15,    9), S(  -5,    6), S(   7,   10), S(   4,    2),
		S( -11,    7), S(   7,   11), S(   6,   18), S(  17,   22), S(  17,   29), S(  15,   12), S(   3,   15), S(  -7,    4),
		S(  16,   -7), S(   0,   12), S(   6,   13), S(   9,   19), S(  19,   15), S(  -1,   19), S(   0,    7), S(   2,   -3),
		S(  20,  -13), S(  25,   -6), S(   5,   -4), S(   9,   11), S(   1,    7), S(   1,   -1), S(  16,    1), S(   4,  -12),
		S(  29,  -26), S(  20,  -25), S(  28,  -13), S(   7,   -6), S(   0,   -3), S(  12,  -20), S(   4,  -28), S(  15,  -16),
		S(  28,  -48), S(  21,  -24), S(  -6,   -5), S(  19,  -11), S(   4,  -10), S(   4,   -7), S(  18,  -12), S(   9,  -27),
	},
	{
		S(  12,    8), S( -19,   32), S( -26,   30), S( -17,   21), S( -31,   30), S( -24,   33), S(  -2,   19), S(   7,   13),
		S(  25,    3), S(  21,   14), S(   0,   22), S(  -7,   23), S(   4,   26), S(  -2,   33), S(  -1,   25), S(   8,   14),
		S(   0,    4), S(  23,    7), S(   4,   10), S(  10,   10), S(  -7,   17), S(  -5,   23), S(  11,   16), S(  -3,   14),
		S(  -3,    7), S(  -5,   16), S(  -1,   14), S(  -3,    8), S(  -8,   16), S(   0,   18), S(   3,   15), S(  -2,   12),
		S( -12,   -1), S(   8,    5), S( -14,   11), S(   0,    4), S( -10,    7), S( -12,    9), S(  -9,    6), S(  -6,    2),
		S(  11,  -26), S(  26,  -27), S(   1,  -16), S(   2,  -17), S( -10,   -9), S( -12,  -11), S(  -9,  -12), S(  -9,  -13),
		S(   2,  -33), S(  31,  -41), S(  11,  -28), S(  10,  -27), S(   4,  -23), S(   3,  -20), S(  -6,  -18), S(  -7,  -25),
		S(   8,  -45), S(  11,  -26), S(  14,  -29), S(  23,  -35), S(  15,  -32), S(   8,  -25), S(   8,  -29), S(   7,  -27),
	},
	{
		S(  -7,   -5), S(  36,  -37), S( -32,   33), S( -27,   18), S(   6,  -12), S( -24,   14), S( -35,    8), S( -25,   16),
		S(  29,   10), S(  -9,   21), S( -33,   31), S( -50,   55), S( -37,   41), S( -13,   11), S(  -5,   -4), S(  10,   -2),
		S(  -2,   12), S(  -8,   15), S( -17,   23), S( -27,   29), S( -13,   21), S(  -3,   13), S(   3,   -4), S(  20,   -5),
		S(  -3,   15), S(  -7,   33), S(  -4,    8), S( -25,   30), S( -21,   30), S(   0,    6), S(   2,   16), S(   7,    9),
		S(   8,    6), S(   7,   11), S(  -5,   12), S(  -5,   24), S( -13,   32), S(  -8,   20), S(   4,   15), S(   7,    9),
		S(  20,  -23), S(  18,   -9), S(   7,    1), S(  -4,   10), S(  -2,    8), S(  -1,   11), S(  12,   -8), S(  21,  -21),
		S(  21,  -46), S(  23,  -64), S(  19,  -42), S(  16,  -15), S(  15,   -8), S(  16,  -21), S(  15,  -25), S(  23,  -38),
		S(  26,  -51), S(  12,  -55), S(   1,  -26), S(  17,  -27), S(  17,  -23), S(  14,  -20), S(  11,  -22), S(   9,  -18),
	},
	{
		S( -38,  -51), S( -52,   19), S( -72,    8), S( -69,   11), S(   4,   -6), S(   4,   -6), S(   4,   -6), S(   4,   -6),
		S( -64,   31), S( -20,   60), S( -31,   51), S(  16,   22), S(   4,   -6), S(   4,   -6), S(   4,   -6), S(   4,   -6),
		S(  16,   15), S(  41,   46), S(  43,   39), S(  24,   38), S(   4,   -6), S(   4,   -6), S(   4,   -6), S(   4,   -6),
		S( -26,   14), S(   2,   39), S(   4,   31), S( -22,   28), S(   4,   -6), S(   4,   -6), S(   4,   -6), S(   4,   -6),
		S( -41,    2), S(  -8,   22), S(   6,   12), S( -16,   10), S(   4,   -6), S(   4,   -6), S(   4,   -6), S(   4,   -6),
		S(  -5,  -15), S(  30,    0), S(  16,   -8), S(   9,  -10), S(   4,   -6), S(   4,   -6), S(   4,   -6), S(   4,   -6),
		S(  28,  -31), S(  37,  -11), S(  20,  -18), S(   5,  -22), S(   4,   -6), S(   4,   -6), S(   4,   -6), S(   4,   -6),
		S(  -2,  -51), S(   8,  -18), S( -12,  -21), S(  -6,  -39), S(   4,   -6), S(   4,   -6), S(   4,   -6), S(   4,   -6),
	},
};

constexpr PackedScore MOBILITY[4][28] = {
	{S( -13,  -30), S( -39,  -48), S( -17,  -17), S(  -9,    0), S(   2,    8), S(   7,   19), S(  14,   22), S(  23,   26), S(  34,   19), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -26,  -42), S( -36,  -59), S( -23,  -29), S( -15,  -11), S(  -6,   -2), S(   0,    8), S(   3,   16), S(   7,   19), S(   8,   21), S(  11,   21), S(  13,   21), S(  19,   14), S(  18,   21), S(  27,   -2), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -20,  -50), S( -32,  -72), S( -18,  -47), S(  -5,  -26), S(  -2,  -12), S(  -4,   -1), S(  -3,    5), S(   1,   11), S(   4,   13), S(   9,   18), S(   9,   26), S(  11,   32), S(  15,   35), S(  20,   35), S(  28,   32), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -31,   19), S( -63,  -73), S( -94, -105), S( -35, -201), S( -31,  -71), S( -23,  -13), S( -15,  -22), S( -12,   -1), S( -11,   19), S(  -8,   28), S(  -5,   31), S(  -1,   33), S(  -1,   44), S(   4,   42), S(   5,   47), S(   7,   48), S(   8,   50), S(  11,   50), S(  10,   52), S(  17,   44), S(  25,   34), S(  33,   17), S(  38,   17), S(  47,    0), S(  58,   -7), S(  56,  -19), S(  34,  -10), S( -13,  -32)}
};

constexpr PackedScore THREAT_BY_PAWN[6] = {S(   5,  -21), S(  66,   30), S(  61,   60), S(  78,   27), S(  75,   -6), S(   0,    0)};
constexpr PackedScore THREAT_BY_KNIGHT[2][6] = {
	{S(   7,   29), S(  22,   35), S(  40,   45), S(  73,   15), S(  55,  -24), S(   0,    0)},
	{S(  -7,    8), S(  10,   32), S(  28,   29), S(  64,   35), S(  57,    0), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_BISHOP[2][6] = {
	{S(  -2,   36), S(  39,   35), S( -12,   35), S(  68,   17), S(  67,   59), S(   0,    0)},
	{S(  -4,    5), S(  17,   23), S( -25,  -15), S(  43,   48), S(  45,  123), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_ROOK[2][6] = {
	{S(   0,   43), S(  17,   61), S(  27,   56), S(   8,  -40), S(  74,   11), S(   0,    0)},
	{S(  -6,    7), S(   2,   15), S(  13,    2), S(   8,  -87), S(  65,   46), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_QUEEN[2][6] = {
	{S(   6,   10), S(  23,   20), S(   9,   50), S(  18,   17), S(  10,  -51), S(  96,   43)},
	{S(  -2,   10), S(   0,    5), S(  -8,   17), S(  -5,    1), S( -17,  -74), S( 111,   62)}
};
constexpr PackedScore THREAT_BY_KING[6] = {S( -25,   49), S(  20,   44), S(  34,   37), S(  85,    2), S(   0,    0), S(   0,    0)};
constexpr PackedScore PUSH_THREAT = S(  14,   20);

constexpr PackedScore ISOLATED_PAWN[8] = {S(  -8,    5), S(  -4,  -16), S( -12,   -9), S( -10,  -17), S( -11,  -16), S(  -7,   -8), S(  -1,  -15), S( -10,    7)};
constexpr PackedScore DOUBLED_PAWN[8] = {S(   0,  -62), S(  13,  -38), S(   1,  -29), S(   1,  -21), S(  -3,  -15), S( -12,  -20), S(   8,  -42), S(   9,  -77)};
constexpr PackedScore BACKWARDS_PAWN[8] = {S(   0,    0), S(  -7,  -14), S(  -2,  -14), S(  -8,  -12), S(   2,  -16), S(  32,  -13), S(   0,    0), S(   0,    0)};
constexpr PackedScore PAWN_PHALANX[8] = {S(   0,    0), S(   4,   -4), S(  10,   -3), S(  20,    7), S(  43,   39), S(  90,  233), S( -14,  345), S(   0,    0)};
constexpr PackedScore DEFENDED_PAWN[8] = {S(   0,    0), S(   0,    0), S(  19,    7), S(  11,    7), S(  16,   21), S(  27,   63), S( 132,   78), S(   0,    0)};
constexpr PackedScore CANDIDATE_PASSER[2][8] = {
	{S(   0,    0), S( -37,  -15), S( -20,   -6), S(   0,   29), S(  29,   57), S(  62,   84), S(   0,    0), S(   0,    0)},
	{S(   0,    0), S( -21,   -7), S( -10,   15), S(  -5,   30), S(  20,   44), S(  36,  154), S(   0,    0), S(   0,    0)}
};

constexpr PackedScore PASSED_PAWN[2][2][8] = {
	{
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -38,  -41), S( -17,   27), S(  -5,  155), S(  41,  234), S(   0,    0)},
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -25,  -53), S(   7,  -21), S(  30,   20), S(  59,   35), S(   0,    0)}
	},
	{
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -29,  -57), S(   2,  -23), S(  35,    7), S(  68,    0), S(   0,    0)},
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -30,  -62), S(   2,  -34), S(  12,  -14), S(  -8,  -12), S(   0,    0)}
	}
};
constexpr PackedScore OUR_PASSER_PROXIMITY[8] = {S(   0,    0), S(  37,   85), S(   4,   69), S(   3,   42), S(   6,   30), S(  12,   23), S(  20,   21), S(  14,   19)};
constexpr PackedScore THEIR_PASSER_PROXIMITY[8] = {S(   0,    0), S( -38,    7), S(  23,    0), S(  15,   28), S(  19,   48), S(  14,   80), S(  17,   80), S(  20,   69)};

constexpr PackedScore PAWN_STORM[2][4][8] = {
	{
		{S(  15,   14), S(-133,  -48), S( -10,   -8), S(   5,  -13), S(   1,   -1), S(  -5,    9), S(  -3,    8), S(   0,    0)},
		{S(  12,    3), S( -21, -100), S(  38,  -39), S(   5,  -11), S(   2,   -5), S( -10,    7), S(  -6,    9), S(   0,    0)},
		{S(  -2,    5), S(  55,  -98), S(  58,  -42), S(  18,  -17), S(   2,   -1), S(  -5,    6), S(  -8,   12), S(   0,    0)},
		{S(   8,   -7), S( 107,  -83), S(  31,  -20), S(  12,   -1), S(  -2,    4), S(  -8,    0), S(  -4,    2), S(   0,    0)}
	},
	{
		{S(   0,    0), S(  -3,  -28), S( -31,  115), S(   9,  -44), S(  -2,    9), S(  -1,    5), S(  -4,    9), S(   0,    0)},
		{S(   0,    0), S(   7,  -95), S(   5,   73), S(  51,  -40), S(   2,    3), S(  -7,    6), S(  -7,    8), S(   0,    0)},
		{S(   0,    0), S(  -6,   25), S( -67, -113), S(  21,  -29), S(   2,    4), S(   0,    5), S(  -8,   10), S(   0,    0)},
		{S(   0,    0), S(  -8,  -48), S(  64,   -5), S(  18,    0), S(   1,    8), S(   0,   -9), S(  -3,    8), S(   0,    0)}
	}
};
constexpr PackedScore PAWN_SHIELD[4][8] = {
	{S(  18,    1), S(  -7,   24), S( -14,   16), S(  -1,    7), S(   5,    0), S( -39,  -25), S( -76,  -36), S(   0,    0)},
	{S(  17,    0), S( -13,   10), S( -11,    8), S(  11,   -2), S(   8,  -11), S( -14,  -17), S( -58,  -25), S(   0,    0)},
	{S(   5,    8), S( -16,    7), S(  15,    5), S(   2,   -1), S(  -1,   -2), S(   4,  -19), S( -15,  -43), S(   0,    0)},
	{S(  14,   -3), S(   5,   -3), S(  -4,    0), S(   0,   -5), S(   7,   -8), S(  27,  -20), S( -15,  -21), S(   0,    0)}
};
constexpr PackedScore SAFE_KNIGHT_CHECK = S(  89,   -1);
constexpr PackedScore SAFE_BISHOP_CHECK = S(  17,   22);
constexpr PackedScore SAFE_ROOK_CHECK = S(  71,   11);
constexpr PackedScore SAFE_QUEEN_CHECK = S(  28,   31);
constexpr PackedScore UNSAFE_KNIGHT_CHECK = S(   9,    0);
constexpr PackedScore UNSAFE_BISHOP_CHECK = S(  16,   11);
constexpr PackedScore UNSAFE_ROOK_CHECK = S(  21,    0);
constexpr PackedScore UNSAFE_QUEEN_CHECK = S(   6,    9);
constexpr PackedScore KING_ATTACKER_WEIGHT[4] = {S(  10,    2), S(  14,    0), S(  16,  -16), S(   5,    2)};
constexpr PackedScore KING_ATTACKS[14] = {S( -26,    0), S( -34,   -1), S( -40,   -1), S( -44,    2), S( -45,    2), S( -40,    2), S( -28,   -1), S( -12,   -7), S(  13,  -16), S(  32,  -10), S(  49,  -17), S(  50,   28), S(  75,  -13), S(  58,   39)};
constexpr PackedScore WEAK_KING_RING[17] = {S( -30,   48), S( -28,   27), S( -24,   24), S( -21,   20), S( -15,   14), S(  -6,    8), S(   4,    3), S(  19,   -1), S(  36,   -5), S(  50,   -9), S(  63,  -12), S(  68,   -9), S(  80,  -13), S(  82,  -14), S(  82,  -10), S( 102,  -15), S( 109,  -16)};
constexpr PackedScore THEIR_TROPISM[4] = {S( -10,    6), S(  -2,    5), S(  -6,    5), S(  -9,    0)};

constexpr PackedScore MINOR_BEHIND_PAWN = S(   6,   13);
constexpr PackedScore KNIGHT_OUTPOST = S(  23,   17);
constexpr PackedScore BISHOP_PAWNS[7] = {S(   4,   20), S(   6,   18), S(   4,   10), S(   1,    3), S(  -2,   -6), S(  -3,  -19), S(  -7,  -31)};
constexpr PackedScore BISHOP_PAIR = S(  20,   62);
constexpr PackedScore LONG_DIAG_BISHOP = S(  16,    7);
constexpr PackedScore ROOK_OPEN[2] = {S(  26,    3), S(  14,    4)};

constexpr PackedScore TEMPO = S(  32,   36);

constexpr PackedScore COMPLEXITY_PAWNS = S(   0,    8);
constexpr PackedScore COMPLEXITY_PASSERS = S(   0,    1);
constexpr PackedScore COMPLEXITY_PAWNS_BOTH_SIDES = S(   0,   69);
constexpr PackedScore COMPLEXITY_PAWN_ENDGAME = S(   0,   66);
constexpr PackedScore COMPLEXITY_OFFSET = S(   0, -133);

#undef S


}