#pragma once

#include "../defs.h"

namespace eval
{

#define S(mg, eg) PackedScore(mg, eg)

constexpr PackedScore MATERIAL[6] = {S(  59,   86), S( 290,  360), S( 295,  380), S( 408,  668), S( 857, 1219), S(0, 0)};

constexpr PackedScore PSQT[6][64] = {
	{
		S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
		S(  35,   78), S(  44,   80), S(  28,   86), S(  63,   44), S(  49,   51), S(  37,   58), S( -26,   97), S( -31,   91),
		S(  15,   39), S(   9,   54), S(  36,   13), S(  46,  -16), S(  52,  -17), S(  84,   -8), S(  44,   37), S(  29,   27),
		S(  -8,   23), S(  -2,   26), S(   5,    2), S(   5,   -9), S(  25,   -9), S(  26,  -11), S(  11,   16), S(  11,    1),
		S( -16,    6), S( -12,   21), S(  -2,   -4), S(   6,   -8), S(   8,   -7), S(  13,  -11), S(   1,    9), S(  -1,  -11),
		S( -26,   -1), S( -19,   10), S( -11,   -6), S( -10,   -2), S(   1,   -2), S(  -4,   -7), S(   5,   -1), S(  -8,  -17),
		S( -18,    4), S( -11,   15), S(  -4,    0), S(  -5,   -3), S(   3,    8), S(  27,   -8), S(  19,    2), S(  -4,  -15),
		S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
	},
	{
		S( -92,  -36), S( -81,  -10), S( -59,    4), S( -17,  -10), S(  10,   -9), S( -27,  -31), S( -77,   -9), S( -68,  -54),
		S( -14,    4), S(  -1,    9), S(   1,    1), S(  10,    0), S(   7,  -10), S(  25,  -14), S(   9,    1), S(   4,  -12),
		S(   2,   -1), S(   5,    2), S(  10,    5), S(  16,    4), S(  29,   -2), S(  56,  -21), S(  14,   -8), S(  19,  -14),
		S(   9,   10), S(  18,    3), S(  29,    6), S(  37,   11), S(  30,   15), S(  45,    5), S(  33,    5), S(  39,   -1),
		S(   3,   12), S(  19,    3), S(  19,   16), S(  28,   14), S(  22,   26), S(  26,   10), S(  26,    8), S(   9,   14),
		S( -14,    0), S(  -3,    1), S(  -1,    3), S(   4,   17), S(  17,   15), S(   2,   -2), S(  16,   -3), S(   1,    4),
		S( -18,    5), S( -15,   10), S(  -9,    1), S(   4,    3), S(   2,    1), S(   6,    0), S(   7,   -2), S(   2,   17),
		S( -47,   20), S( -11,   -3), S( -19,    0), S( -10,    3), S(  -4,    4), S(   1,   -6), S( -11,    4), S( -15,   16),
	},
	{
		S(  -6,    8), S( -38,    9), S( -37,    3), S( -71,    9), S( -66,    9), S( -53,   -2), S( -30,    4), S( -48,   -1),
		S(  -6,   -6), S( -10,   -1), S(  -7,   -5), S( -18,    0), S( -10,   -9), S( -19,   -4), S( -57,    9), S( -38,    4),
		S(   5,    9), S(  12,   -1), S(   3,    1), S(  15,   -9), S(   4,   -3), S(  34,    2), S(  17,    1), S(  22,    7),
		S(  -6,    6), S(   8,    7), S(  12,    0), S(  20,   11), S(  12,    5), S(  13,    7), S(   6,    9), S(   3,    6),
		S(   4,    5), S(  -1,    6), S(   5,    7), S(  15,    5), S(  16,    4), S(   7,    2), S(   7,    6), S(  17,   -5),
		S(   0,    2), S(  15,    2), S(   6,    0), S(   2,    4), S(   7,    6), S(  10,   -1), S(  18,   -6), S(  19,   -5),
		S(  20,    8), S(   8,  -14), S(  15,  -12), S(  -3,   -1), S(   7,    0), S(  19,   -9), S(  28,  -11), S(  23,  -10),
		S(  11,   -4), S(  18,   11), S(   5,    1), S(   2,   -1), S(  12,   -5), S(   1,    9), S(  23,   -9), S(  35,  -21),
	},
	{
		S( -12,   16), S( -15,   20), S( -24,   28), S( -28,   25), S( -18,   18), S(   1,   16), S(  -3,   21), S(  19,   11),
		S(  -2,   11), S(   3,   16), S(  10,   18), S(  25,    6), S(  11,    7), S(  14,    6), S(  24,    2), S(  28,    0),
		S( -10,   11), S(  17,    6), S(   8,    8), S(   8,    3), S(  27,   -3), S(  34,  -10), S(  49,   -7), S(  20,   -7),
		S(  -8,   13), S(  10,    6), S(  10,   10), S(   6,    6), S(  16,   -4), S(  21,   -7), S(  17,    0), S(  10,   -4),
		S( -15,    6), S(  -8,    7), S(  -3,    5), S(   2,    4), S(   7,    2), S(  -5,    5), S(  13,   -1), S(  -7,   -2),
		S( -22,    0), S( -17,   -3), S( -13,   -5), S( -10,   -3), S(  -1,   -7), S(  -6,  -10), S(  17,  -22), S(   0,  -21),
		S( -23,   -6), S( -19,   -5), S(  -9,   -6), S(  -8,   -8), S(  -3,  -14), S(   1,  -17), S(   7,  -20), S( -19,  -16),
		S( -16,   -4), S( -15,   -9), S( -14,   -3), S(  -6,  -11), S(  -1,  -17), S(  -5,  -11), S(  -6,  -13), S( -19,  -12),
	},
	{
		S( -20,  -10), S( -33,    1), S( -25,   23), S(   0,   12), S(  -5,   14), S(   7,    7), S(  48,  -39), S(   9,   -9),
		S(   5,  -15), S( -15,   -3), S( -13,   24), S( -25,   43), S( -27,   57), S(   1,   24), S(  -3,   11), S(  40,    9),
		S(   7,   -5), S(   1,   -2), S(  -5,   22), S(  -4,   27), S( -14,   41), S(   6,   12), S(  22,   -2), S(  26,    0),
		S(   0,    7), S(   1,   15), S(   4,   13), S( -10,   28), S( -14,   32), S(   9,   16), S(   8,   32), S(  17,   13),
		S(   0,    3), S(   3,   15), S(  -2,   13), S(  -6,   21), S(   5,   22), S(   2,   23), S(  17,    6), S(  15,   10),
		S(   1,  -18), S(   0,   -5), S( -10,    7), S( -10,   14), S(  -5,   19), S(   0,    5), S(  13,  -14), S(  14,  -19),
		S(   3,  -31), S(  -3,  -32), S(   1,  -22), S(   1,   -8), S(   0,   -7), S(   6,  -33), S(  16,  -64), S(  28,  -77),
		S( -15,  -29), S( -16,  -24), S( -14,  -14), S( -11,  -14), S( -10,  -15), S( -19,  -25), S(  -7,  -39), S(   9,  -49),
	},
	{
		S(  44,  -53), S(  82,  -30), S( 121,  -33), S(  55,  -11), S(  62,  -33), S( -22,    2), S(  16,    7), S( 100,  -70),
		S(-100,   28), S(   9,   29), S(  29,   14), S( 150,  -17), S(  91,  -10), S(  45,   27), S(   8,   46), S( -92,   48),
		S(-112,   27), S(  39,   19), S(  35,    9), S(  46,    2), S(  85,    1), S( 101,   13), S(  -9,   44), S( -69,   32),
		S( -65,    2), S( -24,   10), S( -14,    7), S( -13,    1), S( -17,   -2), S( -26,   16), S( -60,   26), S(-151,   30),
		S( -71,   -9), S( -28,    1), S( -30,    4), S( -29,    2), S( -32,    1), S( -34,    6), S( -67,   16), S(-148,   20),
		S( -50,   -4), S(   7,   -2), S( -21,    3), S(  -5,    0), S(  -7,   -1), S( -23,    6), S( -15,    5), S( -73,   10),
		S(  33,  -15), S(  23,   -1), S(  19,   -1), S(   1,   -3), S(  -3,   -1), S(   7,    1), S(  23,   -2), S(  18,  -10),
		S(  20,  -34), S(  53,  -26), S(  25,  -10), S( -29,   -2), S(   7,  -19), S( -22,    3), S(  32,  -16), S(  30,  -40),
	},
};

constexpr PackedScore MOBILITY[4][28] = {
	{S(  -8,  -14), S( -32,  -55), S( -10,  -25), S(  -0,   -2), S(  10,    8), S(  13,   19), S(  22,   23), S(  31,   27), S(  40,   24), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S(   3,  -23), S( -32,  -87), S( -11,  -41), S(  -3,  -18), S(   9,   -6), S(  15,    3), S(  20,   14), S(  25,   21), S(  28,   27), S(  33,   30), S(  33,   35), S(  45,   30), S(  39,   37), S(  57,   26), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -43,  -24), S(   2,  -51), S( -25,  -44), S( -15,  -28), S( -10,  -24), S(  -4,   -8), S(  -2,   -1), S(  -5,    5), S(  -1,    6), S(   3,   10), S(   8,   14), S(  10,   20), S(  14,   23), S(  21,   24), S(  26,   20), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -45,    9), S( -59,  -70), S(-105,  -59), S( -71, -271), S( -78, -105), S( -33,  -50), S( -22,  -28), S( -15,  -21), S(  -8,  -11), S(  -5,   11), S(  -3,   19), S(   2,   27), S(   5,   34), S(   9,   36), S(  12,   39), S(  15,   43), S(  17,   45), S(  17,   50), S(  17,   54), S(  18,   56), S(  25,   52), S(  32,   39), S(  36,   41), S(  61,   13), S(  66,   16), S( 110,  -21), S( 109,  -23), S(  79,  -31)}
};

constexpr PackedScore THREAT_BY_PAWN[6] = {S(   7,  -14), S(  64,   25), S(  64,   57), S(  89,    6), S(  76,  -23), S(   0,    0)};
constexpr PackedScore THREAT_BY_KNIGHT[2][6] = {
	{S(   8,   27), S(  31,   21), S(  37,   36), S(  76,    1), S(  44,  -29), S(   0,    0)},
	{S(  -3,   13), S(  13,   41), S(  30,   33), S(  62,   26), S(  52,   -4), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_BISHOP[2][6] = {
	{S(   7,   35), S(  52,   23), S(   3,   32), S(  73,    6), S(  73,   34), S(   0,    0)},
	{S(   3,   15), S(  24,   26), S( -12,   13), S(  45,   39), S(  52,  124), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_ROOK[2][6] = {
	{S(   1,   41), S(  31,   46), S(  29,   44), S(  14,  -27), S(  75,   -9), S(   0,    0)},
	{S(  -6,   13), S(   6,   17), S(  16,    7), S(   6,  -52), S(  57,   52), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_QUEEN[2][6] = {
	{S(  12,    3), S(  38,    5), S(  19,   39), S(  25,  -12), S(  13,  -70), S( 156,  -57)},
	{S(  -1,   14), S(   1,    8), S(  -5,   23), S(  -4,    3), S( -19,  -55), S( 116,   55)}
};
constexpr PackedScore PUSH_THREAT = S(  19,   16);

constexpr PackedScore PASSED_PAWN[8] = {S(   0,    0), S( -17,  -67), S( -15,  -52), S( -13,  -18), S(  11,   17), S(   0,   86), S(  49,   94), S(   0,    0)};
constexpr PackedScore ISOLATED_PAWN[8] = {S(  -3,    6), S(  -3,  -11), S( -11,   -5), S(  -6,  -13), S( -11,  -13), S(  -7,   -4), S(  -1,  -12), S(  -9,    7)};
constexpr PackedScore PAWN_PHALANX[8] = {S(   0,    0), S(   5,   -2), S(  12,    6), S(  18,   16), S(  45,   55), S( 117,  178), S(-176,  447), S(   0,    0)};
constexpr PackedScore DEFENDED_PAWN[8] = {S(   0,    0), S(   0,    0), S(  18,   10), S(  12,    7), S(  13,   15), S(  29,   39), S( 169,   27), S(   0,    0)};
constexpr PackedScore OUR_PASSER_PROXIMITY[8] = {S(   0,    0), S(   5,   52), S(  -6,   39), S(  -5,   23), S(  -2,   13), S(   2,   10), S(  16,    8), S(   6,    7)};
constexpr PackedScore THEIR_PASSER_PROXIMITY[8] = {S(   0,    0), S( -73,   -6), S(   6,    0), S(  -1,   27), S(   5,   36), S(   5,   44), S(   7,   49), S( -10,   49)};

constexpr PackedScore PAWN_STORM[3][8] = {
	{S(  46,  -36), S(  25,  -17), S(  17,   -4), S(   8,   -0), S(   1,    2), S(  -2,    7), S(  -1,    6), S(   8,  -10)},
	{S(   0,    0), S(  13,  -30), S(  28,   -0), S(   3,    1), S(  -5,    8), S(  -7,   13), S(  -8,   15), S(   7,   -2)},
	{S(   0,   -2), S(  -7,    6), S(   4,    9), S(   2,    9), S(   4,    8), S(   4,   10), S(   4,    9), S(  -8,   -4)}
};
constexpr PackedScore PAWN_SHIELD[3][8] = {
	{S(   2,  -12), S(  -8,   -7), S(  -5,  -12), S(   0,  -11), S(  14,  -15), S(  17,  -27), S(  28,  -30), S(   7,    0)},
	{S(   0,    0), S( -16,    3), S(  -8,   -4), S(  10,   -5), S(  20,  -11), S(  35,  -31), S(  53,  -39), S(  16,    2)},
	{S(  -3,   -8), S(  -2,   -5), S(   1,   -5), S(   1,   -0), S(   4,    1), S(   5,    1), S(  23,    5), S(  -8,    7)}
};
constexpr PackedScore SAFE_KNIGHT_CHECK = S(  78,   -4);
constexpr PackedScore SAFE_BISHOP_CHECK = S(  16,   -6);
constexpr PackedScore SAFE_ROOK_CHECK = S(  56,   -4);
constexpr PackedScore SAFE_QUEEN_CHECK = S(  31,   11);
constexpr PackedScore KING_ATTACKER_WEIGHT[4] = {S(  15,   -3), S(   8,    2), S(   6,  -13), S(  -3,   14)};
constexpr PackedScore KING_ATTACKS[14] = {S( -27,   12), S( -29,    7), S( -30,    4), S( -28,    8), S( -20,    4), S(  -3,   -1), S(  20,   -9), S(  50,  -24), S(  95,  -46), S( 125,  -50), S( 162,  -66), S( 186,  -55), S( 219, -133), S( 186,   -8)};

constexpr PackedScore KNIGHT_OUTPOST = S(  24,   20);
constexpr PackedScore BISHOP_PAIR = S(  21,   59);
constexpr PackedScore ROOK_OPEN[2] = {S(  21,    9), S(  11,   11)};

constexpr PackedScore TEMPO = S(  30,   28);

#undef S


}
