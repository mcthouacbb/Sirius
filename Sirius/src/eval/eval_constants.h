#pragma once

#include "../defs.h"

namespace eval
{

#define S(mg, eg) PackedScore(mg, eg)

constexpr PackedScore MATERIAL[6] = {S(  66,   98), S( 310,  407), S( 336,  414), S( 423,  744), S( 865, 1375), S(0, 0)};

constexpr PackedScore PSQT[6][64] = {
	{
		S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
		S(  21,   96), S(  36,   93), S(  80,   96), S(  83,   68), S(  91,   54), S(  54,   68), S(  30,   91), S(  19,   84),
		S(  48,   25), S(  63,   43), S(  84,    6), S(  52,   -6), S(  41,   -5), S(  37,    0), S(   9,   36), S(   5,   25),
		S(  20,    3), S(  13,   21), S(  30,   -7), S(  18,   -9), S(   4,   -7), S(   0,   -3), S(  -8,   21), S( -10,   14),
		S(   8,  -10), S(   2,   16), S(  15,  -10), S(   8,   -6), S(   1,   -6), S(  -6,   -6), S( -18,   17), S( -18,   -1),
		S(  12,  -19), S(  14,    2), S(  -3,   -3), S(  -4,    1), S( -13,    1), S( -19,   -8), S( -29,    8), S( -32,   -6),
		S(  27,  -24), S(  48,   -2), S(  32,   -6), S(   1,   13), S( -16,    5), S( -14,   -1), S( -22,   16), S( -25,    0),
		S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
	},
	{
		S( -74,  -62), S( -65,  -19), S( -14,  -17), S(  17,  -11), S( -32,    6), S( -68,   12), S(-110,   17), S( -88,  -31),
		S(  -2,   -6), S(  27,   -2), S(  30,  -10), S(  10,    0), S(  11,    6), S(  -2,    7), S(  -7,   20), S( -14,   13),
		S(  24,   -5), S(  15,   -4), S(  59,  -18), S(  32,   -1), S(  16,    5), S(  14,    3), S(   2,    5), S(  -6,    7),
		S(  40,    3), S(  36,    6), S(  51,    2), S(  34,   12), S(  38,   11), S(  30,    6), S(  18,    3), S(   7,   19),
		S(  10,   15), S(  26,    6), S(  27,    6), S(  26,   18), S(  27,   12), S(  20,   11), S(  22,    1), S(   1,   13),
		S(   0,    0), S(  16,   -7), S(   4,  -12), S(  18,    6), S(   5,    8), S(  -4,   -6), S(  -5,   -6), S( -16,    0),
		S(   4,   12), S(   9,   -1), S(   6,   -9), S(   2,   -4), S(   3,   -5), S( -10,   -6), S( -13,    0), S( -19,    3),
		S( -15,    7), S( -14,    4), S(  -2,   -8), S(  -3,    1), S( -11,   -4), S( -23,   -8), S( -15,   -1), S( -53,   16),
	},
	{
		S( -40,   -7), S( -36,    4), S( -13,   -5), S( -75,    9), S( -75,   14), S( -59,    3), S( -36,    7), S( -15,   10),
		S( -33,   -2), S( -49,   12), S( -15,   -1), S( -10,   -4), S( -25,    4), S(  -5,   -4), S(  -8,   -2), S( -13,   -3),
		S(  23,   10), S(  21,   -1), S(  45,    4), S(   9,    4), S(  14,   -5), S(   4,    4), S(   7,    2), S(   4,    5),
		S(   2,    4), S(   9,    8), S(  12,   10), S(  19,   13), S(  24,   15), S(  11,    5), S(   4,   10), S(  -8,    7),
		S(  19,  -10), S(   6,    6), S(   9,    4), S(  12,   11), S(  16,    9), S(   0,   12), S(  -2,    6), S(   0,    3),
		S(  19,   -9), S(  20,  -11), S(  11,   -3), S(   5,    7), S(  -4,    5), S(   3,    3), S(  11,    2), S(  -2,   -4),
		S(  25,  -14), S(  32,  -19), S(  22,  -14), S(   3,   -4), S(  -6,   -2), S(   9,  -19), S(   5,  -16), S(  20,   -6),
		S(  37,  -30), S(  21,  -12), S(  -4,    4), S(  13,   -8), S(  -1,   -6), S(   3,    4), S(  13,    0), S(  11,   -7),
	},
	{
		S(  17,    7), S( -20,   29), S(  -4,   24), S( -15,   18), S( -38,   31), S( -32,   32), S( -15,   24), S( -15,   24),
		S(  39,   -4), S(  39,    5), S(  27,    8), S(   7,   12), S(  20,   13), S(   1,   25), S(  -3,   21), S(  -7,   18),
		S(  22,   -5), S(  58,   -6), S(  43,   -6), S(  24,    4), S(   5,   10), S(   1,   19), S(  13,   14), S( -13,   20),
		S(  10,    2), S(  14,    7), S(  22,    2), S(  14,    2), S(   4,   10), S(   7,   14), S(   6,   13), S( -12,   19),
		S(  -7,   -2), S(  19,    0), S(   0,    4), S(   8,    1), S(  -4,    5), S(  -9,    8), S( -12,    9), S( -18,    9),
		S(   5,  -24), S(  21,  -26), S(   0,  -15), S(   1,  -15), S( -14,   -6), S( -18,  -10), S( -17,  -10), S( -23,   -7),
		S( -13,  -28), S(  20,  -34), S(   6,  -25), S(  -1,  -22), S(  -7,  -18), S(  -9,  -16), S( -18,  -13), S( -23,  -15),
		S( -21,  -22), S( -13,  -11), S(  -3,  -17), S(   3,  -24), S(  -6,  -22), S( -13,  -14), S( -13,  -19), S( -13,  -13),
	},
	{
		S(   5,  -21), S(  60,  -54), S(   1,   13), S( -12,   12), S(   6,   -5), S( -31,   19), S( -54,   14), S( -27,    1),
		S(  46,   -8), S(   2,    6), S(   8,   23), S( -29,   57), S( -22,   41), S(  -8,   15), S( -11,   -4), S(   0,   -7),
		S(  20,    6), S(  24,    1), S(  11,   26), S(  -3,   36), S(   2,   30), S(   3,   22), S(   2,    0), S(  15,   -4),
		S(  14,   18), S(  10,   39), S(   9,   20), S( -11,   40), S(  -6,   34), S(   7,    8), S(   4,   17), S(   1,   12),
		S(  13,    8), S(  22,   12), S(   5,   22), S(   2,   28), S(  -6,   26), S(  -2,   18), S(   3,   18), S(  -1,   11),
		S(  13,  -25), S(  15,  -12), S(   4,    0), S(  -7,   17), S(  -7,    8), S(  -8,   10), S(   2,   -5), S(   2,  -11),
		S(  13,  -58), S(  19,  -73), S(  10,  -46), S(   4,  -13), S(   1,   -9), S(   2,  -25), S(   1,  -30), S(   9,  -40),
		S(   2,  -53), S( -16,  -51), S( -19,  -24), S(  -8,  -20), S(  -9,  -16), S( -13,  -14), S( -16,  -21), S( -16,  -20),
	},
	{
		S(  79,  -67), S(  43,  -12), S(  22,   -8), S(  25,  -15), S(   3,   -2), S(   3,   -2), S(   3,   -2), S(   3,   -2),
		S( -81,   38), S(  26,   35), S(  22,   30), S( 101,   -6), S(   3,   -2), S(   3,   -2), S(   3,   -2), S(   3,   -2),
		S( -62,   27), S(  38,   25), S(  66,   14), S(  45,    9), S(   3,   -2), S(   3,   -2), S(   3,   -2), S(   3,   -2),
		S(-106,   21), S( -36,   19), S( -28,   18), S( -31,    6), S(   3,   -2), S(   3,   -2), S(   3,   -2), S(   3,   -2),
		S(-129,   16), S( -54,   14), S( -34,    9), S( -41,    4), S(   3,   -2), S(   3,   -2), S(   3,   -2), S(   3,   -2),
		S( -64,    8), S(  -5,    1), S( -19,    4), S( -11,   -1), S(   3,   -2), S(   3,   -2), S(   3,   -2), S(   3,   -2),
		S(  11,   -9), S(  31,   -6), S(  10,   -1), S(  -1,   -6), S(   3,   -2), S(   3,   -2), S(   3,   -2), S(   3,   -2),
		S(  17,  -39), S(  22,  -15), S(  -9,   -1), S(  -2,  -19), S(   3,   -2), S(   3,   -2), S(   3,   -2), S(   3,   -2),
	},
};

constexpr PackedScore MOBILITY[4][28] = {
	{S( -16,  -13), S( -41,  -68), S( -17,  -33), S(  -8,   -7), S(   3,    6), S(   7,   19), S(  16,   26), S(  25,   33), S(  33,   32), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -19,  -27), S( -56,  -94), S( -31,  -39), S( -24,  -16), S( -11,   -4), S(  -4,    6), S(   2,   17), S(   7,   21), S(  10,   26), S(  15,   27), S(  16,   29), S(  29,   19), S(  28,   23), S(  50,    6), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -32,  -34), S(  12,  -74), S( -27,  -45), S( -17,  -29), S( -11,  -23), S(  -5,   -7), S(  -1,   -2), S(  -6,    9), S(  -1,   12), S(   3,   17), S(   7,   23), S(   9,   31), S(  13,   36), S(  20,   39), S(  26,   33), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -45,   24), S( -64,  -69), S(-116,  -50), S( -88, -245), S( -83,  -95), S( -36,  -37), S( -27,  -15), S( -19,  -11), S( -11,   -9), S( -10,   17), S(  -8,   26), S(  -4,   36), S(  -1,   42), S(   2,   45), S(   6,   48), S(   9,   51), S(  10,   53), S(  11,   57), S(  12,   59), S(  13,   60), S(  21,   51), S(  30,   35), S(  35,   32), S(  64,    0), S(  74,   -6), S( 111,  -41), S(  93,  -40), S(  39,  -37)}
};

constexpr PackedScore THREAT_BY_PAWN[6] = {S(   7,  -17), S(  67,   32), S(  68,   62), S(  83,   27), S(  76,  -12), S(   0,    0)};
constexpr PackedScore THREAT_BY_KNIGHT[2][6] = {
	{S(   7,   30), S(  33,   30), S(  38,   42), S(  80,    6), S(  46,  -27), S(   0,    0)},
	{S(  -4,   11), S(  15,   48), S(  32,   33), S(  66,   31), S(  57,   -6), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_BISHOP[2][6] = {
	{S(   5,   37), S(  51,   27), S(   1,   34), S(  78,    9), S(  73,   48), S(   0,    0)},
	{S(   2,   10), S(  23,   26), S( -14,    7), S(  46,   45), S(  51,  132), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_ROOK[2][6] = {
	{S(  -1,   46), S(  30,   56), S(  29,   54), S(  18,  -44), S(  78,   -3), S(   0,    0)},
	{S(  -7,   12), S(   6,   20), S(  17,    6), S(  13,  -74), S(  61,   53), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_QUEEN[2][6] = {
	{S(  12,    6), S(  36,   13), S(  18,   47), S(  26,   -6), S(  12,  -67), S( 117,   -4)},
	{S(   0,   14), S(   2,   10), S(  -4,   24), S(  -4,    4), S( -20,  -66), S( 118,   42)}
};
constexpr PackedScore THREAT_BY_KING[6] = {S( -13,   43), S(  32,   43), S(  32,   45), S( 101,    7), S(   0,    0), S(   0,    0)};
constexpr PackedScore PUSH_THREAT = S(  20,   19);

constexpr PackedScore ISOLATED_PAWN[8] = {S(  -7,    7), S(  -2,  -14), S( -11,   -6), S(  -9,  -14), S( -10,  -12), S(  -7,   -4), S(  -1,  -11), S( -11,    9)};
constexpr PackedScore PAWN_PHALANX[8] = {S(   0,    0), S(   4,   -2), S(  14,    5), S(  20,   15), S(  49,   58), S( 124,  191), S( -54,  391), S(   0,    0)};
constexpr PackedScore DEFENDED_PAWN[8] = {S(   0,    0), S(   0,    0), S(  20,   10), S(  14,    8), S(  15,   18), S(  26,   54), S( 159,   49), S(   0,    0)};

constexpr PackedScore PASSED_PAWN[2][2][8] = {
	{
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -31,  -39), S( -17,   24), S( -38,  148), S(  -3,  230), S(   0,    0)},
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -19,  -51), S(  13,  -25), S(  15,   11), S(  82,   25), S(   0,    0)}
	},
	{
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -28,  -57), S(  -2,  -23), S(  15,    1), S(  80,  -10), S(   0,    0)},
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -30,  -61), S(  -2,  -35), S(  -7,  -24), S(   7,  -48), S(   0,    0)}
	}
};
constexpr PackedScore OUR_PASSER_PROXIMITY[8] = {S(   0,    0), S(  15,   88), S( -10,   66), S(   0,   39), S(   5,   27), S(  10,   19), S(  19,   20), S(  13,   18)};
constexpr PackedScore THEIR_PASSER_PROXIMITY[8] = {S(   0,    0), S( -69,   18), S(  21,   -3), S(  11,   26), S(  15,   47), S(   9,   78), S(  15,   78), S(  13,   68)};

constexpr PackedScore PAWN_STORM[3][8] = {
	{S(  51,  -34), S(  23,  -20), S(  17,   -3), S(   8,   -1), S(   1,    3), S(  -3,    8), S(  -2,    9), S(   5,   -8)},
	{S(   0,    0), S(  19,  -28), S(  20,    1), S(   4,   -1), S(  -5,    4), S(  -8,   12), S(  -7,   12), S(   5,   -4)},
	{S(   2,   -1), S(  -6,    6), S(   4,   10), S(   4,   10), S(   4,   10), S(   4,   12), S(   5,   11), S( -10,    1)}
};
constexpr PackedScore PAWN_SHIELD[3][8] = {
	{S(  15,  -13), S(   0,   -6), S(  -4,   -8), S(  -6,   -5), S(   6,   -7), S(  21,  -20), S(  36,  -15), S(  -9,   14)},
	{S(   0,    0), S(  -9,    0), S( -12,   -2), S(   0,   -1), S(  13,   -6), S(  35,  -23), S(  57,  -27), S(   7,   11)},
	{S(  -6,   -3), S(  -5,   -1), S(  -1,   -2), S(   1,    2), S(   4,    4), S(   4,    0), S(  14,   -3), S(  -8,   17)}
};
constexpr PackedScore SAFE_KNIGHT_CHECK = S(  82,   -3);
constexpr PackedScore SAFE_BISHOP_CHECK = S(  20,   11);
constexpr PackedScore SAFE_ROOK_CHECK = S(  59,   -1);
constexpr PackedScore SAFE_QUEEN_CHECK = S(  22,   18);
constexpr PackedScore KING_ATTACKER_WEIGHT[4] = {S(  18,   -1), S(  12,    1), S(  14,  -15), S(   2,    3)};
constexpr PackedScore KING_ATTACKS[14] = {S( -81,   34), S( -85,   30), S( -89,   26), S( -89,   29), S( -83,   25), S( -69,   20), S( -46,   12), S( -19,    0), S(  28,  -23), S(  59,  -29), S(  96,  -46), S( 118,  -26), S( 152, -110), S( 108,   56)};

constexpr PackedScore KNIGHT_OUTPOST = S(  27,   19);
constexpr PackedScore BISHOP_PAWNS[7] = {S(   7,   23), S(   9,   19), S(   6,   12), S(   1,    4), S(  -4,   -5), S(  -6,  -18), S( -13,  -32)};
constexpr PackedScore BISHOP_PAIR = S(  22,   64);
constexpr PackedScore ROOK_OPEN[2] = {S(  26,    6), S(  15,    4)};

constexpr PackedScore TEMPO = S(  32,   34);

#undef S


}
