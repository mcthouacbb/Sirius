#pragma once

#include "../defs.h"

namespace eval
{

// clang-format off
#define S(mg, eg) ScorePair(mg, eg)

constexpr ScorePair MATERIAL[6] = {S(  76,  130), S( 348,  401), S( 386,  391), S( 458,  763), S( 966, 1515), S(0, 0)};

constexpr ScorePair PSQT[6][64] = {
    {
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  66,   70), S(  33,   78), S(  41,   88), S(  40,   98), S(  67,   64), S(  23,   71), S(  33,   82), S(  91,   43),
        S(   1,   12), S( -11,   15), S(   1,    2), S(   7,  -14), S(   1,  -21), S(  -7,   -8), S(  -9,    3), S(  -1,    2),
        S(  -6,   17), S(   6,   14), S(   3,  -16), S(  12,  -16), S(   6,  -17), S(  -5,   -6), S(   1,   10), S(  -8,    7),
        S( -12,    1), S(  -4,   14), S(  19,  -34), S(  19,  -14), S(  14,  -13), S(   5,   -8), S( -12,   14), S( -14,   -5),
        S( -14,    3), S(  21,    6), S(   0,  -14), S(   7,    8), S(  -1,    5), S(  -5,    4), S(  -9,   12), S( -19,   -5),
        S( -10,    2), S(  21,   12), S(  24,   -5), S(   2,   11), S(  -1,    5), S(  -6,    5), S(  -2,   13), S( -19,   -1),
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
    },
    {
        S(-114,  -41), S(  -9,    0), S( -82,   30), S(  28,    6), S(   6,   14), S( -71,   20), S(-122,   10), S(-125,  -12),
        S( -25,    8), S( -14,    8), S(  28,    7), S(  46,   22), S(  31,   25), S(  18,    5), S(  -4,    8), S(  -3,  -15),
        S(  -3,   -1), S(  -5,   18), S(  30,   29), S(  24,   29), S(  14,   26), S(  16,   21), S(   4,    2), S(   5,  -11),
        S(  33,   -2), S(  17,   12), S(  26,   20), S(  21,   32), S(  27,   26), S(  20,   19), S(  18,    4), S(  13,    3),
        S(  19,    0), S(  18,    7), S(  23,   16), S(  14,   30), S(  16,   24), S(  17,   18), S(  13,    2), S(  12,   -5),
        S(   1,  -18), S(  22,   -7), S(  14,   -1), S(  19,   12), S(  15,    8), S(   2,    0), S(   9,  -11), S(  -2,  -19),
        S(  -1,  -10), S(   6,   -5), S(  10,  -19), S(   9,   -1), S(   7,   -2), S(   6,  -20), S(  -1,  -13), S( -17,  -34),
        S( -25,  -52), S(  -9,  -26), S(   8,  -29), S(  10,  -17), S(   6,  -10), S(   6,  -24), S(  -9,  -29), S( -31,  -37),
    },
    {
        S( -48,   -3), S( -36,   12), S( -49,   18), S(  14,    5), S( -42,   19), S( -26,    0), S( -30,   16), S( -34,  -18),
        S( -27,   -2), S( -18,   11), S( -23,   16), S( -35,   19), S(   2,   11), S( -15,   10), S( -13,  -16), S( -27,   -5),
        S(   4,   -3), S(  15,   -2), S(  22,   15), S(  16,   22), S(  15,   11), S(   7,    2), S(   6,    2), S(  13,  -15),
        S(   1,   -3), S(   6,   17), S(  20,    5), S(   7,   37), S(  19,   31), S(  21,   10), S(  10,   14), S(   2,   -5),
        S(   5,    0), S(   6,    3), S(   4,   17), S(  15,   15), S(  12,   22), S(  10,   17), S(   1,    7), S(  15,   -9),
        S(   7,   -4), S(  13,   -3), S(   6,   -7), S(   3,   14), S(  12,   -1), S(  -4,    1), S(  20,    3), S(   6,   -3),
        S(  17,  -11), S(  16,  -28), S(  18,  -12), S(   6,   -8), S(  -5,   -3), S(  14,  -24), S(   3,  -19), S(  18,   -7),
        S(  11,  -50), S(  13,  -38), S( -17,  -10), S(   2,  -12), S(  10,  -17), S( -13,    1), S(  23,  -45), S(   9,  -18),
    },
    {
        S(  45,   -3), S(  23,   14), S(   1,   25), S(   9,   28), S(  33,   15), S(  11,   21), S(  27,   21), S(  36,   19),
        S(  20,   11), S(   6,   21), S(   9,   31), S(  13,   34), S(  21,   40), S(  10,   37), S(  10,   33), S(  19,   29),
        S(  -9,   15), S(   2,   18), S(  -2,   28), S(  12,   21), S(   1,   29), S(  -3,   28), S(  12,   20), S(   7,   29),
        S( -19,   15), S( -14,   28), S( -10,   26), S( -12,   23), S( -13,   15), S(   3,   17), S(  -2,   21), S(  -7,   19),
        S( -30,   -1), S( -18,    8), S( -21,   12), S( -14,   11), S( -13,    6), S( -12,    6), S( -17,    9), S(  -4,   -4),
        S( -25,  -22), S(  -2,  -26), S( -10,  -13), S(   1,  -26), S(  -2,  -22), S( -10,  -20), S(  -2,  -24), S( -10,  -22),
        S( -55,  -36), S( -11,  -40), S(  10,  -40), S(  10,  -39), S(  14,  -40), S(   3,  -32), S(   2,  -43), S(  -8,  -32),
        S(  -7,  -48), S( -29,  -22), S(  14,  -40), S(  22,  -44), S(  14,  -38), S(   6,  -32), S(   9,  -37), S(   9,  -37),
    },
    {
        S( -12,   29), S(  18,   18), S(  41,    0), S(  23,   15), S(  11,   36), S(  38,   23), S(  10,   24), S( -22,   41),
        S(  18,    2), S(   7,   31), S(  28,   -4), S( -25,   44), S(   7,   37), S(  15,   25), S(   4,    9), S(   9,    8),
        S(   8,    3), S(  17,   -5), S(   3,   28), S( -22,   44), S(  -4,   39), S(  10,   14), S(   1,   20), S(   8,    0),
        S(   0,   14), S(  -6,   15), S( -14,   37), S( -25,   49), S( -23,   47), S(  -4,   29), S(  -3,   30), S(   1,    2),
        S( -15,   28), S( -13,   21), S( -17,   24), S( -17,   28), S( -23,   55), S( -10,   22), S(  -8,   30), S(  -1,   11),
        S(  -1,  -30), S(   8,  -29), S(  -6,  -12), S( -15,    8), S(  -2,   -4), S(  -5,    9), S(  17,  -26), S(   4,  -11),
        S(  -3,  -36), S(  14,  -96), S(   8,  -58), S(  -2,  -22), S(  -3,  -12), S(  17,  -54), S(  12,  -39), S(   3,  -21),
        S(   5,  -74), S( -23,  -61), S( -19,  -46), S(   4,  -64), S(   9,  -52), S(   6,  -58), S(   4,  -52), S(   6,  -45),
    },
    {
        S(-368,  -34), S(  22,   90), S(  54,   47), S(  79,   41), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(-171,   64), S( -13,   97), S(  32,   67), S(  23,   64), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  66,   -7), S( 230,  -17), S(  -5,   42), S(-151,   34), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S( -11,   17), S( -13,   58), S( -83,   50), S(-166,   33), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  -7,   -5), S( -27,   31), S( -70,   22), S(-119,   13), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  17,  -22), S(   9,    1), S( -37,   -1), S( -64,  -11), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  57,  -38), S(  46,  -17), S(   8,  -31), S( -24,  -43), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  49,  -37), S(  56,  -29), S(  14,  -50), S(  14,  -80), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
    },
};

constexpr ScorePair MOBILITY[4][28] = {
    {S(  -9,  -25), S( -24,  -53), S( -15,  -15), S(  -7,    2), S(   2,    9), S(   6,   18), S(  11,   23), S(  17,   27), S(  24,    8), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S( -10,  -19), S( -35,  -40), S( -18,  -21), S( -11,   -5), S(  -5,    4), S(  -3,   15), S(  -3,   24), S(   0,   23), S(  -1,   26), S(   6,   18), S(   4,   19), S(  16,   -3), S(  35,    0), S(  36,  -48), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S( -54,  -45), S( -36,  -87), S( -12,  -48), S(  -8,  -26), S(  -2,  -14), S(   1,    0), S(   1,    8), S(   4,   11), S(   5,   16), S(   8,   21), S(  10,   28), S(  10,   36), S(  12,   41), S(   9,   43), S(  62,    6), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S( -27,   88), S( -28,   44), S( -48,   61), S( -18, -122), S( -14,  -73), S(  -7,  -55), S(  -4,  -26), S(  -2,  -20), S(  -2,  -16), S(  -1,   -3), S(   0,   12), S(   2,   14), S(   4,   15), S(   4,   28), S(   4,   30), S(   7,   30), S(   6,   29), S(   3,   40), S(   8,   35), S(  13,   20), S(   3,   35), S(  18,    7), S(  15,    9), S(  43,  -40), S(  31,  -15), S(  44,  -71), S(  -7,  -29), S( -33,  -53)}
};

constexpr ScorePair THREAT_BY_PAWN[6] = {S(  -7,  -37), S(  59,   32), S(  51,   68), S(  54,   49), S(  40,   50), S(   0,    0)};
constexpr ScorePair THREAT_BY_KNIGHT[2][6] = {
    {S(  10,   36), S(  16,   69), S(  38,   22), S(  77,    1), S(  29,   36), S(   0,    0)},
    {S(  -5,   11), S(  19,   58), S(  37,   21), S(  68,   26), S(  42,   68), S(   0,    0)}
};
constexpr ScorePair THREAT_BY_BISHOP[2][6] = {
    {S(  11,   31), S(  25,   44), S(  -3,   31), S(  34,   38), S(  29,  110), S(   0,    0)},
    {S(  -5,    9), S(  11,   23), S( -11,    3), S(  50,   62), S(  32,  120), S(   0,    0)}
};
constexpr ScorePair THREAT_BY_ROOK[2][6] = {
    {S(   2,   43), S(  27,   50), S(  38,   35), S( -15,  -75), S(  51,    7), S(   0,    0)},
    {S(  -8,    5), S(   5,   16), S(  12,    3), S(  18, -133), S(  25,  112), S(   0,    0)}
};
constexpr ScorePair THREAT_BY_QUEEN[2][6] = {
    {S(   7,   27), S(  18,   32), S(  16,   59), S(  28,    1), S(  -6,  -15), S( 112,  163)},
    {S(  -3,   15), S(   1,    5), S(  -9,   27), S(  -4,   -6), S( -23,    8), S(  71,  235)}
};
constexpr ScorePair THREAT_BY_KING[6] = {S(  91,   -5), S(  40,   20), S(  81,   23), S(  79,    8), S(   0,    0), S(   0,    0)};
constexpr ScorePair KNIGHT_HIT_QUEEN = S(   7,    5);
constexpr ScorePair BISHOP_HIT_QUEEN = S(  10,   26);
constexpr ScorePair ROOK_HIT_QUEEN = S(  20,   -2);
constexpr ScorePair PUSH_THREAT = S(  12,   20);
constexpr ScorePair RESTRICTED_SQUARES = S(   2,    2);

constexpr ScorePair ISOLATED_PAWN[8] = {S(  -4,    3), S(  -6,  -16), S( -10,  -11), S( -15,  -12), S( -19,  -12), S(  -8,   -9), S(  -9,  -10), S( -10,    3)};
constexpr ScorePair DOUBLED_PAWN[8] = {S(  -4,  -55), S(   5,  -45), S(  -4,  -23), S(  -8,  -25), S( -12,  -14), S( -10,   -8), S(  -4,  -45), S(   9,  -55)};
constexpr ScorePair BACKWARDS_PAWN[8] = {S(   0,    0), S(  -4,  -18), S(  -1,  -15), S(  -3,  -18), S(   4,  -19), S(  22,  -16), S(   0,    0), S(   0,    0)};
constexpr ScorePair PAWN_PHALANX[8] = {S(   0,    0), S(   4,   -7), S(   9,   -4), S(  13,   12), S(  33,   34), S(  91,  139), S( 120,  200), S(   0,    0)};
constexpr ScorePair DEFENDED_PAWN[8] = {S(   0,    0), S(   0,    0), S(  13,    5), S(  10,    8), S(  19,   21), S(  48,   47), S( 188,   49), S(   0,    0)};
constexpr ScorePair CANDIDATE_PASSER[2][8] = {
    {S(   0,    0), S( -14,    4), S(  -8,  -21), S(  -6,   10), S(  -9,   40), S(   2,  106), S(   0,    0), S(   0,    0)},
    {S(   0,    0), S( -18,  -11), S(  -4,    6), S(  -3,   22), S(   9,   42), S(   7,  125), S(   0,    0), S(   0,    0)}
};

constexpr ScorePair PASSED_PAWN[2][2][8] = {
    {
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -34,  -26), S(   0,   24), S(  10,  148), S(  77,  206), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -19,  -47), S(   2,  -20), S(  35,   38), S( 142,   28), S(   0,    0)}
    },
    {
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -19,  -47), S(   7,  -17), S(  29,   60), S(  75,   24), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -24,  -53), S(   3,  -40), S(   9,   21), S( -15,   11), S(   0,    0)}
    }
};
constexpr ScorePair OUR_PASSER_PROXIMITY[8] = {S( 336,   39), S( 224,   32), S(  76,   63), S(   1,   57), S( -13,   39), S( -16,   28), S(  -2,   16), S( -21,   21)};
constexpr ScorePair THEIR_PASSER_PROXIMITY[8] = {S( -19,  -22), S(  11,   -9), S(  30,   -2), S(  21,   27), S(  21,   55), S(  18,   76), S(  25,   76), S(  15,   70)};
constexpr ScorePair PASSER_DEFENDED_PUSH[8] = {S(   0,    0), S(   0,    0), S(   0,    0), S(   4,   14), S(  11,   30), S(  63,   20), S(   5,  121), S(   0,    0)};

constexpr ScorePair PAWN_STORM[2][4][8] = {
    {
        {S(  11,   50), S( 124, -1421), S(  57, -326), S(  62,  -52), S(  17,   46), S( -11,   54), S(  -8,   53), S(   0,    0)},
        {S(  17,    7), S(  56, -188), S(  50, -189), S(  25,  -35), S(  27,   -1), S( -30,   24), S(   2,   11), S(   0,    0)},
        {S( -10,   18), S(  87, -437), S( 101, -161), S(  57,  -39), S(   4,   11), S( -18,   10), S(  -8,    0), S(   0,    0)},
        {S(   2,    0), S(  87, -405), S(  91, -149), S(  48,  -33), S(   7,   -9), S( -36,  -15), S( -34,   -4), S(   0,    0)}
    },
    {
        {S(   0,    0), S(   0,    0), S(  41,   60), S( -33,   49), S( -18,   70), S(   8,   43), S( 131,  -25), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S( 141,   -3), S( -43,   44), S( -23,   40), S( -22,   75), S(  35,   41), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S( 121,   19), S(  30,   14), S(  -5,   45), S(  -9,   47), S(  77,    7), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(  94,   -1), S(  22,   42), S( -19,   37), S(  -5,   32), S( -47,   -2), S(   0,    0)}
    }
};
constexpr ScorePair PAWN_SHIELD[4][8] = {
    {S(  65,  -16), S(  12,   19), S(   2,    7), S(  50,  -11), S(  35,   11), S(-100,   77), S(-132,   66), S(   0,    0)},
    {S(  29,   30), S( -29,   26), S(  15,    6), S(  44,  -12), S(  30,  -33), S( -35,  -23), S( -24,  -70), S(   0,    0)},
    {S(  26,   47), S(  -9,    4), S( -10,  -23), S(  34,  -44), S(  12,  -29), S( -17,    1), S(  -1,  -44), S(   0,    0)},
    {S(  11,   20), S( -31,  -13), S( -11,  -27), S(   5,  -36), S(   1,  -37), S(  29,  -42), S( -20,   -9), S(   0,    0)}
};
constexpr ScorePair SAFE_KNIGHT_CHECK = S(  80,  -15);
constexpr ScorePair SAFE_BISHOP_CHECK = S(  48,   14);
constexpr ScorePair SAFE_ROOK_CHECK = S( 108,  -13);
constexpr ScorePair SAFE_QUEEN_CHECK = S(  60,   21);
constexpr ScorePair UNSAFE_KNIGHT_CHECK = S(  15,   -4);
constexpr ScorePair UNSAFE_BISHOP_CHECK = S(  33,    8);
constexpr ScorePair UNSAFE_ROOK_CHECK = S(  43,   -3);
constexpr ScorePair UNSAFE_QUEEN_CHECK = S(  20,   24);
constexpr ScorePair QUEENLESS_ATTACK = S(  -8,  283);
constexpr ScorePair KING_ATTACKER_WEIGHT[4] = {S(  55,  -35), S(  21,    1), S(  29,  -29), S(  -1,  -36)};
constexpr ScorePair KING_ATTACKS = S(   3,    4);
constexpr ScorePair WEAK_KING_RING = S(   4,    1);
constexpr ScorePair KING_FLANK_ATTACKS[2] = {S(  12,  -13), S(   5,   -1)};
constexpr ScorePair KING_FLANK_DEFENSES[2] = {S(  -6,   -2), S(  -4,   -2)};
constexpr ScorePair SAFETY_OFFSET = S(  48,  -18);

constexpr ScorePair MINOR_BEHIND_PAWN = S(   1,   16);
constexpr ScorePair KNIGHT_OUTPOST = S(  20,   18);
constexpr ScorePair BISHOP_PAWNS[7] = {S(  11,    2), S(   3,   27), S(   3,   17), S(   1,    6), S(  -1,   -3), S(  -4,  -17), S(  -7,  -33)};
constexpr ScorePair BISHOP_PAIR = S(   9,   81);
constexpr ScorePair LONG_DIAG_BISHOP = S(  10,   10);
constexpr ScorePair ROOK_OPEN[2] = {S(  29,   -6), S(  20,    1)};

constexpr ScorePair TEMPO = S(  19,   13);

constexpr ScorePair COMPLEXITY_PAWNS = S(   0,   16);
constexpr ScorePair COMPLEXITY_PAWNS_BOTH_SIDES = S(   0,  149);
constexpr ScorePair COMPLEXITY_PAWN_ENDGAME = S(   0,  203);
constexpr ScorePair COMPLEXITY_OFFSET = S(   0, -267);

#undef S
// clang-format on

}
