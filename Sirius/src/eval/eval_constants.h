#pragma once

#include "../defs.h"

namespace eval
{

#define S(mg, eg) PackedScore(mg, eg)

constexpr PackedScore MATERIAL[6] = {S(  62,   87), S( 292,  361), S( 292,  379), S( 410,  670), S( 859, 1224), S(0, 0)};

constexpr PackedScore PSQT[6][64] = {
	{
		S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
		S(  34,   78), S(  42,   79), S(  27,   86), S(  63,   44), S(  48,   50), S(  36,   58), S( -29,   96), S( -33,   91),
		S(  15,   38), S(  10,   54), S(  37,   12), S(  46,  -17), S(  53,  -17), S(  85,   -8), S(  45,   36), S(  30,   27),
		S(  -6,   23), S(  -2,   25), S(   5,    2), S(   5,  -10), S(  25,  -10), S(  27,  -11), S(  10,   15), S(  12,    1),
		S( -15,    6), S( -12,   21), S(  -1,   -4), S(   7,   -8), S(   9,   -7), S(  13,  -12), S(   1,    9), S(   0,  -11),
		S( -25,   -1), S( -20,   10), S( -11,   -6), S( -10,   -3), S(   1,   -2), S(  -5,   -8), S(   4,   -2), S(  -7,  -17),
		S( -18,    4), S( -12,   16), S(  -4,    0), S(  -5,   -2), S(   3,    8), S(  26,   -8), S(  18,    2), S(  -4,  -15),
		S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
	},
	{
		S( -93,  -34), S( -81,   -8), S( -59,    6), S( -16,   -8), S(  10,   -8), S( -28,  -29), S( -77,   -7), S( -69,  -52),
		S( -14,    6), S(  -1,   10), S(   1,    2), S(  11,    0), S(   9,   -9), S(  26,  -14), S(   8,    2), S(   4,  -10),
		S(   2,    1), S(   5,    1), S(  11,    2), S(  17,    3), S(  29,   -4), S(  56,  -23), S(  14,   -8), S(  18,  -12),
		S(   9,   11), S(  18,    3), S(  29,    4), S(  37,    9), S(  30,   14), S(  45,    3), S(  32,    6), S(  39,    1),
		S(   3,   13), S(  19,    3), S(  19,   13), S(  28,   12), S(  22,   24), S(  26,    8), S(  26,    9), S(   9,   15),
		S( -14,    0), S(  -3,    1), S(  -1,    0), S(   4,   14), S(  17,   12), S(   2,   -5), S(  16,   -3), S(   1,    4),
		S( -18,    7), S( -15,   11), S(  -9,    1), S(   4,    1), S(   2,    0), S(   6,    0), S(   7,   -1), S(   2,   18),
		S( -47,   23), S( -11,   -3), S( -19,    1), S( -10,    4), S(  -3,    4), S(   1,   -6), S( -10,    6), S( -14,   18),
	},
	{
		S(  -8,    2), S( -37,    7), S( -40,    0), S( -70,    8), S( -66,    5), S( -53,   -3), S( -30,   -1), S( -49,   -2),
		S(  -6,   -8), S( -12,   -3), S(  -5,   -5), S( -20,   -1), S(  -9,   -8), S( -19,   -5), S( -56,   10), S( -40,   -1),
		S(   3,    4), S(  14,    0), S(   2,    2), S(  18,   -5), S(   4,   -1), S(  36,    5), S(  16,   -1), S(  23,    4),
		S(  -4,    4), S(   7,    6), S(  14,    4), S(  22,   16), S(  16,   12), S(  12,    9), S(   9,    9), S(   4,    1),
		S(   4,    1), S(   1,    8), S(   5,   10), S(  17,   13), S(  16,    9), S(  10,    7), S(   7,    4), S(  19,   -7),
		S(   2,    0), S(  15,    1), S(   8,    4), S(   1,    7), S(   8,   10), S(   9,    0), S(  19,   -7), S(  18,  -10),
		S(  20,    4), S(   9,  -13), S(  13,  -13), S(  -1,    0), S(   5,   -2), S(  20,  -10), S(  27,  -15), S(  25,  -13),
		S(  13,   -4), S(  17,    8), S(   6,    3), S(   1,   -4), S(  14,   -7), S(   0,    6), S(  24,  -12), S(  34,  -24),
	},
	{
		S( -12,   16), S( -15,   20), S( -23,   28), S( -28,   25), S( -18,   18), S(   2,   16), S(  -3,   21), S(  19,   11),
		S(  -2,   11), S(   2,   16), S(  10,   18), S(  26,    6), S(  12,    7), S(  14,    7), S(  24,    2), S(  28,    1),
		S(  -9,   11), S(  17,    6), S(   8,    8), S(   8,    3), S(  26,   -3), S(  34,  -10), S(  48,   -7), S(  19,   -7),
		S(  -8,   13), S(  10,    6), S(  10,   10), S(   5,    6), S(  16,   -4), S(  20,   -7), S(  16,    0), S(   9,   -3),
		S( -15,    6), S(  -7,    7), S(  -4,    5), S(   1,    3), S(   7,    2), S(  -4,    5), S(  13,   -1), S(  -7,   -2),
		S( -22,    1), S( -17,   -3), S( -13,   -5), S( -10,   -3), S(  -1,   -8), S(  -5,  -10), S(  17,  -22), S(   0,  -21),
		S( -23,   -6), S( -18,   -5), S(  -9,   -7), S(  -7,   -9), S(  -3,  -14), S(   1,  -17), S(   7,  -20), S( -19,  -16),
		S( -16,   -4), S( -15,   -9), S( -14,   -4), S(  -6,  -11), S(   0,  -17), S(  -5,  -11), S(  -6,  -13), S( -18,  -12),
	},
	{
		S( -20,  -10), S( -32,    1), S( -25,   23), S(   1,   12), S(  -5,   15), S(   6,    7), S(  49,  -39), S(   9,   -9),
		S(   5,  -16), S( -15,   -3), S( -13,   24), S( -25,   43), S( -27,   58), S(   1,   24), S(  -3,   11), S(  40,    8),
		S(   7,   -5), S(   2,   -2), S(  -5,   21), S(  -4,   27), S( -15,   41), S(   6,   12), S(  22,   -3), S(  27,   -1),
		S(   0,    7), S(   2,   15), S(   5,   12), S( -10,   27), S( -13,   31), S(   9,   16), S(   9,   31), S(  17,   13),
		S(   0,    3), S(   3,   15), S(  -1,   12), S(  -5,   21), S(   5,   22), S(   3,   23), S(  17,    7), S(  16,   10),
		S(   1,  -17), S(   1,   -4), S(  -8,    6), S(  -8,   13), S(  -3,   19), S(   1,    5), S(  14,  -13), S(  14,  -18),
		S(   3,  -30), S(  -2,  -32), S(   2,  -22), S(   2,   -8), S(   1,   -6), S(   8,  -32), S(  16,  -63), S(  29,  -76),
		S( -14,  -28), S( -15,  -25), S( -13,  -14), S( -10,  -14), S(  -9,  -15), S( -18,  -24), S(  -6,  -39), S(  10,  -50),
	},
	{
		S(  48,  -54), S(  85,  -31), S( 123,  -34), S(  56,  -11), S(  64,  -35), S( -20,    1), S(  18,    6), S(  96,  -70),
		S( -99,   27), S(  10,   28), S(  30,   13), S( 151,  -18), S(  92,  -11), S(  46,   26), S(   8,   45), S( -90,   46),
		S(-113,   27), S(  41,   18), S(  36,    8), S(  46,    2), S(  84,    0), S( 101,   12), S( -10,   43), S( -69,   32),
		S( -64,    1), S( -25,    9), S( -15,    7), S( -14,    1), S( -17,   -3), S( -28,   16), S( -61,   25), S(-154,   30),
		S( -70,  -10), S( -28,    0), S( -31,    3), S( -31,    1), S( -33,    0), S( -35,    5), S( -68,   15), S(-150,   19),
		S( -49,   -5), S(   6,   -2), S( -20,    2), S(  -5,   -1), S(  -7,   -2), S( -23,    5), S( -15,    4), S( -72,   10),
		S(  34,  -16), S(  25,   -2), S(  20,   -2), S(   2,   -4), S(  -2,   -2), S(   8,    0), S(  24,   -3), S(  19,  -11),
		S(  24,  -36), S(  57,  -27), S(  28,  -11), S( -26,   -4), S(  10,  -20), S( -18,    1), S(  36,  -18), S(  33,  -41),
	},
};

constexpr PackedScore MOBILITY[4][28] = {
	{S(  -9,  -14), S( -34,  -59), S( -12,  -29), S(  -2,   -5), S(   8,    6), S(  12,   18), S(  20,   23), S(  30,   28), S(  38,   26), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S(  -5,  -32), S( -41,  -91), S( -19,  -43), S( -12,  -20), S(   1,   -8), S(   7,    1), S(  12,   12), S(  17,   17), S(  20,   21), S(  24,   23), S(  24,   26), S(  34,   18), S(  28,   23), S(  43,   11), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -44,  -25), S(   3,  -55), S( -27,  -45), S( -16,  -30), S( -10,  -25), S(  -5,  -10), S(  -3,   -3), S(  -6,    4), S(  -2,    5), S(   2,    9), S(   7,   13), S(   9,   19), S(  14,   22), S(  21,   23), S(  25,   19), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -47,    8), S( -63,  -70), S(-108,  -59), S( -76, -265), S( -80, -107), S( -35,  -51), S( -25,  -28), S( -17,  -22), S( -10,  -12), S(  -8,   10), S(  -5,   17), S(  -1,   26), S(   2,   32), S(   6,   35), S(   9,   38), S(  12,   42), S(  14,   44), S(  13,   49), S(  14,   53), S(  14,   56), S(  21,   51), S(  28,   39), S(  31,   41), S(  57,   14), S(  61,   17), S( 105,  -20), S(  99,  -19), S(  57,  -21)}
};

constexpr PackedScore THREAT_BY_PAWN[6] = {S(   7,  -15), S(  64,   25), S(  64,   55), S(  89,    6), S(  75,  -23), S(   0,    0)};
constexpr PackedScore THREAT_BY_KNIGHT[2][6] = {
	{S(   8,   27), S(  31,   23), S(  37,   37), S(  77,    1), S(  44,  -29), S(   0,    0)},
	{S(  -3,   12), S(  13,   42), S(  29,   31), S(  62,   26), S(  53,   -3), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_BISHOP[2][6] = {
	{S(   6,   32), S(  51,   21), S(   2,   32), S(  72,    5), S(  72,   30), S(   0,    0)},
	{S(   2,    8), S(  23,   22), S( -13,   11), S(  44,   39), S(  51,  119), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_ROOK[2][6] = {
	{S(   1,   41), S(  31,   46), S(  29,   45), S(  14,  -27), S(  75,   -9), S(   0,    0)},
	{S(  -6,   13), S(   6,   16), S(  16,    6), S(   6,  -51), S(  57,   51), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_QUEEN[2][6] = {
	{S(  13,    3), S(  38,    4), S(  20,   40), S(  26,  -13), S(  13,  -70), S( 155,  -57)},
	{S(  -1,   15), S(   2,    7), S(  -4,   23), S(  -3,    3), S( -19,  -55), S( 117,   53)}
};
constexpr PackedScore PUSH_THREAT = S(  19,   16);

constexpr PackedScore PASSED_PAWN[8] = {S(   0,    0), S( -17,  -68), S( -16,  -53), S( -14,  -19), S(  11,   17), S(  -0,   87), S(  51,   95), S(   0,    0)};
constexpr PackedScore ISOLATED_PAWN[8] = {S(  -3,    6), S(  -2,  -11), S( -11,   -5), S(  -6,  -13), S( -11,  -13), S(  -7,   -4), S(  -1,  -11), S( -10,    7)};
constexpr PackedScore PAWN_PHALANX[8] = {S(   0,    0), S(   5,   -2), S(  12,    6), S(  18,   15), S(  45,   55), S( 118,  178), S(-131,  430), S(   0,    0)};
constexpr PackedScore DEFENDED_PAWN[8] = {S(   0,    0), S(   0,    0), S(  18,   10), S(  12,    8), S(  13,   16), S(  29,   39), S( 171,   26), S(   0,    0)};
constexpr PackedScore OUR_PASSER_PROXIMITY[8] = {S(   0,    0), S(   5,   52), S(  -6,   39), S(  -5,   23), S(  -2,   13), S(   2,   10), S(  17,    8), S(   6,    7)};
constexpr PackedScore THEIR_PASSER_PROXIMITY[8] = {S(   0,    0), S( -73,   -6), S(   6,   -0), S(  -1,   27), S(   5,   36), S(   5,   44), S(   7,   49), S( -10,   49)};

constexpr PackedScore PAWN_STORM[3][8] = {
	{S(  46,  -35), S(  25,  -17), S(  17,   -4), S(   8,   -1), S(   1,    3), S(  -2,    6), S(  -0,    6), S(   8,  -10)},
	{S(   0,    0), S(  13,  -29), S(  26,   -1), S(   3,    2), S(  -6,    7), S(  -7,   13), S(  -7,   14), S(   7,   -2)},
	{S(  -1,   -1), S(  -8,    6), S(   3,    9), S(   2,    9), S(   4,    8), S(   4,    9), S(   5,    9), S(  -8,   -4)}
};
constexpr PackedScore PAWN_SHIELD[3][8] = {
	{S(   1,  -12), S(  -8,   -7), S(  -4,  -12), S(   0,  -11), S(  13,  -15), S(  17,  -26), S(  28,  -29), S(   7,    0)},
	{S(   0,    0), S( -15,    3), S(  -8,   -4), S(   9,   -5), S(  20,  -11), S(  35,  -31), S(  53,  -39), S(  16,    2)},
	{S(  -3,   -8), S(  -2,   -5), S(   1,   -5), S(   2,   -0), S(   4,    1), S(   5,    2), S(  23,    6), S(  -8,    7)}
};
constexpr PackedScore SAFE_KNIGHT_CHECK = S(  78,   -4);
constexpr PackedScore SAFE_BISHOP_CHECK = S(  16,   -6);
constexpr PackedScore SAFE_ROOK_CHECK = S(  57,   -4);
constexpr PackedScore SAFE_QUEEN_CHECK = S(  31,   11);
constexpr PackedScore KING_ATTACKER_WEIGHT[4] = {S(  15,   -3), S(   7,    1), S(   6,  -14), S(  -3,   13)};
constexpr PackedScore KING_ATTACKS[14] = {S( -27,   11), S( -29,    7), S( -30,    4), S( -28,    8), S( -20,    4), S(  -3,   -2), S(  20,   -9), S(  50,  -24), S(  96,  -47), S( 125,  -51), S( 162,  -67), S( 187,  -57), S( 219, -134), S( 186,   -5)};

constexpr PackedScore KNIGHT_OUTPOST = S(  24,   19);
constexpr PackedScore BISHOP_PAWNS[7] = {S(  21,   18), S(  22,   16), S(  19,    9), S(  15,    1), S(  10,   -8), S(   8,  -20), S(   2,  -32)};
constexpr PackedScore BISHOP_PAIR = S(  21,   60);
constexpr PackedScore ROOK_OPEN[2] = {S(  21,    9), S(  11,   11)};

constexpr PackedScore TEMPO = S(  30,   28);

#undef S


}
