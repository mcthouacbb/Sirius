#pragma once

#include "../defs.h"

namespace eval
{

#define S(mg, eg) PackedScore(mg, eg)

constexpr PackedScore MATERIAL[6] = {S(  60,  130), S( 288,  429), S( 310,  445), S( 388,  784), S( 739, 1619), S(0, 0)};

constexpr PackedScore PSQT[6][64] = {
    {
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  57,   75), S(  29,   92), S(  21,  105), S(  56,   76), S(  70,   66), S(  48,   83), S(  36,  100), S(  59,   83),
        S(  17,    6), S(  -6,   36), S(   7,    0), S(  17,  -23), S(  10,  -20), S(   8,   -9), S( -16,   28), S(   0,   13),
        S(  14,    5), S(  -4,   12), S(  14,  -20), S(  11,  -24), S(  -1,  -23), S(  -1,  -13), S(  -9,   11), S(  -9,    8),
        S(   6,   -2), S(  -5,   15), S(  14,  -26), S(  16,  -17), S(   9,  -16), S(  -1,  -11), S( -14,   12), S( -12,   -1),
        S(  -1,   -5), S(   7,    8), S(   5,   -4), S(   1,   -2), S(  -8,   -2), S(  -9,   -7), S( -23,   11), S( -24,   -3),
        S(   9,   -6), S(  24,    9), S(  31,  113), S(   9,    1), S(  -2,   -9), S(  -5,   -6), S( -15,   14), S( -15,    1),
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
    },
    {
        S( -66,  -97), S( -71,  -28), S( -27,  -17), S(   1,   -8), S( -29,    2), S( -57,    5), S( -98,    4), S( -83,  -56),
        S( -15,  -13), S(  12,    3), S(  22,    2), S(  -2,   10), S(   3,   12), S(   5,   12), S(   1,   13), S(  -7,   -1),
        S(   5,   -7), S( -10,    8), S(  30,   -2), S(  21,   16), S(  10,   24), S(  14,   15), S(   7,    4), S(  -4,   -1),
        S(  27,    5), S(  24,   16), S(  37,   19), S(  24,   26), S(  24,   27), S(  31,   13), S(  22,    3), S(  14,    9),
        S(  10,   17), S(  14,   17), S(  20,   20), S(  20,   29), S(  22,   21), S(  19,   18), S(  24,    0), S(  11,    2),
        S(  14,   -2), S(  15,    4), S(  16,    3), S(  15,   16), S(   5,   16), S(   3,    0), S(   6,   -6), S(  -6,   -7),
        S(   9,   -1), S(  11,   -5), S(   8,   -4), S(  12,    0), S(   7,    0), S(  -3,   -4), S(  -2,   -8), S( -13,   -9),
        S(  -4,  -16), S(  -5,  -11), S(   3,  -11), S(   7,    1), S(   1,   -3), S( -15,   -9), S(  -8,  -15), S( -41,   -9),
    },
    {
        S( -45,  -16), S( -27,    5), S(  -5,   -3), S( -72,   11), S( -68,   19), S( -54,    4), S( -32,    8), S( -31,    5),
        S( -22,  -10), S( -43,    4), S( -12,    2), S( -10,    4), S( -23,   13), S(   1,   -1), S( -13,   -6), S(  -2,   -8),
        S(  11,   12), S(  -1,    9), S(  21,    8), S(   4,   13), S(  15,    7), S(   1,    0), S(  10,    7), S(   7,    0),
        S( -11,    6), S(   2,   12), S(   2,   18), S(  17,   20), S(  23,   24), S(  20,    9), S(   5,   11), S(  -4,    1),
        S(  16,   -6), S(  -4,   14), S(   7,   12), S(  15,   15), S(  22,   13), S(   5,   13), S(   4,    6), S(   4,   -2),
        S(  20,   -9), S(  22,   -2), S(   3,   -2), S(  10,   12), S(   0,    8), S(   5,   -3), S(  19,    0), S(   6,  -10),
        S(  26,  -19), S(  24,  -25), S(  27,   -9), S(   7,   -4), S(  -1,   -1), S(  11,  -17), S(   6,  -27), S(  16,  -12),
        S(  28,  -38), S(  20,  -15), S(  -5,   -3), S(  20,   -6), S(   1,   -3), S(   1,    0), S(  11,   -4), S(   6,  -19),
    },
    {
        S(  13,   12), S( -22,   37), S( -13,   28), S( -25,   26), S( -13,   24), S( -14,   30), S(   7,   18), S(   7,   19),
        S(  25,    3), S(  31,    8), S(  12,   17), S(  -6,   20), S(  24,   13), S(  11,   24), S(   7,   20), S(   9,   13),
        S(  -7,    7), S(  26,    5), S(   5,    9), S(   8,   10), S(   7,    9), S(   4,   17), S(  17,   11), S(  -4,   14),
        S(  -9,   10), S( -14,   19), S(  -5,   17), S(  -7,   11), S(  -1,   10), S(   6,   12), S(   6,   11), S(  -6,   13),
        S( -18,    3), S(   1,    8), S( -18,   14), S(  -7,    9), S(  -5,    3), S(  -9,    5), S(  -8,    3), S(  -9,    4),
        S(   5,  -21), S(  24,  -25), S(   0,  -13), S(   0,  -14), S(  -3,  -13), S(  -7,  -14), S(  -4,  -16), S( -11,  -13),
        S(  -6,  -28), S(  27,  -37), S(   6,  -23), S(   3,  -20), S(   4,  -22), S(   2,  -19), S(  -7,  -19), S( -11,  -23),
        S(  -6,  -39), S(  -2,  -20), S(   2,  -19), S(   8,  -24), S(   6,  -26), S(  -1,  -20), S(  -1,  -24), S(  -3,  -22),
    },
    {
        S(  11,   -7), S(  56,  -36), S( -19,   45), S( -25,   35), S(  15,    5), S( -13,   21), S( -24,    8), S( -18,   13),
        S(  35,   11), S(   3,   21), S( -19,   36), S( -49,   69), S( -20,   44), S(   2,   10), S(   8,   -7), S(  13,   -3),
        S(   3,   17), S(  -6,    8), S( -17,   30), S( -27,   25), S(   0,   18), S(  10,   13), S(  13,  -10), S(  24,  -11),
        S(  -1,   14), S( -15,   33), S(  -9,   15), S( -26,   34), S( -14,   34), S(   9,    5), S(  10,    5), S(  11,   -5),
        S(   1,    9), S(   0,   12), S( -11,   16), S(  -6,   25), S(  -8,   32), S(   0,   16), S(   7,   12), S(   8,   -3),
        S(   9,  -19), S(  10,  -11), S(   0,    2), S(  -8,   11), S(  -3,    9), S(   2,    8), S(  17,  -15), S(  17,  -23),
        S(  11,  -51), S(  17,  -67), S(   9,  -37), S(   9,  -21), S(   7,  -12), S(  11,  -25), S(  13,  -30), S(  18,  -45),
        S(  17,  -65), S(  -8,  -50), S( -10,  -32), S(  -1,  -28), S(   2,  -29), S(  -2,  -23), S(  -4,  -27), S(  -3,  -24),
    },
    {
        S(  46,  -67), S(  29,    4), S( -51,  -12), S( -63,    2), S(   9,   -6), S(   9,   -6), S(   9,   -6), S(   9,   -6),
        S( -15,   30), S(  38,   57), S(  -5,   33), S(  -1,   29), S(   9,   -6), S(   9,   -6), S(   9,   -6), S(   9,   -6),
        S(  36,   20), S(  57,   55), S(  33,   32), S( -21,   51), S(   9,   -6), S(   9,   -6), S(   9,   -6), S(   9,   -6),
        S( -16,   21), S( -14,   55), S( -37,   32), S( -84,   47), S(   9,   -6), S(   9,   -6), S(   9,   -6), S(   9,   -6),
        S( -56,   13), S( -53,   43), S( -51,   12), S( -86,   28), S(   9,   -6), S(   9,   -6), S(   9,   -6), S(   9,   -6),
        S( -17,   -5), S( -11,   19), S( -32,  -11), S( -53,    4), S(   9,   -6), S(   9,   -6), S(   9,   -6), S(   9,   -6),
        S(  37,  -26), S(  29,   -2), S(   5,  -30), S( -24,  -19), S(   9,   -6), S(   9,   -6), S(   9,   -6), S(   9,   -6),
        S(  37,  -60), S(  37,  -23), S(  12,  -51), S(   1,  -49), S(   9,   -6), S(   9,   -6), S(   9,   -6), S(   9,   -6),
    },
};

constexpr PackedScore MOBILITY[4][28] = {
    {S(  -8,  -28), S( -40,  -45), S( -18,  -16), S(  -9,    0), S(   1,    8), S(   6,   18), S(  14,   21), S(  23,   25), S(  33,   18), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S( -15,  -44), S( -31,  -59), S( -19,  -31), S( -12,  -13), S(  -4,   -3), S(   1,    7), S(   3,   16), S(   6,   19), S(   7,   22), S(  10,   22), S(  12,   22), S(  17,   16), S(  16,   23), S(  20,    3), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S( -17,  -43), S( -30,  -69), S( -15,  -52), S(  -3,  -31), S(  -1,  -17), S(  -2,   -6), S(  -1,    1), S(   1,    8), S(   3,   11), S(   7,   17), S(   5,   27), S(   6,   34), S(   9,   38), S(  13,   38), S(  22,   36), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S(  -8,   12), S( -41,  -73), S( -64, -127), S( -11, -215), S( -16,  -71), S(  -9,  -18), S(   0,  -30), S(   2,   -9), S(   2,    9), S(   4,   19), S(   6,   22), S(   9,   25), S(   9,   37), S(  12,   36), S(  12,   42), S(  12,   45), S(  12,   48), S(  14,   50), S(  13,   49), S(  18,   42), S(  22,   34), S(  29,   18), S(  24,   25), S(  33,    2), S(  29,    4), S(   7,    2), S( -18,    0), S(-116,   19)}
};

constexpr PackedScore THREAT_BY_PAWN[6] = {S(   4,  -18), S(  66,   28), S(  60,   59), S(  80,   24), S(  71,    1), S(   0,    0)};
constexpr PackedScore THREAT_BY_KNIGHT[2][6] = {
    {S(   6,   28), S(  18,   37), S(  40,   43), S(  74,   14), S(  58,  -31), S(   0,    0)},
    {S(  -8,    9), S(   7,   35), S(  28,   30), S(  65,   33), S(  58,   -4), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_BISHOP[2][6] = {
    {S(  -2,   33), S(  41,   30), S( -11,   34), S(  67,   14), S(  69,   50), S(   0,    0)},
    {S(  -4,    4), S(  17,   21), S( -25,  -12), S(  44,   43), S(  45,  115), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_ROOK[2][6] = {
    {S(   0,   41), S(  17,   59), S(  27,   54), S(   5,  -34), S(  75,    8), S(   0,    0)},
    {S(  -8,    7), S(   1,   16), S(  12,    4), S(   3,  -74), S(  62,   45), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_QUEEN[2][6] = {
    {S(   6,    8), S(  23,   20), S(   8,   50), S(  18,   17), S(  10,  -54), S(  96,   46)},
    {S(  -3,   12), S(  -1,    6), S(  -8,   16), S(  -5,    4), S( -17,  -74), S( 113,   48)}
};
constexpr PackedScore THREAT_BY_KING[6] = {S( -26,   45), S(   8,   48), S(  28,   40), S(  86,    6), S(   0,    0), S(   0,    0)};
constexpr PackedScore PUSH_THREAT = S(  14,   17);

constexpr PackedScore ISOLATED_PAWN[8] = {S(  -9,    6), S(  -3,  -15), S( -12,   -8), S( -10,  -16), S( -12,  -15), S(  -8,   -7), S(  -4,  -13), S( -12,    7)};
constexpr PackedScore DOUBLED_PAWN[8] = {S(   3,  -60), S(  17,  -36), S(   3,  -26), S(   2,  -16), S(  -2,  -10), S(  -4,  -18), S(   9,  -37), S(  11,  -72)};
constexpr PackedScore BACKWARDS_PAWN[8] = {S(   0,    0), S(  -7,  -14), S(  -2,  -14), S(  -8,  -11), S(   1,  -17), S(  27,    2), S(   0,    0), S(   0,    0)};
constexpr PackedScore PAWN_PHALANX[8] = {S(   0,    0), S(   6,   -4), S(  11,   -2), S(  20,    8), S(  40,   40), S( 115,  211), S( -11,  356), S(   0,    0)};
constexpr PackedScore DEFENDED_PAWN[8] = {S(   0,    0), S(   0,    0), S(  19,    6), S(  11,    7), S(  16,   20), S(  30,   62), S( 143,   70), S(   0,    0)};
constexpr PackedScore CANDIDATE_PASSER[2][8] = {
    {S(   0,    0), S( -34,  -16), S( -19,   -7), S(   0,   25), S(  27,   52), S(  61,   87), S(   0,    0), S(   0,    0)},
    {S(   0,    0), S( -19,   -7), S(  -9,   14), S(  -4,   28), S(  19,   40), S(  30,  153), S(   0,    0), S(   0,    0)}
};

constexpr PackedScore PASSED_PAWN[2][2][8] = {
    {
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -40,  -40), S( -15,   24), S(   4,  150), S(  57,  223), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -27,  -53), S(   7,  -23), S(  31,   20), S(  59,   30), S(   0,    0)}
    },
    {
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -32,  -56), S(   1,  -25), S(  38,    8), S(  61,   -3), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -32,  -61), S(   0,  -35), S(  12,  -11), S( -25,  -11), S(   0,    0)}
    }
};
constexpr PackedScore OUR_PASSER_PROXIMITY[8] = {S(   0,    0), S(  58,   81), S(  11,   68), S(   3,   44), S(   4,   32), S(  11,   24), S(  18,   20), S(  15,   19)};
constexpr PackedScore THEIR_PASSER_PROXIMITY[8] = {S(   0,    0), S( -57,    8), S(  17,    1), S(  16,   26), S(  21,   45), S(  19,   77), S(  21,   78), S(  24,   67)};

constexpr PackedScore PAWN_STORM[2][4][8] = {
    {
        {S(  44,   35), S(-126,  -47), S( -20,   12), S(  31,   11), S(  17,   23), S(  -2,   30), S(  -8,   29), S(   0,    0)},
        {S(  33,    8), S(  43, -126), S(  82,  -46), S(  36,   -5), S(  10,    3), S( -26,   11), S(   2,    8), S(   0,    0)},
        {S(  13,   21), S( 108,  -99), S( 102,  -22), S(  53,    6), S(  11,   20), S( -11,   24), S( -11,   26), S(   0,    0)},
        {S(  20,    5), S( 165,  -79), S( 101,  -18), S(  43,   11), S(   1,   18), S( -17,   11), S( -19,   19), S(   0,    0)}
    },
    {
        {S(   0,    0), S(   0,    0), S(  34,   40), S( -23,   26), S(  -3,   29), S(  20,   31), S(  -7,   29), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(  91,   -1), S(   3,    8), S( -11,   18), S(  -3,   16), S(   3,    8), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(  85,    7), S(   0,   14), S(   0,   25), S(  25,   25), S(   4,   22), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(  36,    0), S(  20,   18), S( -27,   16), S(  -4,   10), S(   0,   12), S(   0,    0)}
    }
};
constexpr PackedScore PAWN_SHIELD[4][8] = {
    {S(  47,   31), S( -15,   48), S( -12,   40), S(  30,   33), S(  35,   26), S( -25,   -2), S( -72,  -20), S(   0,    0)},
    {S(  50,    6), S( -21,   17), S(   7,    8), S(  49,    1), S(  36,   -7), S(  -1,  -16), S( -48,  -29), S(   0,    0)},
    {S(  21,   -1), S(  19,  113), S(   8,   -2), S(  29,  -21), S(  26,  -20), S(  -2,  -24), S( -65,  -28), S(   0,    0)},
    {S(  18,   14), S(  10,   10), S(  -3,   11), S(  21,    7), S(  28,    4), S(  10,    6), S( -89,   10), S(   0,    0)}
};
constexpr PackedScore SAFE_KNIGHT_CHECK = S( 112,    5);
constexpr PackedScore SAFE_BISHOP_CHECK = S(  61,   17);
constexpr PackedScore SAFE_ROOK_CHECK = S( 104,   17);
constexpr PackedScore SAFE_QUEEN_CHECK = S(  53,   24);
constexpr PackedScore UNSAFE_KNIGHT_CHECK = S(  16,    2);
constexpr PackedScore UNSAFE_BISHOP_CHECK = S(  38,   10);
constexpr PackedScore UNSAFE_ROOK_CHECK = S(  39,    3);
constexpr PackedScore UNSAFE_QUEEN_CHECK = S(  16,    3);
constexpr PackedScore QUEENLESS_ATTACK = S(-140,  155);
constexpr PackedScore KING_ATTACKER_WEIGHT[4] = {S(  55,   -5), S(  23,   -1), S(  28,  -13), S(   4,  -10)};
constexpr PackedScore KING_ATTACKS = S(   7,    0);
constexpr PackedScore WEAK_KING_RING = S(   7,    0);
constexpr PackedScore KING_FLANK_ATTACKS[2] = {S(  11,   -4), S(   7,    1)};
constexpr PackedScore KING_FLANK_DEFENSES[2] = {S(  -6,    0), S( -10,    2)};
constexpr PackedScore SAFETY_OFFSET = S(  73,  200);

constexpr PackedScore MINOR_BEHIND_PAWN = S(   5,   12);
constexpr PackedScore KNIGHT_OUTPOST = S(  22,   15);
constexpr PackedScore BISHOP_PAWNS[7] = {S(   2,   16), S(   4,   16), S(   2,   10), S(   0,    4), S(  -2,   -4), S(  -1,  -15), S(  -4,  -24)};
constexpr PackedScore BISHOP_BLOCKED_PAWNS = S(  -3,   -6);
constexpr PackedScore BISHOP_PAIR = S(  19,   60);
constexpr PackedScore LONG_DIAG_BISHOP = S(  15,    8);
constexpr PackedScore ROOK_OPEN[2] = {S(  25,    3), S(  13,    4)};

constexpr PackedScore TEMPO = S(  32,   34);

constexpr PackedScore COMPLEXITY_PAWNS = S(   0,    9);
constexpr PackedScore COMPLEXITY_PASSERS = S(   0,   -1);
constexpr PackedScore COMPLEXITY_PAWNS_BOTH_SIDES = S(   0,   66);
constexpr PackedScore COMPLEXITY_PAWN_ENDGAME = S(   0,   79);
constexpr PackedScore COMPLEXITY_OFFSET = S(   0, -127);

#undef S


}