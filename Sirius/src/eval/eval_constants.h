#pragma once

#include "../defs.h"

namespace eval
{

#define S(mg, eg) PackedScore(mg, eg)

constexpr PackedScore MATERIAL[6] = {S(  64,  129), S( 293,  434), S( 317,  444), S( 393,  791), S( 779, 1515), S(0, 0)};

constexpr PackedScore PSQT[6][64] = {
	{
		S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
		S(  62,   82), S(  43,   85), S(  50,  100), S(  53,   77), S(  66,   64), S(  39,   81), S(  40,   93), S(  62,   84),
		S(  30,   17), S(  40,   33), S(  46,   -2), S(  53,  -19), S(  40,  -17), S(  34,  -13), S(   7,   26), S(  14,   15),
		S(  25,    3), S(   8,   15), S(  16,  -13), S(  15,  -15), S(   3,  -13), S(   0,   -9), S(  -8,   15), S( -10,   11),
		S(  13,   -8), S(   6,   13), S(   4,  -12), S(  10,  -10), S(   3,   -7), S(  -6,   -7), S( -17,   16), S( -16,   -1),
		S(   7,  -12), S(  10,    8), S(  10,    0), S(  -4,    2), S( -10,    2), S( -17,   -5), S( -27,   12), S( -28,   -2),
		S(  24,  -17), S(  33,    2), S(  12,   -2), S(   6,   11), S(  -9,    4), S( -10,    0), S( -17,   19), S( -17,    3),
		S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
	},
	{
		S( -70,  -84), S( -76,  -20), S( -30,  -13), S(  17,  -16), S( -35,    4), S( -67,    7), S(-116,   21), S( -85,  -40),
		S(  -6,   -9), S(  23,    0), S(  37,  -10), S(  11,    2), S(  13,    5), S(   2,   11), S(  -5,   20), S( -13,   13),
		S(  17,   -9), S(  16,   -5), S(  60,  -21), S(  41,   -2), S(  22,    4), S(  11,    6), S(   2,    6), S(  -9,    6),
		S(  37,    0), S(  39,    4), S(  50,    2), S(  39,    9), S(  31,   14), S(  30,    7), S(  18,    4), S(   6,   15),
		S(  10,   15), S(  21,    8), S(  28,    7), S(  20,   19), S(  24,   13), S(  19,   12), S(  19,    4), S(   0,   12),
		S(   1,    0), S(  16,   -3), S(   6,   -8), S(  15,    8), S(   5,    8), S(  -3,   -3), S(  -3,   -4), S( -15,   -1),
		S(   0,   12), S(   2,   -3), S(   2,   -6), S(   2,   -1), S(   3,    0), S(  -9,   -5), S( -15,   -2), S( -20,    1),
		S( -15,   -2), S( -12,    0), S(  -5,   -7), S(  -3,    5), S(  -9,    0), S( -22,   -7), S( -15,   -4), S( -50,    8),
	},
	{
		S( -39,   -4), S( -37,    8), S( -13,   -1), S( -74,   12), S( -73,   18), S( -55,    5), S( -28,    7), S( -17,   16),
		S( -25,   -4), S( -34,   11), S( -12,    1), S(  -1,   -5), S( -22,    9), S(  -1,   -1), S(  -2,    1), S(  -5,   -3),
		S(  22,    9), S(  13,    1), S(  43,    4), S(  10,    4), S(  14,   -2), S(   6,    4), S(   6,    4), S(   4,    6),
		S(  -4,    6), S(  11,    5), S(   7,    9), S(  19,   11), S(  17,   18), S(  12,    3), S(   3,   10), S(  -8,    7),
		S(  14,   -5), S(   1,    7), S(   5,    4), S(   7,   10), S(  16,    6), S(  -5,   14), S(  -3,    4), S(  -1,    3),
		S(  20,  -10), S(  22,  -10), S(  11,   -2), S(   3,    6), S(  -5,    4), S(   5,    3), S(   9,    3), S(   0,   -7),
		S(  21,  -17), S(  29,  -22), S(  18,  -11), S(   3,   -4), S(  -5,   -1), S(   8,  -19), S(   6,  -17), S(  14,   -8),
		S(  33,  -28), S(  19,  -18), S(  -5,    3), S(  14,   -2), S(   0,   -2), S(   4,    4), S(  13,   -3), S(  13,   -9),
	},
	{
		S(  12,    9), S( -36,   42), S( -19,   27), S( -10,   13), S( -27,   23), S( -30,   32), S( -12,   22), S(  -8,   21),
		S(  27,    0), S(  31,    5), S(  19,    8), S(   7,    8), S(  17,   11), S(   1,   23), S(  -2,   20), S(   0,   14),
		S(  16,   -2), S(  43,   -2), S(  35,   -6), S(  32,   -4), S(   7,    7), S(   1,   19), S(  13,   16), S(  -8,   19),
		S(   7,    5), S(   7,   11), S(  18,    4), S(  11,    1), S(   2,   11), S(   5,   17), S(   4,   17), S(  -9,   19),
		S(  -5,   -3), S(  15,    0), S(   0,    0), S(   5,    2), S(  -7,    6), S( -10,   10), S( -13,   10), S( -17,   11),
		S(  12,  -28), S(  23,  -33), S(   2,  -20), S(   1,  -16), S( -12,   -7), S( -17,   -7), S( -15,   -9), S( -21,   -7),
		S(  -6,  -27), S(  20,  -37), S(   4,  -25), S(   1,  -22), S(  -6,  -18), S(  -7,  -14), S( -17,  -10), S( -19,  -16),
		S( -11,  -28), S(  -7,  -14), S(  -3,  -19), S(   4,  -24), S(  -4,  -20), S( -11,  -12), S( -10,  -17), S( -11,  -12),
	},
	{
		S(   0,   -8), S(  37,  -30), S( -20,   35), S( -29,   35), S(  -1,    5), S( -34,   31), S( -47,   18), S( -23,    4),
		S(  30,   16), S( -10,   29), S( -24,   39), S( -47,   74), S( -32,   48), S( -11,   13), S(  -6,   -8), S(   4,   -7),
		S(   3,   30), S(   6,   19), S(  -2,   35), S( -12,   42), S(   4,   21), S(  10,   12), S(   8,   -8), S(  20,   -9),
		S(  10,   25), S(  10,   42), S(   6,   22), S( -12,   35), S(  -6,   29), S(   8,    1), S(   9,    5), S(   7,    1),
		S(  15,    7), S(  18,   14), S(   8,   14), S(   2,   22), S(  -1,   17), S(   0,   12), S(   5,   10), S(   3,    2),
		S(  17,  -26), S(  17,  -14), S(   9,   -4), S(  -1,    7), S(  -1,    0), S(  -1,    3), S(   8,  -14), S(   8,  -21),
		S(  18,  -62), S(  23,  -76), S(  13,  -49), S(  10,  -17), S(   8,  -14), S(   9,  -28), S(   9,  -34), S(  15,  -45),
		S(  10,  -59), S(  -3,  -63), S( -13,  -29), S(  -1,  -27), S(  -1,  -23), S(  -5,  -19), S(  -9,  -22), S(  -9,  -21),
	},
	{
		S(  -6,  -74), S(  -9,   -5), S( -42,   13), S( -23,   14), S(   9,   -5), S(   9,   -5), S(   9,   -5), S(   9,   -5),
		S( -42,   10), S( -11,   48), S( -13,   56), S(  32,   39), S(   9,   -5), S(   9,   -5), S(   9,   -5), S(   9,   -5),
		S(  -9,    3), S(  27,   35), S(  27,   51), S(   1,   63), S(   9,   -5), S(   9,   -5), S(   9,   -5), S(   9,   -5),
		S( -46,    0), S( -22,   27), S( -25,   48), S( -49,   55), S(   9,   -5), S(   9,   -5), S(   9,   -5), S(   9,   -5),
		S( -68,   -7), S( -38,   13), S( -23,   27), S( -45,   41), S(   9,   -5), S(   9,   -5), S(   9,   -5), S(   9,   -5),
		S( -26,  -22), S(   2,   -8), S( -11,    9), S( -12,   21), S(   9,   -5), S(   9,   -5), S(   9,   -5), S(   9,   -5),
		S(  29,  -43), S(  33,  -24), S(  12,   -4), S(  -1,    7), S(   9,   -5), S(   9,   -5), S(   9,   -5), S(   9,   -5),
		S(  20,  -80), S(  25,  -47), S(   4,  -21), S(  16,  -26), S(   9,   -5), S(   9,   -5), S(   9,   -5), S(   9,   -5),
	},
};

constexpr PackedScore MOBILITY[4][28] = {
	{S( -12,  -16), S( -40,  -64), S( -15,  -31), S(  -7,   -5), S(   3,    7), S(   6,   17), S(  14,   24), S(  22,   31), S(  31,   31), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -25,  -26), S( -52,  -97), S( -30,  -39), S( -24,  -17), S( -11,   -4), S(  -4,    5), S(   1,   16), S(   6,   20), S(   8,   26), S(  14,   27), S(  16,   28), S(  28,   21), S(  33,   22), S(  48,    6), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -30,  -31), S(  13,  -66), S( -26,  -49), S( -14,  -29), S(  -8,  -20), S(  -2,   -5), S(   1,    0), S(  -4,    9), S(   1,   13), S(   4,   18), S(   8,   23), S(  10,   30), S(  13,   35), S(  20,   37), S(  27,   35), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -22,  -22), S( -42, -100), S( -86, -102), S( -61, -280), S( -65, -119), S( -21,  -55), S( -14,  -28), S(  -6,  -24), S(   2,  -23), S(   1,    4), S(   3,   12), S(   5,   23), S(   8,   28), S(  11,   32), S(  13,   35), S(  16,   39), S(  16,   44), S(  15,   51), S(  15,   55), S(  14,   62), S(  20,   57), S(  25,   48), S(  24,   54), S(  38,   41), S(  39,   42), S(  51,   29), S(  27,   46), S( -30,   57)}
};

constexpr PackedScore THREAT_BY_PAWN[6] = {S(  10,  -13), S(  65,   30), S(  64,   62), S(  78,   33), S(  76,   -9), S(   0,    0)};
constexpr PackedScore THREAT_BY_KNIGHT[2][6] = {
	{S(   8,   28), S(  25,   41), S(  39,   42), S(  75,   11), S(  47,  -20), S(   0,    0)},
	{S(  -4,   10), S(  12,   38), S(  30,   30), S(  64,   33), S(  57,    0), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_BISHOP[2][6] = {
	{S(   1,   37), S(  43,   36), S( -10,   39), S(  71,   14), S(  69,   61), S(   0,    0)},
	{S(   0,    8), S(  22,   23), S( -24,  -12), S(  44,   46), S(  48,  121), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_ROOK[2][6] = {
	{S(   1,   44), S(  19,   63), S(  28,   59), S(  13,  -44), S(  74,   12), S(   0,    0)},
	{S(  -6,    5), S(   4,   12), S(  15,    1), S(  16,  -92), S(  66,   44), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_QUEEN[2][6] = {
	{S(   6,   12), S(  24,   21), S(   9,   51), S(  13,    8), S(  12,  -62), S( 102,    8)},
	{S(  -2,   12), S(   1,    7), S(  -7,   22), S(  -6,    4), S( -20,  -64), S( 110,   53)}
};
constexpr PackedScore THREAT_BY_KING[6] = {S( -40,   52), S(  -2,   52), S(  17,   49), S(  77,   27), S(   0,    0), S(   0,    0)};
constexpr PackedScore PUSH_THREAT = S(  16,   20);

constexpr PackedScore ISOLATED_PAWN[8] = {S(  -8,    8), S(  -3,  -13), S( -11,   -6), S( -10,  -15), S( -10,  -14), S(  -5,   -7), S(  -1,  -13), S(  -9,    9)};
constexpr PackedScore DOUBLED_PAWN[8] = {S(  -7,  -58), S(   8,  -39), S(  -2,  -32), S(  -3,  -23), S(  -5,  -18), S( -15,  -24), S(   3,  -39), S(  -5,  -68)};
constexpr PackedScore PAWN_PHALANX[8] = {S(   0,    0), S(   5,   -2), S(  12,    3), S(  20,   16), S(  48,   61), S( 119,  216), S( -19,  389), S(   0,    0)};
constexpr PackedScore DEFENDED_PAWN[8] = {S(   0,    0), S(   0,    0), S(  20,    9), S(  13,    7), S(  13,   19), S(  20,   58), S( 150,   59), S(   0,    0)};

constexpr PackedScore PASSED_PAWN[2][2][8] = {
	{
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -31,  -39), S( -15,   25), S( -30,  161), S(   7,  241), S(   0,    0)},
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -19,  -52), S(  12,  -26), S(  13,   15), S(  66,   23), S(   0,    0)}
	},
	{
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -28,  -55), S(  -2,  -23), S(   9,    7), S(  78,  -18), S(   0,    0)},
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -29,  -57), S(   1,  -35), S(  -9,  -20), S(  23,  -53), S(   0,    0)}
	}
};
constexpr PackedScore OUR_PASSER_PROXIMITY[8] = {S(   0,    0), S(  42,   87), S(  -1,   69), S(  -1,   40), S(   4,   28), S(  10,   21), S(  20,   20), S(  14,   18)};
constexpr PackedScore THEIR_PASSER_PROXIMITY[8] = {S(   0,    0), S( -24,  -11), S(  24,   -5), S(  13,   26), S(  16,   47), S(   7,   83), S(  10,   81), S(  12,   69)};

constexpr PackedScore PAWN_STORM[2][4][8] = {
	{
		{S(  21,    0), S(-188,    0), S(  -9,    0), S(  -5,    0), S(  -3,    0), S(  -3,    0), S(  -2,    0), S(   0,    0)},
		{S(  13,    0), S(-100,    0), S(  27,    0), S(   4,    0), S(  -1,    0), S(  -7,    0), S(  -3,    0), S(   0,    0)},
		{S(   1,    0), S( -48,    0), S(  32,    0), S(   8,    0), S(   2,    0), S(  -4,    0), S(  -4,    0), S(   0,    0)},
		{S(   8,    0), S(  -8,    0), S(  30,    0), S(  15,    0), S(   1,    0), S(  -7,    0), S(  -1,    0), S(   0,    0)}
	},
	{
		{S(   0,    0), S(  -5,    0), S(  -7,    0), S( -16,    0), S(  -2,    0), S(  -1,    0), S(  -3,    0), S(   0,    0)},
		{S(   0,    0), S(  -9,    0), S(  30,    0), S(  31,    0), S(   4,    0), S(  -4,    0), S(  -4,    0), S(   0,    0)},
		{S(   0,    0), S(  -6,    0), S(-138,    0), S(   5,    0), S(   3,    0), S(   1,    0), S(  -4,    0), S(   0,    0)},
		{S(   0,    0), S( -19,    0), S(  73,    0), S(  25,    0), S(   5,    0), S(  -1,    0), S(   3,    0), S(   0,    0)}
	}
};
constexpr PackedScore PAWN_SHIELD[4][8] = {
	{S(   8,    0), S(  -1,    0), S( -12,    0), S(  -4,    0), S(  -3,    0), S( -55,    0), S(-135,    0), S(   0,    0)},
	{S(  16,    0), S( -12,    0), S(  -8,    0), S(   8,    0), S(   2,    0), S( -18,    0), S( -84,    0), S(   0,    0)},
	{S(   8,    0), S( -14,    0), S(  16,    0), S(  -1,    0), S(  -2,    0), S(  -7,    0), S( -44,    0), S(   0,    0)},
	{S(  16,    0), S(   8,    0), S(  -1,    0), S(   0,    0), S(   8,    0), S(  19,    0), S( -34,    0), S(   0,    0)}
};
constexpr PackedScore SAFE_KNIGHT_CHECK = S(  80,    0);
constexpr PackedScore SAFE_BISHOP_CHECK = S(  30,    0);
constexpr PackedScore SAFE_ROOK_CHECK = S(  62,    0);
constexpr PackedScore SAFE_QUEEN_CHECK = S(  34,    0);
constexpr PackedScore UNSAFE_KNIGHT_CHECK = S(   8,    0);
constexpr PackedScore UNSAFE_BISHOP_CHECK = S(  16,    0);
constexpr PackedScore UNSAFE_ROOK_CHECK = S(  19,    0);
constexpr PackedScore UNSAFE_QUEEN_CHECK = S(  11,    0);
constexpr PackedScore KING_ATTACKER_WEIGHT[4] = {S(  21,    0), S(  19,    0), S(  11,    0), S(   7,    0)};
constexpr PackedScore KING_ATTACKS[14] = {S( -22,    0), S( -34,    0), S( -45,    0), S( -50,    0), S( -52,    0), S( -48,    0), S( -35,    0), S( -22,    0), S(   2,    0), S(  29,    0), S(  44,    0), S(  74,    0), S(  79,    0), S(  89,    0)};

constexpr PackedScore MINOR_BEHIND_PAWN = S(   8,   14);
constexpr PackedScore KNIGHT_OUTPOST = S(  27,   17);
constexpr PackedScore BISHOP_PAWNS[7] = {S(   4,   22), S(   6,   21), S(   4,   12), S(   1,    4), S(  -3,   -6), S(  -3,  -21), S(  -8,  -36)};
constexpr PackedScore BISHOP_PAIR = S(  20,   63);
constexpr PackedScore ROOK_OPEN[2] = {S(  27,    3), S(  16,    3)};

constexpr PackedScore TEMPO = S(  32,   35);

constexpr PackedScore COMPLEXITY_PAWNS = S(   0,    8);
constexpr PackedScore COMPLEXITY_PASSERS = S(   0,    0);
constexpr PackedScore COMPLEXITY_PAWNS_BOTH_SIDES = S(   0,   68);
constexpr PackedScore COMPLEXITY_PAWN_ENDGAME = S(   0,   62);
constexpr PackedScore COMPLEXITY_OFFSET = S(   0, -129);

#undef S


}