#pragma once

#include "../defs.h"

namespace eval
{

#define S(mg, eg) PackedScore(mg, eg)

constexpr PackedScore MATERIAL[6] = {S(  62,  100), S( 299,  426), S( 323,  434), S( 398,  779), S( 848, 1420), S(0, 0)};

constexpr PackedScore PSQT[6][64] = {
	{
		S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
		S(  34,   92), S(  49,   90), S(  88,   93), S(  89,   66), S(  98,   50), S(  55,   70), S(  34,   90), S(  20,   85),
		S(  48,   22), S(  64,   43), S(  83,    3), S(  54,  -13), S(  43,  -13), S(  36,   -3), S(   5,   37), S(   2,   24),
		S(  19,    2), S(  10,   23), S(  29,   -8), S(  17,  -11), S(   3,  -10), S(  -2,   -4), S( -11,   22), S( -13,   13),
		S(   8,  -11), S(   0,   18), S(  14,   -9), S(   7,   -7), S(   0,   -8), S(  -7,   -6), S( -21,   20), S( -20,   -2),
		S(  15,  -20), S(  15,    6), S(  -2,   -2), S(  -3,    1), S( -12,    0), S( -19,   -7), S( -29,   12), S( -32,   -6),
		S(  32,  -24), S(  51,    2), S(  35,   -4), S(   3,   12), S( -13,    4), S( -13,    1), S( -21,   21), S( -23,    1),
		S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
	},
	{
		S( -65,  -78), S( -57,  -26), S( -15,  -19), S(  18,  -15), S( -34,    6), S( -64,    8), S(-105,   11), S( -85,  -44),
		S(   1,  -13), S(  25,   -4), S(  29,   -9), S(   7,    4), S(  11,    6), S(  -4,   10), S(  -8,   19), S( -14,   11),
		S(  23,   -8), S(  12,    0), S(  58,  -17), S(  29,    3), S(  15,    7), S(  13,    6), S(   1,    8), S(  -7,    6),
		S(  41,    3), S(  37,    9), S(  52,    4), S(  34,   14), S(  37,   13), S(  29,    9), S(  18,    6), S(   6,   18),
		S(  10,   15), S(  26,    7), S(  28,    7), S(  25,   20), S(  27,   15), S(  19,   14), S(  21,    4), S(   0,   13),
		S(   1,    0), S(  16,   -4), S(   5,   -9), S(  18,    9), S(   5,   11), S(  -4,   -4), S(  -6,   -3), S( -17,    1),
		S(   4,   12), S(  10,   -1), S(   6,   -5), S(   3,   -1), S(   3,   -2), S( -12,   -3), S( -14,    2), S( -22,    5),
		S( -13,   -2), S( -12,    1), S(  -3,   -5), S(  -5,    5), S( -14,    2), S( -26,   -5), S( -16,    0), S( -54,   13),
	},
	{
		S( -42,   -4), S( -37,    7), S(  -9,   -5), S( -76,   12), S( -71,   13), S( -58,    4), S( -31,    6), S( -17,   12),
		S( -34,   -3), S( -50,   13), S( -14,   -1), S(  -9,   -3), S( -28,    8), S(  -5,   -5), S(  -7,   -1), S( -10,   -6),
		S(  24,   10), S(  19,   -1), S(  44,    6), S(   9,    3), S(  13,   -4), S(   6,    3), S(   6,    4), S(   4,    6),
		S(   3,    4), S(  10,    7), S(  13,   10), S(  20,   13), S(  24,   16), S(  12,    5), S(   5,   10), S(  -8,    7),
		S(  20,   -8), S(   6,    7), S(   9,    4), S(  12,   12), S(  17,   10), S(   0,   11), S(  -2,    6), S(   0,    4),
		S(  20,   -9), S(  22,  -10), S(  12,   -3), S(   5,    6), S(  -4,    4), S(   3,    4), S(  11,    3), S(  -2,   -4),
		S(  27,  -14), S(  35,  -18), S(  23,  -13), S(   3,   -3), S(  -6,   -2), S(   9,  -17), S(   6,  -15), S(  20,   -4),
		S(  36,  -26), S(  23,  -19), S(  -4,    5), S(  12,   -5), S(  -2,   -3), S(   3,    5), S(  14,    0), S(  11,   -7),
	},
	{
		S(  16,    9), S( -30,   41), S(  -6,   27), S( -10,   15), S( -31,   28), S( -26,   32), S( -10,   23), S( -13,   25),
		S(  27,    2), S(  33,    7), S(  24,   10), S(   5,   14), S(  20,   13), S(  -2,   28), S(  -4,   23), S(  -5,   18),
		S(  20,   -2), S(  47,    0), S(  38,   -2), S(  19,    9), S(   2,   13), S(  -3,   24), S(   8,   19), S( -13,   23),
		S(   6,    8), S(  10,   13), S(  18,    8), S(  14,    3), S(   3,   12), S(   5,   18), S(   5,   17), S( -10,   21),
		S(  -5,   -3), S(  20,    0), S(   1,    4), S(  10,    0), S(  -5,    6), S(  -9,    9), S( -12,   10), S( -16,    9),
		S(  10,  -28), S(  24,  -28), S(   3,  -17), S(   3,  -16), S( -10,   -9), S( -17,   -9), S( -16,   -9), S( -21,   -8),
		S(  -9,  -32), S(  24,  -38), S(  10,  -27), S(   3,  -23), S(  -5,  -18), S(  -7,  -16), S( -17,  -14), S( -21,  -17),
		S( -17,  -30), S( -11,  -14), S(   0,  -20), S(   6,  -26), S(  -3,  -24), S( -11,  -17), S( -11,  -20), S( -10,  -18),
	},
	{
		S(   8,  -25), S(  35,  -33), S(   3,   13), S(  -1,    3), S(  15,  -14), S( -12,    2), S( -45,    8), S( -27,    0),
		S(  44,   -4), S(   1,   11), S(   8,   23), S( -26,   54), S( -24,   46), S(  -6,   12), S(  -9,   -6), S(   2,   -9),
		S(  22,    5), S(  23,    3), S(  10,   26), S(  -4,   38), S(   2,   29), S(   2,   23), S(   3,   -1), S(  16,   -5),
		S(  14,   20), S(  10,   39), S(  10,   17), S( -12,   39), S(  -6,   30), S(   6,    9), S(   3,   19), S(   3,    8),
		S(  13,    7), S(  21,   14), S(   5,   19), S(   1,   25), S(  -7,   24), S(  -5,   20), S(   2,   18), S(  -2,    9),
		S(  14,  -26), S(  15,  -11), S(   3,    1), S(  -8,   16), S(  -9,    7), S( -10,   11), S(   1,   -4), S(   1,  -11),
		S(  14,  -59), S(  21,  -75), S(  10,  -44), S(   3,   -9), S(   0,   -7), S(   2,  -21), S(   1,  -27), S(  10,  -40),
		S(   5,  -58), S( -15,  -51), S( -20,  -21), S( -11,  -14), S( -10,  -14), S( -15,   -9), S( -22,  -10), S( -18,  -16),
	},
	{
		S(  15,  -61), S(  20,   -9), S(  12,  -12), S(  22,  -12), S(   0,   -3), S(   0,   -3), S(   0,   -3), S(   0,   -3),
		S( -61,   40), S(   6,   49), S(  21,   39), S(  96,   -1), S(   0,   -3), S(   0,   -3), S(   0,   -3), S(   0,   -3),
		S( -43,   30), S(  20,   40), S(  57,   28), S(  54,   22), S(   0,   -3), S(   0,   -3), S(   0,   -3), S(   0,   -3),
		S( -71,   21), S( -14,   25), S(   0,   25), S(   0,   13), S(   0,   -3), S(   0,   -3), S(   0,   -3), S(   0,   -3),
		S( -97,   17), S( -30,   16), S(  -7,   11), S( -15,    9), S(   0,   -3), S(   0,   -3), S(   0,   -3), S(   0,   -3),
		S( -56,    7), S(   3,    1), S(  -7,    3), S(  -1,   -1), S(   0,   -3), S(   0,   -3), S(   0,   -3), S(   0,   -3),
		S(  10,  -14), S(  30,  -10), S(   8,   -5), S(  -4,  -10), S(   0,   -3), S(   0,   -3), S(   0,   -3), S(   0,   -3),
		S(   7,  -47), S(  12,  -23), S( -22,   -8), S( -14,  -27), S(   0,   -3), S(   0,   -3), S(   0,   -3), S(   0,   -3),
	},
};

constexpr PackedScore MOBILITY[4][28] = {
	{S( -16,  -15), S( -43,  -61), S( -17,  -29), S(  -8,   -5), S(   3,    7), S(   7,   18), S(  16,   24), S(  24,   31), S(  33,   31), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -18,  -28), S( -54,  -89), S( -31,  -34), S( -24,  -14), S( -10,   -2), S(  -2,    6), S(   3,   17), S(   8,   21), S(  11,   26), S(  16,   27), S(  16,   30), S(  27,   22), S(  28,   21), S(  42,    7), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -28,  -38), S(  16,  -76), S( -26,  -41), S( -17,  -25), S( -10,  -20), S(  -4,   -6), S(   0,   -1), S(  -6,   10), S(   0,   12), S(   3,   18), S(   7,   24), S(   8,   33), S(  12,   38), S(  18,   40), S(  24,   37), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -37,   22), S( -60,  -70), S(-102,  -79), S( -78, -247), S( -84,  -89), S( -37,  -28), S( -24,  -12), S( -17,   -7), S(  -9,   -6), S(  -8,   19), S(  -5,   24), S(  -2,   33), S(   1,   39), S(   5,   42), S(   8,   46), S(  11,   47), S(  13,   50), S(  13,   55), S(  15,   55), S(  16,   58), S(  25,   49), S(  35,   30), S(  39,   27), S(  57,    6), S(  56,    8), S(  67,  -10), S(  63,  -21), S(  30,  -33)}
};

constexpr PackedScore THREAT_BY_PAWN[6] = {S(  11,  -17), S(  69,   30), S(  69,   59), S(  81,   30), S(  80,  -10), S(   0,    0)};
constexpr PackedScore THREAT_BY_KNIGHT[2][6] = {
	{S(   7,   30), S(  31,   32), S(  38,   43), S(  80,    7), S(  48,  -24), S(   0,    0)},
	{S(  -4,   11), S(  15,   44), S(  32,   32), S(  67,   30), S(  59,   -3), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_BISHOP[2][6] = {
	{S(   3,   37), S(  52,   27), S(   2,   29), S(  78,    9), S(  71,   59), S(   0,    0)},
	{S(   1,   10), S(  24,   24), S( -14,    4), S(  47,   44), S(  49,  133), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_ROOK[2][6] = {
	{S(  -2,   45), S(  31,   55), S(  29,   53), S(  22,  -50), S(  79,   -2), S(   0,    0)},
	{S(  -6,    9), S(   6,   19), S(  18,    6), S(  19,  -85), S(  64,   46), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_QUEEN[2][6] = {
	{S(  11,    8), S(  36,   17), S(  18,   47), S(  26,   -5), S(  14,  -67), S(  96,   24)},
	{S(  -1,   14), S(   2,    9), S(  -4,   23), S(  -5,    5), S( -19,  -67), S( 113,   46)}
};
constexpr PackedScore THREAT_BY_KING[6] = {S( -12,   45), S(  31,   45), S(  31,   48), S(  96,   13), S(   0,    0), S(   0,    0)};
constexpr PackedScore PUSH_THREAT = S(  20,   18);

constexpr PackedScore ISOLATED_PAWN[8] = {S(  -7,   11), S(  -1,  -14), S( -10,   -5), S(  -9,  -13), S( -10,  -11), S(  -7,   -3), S(   0,  -12), S( -12,   11)};
constexpr PackedScore PAWN_PHALANX[8] = {S(   0,    0), S(   4,   -3), S(  14,    4), S(  21,   14), S(  48,   57), S( 111,  204), S( -33,  383), S(   0,    0)};
constexpr PackedScore DEFENDED_PAWN[8] = {S(   0,    0), S(   0,    0), S(  20,    9), S(  14,    8), S(  14,   18), S(  23,   54), S( 160,   50), S(   0,    0)};

constexpr PackedScore PASSED_PAWN[2][2][8] = {
	{
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -32,  -38), S( -20,   28), S( -38,  160), S(  32,  242), S(   0,    0)},
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -20,  -53), S(  12,  -27), S(  13,   12), S(  79,   22), S(   0,    0)}
	},
	{
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -30,  -57), S(  -4,  -23), S(  12,    4), S(  75,  -10), S(   0,    0)},
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -30,  -64), S(  -1,  -38), S(  -9,  -24), S(  -3,  -50), S(   0,    0)}
	}
};
constexpr PackedScore OUR_PASSER_PROXIMITY[8] = {S(   0,    0), S(  19,   92), S(  -6,   69), S(   1,   40), S(   5,   28), S(   9,   19), S(  16,   18), S(  10,   18)};
constexpr PackedScore THEIR_PASSER_PROXIMITY[8] = {S(   0,    0), S( -62,   17), S(  20,   -4), S(   9,   26), S(  15,   47), S(  10,   82), S(  19,   81), S(  18,   72)};

constexpr PackedScore PAWN_STORM[3][8] = {
	{S(  57,  -30), S(  29,  -16), S(  20,    1), S(  11,    2), S(   2,    5), S(  -4,    8), S(  -5,    8), S(   5,  -14)},
	{S(   0,    0), S(  22,  -24), S(  24,    8), S(   6,    3), S(  -5,    6), S(  -9,   12), S(  -9,   11), S(   6,   -9)},
	{S(  13,    2), S(   0,   10), S(   7,   13), S(   5,   12), S(   5,   10), S(   3,   10), S(   4,    8), S(  -9,   -6)}
};
constexpr PackedScore PAWN_SHIELD[3][8] = {
	{S(  18,  -15), S(   2,   -8), S(  -3,   -9), S(  -6,   -6), S(   6,   -7), S(  24,  -25), S(  41,  -20), S( -11,    9)},
	{S(   0,    0), S(  -9,    1), S( -13,    0), S(  -1,    1), S(  12,   -3), S(  39,  -26), S(  58,  -33), S(   7,    8)},
	{S(  -5,   -4), S(  -5,   -1), S(   0,   -2), S(   1,    2), S(   4,    4), S(   7,   -1), S(  19,   -7), S(  -7,   13)}
};
constexpr PackedScore SAFE_KNIGHT_CHECK = S(  79,   -2);
constexpr PackedScore SAFE_BISHOP_CHECK = S(  20,   12);
constexpr PackedScore SAFE_ROOK_CHECK = S(  53,    3);
constexpr PackedScore SAFE_QUEEN_CHECK = S(  20,   20);
constexpr PackedScore KING_ATTACKER_WEIGHT[4] = {S(  19,    0), S(  12,    1), S(  17,  -16), S(   2,    5)};
constexpr PackedScore KING_ATTACKS[14] = {S( -75,   31), S( -79,   26), S( -84,   21), S( -84,   24), S( -78,   20), S( -64,   15), S( -42,    8), S( -17,   -3), S(  28,  -23), S(  55,  -25), S(  89,  -36), S( 111,  -20), S( 140,  -90), S( 109,   45)};

constexpr PackedScore KNIGHT_OUTPOST = S(  28,   18);
constexpr PackedScore BISHOP_PAWNS[7] = {S(   4,   24), S(   7,   21), S(   4,   13), S(   1,    5), S(  -3,   -5), S(  -5,  -19), S( -10,  -34)};
constexpr PackedScore BISHOP_PAIR = S(  20,   60);
constexpr PackedScore ROOK_OPEN[2] = {S(  27,    5), S(  15,    7)};

constexpr PackedScore TEMPO = S(  33,   33);

constexpr PackedScore COMPLEXITY_PAWNS = S(  -1,   12);
constexpr PackedScore COMPLEXITY_PASSERS = S(   4,    5);
constexpr PackedScore COMPLEXITY_OFFSET = S(  16, -100);

#undef S


}