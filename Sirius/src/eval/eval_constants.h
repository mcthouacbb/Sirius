#pragma once

#include "../defs.h"

namespace eval
{

// clang-format off
#define S(mg, eg) ScorePair(mg, eg)

constexpr ScorePair MATERIAL[6] = {S(  63,  130), S( 323,  442), S( 339,  458), S( 433,  794), S( 939, 1604), S(0, 0)};

constexpr ScorePair PSQT[6][64] = {
    {
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  64,  100), S(  35,   67), S(  83,   42), S(  63,   90), S(  69,   72), S(  43,   66), S(  22,   96), S(  80,   89),
        S(   8,   20), S( -11,   27), S(  17,   11), S(  10,   -2), S( -16,   -5), S(   2,    2), S( -17,   22), S(  -2,   16),
        S(   3,   14), S(   9,   14), S(  13,   -9), S(  10,  -15), S(   1,  -12), S(   0,   -8), S(  -2,   14), S( -11,   12),
        S(  -8,    0), S(  -6,   19), S(  18,  -26), S(  22,  -18), S(  12,  -15), S(   4,  -11), S( -11,   12), S( -17,   -2),
        S( -15,   -5), S(  13,    6), S(   4,   -8), S(   9,    0), S(  -3,    3), S(  -6,   -2), S( -15,   12), S( -23,   -5),
        S(  -6,   -6), S(  24,   10), S(  27,   30), S(   6,   12), S(  -1,    3), S(   0,    1), S(  -6,   13), S( -18,   -2),
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
    },
    {
        S( -60, -108), S(-112,   33), S( -97,   31), S( -10,   24), S( -62,   25), S( -85,   29), S( -97,    8), S( -75,  -80),
        S(  -5,    0), S(   8,    1), S(  35,    3), S(  47,   13), S(  33,   13), S(  28,   -8), S(  -5,   -1), S(  -9,  -12),
        S(   8,   -7), S(   9,   12), S(  59,    0), S(  25,   21), S(  13,   21), S(  36,   -6), S(   7,    5), S( -13,    4),
        S(  29,   -5), S(  26,   13), S(  26,   20), S(  27,   30), S(  32,   24), S(  22,   13), S(  18,    3), S(  12,    9),
        S(  20,    9), S(  28,    4), S(  25,   16), S(  18,   28), S(  18,   24), S(  16,   19), S(   8,   12), S(   4,    6),
        S(   1,  -11), S(  15,    0), S(  13,    3), S(  18,   10), S(  10,   13), S(  -2,   -3), S(  -2,   -6), S(  -7,  -14),
        S(   5,  -11), S(   9,   -2), S(   7,  -14), S(   7,    2), S(   2,   -1), S(   0,  -11), S(   0,  -11), S( -29,  -22),
        S(  -4,  -48), S( -13,  -15), S(  -3,  -11), S(   2,   -5), S(  -2,    6), S(  -6,  -25), S( -19,  -18), S(  -7,  -32),
    },
    {
        S( -29,  -43), S( -40,   18), S( -77,   15), S( -70,   27), S( -52,   17), S( -46,    3), S( -41,    7), S( -36,  -20),
        S( -11,   -4), S( -34,   11), S(  -6,    6), S( -43,   16), S(  -7,   14), S( -12,   13), S( -19,   -7), S( -24,    2),
        S(  22,  -18), S(  15,   11), S(  14,   21), S(  16,   19), S(  11,   14), S(  10,    5), S(   9,    9), S(  10,   -6),
        S(   1,    3), S(   8,   19), S(  14,   13), S(  16,   29), S(  21,   30), S(  15,    7), S(  18,    9), S(   6,   -4),
        S(  12,   -6), S(   8,    2), S(  10,   17), S(  19,   13), S(  19,   17), S(   8,   16), S(   6,    0), S(  18,  -18),
        S(  20,  -14), S(  22,   -6), S(  10,   -4), S(  11,   17), S(  11,    8), S(   1,   -5), S(  27,   -6), S(  10,  -13),
        S(  31,  -29), S(  24,  -27), S(  26,  -13), S(  12,   -8), S(  -1,   -5), S(  10,  -13), S(   5,  -20), S(  21,    0),
        S(   5,  -36), S(   9,   -7), S( -13,   -8), S(  13,  -19), S(   6,   -9), S(  -6,   -6), S(  18,  -18), S(   8,  -12),
    },
    {
        S(  22,   10), S(  55,   -8), S(   5,   26), S(  12,   27), S(  20,   19), S(  23,   17), S(  19,   22), S(  31,   13),
        S(  30,    9), S(  11,   24), S(  22,   16), S(  17,   23), S(  20,   28), S(  18,   22), S(  12,   27), S(  31,   17),
        S( -12,   11), S(  24,    0), S(  20,    6), S(  25,    3), S(   6,   16), S(   2,   16), S(   6,   17), S(  -7,   24),
        S( -20,   11), S(  -7,   15), S(  -3,   12), S(  -7,   13), S( -12,   12), S(  -8,   16), S( -11,   23), S(  -3,    8),
        S( -25,   -5), S( -11,    6), S( -13,   10), S(  -4,    3), S( -12,    1), S( -14,   10), S( -19,   11), S( -15,    3),
        S( -28,  -17), S(   7,  -28), S( -12,   -3), S(   0,  -18), S(   0,  -15), S( -14,  -13), S( -11,  -14), S( -17,  -15),
        S( -63,  -22), S( -11,  -31), S(   1,  -25), S(   1,  -20), S(   0,  -26), S(  -3,  -23), S( -16,  -24), S( -23,  -19),
        S( -20,  -33), S( -27,  -15), S(   7,  -23), S(  14,  -27), S(   6,  -27), S(  -4,  -20), S(  -4,  -23), S(  -4,  -21),
    },
    {
        S(   9,   27), S(  23,   31), S(  46,   -1), S(  33,   24), S(  13,   26), S(  30,   17), S(  30,  -10), S( -26,   45),
        S(  29,   -3), S(  17,   21), S(  -3,   36), S( -28,   46), S(  10,   28), S(  15,   -7), S(  22,  -20), S(  16,  -11),
        S(   4,    8), S(  20,   -2), S(   8,    1), S( -19,   29), S(   0,   40), S(  24,  -14), S(  14,   -8), S(  28,  -28),
        S(  -1,   10), S(  -5,    6), S( -24,   41), S( -23,   37), S( -22,   40), S(   9,    4), S(   1,   19), S(   2,    9),
        S( -12,   18), S( -16,   25), S(  -4,   -4), S( -20,   36), S( -23,   40), S(  -1,    8), S(   3,    3), S(  -9,   22),
        S( -14,   -7), S(  -3,   -3), S(  -8,   -3), S( -19,    9), S( -12,   18), S(  -8,   16), S(   8,  -18), S(   1,   -3),
        S(  -8,  -56), S(   6,  -77), S(  -1,  -55), S(  -9,  -10), S(  -8,  -14), S(   5,  -32), S(   6,  -31), S(  -1,  -18),
        S(  -5,  -47), S( -28,  -46), S( -16,  -55), S( -15,  -34), S(  -3,  -33), S( -13,  -28), S( -15,  -21), S(  -4,  -34),
    },
    {
        S(  12, -184), S(  78,   55), S(   2,   58), S( -21,   48), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(   3,  -18), S(  30,   76), S( -13,   66), S( -16,   70), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  -5,   32), S(  16,   93), S( -36,   52), S(-156,   31), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S( -37,   29), S( -37,   76), S( -86,   51), S(-134,   17), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S( -71,   25), S( -59,   58), S( -86,   32), S(-121,   14), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(   1,    3), S(  -7,   31), S( -29,    8), S( -57,  -10), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  61,  -25), S(  45,    5), S(  21,  -25), S( -12,  -42), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  60,  -57), S(  60,  -21), S(  20,  -47), S(  15,  -85), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
    },
};

constexpr ScorePair MOBILITY[4][28] = {
    {S(  -7,  -26), S( -36,  -52), S( -23,  -14), S( -10,    0), S(   1,    9), S(   7,   19), S(  14,   24), S(  22,   27), S(  34,   18), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S(  -6,  -32), S( -42,  -58), S( -25,  -28), S( -13,   -8), S(  -7,    1), S(  -1,   10), S(   0,   17), S(   3,   20), S(   2,   24), S(   7,   25), S(   7,   23), S(  13,   15), S(  22,   14), S(  44,  -20), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S( -32,  -64), S( -58,  -56), S( -16,  -42), S(  -8,  -27), S(   0,  -19), S(   5,   -6), S(   4,    6), S(   6,   11), S(   7,   15), S(  10,   19), S(  11,   28), S(   9,   37), S(  10,   43), S(  14,   41), S(  46,   15), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S( -21,   59), S( -22,   -6), S(   1,  -67), S( -27, -112), S( -14, -134), S( -18,  -67), S( -12,  -39), S(  -5,  -22), S(  -7,  -10), S(  -8,    8), S(  -5,   19), S(  -4,   24), S(  -3,   30), S(  -2,   41), S(  -1,   45), S(  -3,   49), S(   0,   46), S(  -1,   53), S(   1,   51), S(   7,   42), S(   3,   52), S(   8,   37), S(   5,   39), S(  17,   14), S(  28,   -5), S(  34,  -43), S(  26,  -59), S(  13,  -44)}
};

constexpr ScorePair THREAT_BY_PAWN[6] = {S(  -6,   -9), S(  74,   39), S(  69,   69), S(  68,   52), S(  53,   30), S(   0,    0)};
constexpr ScorePair THREAT_BY_KNIGHT[2][6] = {
    {S(   7,   33), S(  -7,  102), S(  45,   30), S(  94,    5), S(  37,   23), S(   0,    0)},
    {S(  -7,   10), S(  -4,   95), S(  38,   30), S(  70,   50), S(  53,   39), S(   0,    0)}
};
constexpr ScorePair THREAT_BY_BISHOP[2][6] = {
    {S(   2,   32), S(  39,   39), S(  10,   24), S(  51,   41), S(  51,   76), S(   0,    0)},
    {S(  -5,    3), S(  20,   17), S(  -2,   -5), S(  61,   68), S(  68,   73), S(   0,    0)}
};
constexpr ScorePair THREAT_BY_ROOK[2][6] = {
    {S(  -4,   52), S(  34,   58), S(  46,   48), S( -13,  -65), S(  69,   -9), S(   0,    0)},
    {S( -12,   10), S(   8,   15), S(  16,    7), S(   3,  -95), S(  58,   98), S(   0,    0)}
};
constexpr ScorePair THREAT_BY_QUEEN[2][6] = {
    {S(   5,   28), S(  28,   27), S(  17,   68), S(  15,   15), S(   9,  -49), S( 218,   98)},
    {S(  -6,   20), S(   2,    7), S( -10,   33), S(  -4,   -3), S( -13,  -37), S( 125,  212)}
};
constexpr ScorePair THREAT_BY_KING[6] = {S(  57,   10), S(  33,   40), S( 111,   32), S(  86,    6), S(   0,    0), S(   0,    0)};
constexpr ScorePair KNIGHT_HIT_QUEEN = S(   7,    3);
constexpr ScorePair BISHOP_HIT_QUEEN = S(  19,    9);
constexpr ScorePair ROOK_HIT_QUEEN = S(  22,   -9);
constexpr ScorePair PUSH_THREAT = S(  13,   18);
constexpr ScorePair RESTRICTED_SQUARES = S(   2,    3);

constexpr ScorePair ISOLATED_PAWN[8] = {S(  -2,    2), S(  -2,  -16), S(  -9,  -11), S(  -7,  -17), S( -14,  -13), S(  -9,   -8), S(  -3,  -12), S(  -6,    0)};
constexpr ScorePair DOUBLED_PAWN[8] = {S(   0,  -50), S(   6,  -41), S(   1,  -26), S(  -7,  -14), S( -12,   -3), S(  -4,  -12), S(   4,  -43), S(   5,  -40)};
constexpr ScorePair BACKWARDS_PAWN[8] = {S(   0,    0), S(  -8,  -14), S(  -1,  -13), S(  -4,  -16), S(   1,  -17), S(  21,  -11), S(   0,    0), S(   0,    0)};
constexpr ScorePair PAWN_PHALANX[8] = {S(   0,    0), S(   3,   -6), S(  12,   -1), S(  19,   10), S(  41,   33), S(  82,  130), S(  -1,   89), S(   0,    0)};
constexpr ScorePair DEFENDED_PAWN[8] = {S(   0,    0), S(   0,    0), S(  17,    6), S(  11,    8), S(  17,   24), S(  40,   59), S(  85,   97), S(   0,    0)};
constexpr ScorePair CANDIDATE_PASSER[2][8] = {
    {S(   0,    0), S( -23,  -16), S(   0,  -25), S(   1,   -2), S(  24,   11), S(  52,   80), S(   0,    0), S(   0,    0)},
    {S(   0,    0), S( -18,  -10), S(  -5,    6), S(  -3,   24), S(  11,   37), S(  41,   96), S(   0,    0), S(   0,    0)}
};

constexpr ScorePair PASSED_PAWN[2][2][8] = {
    {
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -33,  -26), S(  -7,   24), S(  30,  126), S( 125,  200), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -28,  -33), S(  -5,   -8), S(  34,   47), S(  82,   74), S(   0,    0)}
    },
    {
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -28,  -39), S( -10,   -7), S(  28,   52), S(  43,   35), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -29,  -51), S(  -7,  -25), S(  13,   25), S(   2,   10), S(   0,    0)}
    }
};
constexpr ScorePair OUR_PASSER_PROXIMITY[8] = {S(  40,  118), S( 127,   62), S(  42,   66), S(  -4,   56), S(  -4,   33), S(   2,   21), S(  20,    7), S(   3,   16)};
constexpr ScorePair THEIR_PASSER_PROXIMITY[8] = {S( -48,    9), S(  15,   -6), S(  30,    1), S(  23,   26), S(  16,   56), S(  12,   75), S(  20,   76), S(   9,   61)};
constexpr ScorePair PASSER_DEFENDED_PUSH[8] = {S(   0,    0), S(   0,    0), S(   0,    0), S(  11,    2), S(   5,   23), S(  38,   34), S(  46,  100), S(   0,    0)};

constexpr ScorePair PAWN_STORM[2][4][8] = {
    {
        {S(  26,   22), S( -88, -353), S( -26,  -81), S(  30,   -9), S(  15,   17), S(   7,   18), S(   2,   24), S(   0,    0)},
        {S(  25,   10), S(  16, -233), S(  57, -141), S(  21,  -13), S(   7,    6), S( -18,   15), S(   6,   10), S(   0,    0)},
        {S(   6,    3), S(  31, -185), S(  81, -122), S(  66,  -28), S(  11,    6), S( -15,   12), S(  -3,    2), S(   0,    0)},
        {S(   6,  -13), S(  87, -205), S( 119, -130), S(  58,  -18), S(   5,   -4), S( -26,   -7), S( -25,   -5), S(   0,    0)}
    },
    {
        {S(   0,    0), S(   0,    0), S(  68,   27), S( -12,   22), S(   9,   30), S(  19,   45), S(  24,   38), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S( 140,   31), S( -24,   20), S( -10,   29), S(  -5,   41), S(  12,   45), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S( 129,  -10), S(  10,   15), S(  -8,   29), S(  -5,   33), S(  46,    4), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S( 146,  -24), S(  21,   13), S( -15,   15), S(   3,    5), S( -23,  -47), S(   0,    0)}
    }
};
constexpr ScorePair PAWN_SHIELD[4][8] = {
    {S(  56,   12), S(   5,   32), S( -19,   20), S(  21,   14), S(  27,    2), S(  13,   -3), S( -56,    9), S(   0,    0)},
    {S(  42,   12), S( -26,   24), S(   3,   12), S(  46,   -3), S(  38,  -19), S(   6,  -39), S( -27, -109), S(   0,    0)},
    {S(  27,   12), S(   4,   39), S(  -3,  -15), S(  39,  -36), S(  36,  -30), S(  14,  -14), S( -72,  -75), S(   0,    0)},
    {S(  16,    0), S( -30,  -11), S(   6,  -26), S(  28,  -38), S(  15,  -28), S(  37,  -13), S( -20,    5), S(   0,    0)}
};
constexpr ScorePair SAFE_KNIGHT_CHECK = S( 101,    0);
constexpr ScorePair SAFE_BISHOP_CHECK = S(  73,   28);
constexpr ScorePair SAFE_ROOK_CHECK = S( 114,   12);
constexpr ScorePair SAFE_QUEEN_CHECK = S(  69,   28);
constexpr ScorePair UNSAFE_KNIGHT_CHECK = S(  18,    0);
constexpr ScorePair UNSAFE_BISHOP_CHECK = S(  40,    9);
constexpr ScorePair UNSAFE_ROOK_CHECK = S(  45,    1);
constexpr ScorePair UNSAFE_QUEEN_CHECK = S(  20,   18);
constexpr ScorePair QUEENLESS_ATTACK = S(-100,  311);
constexpr ScorePair KING_ATTACKER_WEIGHT[4] = {S(  58,   -8), S(  24,    0), S(  25,  -16), S(   9,  -84)};
constexpr ScorePair KING_ATTACKS = S(   6,   -1);
constexpr ScorePair WEAK_KING_RING = S(   4,    1);
constexpr ScorePair KING_FLANK_ATTACKS[2] = {S(  12,   -6), S(   3,    1)};
constexpr ScorePair KING_FLANK_DEFENSES[2] = {S(  -8,    0), S(  -7,    6)};
constexpr ScorePair SAFETY_OFFSET = S(  75,  -13);

constexpr ScorePair MINOR_BEHIND_PAWN = S(   1,   10);
constexpr ScorePair KNIGHT_OUTPOST = S(  16,   16);
constexpr ScorePair BISHOP_PAWNS[7] = {S(  13,    3), S(   7,   14), S(   3,   10), S(   1,    3), S(  -2,   -2), S(  -7,   -8), S( -10,  -19)};
constexpr ScorePair BISHOP_PAIR = S(  21,   68);
constexpr ScorePair LONG_DIAG_BISHOP = S(  13,   10);
constexpr ScorePair ROOK_OPEN[2] = {S(  33,   -3), S(  20,    1)};

constexpr ScorePair TEMPO = S(  25,   17);

constexpr ScorePair COMPLEXITY_PAWNS = S(   0,   10);
constexpr ScorePair COMPLEXITY_PAWNS_BOTH_SIDES = S(   0,  143);
constexpr ScorePair COMPLEXITY_PAWN_ENDGAME = S(   0,  140);
constexpr ScorePair COMPLEXITY_OFFSET = S(   0, -215);

#undef S
// clang-format on

}
