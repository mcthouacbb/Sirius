#pragma once

#include "../defs.h"

namespace eval
{

// clang-format off
#define S(mg, eg) ScorePair(mg, eg)

constexpr ScorePair MATERIAL[6] = {S(  66,  137), S( 315,  454), S( 328,  472), S( 424,  810), S( 878, 1846), S(0, 0)};

constexpr ScorePair PSQT[6][64] = {
    {
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  66,   79), S(  15,   92), S(  33,  101), S(  46,   89), S(  75,   60), S(  50,   61), S(  36,   90), S(  83,   76),
        S(   9,   11), S(  -6,   24), S(   8,    4), S(  11,   -2), S(   4,  -11), S(   1,   -3), S( -13,   19), S(   0,   11),
        S(   6,    8), S(   3,   16), S(  10,   -6), S(  11,  -15), S(   5,  -15), S(   1,   -9), S(  -4,   10), S(  -5,    9),
        S(  -4,   -5), S(  -8,   12), S(  17,  -27), S(  17,  -16), S(  14,  -17), S(   4,  -13), S( -16,   10), S( -13,   -5),
        S( -11,   -7), S(  11,    3), S(   3,    3), S(   7,   -1), S(  -2,   -1), S(  -7,   -2), S( -19,    9), S( -21,   -7),
        S(  -3,   -8), S(  24,    5), S(  24,   56), S(   5,    8), S(  -1,    0), S(  -3,    0), S( -10,    9), S( -17,   -3),
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
    },
    {
        S( -58, -120), S( -90,   16), S(-112,   45), S(  -4,   13), S( -23,   16), S( -62,    7), S(-103,    8), S( -88,  -68),
        S(  -1,   -2), S( -10,   21), S(  23,   11), S(  35,   15), S(  26,   18), S(  23,   -5), S( -20,   16), S(  -7,  -10),
        S(  14,   -5), S(  11,   12), S(  36,   11), S(  28,   15), S(  21,   16), S(  24,    7), S(  10,    9), S(  10,  -11),
        S(  30,    6), S(  29,   12), S(  34,   16), S(  28,   25), S(  34,   22), S(  19,   16), S(  19,    5), S(  12,    6),
        S(  20,    6), S(  27,    7), S(  24,   16), S(  18,   30), S(  18,   22), S(  18,   16), S(  17,    4), S(   8,    3),
        S(   4,   -6), S(  18,   -1), S(  15,    0), S(  14,   15), S(  11,   10), S(  -1,   -1), S(   4,   -7), S(  -7,   -7),
        S(  11,  -10), S(   3,    1), S(   8,  -13), S(  11,   -1), S(   4,   -1), S(   2,  -12), S(  -6,   -6), S( -15,  -22),
        S( -28,  -23), S( -10,  -21), S(  -1,  -14), S(   4,   -9), S(  -1,   -4), S( -11,  -17), S( -16,  -22), S( -29,  -40),
    },
    {
        S( -28,  -35), S( -52,   20), S( -85,   22), S( -67,   21), S( -77,   27), S( -67,   20), S( -53,   21), S( -32,  -13),
        S( -13,   -6), S( -37,    4), S( -10,    9), S( -28,   13), S( -17,   15), S( -12,   11), S( -12,  -11), S(  -9,    0),
        S(  23,  -10), S(  10,   10), S(  21,    6), S(  24,   13), S(  19,   13), S(  10,    1), S(  17,    3), S(   7,   -4),
        S(   8,   -4), S(  13,   15), S(  15,   18), S(  17,   29), S(  27,   25), S(  18,   15), S(  14,    9), S(   7,   -9),
        S(  20,  -10), S(   7,    7), S(  11,   17), S(  21,   16), S(  21,   19), S(  15,   11), S(   9,    6), S(  14,  -10),
        S(  20,   -9), S(  24,   -5), S(  13,   -7), S(  15,   11), S(  13,    5), S(   8,   -9), S(  29,   -5), S(  14,  -12),
        S(  23,  -17), S(  29,  -30), S(  26,  -13), S(  12,   -5), S(   3,   -6), S(  13,  -16), S(   9,  -27), S(  19,   -9),
        S(  10,  -40), S(  -7,    0), S( -10,   -9), S(  11,  -15), S(   6,  -12), S(  -3,   -6), S(   6,  -10), S(   5,  -25),
    },
    {
        S(  19,   14), S(  34,   12), S(  26,   15), S(  12,   26), S(  22,   17), S(  14,   21), S(  19,   21), S(  23,   20),
        S(  22,   12), S(  13,   21), S(  19,   20), S(  15,   22), S(  21,   26), S(  12,   25), S(  11,   23), S(  19,   22),
        S( -18,   18), S(  10,   12), S(  15,   10), S(  15,    9), S(  12,    9), S(   7,   15), S(   7,   18), S(  -3,   22),
        S( -18,   11), S(  -7,   15), S(  -2,   12), S(  -9,   11), S(  -3,    8), S(  -1,   11), S(  -3,   16), S(  -6,   12),
        S( -23,   -1), S( -10,    5), S( -13,   10), S( -10,    8), S( -12,    4), S( -15,   10), S( -15,   11), S( -13,    2),
        S( -17,  -24), S(   6,  -26), S(  -7,   -9), S(   1,  -17), S(  -1,  -18), S( -13,   -8), S(  -4,  -16), S( -18,  -14),
        S( -51,  -27), S(  -6,  -34), S(   3,  -25), S(  -1,  -23), S(  -1,  -23), S(  -6,  -19), S( -12,  -24), S( -19,  -23),
        S( -15,  -35), S( -19,  -19), S(   7,  -23), S(  14,  -30), S(   7,  -28), S(  -1,  -22), S(   0,  -26), S(  -1,  -23),
    },
    {
        S(   9,   28), S(  39,    6), S(  25,   25), S(  13,   32), S(  18,   26), S(  27,   12), S(  16,    9), S( -19,   34),
        S(  35,   -9), S(  32,   -8), S(  10,   21), S( -15,   40), S(   8,   29), S(  16,    1), S(  18,   -8), S(  11,    2),
        S(   7,   10), S(  11,    9), S(  -3,   23), S( -20,   37), S(  -4,   38), S(  13,    2), S(  26,  -22), S(  19,  -11),
        S(  -3,   10), S( -13,   21), S( -12,   22), S( -25,   40), S( -20,   38), S(   5,   10), S(   0,   20), S(   3,   -1),
        S( -14,   24), S(  -9,   16), S( -14,   17), S( -19,   31), S( -21,   42), S(  -8,   23), S(  -1,   10), S(  -5,    5),
        S(  -5,  -15), S(   0,  -17), S(  -8,    1), S( -17,   14), S( -11,   14), S(  -5,    6), S(   7,   -7), S(   3,   -8),
        S(  -2,  -60), S(   7,  -83), S(   1,  -49), S(  -4,  -22), S(  -7,  -14), S(   6,  -33), S(   1,  -29), S(   2,  -22),
        S( -17,  -36), S( -22,  -70), S( -15,  -53), S(  -6,  -48), S(  -3,  -37), S(  -9,  -35), S( -12,  -33), S( -20,   -8),
    },
    {
        S(  51, -152), S(  21,   70), S(  -5,   21), S( -28,   10), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  28,   11), S(  -3,  104), S( -41,   64), S( -60,   48), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  38,   47), S(   3,  110), S( -51,   54), S(-131,   18), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S( -25,   47), S( -46,   96), S( -67,   38), S(-132,    7), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S( -62,   40), S( -56,   74), S( -83,   22), S(-109,  -10), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(   0,   17), S(  -5,   44), S( -36,   -1), S( -58,  -33), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  60,  -12), S(  47,   16), S(  19,  -35), S(  -8,  -69), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  60,  -44), S(  60,   -9), S(  23,  -60), S(  19, -111), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
    },
};

constexpr ScorePair MOBILITY[4][28] = {
    {S(  -7,  -22), S( -35,  -54), S( -21,  -18), S( -10,   -1), S(   0,    8), S(   6,   18), S(  15,   22), S(  23,   26), S(  33,   17), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S( -12,  -31), S( -42,  -62), S( -22,  -32), S( -11,  -11), S(  -4,   -1), S(   0,    9), S(   1,   16), S(   4,   19), S(   4,   21), S(   7,   22), S(   6,   22), S(  12,   15), S(  17,   13), S(  41,  -11), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S( -25,  -63), S( -49,  -63), S( -18,  -43), S( -10,  -26), S(  -3,  -16), S(   2,   -5), S(   1,    6), S(   4,   10), S(   4,   14), S(   7,   20), S(   9,   27), S(   9,   34), S(  10,   38), S(  13,   39), S(  40,   18), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S( -13,   41), S( -41,    9), S( -60,  -13), S( -41, -125), S( -26, -105), S( -12,  -67), S(  -4,  -50), S(   0,  -32), S(   0,  -14), S(   1,   -1), S(   3,    7), S(   3,   16), S(   6,   22), S(   6,   30), S(   7,   35), S(   9,   35), S(   7,   41), S(   8,   40), S(  10,   41), S(  12,   36), S(  16,   32), S(  21,   18), S(  20,   18), S(  28,    4), S(  21,   11), S(  23,   -8), S(  24,  -38), S( -31,    2)}
};

constexpr ScorePair THREAT_BY_PAWN[6] = {S(  -6,  -19), S(  73,   41), S(  65,   71), S(  73,   48), S(  57,   23), S(   0,    0)};
constexpr ScorePair THREAT_BY_KNIGHT[2][6] = {
    {S(   6,   36), S(   7,   81), S(  50,   32), S(  84,   13), S(  42,    6), S(   0,    0)},
    {S(  -8,   10), S(   3,   75), S(  39,   28), S(  71,   45), S(  51,   46), S(   0,    0)}
};
constexpr ScorePair THREAT_BY_BISHOP[2][6] = {
    {S(   3,   33), S(  37,   44), S(   3,   30), S(  58,   36), S(  61,   48), S(   0,    0)},
    {S(  -5,    4), S(  20,   21), S(  -6,    1), S(  56,   75), S(  62,   76), S(   0,    0)}
};
constexpr ScorePair THREAT_BY_ROOK[2][6] = {
    {S(  -2,   49), S(  36,   50), S(  46,   47), S(   7,  -73), S(  70,  -18), S(   0,    0)},
    {S( -10,    9), S(   8,   14), S(  19,    4), S(  20, -102), S(  55,   90), S(   0,    0)}
};
constexpr ScorePair THREAT_BY_QUEEN[2][6] = {
    {S(   8,   22), S(  25,   28), S(  21,   55), S(  17,   11), S(   1,  -55), S( 150,   64)},
    {S(  -5,   17), S(   2,    5), S(  -8,   26), S(  -4,   -7), S( -16,  -45), S( 100,  213)}
};
constexpr ScorePair THREAT_BY_KING[6] = {S(  50,   13), S(  26,   41), S(  98,   31), S(  85,    6), S(   0,    0), S(   0,    0)};
constexpr ScorePair KNIGHT_HIT_QUEEN = S(   7,    0);
constexpr ScorePair BISHOP_HIT_QUEEN = S(  16,   14);
constexpr ScorePair ROOK_HIT_QUEEN = S(  19,   -3);
constexpr ScorePair PUSH_THREAT = S(  13,   18);
constexpr ScorePair RESTRICTED_SQUARES = S(   2,    2);

constexpr ScorePair ISOLATED_PAWN[4] = {S(  -6,    4), S(  -3,  -10), S(  -8,   -6), S( -10,   -9)};
constexpr ScorePair ISOLATED_EXPOSED = S(  -5,   -7);
constexpr ScorePair DOUBLED_PAWN[4] = {S(   2,  -50), S(   4,  -41), S(  -5,  -25), S( -12,  -10)};
constexpr ScorePair BACKWARDS_PAWN[8] = {S(   0,    0), S(  -3,   -8), S(   4,  -11), S(  -4,  -10), S(  10,  -17), S(   6,   23), S(   0,    0), S(   0,    0)};
constexpr ScorePair BACKWARDS_EXPOSED = S( -14,   -6);
constexpr ScorePair PAWN_PHALANX[8] = {S(   0,    0), S(   5,   -6), S(  12,   -1), S(  18,   10), S(  40,   35), S(  72,  134), S( 108,  193), S(   0,    0)};
constexpr ScorePair DEFENDED_PAWN[8] = {S(   0,    0), S(   0,    0), S(  17,    6), S(  11,    9), S(  18,   23), S(  42,   54), S(  75,  114), S(   0,    0)};
constexpr ScorePair CANDIDATE_PASSER[2][8] = {
    {S(   0,    0), S( -22,  -16), S(  -9,  -15), S(  -3,    1), S(  15,   22), S(  37,   77), S(   0,    0), S(   0,    0)},
    {S(   0,    0), S( -16,  -11), S( -11,    8), S(  -6,   24), S(   7,   36), S(  39,   93), S(   0,    0), S(   0,    0)}
};

constexpr ScorePair PASSED_PAWN[2][2][8] = {
    {
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -33,  -27), S(  -9,   25), S(  26,  129), S( 119,  202), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -23,  -39), S(   1,  -12), S(  29,   54), S(  68,   72), S(   0,    0)}
    },
    {
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -26,  -40), S(  -4,   -9), S(  26,   53), S(  34,   44), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -25,  -49), S(  -1,  -25), S(  15,   29), S(   2,   12), S(   0,    0)}
    }
};
constexpr ScorePair PASSED_FILE = S(  -5,   -3);
constexpr ScorePair OUR_PASSER_PROXIMITY[8] = {S(  79,  111), S( 114,   73), S(  48,   71), S(   0,   62), S(   3,   36), S(   5,   24), S(  16,   13), S(  -1,   23)};
constexpr ScorePair THEIR_PASSER_PROXIMITY[8] = {S( -49,    9), S(   9,   -1), S(  32,    2), S(  27,   26), S(  15,   60), S(  16,   74), S(  19,   77), S(  19,   62)};
constexpr ScorePair PASSER_DEFENDED_PUSH[8] = {S(   0,    0), S(   0,    0), S(   0,    0), S(   9,    6), S(   9,   20), S(  36,   31), S(  60,  101), S(   0,    0)};

constexpr ScorePair PAWN_STORM[2][4][8] = {
    {
        {S(  30,   28), S( -89,  -80), S(  -1,  -39), S(  41,    7), S(  19,   23), S(   3,   25), S(  -3,   28), S(   0,    0)},
        {S(  23,   17), S(  56, -109), S(  75,  -60), S(  32,   -4), S(   8,   16), S( -25,   19), S(   1,   18), S(   0,    0)},
        {S(   8,   16), S(  51,  -80), S( 107,  -50), S(  67,   -7), S(   9,   17), S( -16,   20), S(  -4,   17), S(   0,    0)},
        {S(   9,   -2), S( 126,  -94), S( 117,  -56), S(  57,   -6), S(   6,    4), S( -25,    1), S( -25,    3), S(   0,    0)}
    },
    {
        {S(   0,    0), S(   0,    0), S(  77,   42), S(  -4,   28), S(  -4,   32), S(   5,   40), S(  29,   30), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S( 139,   32), S( -26,   28), S( -15,   31), S( -21,   43), S(   4,   27), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S( 129,   13), S(  13,   20), S(  -9,   33), S(  -3,   36), S(  52,   15), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S( 125,   -2), S(  12,   14), S( -21,   15), S( -10,   14), S( -13,   -7), S(   0,    0)}
    }
};
constexpr ScorePair PAWN_SHIELD[4][8] = {
    {S(  54,   29), S(  -1,   41), S( -15,   32), S(  31,   26), S(  40,   19), S(   6,   13), S( -25,   21), S(   0,    0)},
    {S(  42,   20), S( -27,   25), S(   8,   19), S(  42,   11), S(  41,    1), S(  -3,   -2), S( -37,  -23), S(   0,    0)},
    {S(  23,   14), S(   5,   54), S(   4,    8), S(  33,  -10), S(  31,  -11), S(   4,   -8), S( -62,    1), S(   0,    0)},
    {S(  13,    9), S( -25,   -1), S(   4,   -6), S(  27,  -11), S(  20,  -10), S(  26,   -2), S( -32,    2), S(   0,    0)}
};
constexpr ScorePair SAFE_KNIGHT_CHECK = S( 100,    1);
constexpr ScorePair SAFE_BISHOP_CHECK = S(  69,   18);
constexpr ScorePair SAFE_ROOK_CHECK = S( 107,   10);
constexpr ScorePair SAFE_QUEEN_CHECK = S(  64,   21);
constexpr ScorePair UNSAFE_KNIGHT_CHECK = S(  17,    0);
constexpr ScorePair UNSAFE_BISHOP_CHECK = S(  35,    7);
constexpr ScorePair UNSAFE_ROOK_CHECK = S(  41,    2);
constexpr ScorePair UNSAFE_QUEEN_CHECK = S(  20,    4);
constexpr ScorePair QUEENLESS_ATTACK = S(-112,  339);
constexpr ScorePair KING_ATTACKER_WEIGHT[4] = {S(  57,   -3), S(  24,   -2), S(  24,  -10), S(   6,  -17)};
constexpr ScorePair KING_ATTACKS = S(   6,    0);
constexpr ScorePair WEAK_KING_RING = S(   4,    1);
constexpr ScorePair KING_FLANK_ATTACKS[2] = {S(  13,   -4), S(   3,    0)};
constexpr ScorePair KING_FLANK_DEFENSES[2] = {S(  -8,    0), S(  -6,    3)};
constexpr ScorePair SAFETY_OFFSET = S(  77,  146);

constexpr ScorePair MINOR_BEHIND_PAWN = S(   2,   10);
constexpr ScorePair KNIGHT_OUTPOST = S(  18,   17);
constexpr ScorePair BISHOP_PAWNS[7] = {S(  12,    6), S(   6,   14), S(   4,   10), S(   1,    4), S(  -3,   -2), S(  -6,  -10), S(  -9,  -18)};
constexpr ScorePair BISHOP_PAIR = S(  22,   66);
constexpr ScorePair LONG_DIAG_BISHOP = S(  13,   12);
constexpr ScorePair ROOK_OPEN[2] = {S(  31,    0), S(  19,    2)};

constexpr ScorePair TEMPO = S(  29,   20);

constexpr ScorePair COMPLEXITY_PAWNS = S(   0,   10);
constexpr ScorePair COMPLEXITY_PAWNS_BOTH_SIDES = S(   0,  126);
constexpr ScorePair COMPLEXITY_PAWN_ENDGAME = S(   0,  131);
constexpr ScorePair COMPLEXITY_OFFSET = S(   0, -207);

#undef S
// clang-format on

}
