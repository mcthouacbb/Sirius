#pragma once

#include "../defs.h"

namespace eval
{

// clang-format off
#define S(mg, eg) ScorePair(mg, eg)

constexpr ScorePair MATERIAL[6] = {S(  70,  137), S( 342,  463), S( 360,  482), S( 467,  833), S( 949, 1718), S(0, 0)};

constexpr ScorePair PSQT[6][64] = {
    {
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  81,   66), S(  45,   81), S(  26,   91), S(  85,   68), S(  67,   64), S(  44,   68), S(  40,  102), S(  80,   78),
        S(  19,    0), S(  -3,   30), S(   1,   -2), S(   3,   -3), S(  -1,   -9), S(  -4,   -8), S( -17,   18), S(  -3,   12),
        S(   9,    4), S(   8,   20), S(  16,  -12), S(  13,  -16), S(   7,  -17), S(   2,  -11), S(   1,   11), S(  -3,    5),
        S(  -8,   -3), S(  -3,   15), S(  14,  -18), S(  17,  -21), S(  10,  -17), S(   2,  -12), S( -13,   14), S( -15,   -5),
        S( -13,   -8), S(  10,   11), S(   3,   10), S(   4,    1), S(  -8,    3), S( -10,   -1), S( -16,   13), S( -22,   -8),
        S(  -5,   -8), S(  24,    8), S(  24,   31), S(   2,   12), S(  -5,    4), S(  -4,    1), S(  -7,   14), S( -18,   -5),
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
    },
    {
        S( -89, -114), S(  -4,    3), S( -95,   34), S(   4,   10), S( -15,    7), S( -89,   22), S( -75,   16), S(-134,  -74),
        S(   8,  -11), S(  15,    7), S(  45,   -4), S(  31,   16), S(  25,   18), S(  14,   12), S( -12,   12), S(   8,   -9),
        S( -14,   12), S(  10,   21), S(  41,    7), S(  35,   16), S(  23,   14), S(  16,   13), S(   0,   14), S(  14,  -17),
        S(  32,    4), S(  35,   11), S(  38,   14), S(  34,   22), S(  35,   23), S(  20,   17), S(  20,    3), S(  15,    4),
        S(  23,    5), S(  17,   25), S(  24,   14), S(  21,   27), S(  23,   20), S(  18,   18), S(  24,   -4), S(   4,    2),
        S(   4,   -9), S(  22,   -5), S(  19,   -2), S(  18,   12), S(  10,   14), S(  -1,   -2), S(   4,   -9), S( -13,  -10),
        S(   7,   -8), S(   4,   -2), S(   5,  -10), S(  10,    1), S(   3,   -4), S(  -5,  -11), S(  -8,  -12), S( -10,  -26),
        S( -36,  -21), S( -15,  -17), S(   1,  -15), S(   6,   -8), S(  -6,   -4), S( -21,   -5), S( -23,  -18), S( -60,  -27),
    },
    {
        S( -36,  -18), S( -24,   -4), S(-126,   29), S( -65,   14), S( -87,   32), S( -47,   15), S( -21,   20), S( -35,    3),
        S(  -3,  -12), S( -31,   -5), S( -16,   17), S(  -7,    8), S( -11,   12), S(   5,   -4), S(  -9,  -13), S(  -9,   -3),
        S(  22,   -5), S(  16,    6), S(  11,   19), S(  27,    8), S(  14,   21), S(   3,    9), S(  13,    6), S(  -1,    0),
        S(   0,    1), S(  13,   15), S(  15,   21), S(  20,   31), S(  29,   30), S(  21,    8), S(  11,   16), S(   4,   -4),
        S(  15,  -13), S(  15,   -1), S(   9,   19), S(  17,   19), S(  22,   20), S(  19,   10), S(   9,    5), S(   7,  -12),
        S(  21,  -12), S(  25,   -4), S(  11,   -8), S(  10,   15), S(   8,    7), S(   4,   -7), S(  19,    0), S(  11,   -8),
        S(  17,  -16), S(  24,  -26), S(  17,  -11), S(   9,   -7), S(  -5,   -2), S(  14,  -23), S(   4,  -25), S(  19,  -15),
        S(   4,  -30), S(   4,  -20), S( -15,   -6), S(   4,  -12), S(   3,  -14), S(  -8,   -6), S(  16,  -27), S(   0,  -14),
    },
    {
        S(  27,    7), S(  19,   19), S(  13,   31), S(   1,   32), S(  21,   21), S(  23,   17), S(  28,   12), S(  11,   29),
        S(  17,   19), S(   7,   25), S(  17,   23), S(  20,   26), S(  30,   23), S(  12,   29), S(  11,   23), S(  17,   20),
        S( -14,   18), S(  11,   18), S(  18,   12), S(   0,   25), S(  24,   10), S(  10,   13), S(  10,   15), S(   2,   21),
        S( -14,   13), S(  -9,   21), S(  -2,   27), S(   0,   14), S(   8,    5), S(  -1,   15), S(  -1,   18), S(  -5,   11),
        S( -18,   -7), S( -14,   14), S( -13,   13), S(  -9,    7), S(  -7,    1), S(  -8,    5), S( -16,    8), S( -13,    1),
        S( -26,  -20), S(   4,  -26), S(  -8,   -8), S(  -7,  -10), S(   1,  -23), S( -11,  -13), S(  -6,  -17), S( -17,  -15),
        S( -64,  -23), S(  -8,  -39), S(   2,  -27), S(   2,  -25), S(   3,  -32), S(  -1,  -23), S( -14,  -30), S( -21,  -30),
        S( -17,  -38), S( -24,  -23), S(   5,  -24), S(  13,  -30), S(   9,  -34), S(  -3,  -24), S(   0,  -30), S(   0,  -28),
    },
    {
        S(   6,   31), S(  18,   15), S(  43,   10), S(  -7,   49), S(  21,   33), S(  28,    9), S(  19,    4), S( -20,   32),
        S(  28,   16), S(  28,   -3), S(  24,   -8), S( -41,   76), S(  24,    6), S(  12,   13), S(  22,  -15), S(  19,  -10),
        S(   6,   14), S(  16,   11), S(  -6,   38), S(   0,   14), S(   5,   22), S(  16,    2), S(  24,   -8), S(  17,  -10),
        S(   6,    9), S( -14,   33), S(  -6,   12), S( -22,   38), S( -15,   40), S(   9,    6), S(   2,   12), S(  11,  -11),
        S( -16,   37), S(  -1,   -3), S( -16,   23), S( -12,   23), S( -15,   37), S(  -2,   16), S(   3,   11), S(  -8,   20),
        S(  -6,   -2), S(   3,  -16), S(  -6,    5), S( -16,   13), S(  -8,   13), S(  -8,   17), S(   9,   -1), S(  -2,   -6),
        S( -10,  -37), S(   5,  -71), S(   1,  -60), S(  -4,  -21), S(  -9,   -3), S(   5,  -32), S(  -4,  -12), S(  -1,   -8),
        S(   3,  -55), S( -17, -100), S( -18,  -68), S( -16,  -36), S(  -7,  -31), S( -19,  -13), S( -11,  -39), S( -10,  -19),
    },
    {
        S( -42,  -81), S(  15,  105), S( -89,   75), S( -39,   91), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  -1,   23), S(  43,   91), S(  -2,   60), S(   2,   56), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  20,   55), S(  26,  109), S( -28,   46), S( -79,  -10), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S( -12,   41), S( -16,   80), S( -74,   35), S(-118,  -14), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S( -59,   45), S( -52,   74), S( -71,   11), S(-105,  -19), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  -5,   14), S(  -1,   40), S( -45,   -6), S( -63,  -37), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  64,  -21), S(  45,   15), S(  12,  -40), S( -17,  -68), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  55,  -50), S(  59,  -12), S(  17,  -66), S(  11, -112), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
    },
};

constexpr ScorePair MOBILITY[4][28] = {
    {S(  -8,  -26), S( -35,  -63), S( -24,  -16), S(  -9,    0), S(   0,   12), S(   8,   22), S(  14,   27), S(  24,   30), S(  34,   20), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S(  -6,  -33), S( -48,  -58), S( -28,  -29), S( -15,  -10), S(  -7,    0), S(  -1,   11), S(   1,   20), S(   3,   24), S(   5,   27), S(   8,   26), S(  11,   23), S(  22,   12), S(  18,   12), S(  46,  -33), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S( -25,  -68), S( -71,  -66), S( -20,  -50), S( -14,  -26), S(  -4,  -16), S(   1,   -2), S(   3,    7), S(   6,   13), S(   8,   17), S(   9,   27), S(  11,   34), S(  12,   39), S(  16,   44), S(  16,   46), S(  59,   12), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S( -15,   45), S(  -9,  -12), S( -86,   58), S(   1, -178), S( -15, -127), S( -18,  -42), S(  -6,  -44), S(  -3,  -30), S(  -1,   -6), S(   3,   -5), S(   3,   11), S(   4,   20), S(   6,   26), S(   7,   30), S(  10,   33), S(  12,   36), S(  12,   40), S(  15,   37), S(  11,   42), S(  13,   41), S(  17,   36), S(  25,   18), S(  24,   16), S(  44,   -3), S(  11,   11), S(  21,  -16), S( -15,   16), S( -64,  -41)}
};

constexpr ScorePair THREAT_BY_PAWN[6] = {S(  -5,  -11), S(  76,   41), S(  68,   75), S(  77,   61), S(  68,    1), S(   0,    0)};
constexpr ScorePair THREAT_BY_KNIGHT[2][6] = {
    {S(   7,   36), S(  21,   55), S(  47,   35), S(  88,    8), S(  59,  -21), S(   0,    0)},
    {S(  -7,   10), S(  16,   46), S(  40,   29), S(  74,   45), S(  57,   42), S(   0,    0)}
};
constexpr ScorePair THREAT_BY_BISHOP[2][6] = {
    {S(   3,   32), S(  51,   30), S(  14,   26), S(  56,   41), S(  65,   62), S(   0,    0)},
    {S(  -4,    2), S(  23,   19), S( -11,    5), S(  55,   82), S(  39,  144), S(   0,    0)}
};
constexpr ScorePair THREAT_BY_ROOK[2][6] = {
    {S(   0,   48), S(  43,   47), S(  55,   41), S(   1,  -60), S(  70,    1), S(   0,    0)},
    {S(  -9,    8), S(   9,   16), S(  23,    2), S(  12, -101), S(  61,   80), S(   0,    0)}
};
constexpr ScorePair THREAT_BY_QUEEN[2][6] = {
    {S(   5,   29), S(  25,   32), S(  24,   53), S(   7,   20), S(   7,  -57), S( 142,   73)},
    {S(  -6,   19), S(   0,   11), S(  -9,   32), S(  -4,   -4), S( -12,  -48), S( 135,  133)}
};
constexpr ScorePair THREAT_BY_KING[6] = {S(  67,    6), S(  27,   38), S( 115,   25), S(  65,   12), S(   0,    0), S(   0,    0)};
constexpr ScorePair KNIGHT_HIT_QUEEN = S(   7,   -1);
constexpr ScorePair BISHOP_HIT_QUEEN = S(  14,   18);
constexpr ScorePair ROOK_HIT_QUEEN = S(  21,   -9);
constexpr ScorePair PUSH_THREAT = S(  15,   17);
constexpr ScorePair RESTRICTED_SQUARES = S(   3,    2);

constexpr ScorePair ISOLATED_PAWN[8] = {S(  -2,    2), S(  -5,  -17), S(  -7,  -11), S(  -8,  -20), S( -12,  -15), S(  -9,   -6), S(  -5,  -13), S(  -9,    3)};
constexpr ScorePair DOUBLED_PAWN[8] = {S(  -5,  -56), S(  10,  -52), S( -11,  -24), S( -15,  -11), S( -15,   -6), S(  -8,  -23), S(  -1,  -41), S(   5,  -53)};
constexpr ScorePair BACKWARDS_PAWN[8] = {S(   0,    0), S(  -6,  -15), S(   2,  -18), S(  -3,  -16), S(  -1,  -10), S(  -5,   43), S(   0,    0), S(   0,    0)};
constexpr ScorePair PAWN_PHALANX[8] = {S(   0,    0), S(   6,   -3), S(  13,   -2), S(  21,   11), S(  44,   37), S(  54,  124), S( 176,  215), S(   0,    0)};
constexpr ScorePair DEFENDED_PAWN[8] = {S(   0,    0), S(   0,    0), S(  19,    4), S(  12,   10), S(  18,   24), S(  44,   62), S( 129,  102), S(   0,    0)};
constexpr ScorePair CANDIDATE_PASSER[2][8] = {
    {S(   0,    0), S( -43,   -3), S( -10,  -13), S(  -4,   -2), S(  14,   24), S(  43,   88), S(   0,    0), S(   0,    0)},
    {S(   0,    0), S( -13,  -11), S(  -4,    4), S(  -2,   23), S(  12,   38), S(  53,   91), S(   0,    0), S(   0,    0)}
};

constexpr ScorePair PASSED_PAWN[2][2][8] = {
    {
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -37,  -30), S( -20,   26), S(  38,  129), S( 177,  185), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -28,  -45), S( -11,   -9), S(  38,   51), S( 101,   69), S(   0,    0)}
    },
    {
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -31,  -45), S( -12,  -11), S(  29,   55), S(  47,   40), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -28,  -59), S( -11,  -25), S(  18,   33), S(   8,   26), S(   0,    0)}
    }
};
constexpr ScorePair OUR_PASSER_PROXIMITY[8] = {S(  94,   97), S( 106,   63), S(  50,   67), S(   1,   59), S(   1,   33), S(   5,   22), S(  16,   15), S(   0,   26)};
constexpr ScorePair THEIR_PASSER_PROXIMITY[8] = {S( -43,    3), S(   2,    3), S(  26,    5), S(  25,   25), S(  18,   56), S(  17,   73), S(  28,   71), S(  26,   59)};
constexpr ScorePair PASSER_DEFENDED_PUSH[8] = {S(   0,    0), S(   0,    0), S(   0,    0), S(   2,   11), S(  17,   18), S(  41,   36), S(  56,   99), S(   0,    0)};

constexpr ScorePair PAWN_STORM[2][4][8] = {
    {
        {S(  29,   32), S(-108, -180), S( -31,  -63), S(  37,   12), S(  18,   26), S(  -2,   33), S(   0,   37), S(   0,    0)},
        {S(  22,   12), S(   5, -195), S(  70,  -94), S(  36,  -12), S(   7,    9), S( -24,   18), S(   7,   16), S(   0,    0)},
        {S(   8,   11), S(  39, -139), S( 125,  -92), S(  60,  -10), S(  10,   15), S( -13,   19), S(   1,   15), S(   0,    0)},
        {S(   8,  -12), S(  63, -153), S( 125, -114), S(  63,  -14), S(  11,    1), S( -24,   -4), S( -20,   -8), S(   0,    0)}
    },
    {
        {S(   0,    0), S(   0,    0), S(  81,   55), S(  -4,   35), S(   1,   40), S(  19,   48), S(  24,   40), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S( 160,   53), S( -22,   24), S( -10,   41), S(  -9,   54), S(  36,   27), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S( 136,    5), S(  -2,   29), S( -14,   40), S(  -7,   44), S(  44,   -5), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S( 114,   20), S(  17,   16), S( -14,   25), S( -13,   10), S( -18,  -21), S(   0,    0)}
    }
};
constexpr ScorePair PAWN_SHIELD[4][8] = {
    {S(  57,   34), S(  -2,   52), S( -16,   39), S(  19,   33), S(  39,   21), S(   8,   13), S(  -4,    4), S(   0,    0)},
    {S(  42,   18), S( -30,   23), S(   6,   22), S(  37,    8), S(  45,   -4), S(   7,  -18), S( -42,  -49), S(   0,    0)},
    {S(  24,   16), S(  -4,   41), S(  12,   16), S(  37,   -8), S(  48,  -16), S(  11,  -18), S( -35,  -20), S(   0,    0)},
    {S(  13,    2), S( -20,  -12), S(   7,  -21), S(  30,  -32), S(  25,  -26), S(  25,   -3), S( -18,  -10), S(   0,    0)}
};
constexpr ScorePair SAFE_KNIGHT_CHECK = S(  92,    4);
constexpr ScorePair SAFE_BISHOP_CHECK = S(  65,   29);
constexpr ScorePair SAFE_ROOK_CHECK = S( 105,   15);
constexpr ScorePair SAFE_QUEEN_CHECK = S(  63,   23);
constexpr ScorePair UNSAFE_KNIGHT_CHECK = S(  15,    0);
constexpr ScorePair UNSAFE_BISHOP_CHECK = S(  37,   13);
constexpr ScorePair UNSAFE_ROOK_CHECK = S(  45,    2);
constexpr ScorePair UNSAFE_QUEEN_CHECK = S(  18,    8);
constexpr ScorePair QUEENLESS_ATTACK = S(-154,  211);
constexpr ScorePair KING_ATTACKER_WEIGHT[4] = {S(  62,    0), S(  22,    0), S(  23,  -12), S(   5,  -17)};
constexpr ScorePair KING_ATTACKS = S(   7,   -1);
constexpr ScorePair WEAK_KING_RING = S(   3,    1);
constexpr ScorePair KING_FLANK_ATTACKS[2] = {S(  14,   -5), S(   3,    1)};
constexpr ScorePair KING_FLANK_DEFENSES[2] = {S(  -8,    0), S(  -7,    5)};
constexpr ScorePair SAFETY_OFFSET = S(  82,  102);

constexpr ScorePair MINOR_BEHIND_PAWN = S(   3,   11);
constexpr ScorePair KNIGHT_OUTPOST = S(  21,   15);
constexpr ScorePair BISHOP_PAWNS[7] = {S(  11,    5), S(   4,   19), S(   4,   12), S(   1,    6), S(  -2,   -2), S(  -6,   -8), S(  -7,  -26)};
constexpr ScorePair BISHOP_PAIR = S(  26,   69);
constexpr ScorePair LONG_DIAG_BISHOP = S(  15,    9);
constexpr ScorePair ROOK_OPEN[2] = {S(  34,   -1), S(  20,    4)};

constexpr ScorePair TEMPO = S(  27,   16);

constexpr ScorePair COMPLEXITY_PAWNS = S(   0,   11);
constexpr ScorePair COMPLEXITY_PAWNS_BOTH_SIDES = S(   0,  173);
constexpr ScorePair COMPLEXITY_PAWN_ENDGAME = S(   0,  165);
constexpr ScorePair COMPLEXITY_OFFSET = S(   0, -269);

#undef S
// clang-format on

}
