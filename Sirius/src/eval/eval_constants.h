#pragma once

#include "../defs.h"

namespace eval
{

#define S(mg, eg) PackedScore(mg, eg)

constexpr PackedScore MATERIAL[6] = {S(  59,  132), S( 289,  442), S( 310,  453), S( 385,  811), S( 805, 1492), S(0, 0)};

constexpr PackedScore PSQT[6][64] = {
	{
		S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
		S(  63,   81), S(  30,   92), S(  33,   89), S(  55,   75), S(  62,   68), S(  33,   94), S(  31,  106), S(  65,   86),
		S(   8,   17), S(  -3,   48), S(  10,   11), S(  29,  -24), S(  16,  -18), S(   4,    4), S( -18,   38), S(  -3,   22),
		S(  16,   11), S(   5,   14), S(   8,   -8), S(  12,  -23), S(   0,  -22), S(  -3,   -8), S(  -9,   15), S( -12,   13),
		S(   9,    1), S(   5,   17), S(   8,  -14), S(  15,  -14), S(   9,  -13), S(  -3,   -7), S( -14,   16), S( -14,    3),
		S(   3,   -2), S(  11,   13), S(  18,   -4), S(  -1,    2), S(  -6,    0), S( -11,   -4), S( -23,   13), S( -26,    1),
		S(  16,   -2), S(  31,    8), S(  17,   -7), S(   8,    6), S(  -6,   -1), S(  -6,   -3), S( -14,   18), S( -15,    5),
		S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
	},
	{
		S( -72,  -96), S( -74,  -27), S( -27,  -15), S(  13,  -13), S( -32,    4), S( -61,    5), S( -99,    6), S( -82,  -55),
		S(  -8,  -15), S(  25,    1), S(  29,   -4), S(   7,    5), S(  10,    8), S(   3,   14), S(  -2,   19), S(  -8,    3),
		S(  16,  -10), S(   7,    1), S(  49,  -11), S(  37,    8), S(  21,   14), S(  12,   12), S(   4,    6), S(  -6,    5),
		S(  33,    1), S(  34,    8), S(  43,   12), S(  33,   17), S(  26,   24), S(  31,   13), S(  20,    5), S(  10,   14),
		S(  10,   16), S(  16,   15), S(  24,   15), S(  17,   27), S(  25,   18), S(  18,   18), S(  20,    4), S(   5,    7),
		S(  10,    1), S(  16,    3), S(  14,   -1), S(  11,   17), S(   3,   16), S(  -1,    2), S(   0,   -3), S( -13,   -3),
		S(   6,    3), S(  13,   -7), S(   4,   -4), S(   9,    1), S(   4,    1), S(  -7,    0), S(  -7,   -4), S( -17,   -4),
		S( -10,  -14), S( -12,   -4), S(  -7,   -7), S(  -1,    4), S( -10,    2), S( -23,   -5), S( -15,   -8), S( -46,   -3),
	},
	{
		S( -43,  -14), S( -32,    7), S(  -5,   -1), S( -72,   12), S( -61,   15), S( -48,    2), S( -23,    7), S( -31,    9),
		S( -21,   -6), S( -48,    7), S( -10,    1), S(   1,   -1), S( -19,   11), S(   4,   -1), S( -14,   -4), S(  -3,   -4),
		S(  17,   12), S(  14,    2), S(  28,    3), S(  13,    7), S(  20,    3), S(   0,    0), S(  10,    7), S(   8,    3),
		S(  -5,    5), S(  11,    7), S(  10,   14), S(  21,   17), S(  22,   23), S(  18,    8), S(   7,   11), S(  -5,    6),
		S(  15,   -6), S(   3,    9), S(   9,   10), S(  11,   15), S(  21,   13), S(   1,   16), S(   0,    8), S(   0,    1),
		S(  19,   -9), S(  22,   -6), S(   3,   -4), S(   7,   12), S(  -1,    8), S(   1,   -1), S(  12,    3), S(   0,   -6),
		S(  29,  -21), S(  19,  -22), S(  26,  -10), S(   5,   -3), S(  -2,    1), S(  10,  -16), S(   2,  -23), S(  15,  -11),
		S(  27,  -40), S(  15,  -14), S( -11,    3), S(  12,   -2), S(  -2,   -2), S(  -4,    5), S(  12,   -3), S(   8,  -17),
	},
	{
		S(  16,    7), S( -24,   35), S( -22,   28), S( -12,   18), S( -29,   28), S( -23,   32), S(  -9,   22), S(  -2,   19),
		S(  32,    0), S(  34,    7), S(  13,   14), S(   8,   14), S(  17,   17), S(   5,   28), S(   1,   23), S(   4,   15),
		S(  12,    0), S(  36,    2), S(  21,    1), S(  27,    1), S(   4,   10), S(   3,   19), S(  14,   15), S(  -6,   18),
		S(   6,    4), S(   5,   12), S(  11,    8), S(  10,    1), S(   4,    9), S(   7,   13), S(   7,   14), S(  -5,   15),
		S( -10,   -1), S(  11,    3), S(  -9,    7), S(   7,    0), S(  -4,    3), S(  -8,    6), S(  -9,    6), S( -12,    6),
		S(   6,  -25), S(  20,  -27), S(  -3,  -15), S(   1,  -17), S( -11,   -9), S( -14,  -10), S( -12,  -12), S( -18,   -9),
		S(  -7,  -27), S(  20,  -35), S(   0,  -22), S(   0,  -21), S(  -5,  -17), S(  -6,  -15), S( -15,  -13), S( -18,  -18),
		S(  -7,  -32), S(  -5,  -15), S(  -2,  -18), S(   8,  -25), S(   0,  -22), S(  -7,  -15), S(  -6,  -19), S(  -8,  -15),
	},
	{
		S(   1,  -12), S(  38,  -36), S( -18,   24), S( -18,   20), S(  10,   -9), S( -26,   17), S( -42,   10), S( -26,    8),
		S(  43,   -1), S(   4,   10), S( -17,   27), S( -29,   48), S( -20,   33), S(  -2,    4), S(  -1,  -13), S(   8,   -9),
		S(  17,    6), S(  10,   11), S(   4,   16), S(  -9,   23), S(   5,   14), S(  10,    6), S(   8,   -9), S(  22,  -15),
		S(  10,   14), S(   6,   31), S(   9,    8), S(  -9,   31), S(  -6,   27), S(  10,    3), S(   6,   13), S(   6,    3),
		S(   8,    8), S(  13,    9), S(   0,   14), S(   3,   24), S(  -4,   32), S(  -3,   21), S(   3,   16), S(  -1,    8),
		S(   9,  -16), S(  10,   -5), S(  -1,    6), S(  -8,   16), S(  -5,   13), S(  -6,   17), S(   4,   -4), S(   3,  -14),
		S(  10,  -46), S(  11,  -62), S(   6,  -37), S(   3,   -8), S(   1,   -2), S(   3,  -15), S(   2,  -21), S(   7,  -32),
		S(   4,  -44), S( -11,  -48), S( -22,  -19), S(  -6,  -20), S(  -5,  -15), S(  -8,  -12), S( -11,  -15), S( -13,  -12),
	},
	{
		S( -39,  -55), S( -43,    9), S( -80,    9), S( -70,    5), S(   8,   -5), S(   8,   -5), S(   8,   -5), S(   8,   -5),
		S( -69,   30), S( -17,   56), S( -23,   44), S(  18,   17), S(   8,   -5), S(   8,   -5), S(   8,   -5), S(   8,   -5),
		S(  10,   16), S(  34,   49), S(  45,   38), S(  17,   39), S(   8,   -5), S(   8,   -5), S(   8,   -5), S(   8,   -5),
		S( -33,   18), S(  -9,   44), S(  -3,   36), S( -27,   31), S(   8,   -5), S(   8,   -5), S(   8,   -5), S(   8,   -5),
		S( -49,    6), S( -21,   29), S(  -4,   17), S( -26,   15), S(   8,   -5), S(   8,   -5), S(   8,   -5), S(   8,   -5),
		S( -12,  -12), S(  13,    7), S(   1,   -2), S(  -5,   -4), S(   8,   -5), S(   8,   -5), S(   8,   -5), S(   8,   -5),
		S(  27,  -29), S(  27,   -5), S(  10,  -14), S(  -3,  -19), S(   8,   -5), S(   8,   -5), S(   8,   -5), S(   8,   -5),
		S(  16,  -60), S(  22,  -24), S(   1,  -26), S(   8,  -45), S(   8,   -5), S(   8,   -5), S(   8,   -5), S(   8,   -5),
	},
};

constexpr PackedScore MOBILITY[4][28] = {
	{S( -12,  -27), S( -43,  -47), S( -18,  -19), S(  -9,    0), S(   3,    9), S(   8,   19), S(  16,   23), S(  25,   27), S(  37,   21), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -23,  -44), S( -44,  -61), S( -25,  -33), S( -16,  -14), S(  -6,   -3), S(   1,    6), S(   3,   16), S(   8,   19), S(   9,   22), S(  12,   22), S(  14,   22), S(  21,   15), S(  19,   21), S(  28,   -1), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -22,  -45), S( -50,  -61), S( -19,  -53), S(  -4,  -31), S(  -2,  -13), S(   2,   -8), S(  -3,    3), S(   1,    9), S(   3,   12), S(   7,   17), S(   7,   26), S(  10,   32), S(  13,   37), S(  18,   36), S(  27,   32), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -29,   14), S( -56,  -74), S(-120,  -84), S( -33, -228), S( -38,  -80), S( -23,  -17), S( -10,  -36), S( -10,   -1), S(  -8,   14), S(  -7,   28), S(  -4,   34), S(   0,   32), S(   1,   43), S(   4,   43), S(   7,   44), S(   8,   47), S(   9,   49), S(  11,   51), S(  13,   49), S(  16,   44), S(  25,   35), S(  34,   16), S(  37,   17), S(  43,    2), S(  66,  -24), S(  55,  -12), S(   7,    9), S(  -8,  -28)}
};

constexpr PackedScore THREAT_BY_PAWN[6] = {S(   4,  -18), S(  66,   30), S(  61,   61), S(  79,   27), S(  75,   -7), S(   0,    0)};
constexpr PackedScore THREAT_BY_KNIGHT[2][6] = {
	{S(   7,   29), S(  25,   24), S(  40,   45), S(  73,   16), S(  56,  -25), S(   0,    0)},
	{S(  -6,    8), S(  13,   22), S(  29,   30), S(  63,   35), S(  57,   -1), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_BISHOP[2][6] = {
	{S(  -2,   37), S(  40,   35), S( -10,   29), S(  68,   17), S(  67,   60), S(   0,    0)},
	{S(  -3,    6), S(  18,   22), S( -23,  -22), S(  43,   48), S(  45,  122), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_ROOK[2][6] = {
	{S(  -1,   44), S(  18,   62), S(  27,   56), S(   5,  -35), S(  73,   15), S(   0,    0)},
	{S(  -8,    8), S(   2,   15), S(  13,    2), S(   5,  -80), S(  64,   47), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_QUEEN[2][6] = {
	{S(   5,   11), S(  24,   20), S(   9,   49), S(  18,   16), S(  10,  -53), S( 104,   36)},
	{S(  -2,   11), S(   0,    6), S(  -8,   18), S(  -6,    4), S( -17,  -75), S( 117,   55)}
};
constexpr PackedScore THREAT_BY_KING[6] = {S( -28,   50), S(   4,   52), S(  32,   41), S(  74,    9), S(   0,    0), S(   0,    0)};
constexpr PackedScore PUSH_THREAT = S(  16,   17);

constexpr PackedScore ISOLATED_PAWN[8] = {S(  -8,    6), S(  -4,  -16), S( -12,   -9), S( -11,  -16), S( -11,  -16), S(  -7,   -8), S(  -2,  -15), S( -10,    7)};
constexpr PackedScore DOUBLED_PAWN[8] = {S(  -3,  -64), S(  10,  -39), S(  -2,  -30), S(  -4,  -21), S(  -6,  -15), S( -16,  -20), S(   6,  -43), S(   3,  -76)};
constexpr PackedScore BACKWARDS_PAWN[8] = {S(   0,    0), S(  -7,  -14), S(  -2,  -14), S(  -8,  -12), S(   2,  -16), S(  29,   -4), S(   0,    0), S(   0,    0)};
constexpr PackedScore PAWN_PHALANX[8] = {S(   0,    0), S(   4,   -4), S(  11,   -2), S(  21,    6), S(  47,   26), S( 129,  108), S(-182,  265), S(   0,    0)};
constexpr PackedScore DEFENDED_PAWN[8] = {S(   0,    0), S(   0,    0), S(  19,    7), S(  11,    8), S(  17,   21), S(  28,   63), S( 137,   74), S(   0,    0)};
constexpr PackedScore CANDIDATE_PASSER[2][8] = {
	{S(   0,    0), S( -37,  -14), S( -20,   -6), S(   1,   29), S(  30,   58), S(  62,   89), S(   0,    0), S(   0,    0)},
	{S(   0,    0), S( -22,   -7), S( -10,   15), S(  -5,   31), S(  19,   51), S(  39,  150), S(   0,    0), S(   0,    0)}
};

constexpr PackedScore PASSED_PAWN[2][2][8] = {
	{
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -31,  -41), S(  -6,   21), S(   5,  143), S(  38,  228), S(   0,    0)},
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -26,  -61), S(   8,  -31), S(  29,   10), S(  56,   26), S(   0,    0)}
	},
	{
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -32,  -58), S(   0,  -25), S(  32,    7), S(  61,   -1), S(   0,    0)},
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -37,  -62), S(  -3,  -38), S(   7,  -20), S( -13,  -26), S(   0,    0)}
	}
};
constexpr PackedScore OUR_PASSER_PROXIMITY[8] = {S(   0,    0), S(  38,   83), S(   3,   70), S(   3,   44), S(   6,   32), S(  13,   23), S(  21,   22), S(  15,   20)};
constexpr PackedScore THEIR_PASSER_PROXIMITY[8] = {S(   0,    0), S( -43,   10), S(  23,   -2), S(  16,   27), S(  21,   46), S(  13,   79), S(  15,   80), S(  16,   69)};

constexpr PackedScore PAWN_STORM[2][4][8] = {
	{
		{S(  15,   15), S(-123,  -50), S(  -8,  -12), S(   5,  -14), S(   0,    0), S(  -6,   10), S(  -4,    9), S(   0,    0)},
		{S(  12,    4), S( -14,  -98), S(  44,  -50), S(   6,  -12), S(   2,   -4), S( -10,    8), S(  -7,   10), S(   0,    0)},
		{S(  -3,    6), S(  62,  -97), S(  64,  -51), S(  19,  -18), S(   3,   -1), S(  -6,    7), S(  -8,   12), S(   0,    0)},
		{S(   9,   -6), S( 112,  -84), S(  36,  -29), S(  13,   -2), S(  -2,    4), S(  -8,    0), S(  -3,    2), S(   0,    0)}
	},
	{
		{S(   0,    0), S(  -3,  -27), S( -26,  114), S(  14,  -58), S(  -3,   10), S(  -2,    5), S(  -5,   10), S(   0,    0)},
		{S(   0,    0), S(   7,  -93), S(  -6,   47), S(  51,  -41), S(   1,    3), S(  -7,    7), S(  -7,    9), S(   0,    0)},
		{S(   0,    0), S(  -5,   23), S( -62, -132), S(  21,  -30), S(   2,    5), S(   0,    5), S(  -9,   11), S(   0,    0)},
		{S(   0,    0), S(  -7,  -48), S(  68,  -20), S(  19,    0), S(   1,    8), S(   1,   -9), S(  -1,    8), S(   0,    0)}
	}
};
constexpr PackedScore PAWN_SHIELD[4][8] = {
	{S(  17,    1), S(  -8,   25), S( -15,   16), S(  -2,    8), S(   4,    0), S( -41,  -23), S( -81,  -31), S(   0,    0)},
	{S(  16,   -1), S( -12,   10), S( -11,    8), S(  11,   -3), S(   8,  -12), S( -15,  -14), S( -57,  -25), S(   0,    0)},
	{S(   4,    8), S( -16,    7), S(  16,    4), S(   2,   -2), S(  -1,   -2), S(   2,  -16), S( -15,  -44), S(   0,    0)},
	{S(  15,   -4), S(   5,   -3), S(  -3,    0), S(   1,   -6), S(   8,   -9), S(  29,  -20), S( -20,  -16), S(   0,    0)}
};
constexpr PackedScore SAFE_KNIGHT_CHECK = S(  91,   -2);
constexpr PackedScore SAFE_BISHOP_CHECK = S(  17,   22);
constexpr PackedScore SAFE_ROOK_CHECK = S(  73,    9);
constexpr PackedScore SAFE_QUEEN_CHECK = S(  29,   31);
constexpr PackedScore UNSAFE_KNIGHT_CHECK = S(  10,    0);
constexpr PackedScore UNSAFE_BISHOP_CHECK = S(  16,   10);
constexpr PackedScore UNSAFE_ROOK_CHECK = S(  22,   -1);
constexpr PackedScore UNSAFE_QUEEN_CHECK = S(   6,   10);
constexpr PackedScore KING_ATTACKER_WEIGHT[4] = {S(  18,   -3), S(  13,   -2), S(  15,  -15), S(   4,    4)};
constexpr PackedScore KING_ATTACKS[14] = {S( -37,    9), S( -44,    6), S( -49,    4), S( -52,    7), S( -51,    6), S( -44,    4), S( -29,    0), S( -12,   -8), S(  16,  -20), S(  37,  -15), S(  55,  -25), S(  59,   18), S(  84,  -23), S(  71,   24)};
constexpr PackedScore WEAK_KING_RING[17] = {S( -30,   47), S( -29,   27), S( -24,   24), S( -22,   20), S( -15,   13), S(  -5,    7), S(   5,    1), S(  20,   -2), S(  37,   -6), S(  50,   -9), S(  62,  -11), S(  66,   -8), S(  77,  -11), S(  79,  -13), S(  80,  -10), S( 101,  -15), S( 110,  -17)};

constexpr PackedScore MINOR_BEHIND_PAWN = S(   7,   14);
constexpr PackedScore KNIGHT_OUTPOST = S(  24,   17);
constexpr PackedScore BISHOP_PAWNS[7] = {S(   5,   20), S(   6,   19), S(   4,   11), S(   1,    4), S(  -2,   -5), S(  -2,  -18), S(  -6,  -31)};
constexpr PackedScore BISHOP_PAIR = S(  20,   62);
constexpr PackedScore LONG_DIAG_BISHOP = S(  15,    8);
constexpr PackedScore ROOK_OPEN[2] = {S(  26,    4), S(  14,    4)};

constexpr PackedScore TEMPO = S(  32,   36);

constexpr PackedScore COMPLEXITY_PAWNS = S(   0,    8);
constexpr PackedScore COMPLEXITY_PASSERS = S(   0,    0);
constexpr PackedScore COMPLEXITY_PAWNS_BOTH_SIDES = S(   0,   69);
constexpr PackedScore COMPLEXITY_PAWN_ENDGAME = S(   0,   66);
constexpr PackedScore COMPLEXITY_OFFSET = S(   0, -131);

#undef S


}