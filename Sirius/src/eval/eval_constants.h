#pragma once

#include "../defs.h"

namespace eval
{

// clang-format off
#define S(mg, eg) ScorePair(mg, eg)

constexpr ScorePair MATERIAL[6] = {S(  70,  137), S( 341,  463), S( 358,  484), S( 465,  832), S( 937, 1695), S(0, 0)};

constexpr ScorePair PSQT[6][64] = {
    {
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  71,   93), S(  27,   93), S(  36,   74), S( 101,   44), S(  76,   47), S(  32,   83), S(  26,  105), S(  75,   91),
        S(   2,   12), S( -10,   29), S(  13,  -23), S(  -6,   -6), S(  -8,  -13), S(   3,  -16), S( -22,   19), S( -13,   13),
        S(   8,    2), S(   5,   25), S(  20,   -1), S(  13,  -17), S(   5,  -16), S(   1,  -10), S(  -1,   15), S(  -2,    4),
        S(  -4,   -6), S(  -9,   21), S(  13,   -9), S(  16,  -18), S(   9,  -17), S(   3,  -14), S( -14,   14), S( -16,   -5),
        S( -11,   -9), S(   6,   15), S(   0,   10), S(   5,   -2), S(  -7,   -2), S(  -8,   -3), S( -17,   13), S( -23,   -9),
        S(  -4,   -8), S(  22,    9), S(  25,   15), S(   4,   12), S(  -5,    2), S(  -6,    2), S(  -8,   13), S( -19,   -4),
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
    },
    {
        S( -54, -134), S( -30,   -2), S( -85,   40), S( -25,   12), S( -34,   17), S( -79,   23), S( -62,   -7), S(-123,  -91),
        S(  19,  -24), S(  14,    4), S(  28,    7), S(  33,   23), S(   5,   38), S(  24,    2), S(   2,   -5), S( -19,   11),
        S(  15,    7), S(  13,   10), S(  44,   11), S(  26,   20), S(  15,   16), S(  22,   12), S(  13,    2), S( -10,    4),
        S(  19,   14), S(  39,    8), S(  37,   19), S(  31,   31), S(  33,   29), S(  19,   24), S(  25,    1), S(  26,   -6),
        S(  18,    6), S(  28,    8), S(  22,   20), S(  25,   24), S(  20,   24), S(  18,   20), S(  27,   -3), S(   8,   -3),
        S(   5,   -7), S(  19,   -2), S(  20,   -1), S(  14,   16), S(   6,   20), S(   2,   -5), S(   9,  -12), S(  -9,  -21),
        S(  10,  -16), S(  14,   -7), S(  10,  -14), S(  11,   -1), S(   6,   -4), S(  -2,  -12), S(  -7,   -8), S( -30,  -15),
        S( -81,   37), S( -13,  -23), S(  -6,  -16), S(   7,   -6), S(   0,  -17), S( -21,  -23), S( -22,  -23), S( -64,  -21),
    },
    {
        S( -14,  -34), S( -76,   16), S(-117,   31), S( -63,    5), S( -59,   30), S( -68,   24), S( -30,   27), S( -47,   12),
        S( -34,   17), S( -31,    5), S( -15,   18), S(  -9,   16), S(  -8,   12), S(  -2,    2), S( -14,  -21), S( -12,    0),
        S(  14,   -4), S(  11,   15), S(  19,   12), S(  22,   14), S(  18,   19), S(  13,    2), S(  26,   -6), S(  15,   -3),
        S(  12,   -6), S(  10,   12), S(  17,   13), S(  20,   27), S(  34,   26), S(  19,    7), S(  14,    9), S(  -5,    2),
        S(  12,   -5), S(  15,    3), S(  10,   12), S(  18,   16), S(  15,   22), S(  18,    9), S(   3,    6), S(  19,  -19),
        S(  19,   -9), S(  24,    2), S(  15,  -11), S(   8,   13), S(   7,    7), S(   5,  -10), S(  28,   -2), S(  11,  -12),
        S(  21,  -18), S(  30,  -34), S(  19,  -14), S(   7,   -6), S(  -3,   -3), S(  14,  -19), S(   7,  -28), S(  30,  -28),
        S(   6,  -32), S(  14,  -29), S( -14,   -9), S(   5,   -6), S(  -2,   -4), S(  -8,   -7), S(  11,  -24), S(   6,  -19),
    },
    {
        S(  -2,   25), S(  17,   17), S(  21,   11), S(   9,   32), S(  21,   17), S(  26,    9), S(  20,   18), S(  20,   13),
        S(  26,   11), S(  26,    8), S(  37,   16), S(  17,   29), S(  38,   23), S(  19,   24), S(   7,   28), S(  13,   26),
        S( -15,   16), S(  14,   11), S(  12,   14), S(  23,   10), S(  23,    7), S(  14,   15), S(  16,    8), S(  14,   15),
        S( -15,   11), S( -17,   28), S(  11,   11), S(  -2,   10), S(   4,   12), S(   2,   10), S(  -6,   16), S(  -6,   14),
        S( -25,    2), S( -26,   18), S( -19,   21), S( -12,    7), S( -12,    1), S(  -4,    5), S( -16,   10), S( -22,    8),
        S( -22,  -18), S(   2,  -23), S(  -5,   -7), S( -12,   -9), S(  -4,  -17), S( -15,   -3), S(  -2,  -21), S( -17,  -14),
        S( -58,  -21), S(  -4,  -36), S(   5,  -25), S(  -1,  -21), S(   5,  -29), S(  -4,  -19), S( -21,  -21), S( -24,  -21),
        S( -17,  -37), S( -23,  -23), S(   8,  -26), S(  14,  -30), S(   7,  -31), S(  -2,  -23), S(   0,  -30), S(  -1,  -26),
    },
    {
        S(  24,   -4), S(  35,   -3), S( -15,   55), S(   6,   40), S(  25,   22), S(  18,   11), S(  39,   -3), S(  -9,   18),
        S(  38,    2), S(   7,   24), S(  24,    4), S( -40,   66), S(   9,   27), S(  15,   11), S(  23,  -18), S(  13,   -3),
        S(   0,   25), S(  25,   14), S(   7,   16), S(  -3,    8), S(   4,   16), S(  20,   -5), S(  13,   -8), S(  26,   -6),
        S(  -1,   15), S(  -5,   25), S(  -6,    8), S( -21,   32), S( -23,   50), S(   3,   12), S(   3,    9), S(  10,   -3),
        S( -12,   19), S(   2,   -5), S( -14,   20), S( -19,   30), S( -18,   36), S(  -9,   24), S(   6,    0), S(  -5,   17),
        S(  -6,    0), S(   2,  -16), S(  -6,    0), S( -18,    9), S( -10,   13), S(  -3,    7), S(   2,   10), S(   1,   -3),
        S(  -4,  -43), S(   3,  -70), S(  -2,  -52), S(  -3,  -23), S(  -4,  -19), S(  -1,  -20), S(  -4,  -14), S(   0,   -9),
        S(  -8,  -38), S( -23, -118), S( -27,  -56), S( -21,  -40), S(  -6,  -33), S( -24,  -17), S( -21,  -21), S(  -1,  -45),
    },
    {
        S( -22, -103), S(  66,   68), S(  13,   26), S( -40,   86), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  45,    8), S(  18,  108), S(   0,   54), S( -17,   55), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  16,   50), S(  37,  103), S(  -9,   38), S( -88,   -4), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S( -49,   59), S( -21,   91), S( -56,   24), S(-145,   -9), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S( -47,   39), S( -64,   84), S( -69,   11), S( -94,  -25), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(   9,   16), S( -10,   56), S( -60,   -6), S( -69,  -38), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  60,  -12), S(  46,   18), S(  11,  -44), S( -18,  -73), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  51,  -41), S(  52,    1), S(   8,  -64), S(   4, -109), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
    },
};

constexpr ScorePair MOBILITY[4][28] = {
    {S(  -5,  -29), S( -34,  -66), S( -25,  -15), S( -10,    1), S(  -2,   15), S(   5,   25), S(  15,   26), S(  26,   25), S(  34,   18), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S(   3,  -41), S( -46,  -59), S( -26,  -31), S( -14,  -11), S(  -7,    3), S(   1,   13), S(   3,   20), S(   5,   23), S(   6,   26), S(  11,   25), S(  14,   26), S(  23,    9), S(  10,   25), S(  21,  -20), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S( -32,  -60), S( -59,  -70), S( -19,  -48), S( -11,  -28), S(  -2,  -17), S(   4,   -6), S(   3,    4), S(   6,   12), S(   8,   15), S(  11,   24), S(  12,   31), S(  11,   40), S(  16,   42), S(  13,   48), S(  52,   14), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S( -20,   26), S( -10,  -58), S( -91,   73), S( -27, -165), S( -40, -103), S( -15,  -73), S(  -8,  -51), S(   0,  -41), S(   0,  -13), S(  -1,    2), S(   2,   11), S(   4,   19), S(   4,   30), S(   8,   29), S(  11,   27), S(  10,   36), S(   9,   43), S(  13,   33), S(  16,   40), S(  21,   33), S(  20,   34), S(  34,   14), S(  34,    4), S(  28,   -1), S(  25,   27), S(  12,  -14), S( -30,    5), S(   3,   19)}
};

constexpr ScorePair THREAT_BY_PAWN[6] = {S(   6,  -28), S(  80,   43), S(  71,   79), S(  89,   45), S(  54,   44), S(   0,    0)};
constexpr ScorePair THREAT_BY_KNIGHT[2][6] = {
    {S(   7,   33), S(  17,   40), S(  55,   30), S(  86,    9), S(  46,   17), S(   0,    0)},
    {S(  -8,   11), S(  10,   37), S(  42,   28), S(  86,   34), S(  57,   26), S(   0,    0)}
};
constexpr ScorePair THREAT_BY_BISHOP[2][6] = {
    {S(   2,   32), S(  45,   41), S(  13,   13), S(  53,   44), S(  52,   84), S(   0,    0)},
    {S(  -4,    3), S(  20,   23), S(  -1,  -11), S(  54,   72), S(  58,   75), S(   0,    0)}
};
constexpr ScorePair THREAT_BY_ROOK[2][6] = {
    {S(  -1,   49), S(  36,   55), S(  50,   46), S( -12,  -48), S(  61,   16), S(   0,    0)},
    {S( -10,   10), S(  13,   13), S(  22,    6), S(  12,  -92), S(  55,   82), S(   0,    0)}
};
constexpr ScorePair THREAT_BY_QUEEN[2][6] = {
    {S(   7,   26), S(  22,   37), S(  23,   50), S(  12,   12), S(   6,  -63), S( 114,   68)},
    {S(  -4,   18), S(   1,   15), S(  -8,   29), S(  -5,   -2), S( -15,  -59), S( 140,  137)}
};
constexpr ScorePair THREAT_BY_KING[6] = {S(  51,   12), S(  16,   49), S( 125,   33), S(  91,    4), S(   0,    0), S(   0,    0)};
constexpr ScorePair KNIGHT_HIT_QUEEN = S(   8,   -1);
constexpr ScorePair BISHOP_HIT_QUEEN = S(  16,   14);
constexpr ScorePair ROOK_HIT_QUEEN = S(  21,   -5);
constexpr ScorePair PUSH_THREAT = S(  15,   19);
constexpr ScorePair RESTRICTED_SQUARES = S(   3,    2);

constexpr ScorePair ISOLATED_PAWN[8] = {S(  -4,    3), S(  -4,  -18), S(  -9,   -9), S(  -9,  -16), S( -12,  -13), S(  -8,   -6), S(  -4,  -13), S( -11,    5)};
constexpr ScorePair DOUBLED_PAWN[8] = {S(  -2,  -56), S(  11,  -49), S(  -5,  -35), S(  -1,  -19), S( -19,   -5), S(  -8,  -27), S(   9,  -51), S(   5,  -49)};
constexpr ScorePair BACKWARDS_PAWN[8] = {S(   0,    0), S(  -9,  -13), S(   3,  -18), S(  -4,  -16), S(   7,  -13), S(  68,  -11), S(   0,    0), S(   0,    0)};
constexpr ScorePair PAWN_PHALANX[8] = {S(   0,    0), S(   6,   -4), S(  13,   -3), S(  20,   11), S(  38,   48), S(  22,  149), S( 108,  165), S(   0,    0)};
constexpr ScorePair DEFENDED_PAWN[8] = {S(   0,    0), S(   0,    0), S(  20,    6), S(  10,   11), S(  19,   24), S(  41,   66), S( 125,  106), S(   0,    0)};
constexpr ScorePair CANDIDATE_PASSER[2][8] = {
    {S(   0,    0), S( -44,   14), S( -19,    1), S(  -4,    3), S(   9,   24), S(  65,   77), S(   0,    0), S(   0,    0)},
    {S(   0,    0), S(  -9,  -14), S(  -3,    0), S(  -5,   27), S(  20,   27), S(  48,   69), S(   0,    0), S(   0,    0)}
};

constexpr ScorePair PASSED_PAWN[2][2][8] = {
    {
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -39,  -30), S( -19,   22), S(  42,  130), S( 115,  205), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -33,  -42), S(  -8,  -14), S(  45,   52), S(  97,   72), S(   0,    0)}
    },
    {
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -31,  -44), S( -16,   -5), S(  47,   58), S(  55,   39), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -32,  -58), S( -12,  -19), S(  32,   28), S(  17,    7), S(   0,    0)}
    }
};
constexpr ScorePair OUR_PASSER_PROXIMITY[8] = {S(  97,   87), S( 100,   67), S(  42,   72), S(   1,   61), S(   3,   32), S(   7,   19), S(  16,   13), S(  10,   17)};
constexpr ScorePair THEIR_PASSER_PROXIMITY[8] = {S( -53,    1), S(   6,   -1), S(  30,    1), S(  24,   24), S(  15,   59), S(  15,   76), S(  35,   70), S(  37,   54)};
constexpr ScorePair PASSER_DEFENDED_PUSH[8] = {S(   0,    0), S(   0,    0), S(   0,    0), S(   7,   10), S(  13,   21), S(  24,   39), S(  54,  103), S(   0,    0)};

constexpr ScorePair PAWN_STORM[2][4][8] = {
    {
        {S(  29,   37), S(-118, -173), S( -14,  -65), S(  46,   12), S(  24,   30), S(  -1,   39), S(  -6,   41), S(   0,    0)},
        {S(  19,   14), S(  18, -187), S(  52,  -99), S(  35,  -13), S(  14,    8), S( -24,   20), S(   5,   19), S(   0,    0)},
        {S(   3,   13), S(   4, -145), S( 113,  -93), S(  52,   -7), S(  10,   15), S( -17,   21), S(   2,   17), S(   0,    0)},
        {S(  10,  -15), S(  69, -199), S( 124, -116), S(  66,  -18), S(  13,   -1), S( -23,   -6), S( -22,  -11), S(   0,    0)}
    },
    {
        {S(   0,    0), S(   0,    0), S(  90,   67), S(   5,   41), S(  -8,   51), S(  22,   56), S(  23,   40), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S( 137,   61), S( -21,   23), S( -24,   36), S( -15,   48), S(  50,   34), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S( 149,   12), S(   0,   15), S( -24,   51), S(  -1,   45), S(  66,   -2), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S( 136,  -20), S(   6,   17), S( -19,   28), S( -14,   12), S( -11,  -82), S(   0,    0)}
    }
};
constexpr ScorePair PAWN_SHIELD[4][8] = {
    {S(  62,   40), S(  -3,   58), S( -15,   44), S(  27,   37), S(  39,   23), S(  -4,   31), S(   3,   33), S(   0,    0)},
    {S(  41,   18), S( -31,   22), S(   0,   24), S(  40,    5), S(  47,   -4), S( -27,  -11), S( -40,  -47), S(   0,    0)},
    {S(  26,   18), S(  -6,   29), S(  11,   19), S(  34,    9), S(  44,    1), S(  16,  -29), S( -48,  -27), S(   0,    0)},
    {S(  15,    1), S( -23,  -10), S(   6,  -29), S(  28,  -32), S(  20,  -28), S(  14,  -14), S(  19,  -55), S(   0,    0)}
};
constexpr ScorePair SAFE_KNIGHT_CHECK = S(  98,    1);
constexpr ScorePair SAFE_BISHOP_CHECK = S(  64,   31);
constexpr ScorePair SAFE_ROOK_CHECK = S( 110,   16);
constexpr ScorePair SAFE_QUEEN_CHECK = S(  62,   23);
constexpr ScorePair UNSAFE_KNIGHT_CHECK = S(  12,    1);
constexpr ScorePair UNSAFE_BISHOP_CHECK = S(  34,   15);
constexpr ScorePair UNSAFE_ROOK_CHECK = S(  44,    3);
constexpr ScorePair UNSAFE_QUEEN_CHECK = S(  17,    9);
constexpr ScorePair QUEENLESS_ATTACK = S(-162,  171);
constexpr ScorePair KING_ATTACKER_WEIGHT[4] = {S(  68,   -3), S(  27,   -2), S(  27,  -14), S(   2,  -14)};
constexpr ScorePair KING_ATTACKS = S(   6,    0);
constexpr ScorePair WEAK_KING_RING = S(   4,    1);
constexpr ScorePair KING_FLANK_ATTACKS[2] = {S(  15,   -5), S(   4,    0)};
constexpr ScorePair KING_FLANK_DEFENSES[2] = {S(  -8,    0), S(  -7,    5)};
constexpr ScorePair SAFETY_OFFSET = S(  72,  122);

constexpr ScorePair MINOR_BEHIND_PAWN = S(   3,   13);
constexpr ScorePair KNIGHT_OUTPOST = S(  21,   13);
constexpr ScorePair BISHOP_PAWNS[7] = {S(  11,    2), S(   4,   17), S(   5,    8), S(   0,    5), S(  -3,   -3), S(  -8,   -8), S(  -8,  -18)};
constexpr ScorePair BISHOP_PAIR = S(  26,   69);
constexpr ScorePair LONG_DIAG_BISHOP = S(  12,   13);
constexpr ScorePair ROOK_OPEN[2] = {S(  37,   -5), S(  20,    2)};

constexpr ScorePair TEMPO = S(  26,   17);

constexpr ScorePair COMPLEXITY_PAWNS = S(   0,   11);
constexpr ScorePair COMPLEXITY_PAWNS_BOTH_SIDES = S(   0,  172);
constexpr ScorePair COMPLEXITY_PAWN_ENDGAME = S(   0,  152);
constexpr ScorePair COMPLEXITY_OFFSET = S(   0, -265);

#undef S
// clang-format on

}
