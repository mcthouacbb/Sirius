#pragma once

#include "../defs.h"

namespace eval
{

#define S(mg, eg) PackedScore(mg, eg)

constexpr PackedScore MATERIAL[6] = {S(  62,  125), S( 283,  439), S( 308,  448), S( 375,  820), S( 785, 1504), S(0, 0)};

constexpr PackedScore PSQT[6][64] = {
	{
		S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
		S(  70,   74), S(  49,   78), S(  23,   93), S(  56,   82), S(  56,   75), S(  25,   93), S(  36,   90), S(  60,   85),
		S(  30,   22), S(  34,   39), S(  35,   15), S(  60,  -12), S(  40,   -4), S(  25,    9), S(   6,   30), S(  10,   31),
		S(  20,   14), S(  13,    8), S(  12,   -5), S(  25,  -19), S(  10,  -16), S(   0,   -3), S(  -2,    8), S( -11,   20),
		S(   6,    4), S(  10,    6), S(   3,  -16), S(  13,  -11), S(   6,  -10), S(  -7,   -5), S( -11,    7), S( -18,    7),
		S(   0,    0), S(   9,   -4), S(  -3,  -21), S(  -3,    4), S(  -9,    3), S( -18,   -3), S( -23,    3), S( -29,    6),
		S(  14,    3), S(  32,   -2), S(  13,   -5), S(   7,   15), S(  -7,    7), S( -11,    2), S( -13,   12), S( -18,   12),
		S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
	},
	{
		S( -73,  -87), S( -92,  -23), S( -63,  -14), S(  20,  -18), S( -44,   10), S( -70,    5), S(-127,   18), S( -92,  -46),
		S(   9,  -15), S(  25,   -2), S(  70,  -13), S(  25,    3), S(  45,    4), S(  37,    7), S(  13,   14), S(   0,    5),
		S(  11,   -7), S(  34,  -10), S(  62,  -13), S(  69,    3), S(  33,   18), S(  26,   11), S(  18,    2), S(  -4,    5),
		S(  30,    4), S(  19,   11), S(  38,   13), S(  25,   21), S(  26,   22), S(  21,   17), S(   6,    8), S(   2,   17),
		S(   4,    9), S(   5,    9), S(  13,   12), S(   9,   22), S(  11,   17), S(   7,   16), S(   7,    5), S(  -4,    8),
		S(  -2,   -1), S(  15,   -3), S(   1,   -5), S(  13,   13), S(   1,   13), S(  -6,   -1), S(  -4,   -2), S( -18,   -1),
		S(   3,    4), S(   3,   -6), S(   5,   -6), S(   4,   -2), S(   6,   -3), S(  -6,   -6), S( -12,   -7), S( -18,   -5),
		S( -14,   -9), S( -10,   -5), S(  -3,  -11), S(   0,    2), S(  -8,   -1), S( -22,   -8), S( -13,   -7), S( -49,    4),
	},
	{
		S( -37,   -9), S( -49,   10), S( -58,    7), S( -85,   14), S( -90,   21), S( -67,    7), S( -45,   10), S( -25,   12),
		S( -24,   -9), S(  -8,    5), S(  -5,    1), S(  18,   -3), S( -12,    8), S(   9,   -1), S(  22,   -6), S(  -1,  -11),
		S(  16,    8), S(  11,   -1), S(  44,    9), S(  12,    7), S(  25,    1), S(  17,    4), S(  10,    4), S(   3,    0),
		S( -12,    3), S(   9,   -2), S(   3,   13), S(  22,   17), S(  20,   25), S(  15,    6), S(   5,    5), S(  -6,    3),
		S(  19,  -14), S(  -2,    4), S(  -2,    6), S(   5,   16), S(  16,   13), S(  -9,   13), S(  -3,    2), S(   2,   -5),
		S(  25,  -13), S(  20,   -9), S(  10,    0), S(   1,   11), S(  -6,    6), S(   5,    7), S(   9,    3), S(   5,   -8),
		S(  24,  -19), S(  31,  -22), S(  19,  -13), S(   3,   -5), S(  -6,   -1), S(  10,  -19), S(   8,  -15), S(  16,  -10),
		S(  35,  -33), S(  19,  -20), S(  -3,   -3), S(  15,   -6), S(   0,   -5), S(   2,    5), S(  15,   -6), S(  15,   -7),
	},
	{
		S(  11,   11), S( -24,   35), S(   0,   20), S( -10,   12), S( -26,   22), S( -24,   29), S( -12,   23), S(  -5,   18),
		S(  27,    4), S(  26,   15), S(  28,   14), S(   4,   22), S(  19,   24), S(   4,   35), S(  -5,   30), S(  -1,   20),
		S(   7,    6), S(  41,    7), S(  32,    7), S(  31,   10), S(   6,   22), S(   2,   31), S(  12,   25), S( -10,   26),
		S(  -5,   13), S(  -6,   18), S(   6,   14), S(   6,    7), S(   4,   17), S(   0,   23), S(  -1,   21), S( -14,   25),
		S( -12,   -2), S(   2,   -2), S( -12,    2), S(  -2,   -1), S(  -8,    2), S( -13,    5), S( -19,    6), S( -17,    6),
		S(  10,  -28), S(  18,  -31), S(   2,  -19), S(   2,  -20), S( -12,  -12), S( -16,  -13), S( -12,  -15), S( -18,  -11),
		S(  -3,  -36), S(  22,  -42), S(   9,  -30), S(   5,  -28), S(  -2,  -23), S(  -3,  -22), S( -13,  -19), S( -15,  -24),
		S(  -3,  -40), S(  -3,  -23), S(   4,  -27), S(  10,  -32), S(   2,  -28), S(  -5,  -21), S(  -4,  -26), S(  -3,  -22),
	},
	{
		S(  -4,  -23), S(  31,  -39), S(  -6,   15), S(  -8,    5), S(  10,  -15), S( -20,    2), S( -45,    1), S( -23,   -9),
		S(  36,   -1), S(  -3,   16), S(  -3,   33), S( -38,   62), S( -27,   43), S(  -9,   18), S(  -8,   -3), S(   4,  -10),
		S(  12,    5), S(  15,   12), S(   7,   28), S(  -1,   34), S(   6,   26), S(   7,   24), S(   8,   -2), S(  18,   -8),
		S(   7,   16), S(   3,   39), S(   2,   18), S( -14,   38), S(  -9,   45), S(   0,   17), S(  -1,   21), S(   2,    4),
		S(  17,   -5), S(   8,   16), S(  -1,   24), S(  -6,   34), S(  -7,   34), S(  -8,   24), S(  -3,   17), S(   1,    4),
		S(  17,  -31), S(  14,   -7), S(   3,    9), S(  -5,   21), S(  -4,   13), S(  -6,   17), S(   6,   -5), S(   6,  -19),
		S(  19,  -70), S(  21,  -73), S(  13,  -44), S(   9,  -11), S(   7,   -5), S(   9,  -21), S(   7,  -26), S(  15,  -46),
		S(   7,  -58), S(  -5,  -65), S( -12,  -34), S(  -2,  -27), S(  -1,  -20), S(  -6,  -14), S( -10,  -20), S(  -9,  -20),
	},
	{
		S(   0,  -67), S(   2,    1), S( -31,   -7), S( -28,   -8), S(  10,   -6), S(  10,   -6), S(  10,   -6), S(  10,   -6),
		S( -48,   30), S( -17,   70), S( -15,   50), S(  33,   18), S(  10,   -6), S(  10,   -6), S(  10,   -6), S(  10,   -6),
		S( -28,   27), S(  10,   62), S(  28,   44), S(  -4,   46), S(  10,   -6), S(  10,   -6), S(  10,   -6), S(  10,   -6),
		S( -64,   23), S( -29,   49), S( -27,   41), S( -47,   34), S(  10,   -6), S(  10,   -6), S(  10,   -6), S(  10,   -6),
		S( -80,   11), S( -37,   28), S( -22,   16), S( -46,   15), S(  10,   -6), S(  10,   -6), S(  10,   -6), S(  10,   -6),
		S( -35,   -7), S(   8,    7), S(  -8,   -3), S( -13,   -5), S(  10,   -6), S(  10,   -6), S(  10,   -6), S(  10,   -6),
		S(  26,  -29), S(  37,   -9), S(  16,  -17), S(   0,  -20), S(  10,   -6), S(  10,   -6), S(  10,   -6), S(  10,   -6),
		S(  21,  -63), S(  26,  -29), S(   7,  -34), S(  17,  -54), S(  10,   -6), S(  10,   -6), S(  10,   -6), S(  10,   -6),
	},
};

constexpr PackedScore MOBILITY[4][28] = {
	{S( -18,  -35), S( -39,  -61), S( -15,  -27), S(  -8,   -1), S(   3,   10), S(   5,   21), S(  14,   26), S(  22,   32), S(  31,   30), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -23,  -43), S( -54,  -90), S( -32,  -31), S( -25,  -10), S( -12,    1), S(  -4,   10), S(   2,   19), S(   8,   23), S(  10,   27), S(  14,   27), S(  17,   26), S(  28,   16), S(  29,   15), S(  42,   -2), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -52,    9), S(   5,  -41), S( -22,  -53), S( -10,  -36), S(  -4,  -28), S(   0,  -11), S(   3,   -6), S(  -2,    4), S(   2,    7), S(   5,   12), S(   9,   18), S(   9,   27), S(  10,   31), S(  16,   31), S(  23,   28), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -42,   68), S( -76,  -26), S(-113,  -33), S( -88, -236), S( -70,  -90), S( -31,  -28), S( -24,    0), S( -16,    2), S(  -7,    1), S(  -5,   23), S(  -3,   27), S(   0,   36), S(   3,   38), S(   7,   40), S(  10,   41), S(  13,   42), S(  14,   42), S(  14,   46), S(  15,   45), S(  17,   43), S(  25,   34), S(  35,   14), S(  38,   12), S(  55,  -10), S(  63,  -21), S(  71,  -36), S(  59,  -38), S(  18,  -38)}
};

constexpr PackedScore THREAT_BY_PAWN[6] = {S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)};
constexpr PackedScore THREAT_BY_KNIGHT[2][6] = {
	{S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_BISHOP[2][6] = {
	{S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_ROOK[2][6] = {
	{S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_QUEEN[2][6] = {
	{S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_KING[6] = {S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)};
constexpr PackedScore PUSH_THREAT = S(   0,    0);

constexpr PackedScore ISOLATED_PAWN[8] = {S(  -5,   -5), S(  -6,  -12), S( -10,  -11), S( -12,  -14), S( -11,  -13), S(  -7,   -7), S(  -2,  -12), S(  -6,   -4)};
constexpr PackedScore PAWN_PHALANX[8] = {S(   0,    0), S(   5,   -2), S(  12,    5), S(  22,   18), S(  48,   65), S( 120,  234), S( -54,  363), S(   0,    0)};
constexpr PackedScore DEFENDED_PAWN[8] = {S(   0,    0), S(   0,    0), S(  21,   11), S(  13,   10), S(  11,   21), S(  15,   65), S( 120,   91), S(   0,    0)};

constexpr PackedScore PASSED_PAWN[2][2][8] = {
	{
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -30,  -47), S( -16,   15), S( -16,  140), S(  20,  230), S(   0,    0)},
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -22,  -57), S(   8,  -30), S(  17,    5), S(  74,   30), S(   0,    0)}
	},
	{
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -26,  -66), S(  -5,  -33), S(  11,   -9), S(  65,   -5), S(   0,    0)},
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -36,  -73), S(  -6,  -42), S( -11,  -28), S(   1,  -23), S(   0,    0)}
	}
};
constexpr PackedScore PASSED_FILE[8] = {S(   5,   45), S(  17,   39), S(  18,   30), S(  15,   19), S(   7,   19), S(  16,   25), S(   3,   39), S( -10,   38)};
constexpr PackedScore OUR_PASSER_PROXIMITY[8] = {S(   0,    0), S(  39,   74), S(   1,   56), S(  -2,   30), S(  -1,   17), S(   5,    8), S(  18,    4), S(  13,    1)};
constexpr PackedScore THEIR_PASSER_PROXIMITY[8] = {S(   0,    0), S( -33,  -15), S(  20,   -8), S(  12,   17), S(  12,   37), S(   2,   67), S(  10,   66), S(  11,   54)};

constexpr PackedScore PAWN_STORM[2][4][8] = {
	{
		{S(  14,   14), S(-123,  -59), S(   1,  -10), S(   5,  -13), S(   0,    1), S(  -5,    9), S(  -3,    9), S(   0,    0)},
		{S(   9,    2), S(  -3, -112), S(  56,  -45), S(  11,  -11), S(   3,   -4), S( -11,    7), S(  -8,   11), S(   0,    0)},
		{S(  -4,    5), S(  56, -101), S(  76,  -49), S(  18,  -17), S(   4,    0), S(  -7,    8), S(  -9,   12), S(   0,    0)},
		{S(   8,   -8), S(  99,  -89), S(  40,  -22), S(  13,    1), S(  -2,    5), S(  -9,    1), S(  -3,    2), S(   0,    0)}
	},
	{
		{S(   0,    0), S(  -4,  -36), S( -28,  117), S(  17,  -54), S(  -2,    7), S(  -1,    6), S(  -5,   10), S(   0,    0)},
		{S(   0,    0), S(   1,  -77), S( -10,   79), S(  61,  -43), S(   4,    2), S(  -7,    7), S(  -8,   10), S(   0,    0)},
		{S(   0,    0), S( -14,   10), S( -68,  -98), S(  18,  -25), S(   2,    5), S(  -2,    8), S(  -9,   10), S(   0,    0)},
		{S(   0,    0), S( -37,  -53), S(  55,   -4), S(  20,    0), S(   1,   10), S(  -1,   -9), S(   0,    6), S(   0,    0)}
	}
};
constexpr PackedScore PAWN_SHIELD[4][8] = {
	{S(  17,    3), S(  -7,   24), S( -14,   15), S(  -2,    8), S(   3,   -1), S( -29,  -27), S( -78,  -33), S(   0,    0)},
	{S(  20,    2), S( -15,   11), S( -11,    2), S(  13,   -2), S(  11,   -9), S(  -5,  -12), S( -28,  -28), S(   0,    0)},
	{S(   7,   15), S( -14,    8), S(   4,  -10), S(   3,   -1), S(   2,    2), S(  16,  -14), S(  -8,  -36), S(   0,    0)},
	{S(  13,   -2), S(   5,   -1), S(  -4,    0), S(  -1,   -6), S(   9,  -10), S(  33,  -21), S( -15,  -17), S(   0,    0)}
};
constexpr PackedScore SAFE_KNIGHT_CHECK = S(  86,   -3);
constexpr PackedScore SAFE_BISHOP_CHECK = S(  24,   12);
constexpr PackedScore SAFE_ROOK_CHECK = S(  60,    7);
constexpr PackedScore SAFE_QUEEN_CHECK = S(  25,   22);
constexpr PackedScore UNSAFE_KNIGHT_CHECK = S(   6,    1);
constexpr PackedScore UNSAFE_BISHOP_CHECK = S(  11,   13);
constexpr PackedScore UNSAFE_ROOK_CHECK = S(  18,    0);
constexpr PackedScore UNSAFE_QUEEN_CHECK = S(   5,   15);
constexpr PackedScore KING_ATTACKER_WEIGHT[4] = {S(  20,    4), S(  19,    5), S(  19,  -11), S(   7,    4)};
constexpr PackedScore KING_ATTACKS[14] = {S( -37,   36), S( -46,   26), S( -56,   21), S( -62,   22), S( -63,   18), S( -56,   11), S( -41,    5), S( -22,   -6), S(  17,  -26), S(  38,  -23), S(  68,  -33), S(  83,  -14), S( 113,  -91), S(  75,   51)};

constexpr PackedScore MINOR_BEHIND_PAWN = S(   9,   15);
constexpr PackedScore KNIGHT_OUTPOST = S(  36,   21);
constexpr PackedScore BISHOP_PAWNS[7] = {S(   5,   26), S(   7,   23), S(   4,   14), S(   0,    5), S(  -4,   -6), S(  -5,  -22), S( -10,  -39)};
constexpr PackedScore BISHOP_PAIR = S(  23,   65);
constexpr PackedScore ROOK_OPEN[2] = {S(  31,    2), S(  11,   11)};

constexpr PackedScore TEMPO = S(  21,   27);

constexpr PackedScore COMPLEXITY_PAWNS = S(   0,    8);
constexpr PackedScore COMPLEXITY_PASSERS = S(   0,    0);
constexpr PackedScore COMPLEXITY_PAWNS_BOTH_SIDES = S(   0,   69);
constexpr PackedScore COMPLEXITY_PAWN_ENDGAME = S(   0,   62);
constexpr PackedScore COMPLEXITY_OFFSET = S(   0, -130);

#undef S


}