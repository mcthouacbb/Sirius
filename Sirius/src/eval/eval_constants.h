#pragma once

#include "../defs.h"

namespace eval
{

#define S(mg, eg) PackedScore(mg, eg)

constexpr PackedScore MATERIAL[6] = {S(  61,  133), S( 288,  442), S( 312,  448), S( 387,  810), S( 801, 1487), S(0, 0)};

constexpr PackedScore PSQT[6][64] = {
	{
		S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
		S(  68,   75), S(  32,   91), S(  30,   99), S(  55,   76), S(  67,   67), S(  36,   91), S(  30,  108), S(  66,   82),
		S(  24,   15), S(  26,   44), S(  26,   10), S(  51,  -24), S(  37,  -18), S(  22,    2), S(   0,   36), S(   7,   21),
		S(  19,    9), S(   7,   15), S(   9,   -7), S(  16,  -22), S(   5,  -21), S(  -2,   -7), S(  -7,   16), S( -11,   12),
		S(   8,    0), S(   4,   17), S(   7,  -15), S(  13,  -14), S(   7,  -13), S(  -4,   -7), S( -15,   15), S( -15,    1),
		S(   3,   -3), S(  10,   12), S(  13,   -4), S(  -2,    2), S(  -7,    1), S( -15,   -4), S( -25,   13), S( -27,    0),
		S(  16,   -3), S(  29,    7), S(  15,   -7), S(   7,    7), S(  -6,    2), S(  -8,   -3), S( -16,   18), S( -17,    4),
		S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
	},
	{
		S( -71,  -82), S( -81,  -16), S( -29,  -13), S(  11,  -11), S( -39,    9), S( -67,   10), S(-103,   17), S( -81,  -43),
		S(  -8,   -8), S(  24,    1), S(  29,   -5), S(   8,    4), S(  10,    9), S(   3,   13), S(  -4,   21), S(  -8,    9),
		S(  15,   -9), S(   8,   -1), S(  52,  -17), S(  38,    2), S(  21,    9), S(  13,    6), S(   4,    5), S(  -6,    5),
		S(  32,    3), S(  33,    6), S(  44,    5), S(  36,   12), S(  30,   18), S(  31,    8), S(  19,    4), S(   8,   17),
		S(   9,   17), S(  17,   11), S(  26,   10), S(  18,   22), S(  26,   13), S(  21,   13), S(  21,    3), S(   3,   12),
		S(   2,   -1), S(  16,   -2), S(   6,   -7), S(  15,    9), S(   6,    8), S(   0,   -4), S(   0,   -5), S( -13,   -1),
		S(   4,    6), S(  11,   -7), S(   4,   -7), S(   5,   -3), S(   6,   -3), S(  -7,   -5), S( -11,   -3), S( -18,    0),
		S( -10,   -8), S( -11,    0), S(  -5,   -9), S(  -4,    5), S(  -9,    1), S( -21,   -6), S( -14,   -2), S( -46,    7),
	},
	{
		S( -32,   -6), S( -31,    5), S( -10,    0), S( -73,   12), S( -66,   16), S( -52,    4), S( -24,    7), S( -18,   17),
		S( -20,   -7), S( -39,   12), S( -13,    0), S(  -3,   -2), S( -20,    8), S(   1,   -3), S(  -5,    1), S(  -4,   -5),
		S(  16,   11), S(  11,    0), S(  33,    7), S(   9,    4), S(  15,    0), S(   5,    5), S(   6,    5), S(   6,    4),
		S(  -5,    4), S(   8,    6), S(   5,   11), S(  16,   13), S(  16,   19), S(  13,    5), S(   4,   10), S(  -7,    6),
		S(  14,   -5), S(   1,    7), S(   5,    6), S(   4,   12), S(  14,    8), S(  -3,   13), S(  -2,    6), S(   1,    2),
		S(  19,   -9), S(  20,   -9), S(   9,   -1), S(   3,    7), S(  -4,    3), S(   6,    3), S(  11,    2), S(   2,   -6),
		S(  23,  -20), S(  22,  -19), S(  19,  -14), S(   4,   -6), S(  -4,   -1), S(   9,  -18), S(   7,  -18), S(  15,   -7),
		S(  32,  -30), S(  18,  -18), S(  -6,    2), S(  13,   -3), S(   1,   -2), S(   2,    7), S(  12,   -2), S(  14,   -9),
	},
	{
		S(  17,   10), S( -24,   38), S( -17,   28), S(  -7,   18), S( -24,   28), S( -17,   32), S(  -6,   25), S(   3,   20),
		S(  29,    3), S(  32,    9), S(  13,   15), S(   9,   14), S(  18,   17), S(   4,   29), S(   2,   25), S(   4,   17),
		S(   9,    3), S(  36,    3), S(  21,    2), S(  27,    1), S(   4,   11), S(   2,   21), S(  14,   18), S(  -7,   20),
		S(   4,    5), S(   5,   12), S(  11,    8), S(  13,    0), S(   6,    9), S(   8,   15), S(   7,   15), S(  -5,   16),
		S( -10,   -2), S(  12,    0), S(  -7,    4), S(   8,   -2), S(  -3,    2), S(  -7,    6), S(  -8,    6), S( -13,    6),
		S(   5,  -26), S(  19,  -28), S(  -4,  -17), S(   1,  -18), S( -10,  -11), S( -14,  -11), S( -13,  -12), S( -19,  -10),
		S(  -9,  -28), S(  18,  -37), S(   1,  -25), S(   1,  -23), S(  -5,  -20), S(  -5,  -17), S( -15,  -14), S( -18,  -20),
		S( -11,  -34), S(  -9,  -16), S(  -3,  -22), S(   6,  -29), S(  -1,  -25), S(  -8,  -18), S(  -7,  -21), S(  -9,  -18),
	},
	{
		S(  14,  -18), S(  48,  -39), S( -14,   27), S( -11,   19), S(  15,   -7), S( -16,   12), S( -35,    9), S( -12,   -2),
		S(  45,    1), S(   3,   13), S( -19,   31), S( -31,   54), S( -20,   35), S(  -5,   10), S(  -3,  -10), S(   9,   -8),
		S(  18,    9), S(  11,    9), S(   1,   21), S( -10,   27), S(   3,   16), S(   9,    8), S(   8,   -9), S(  20,   -9),
		S(  11,   16), S(   5,   34), S(   6,   10), S( -10,   33), S(  -7,   30), S(   7,    7), S(   6,   14), S(   6,    5),
		S(   9,    7), S(  12,   10), S(  -2,   15), S(   1,   26), S(  -5,   31), S(  -4,   22), S(   3,   16), S(   0,    8),
		S(  10,  -18), S(   9,   -7), S(  -2,    5), S( -11,   16), S(  -7,   13), S(  -7,   17), S(   4,   -4), S(   4,  -13),
		S(   6,  -49), S(   8,  -62), S(   3,  -40), S(   1,   -9), S(   0,   -2), S(   3,  -17), S(   2,  -21), S(   9,  -34),
		S(   1,  -47), S( -13,  -50), S( -24,  -22), S(  -9,  -21), S(  -7,  -16), S( -11,  -13), S( -14,  -15), S( -14,  -14),
	},
	{
		S( -37,  -54), S( -51,   16), S(-104,   22), S( -58,   -1), S(  12,   -7), S(  12,   -7), S(  12,   -7), S(  12,   -7),
		S( -82,   39), S( -41,   70), S( -54,   60), S(   1,   27), S(  12,   -7), S(  12,   -7), S(  12,   -7), S(  12,   -7),
		S(  -5,   24), S(   5,   62), S(  14,   51), S( -11,   52), S(  12,   -7), S(  12,   -7), S(  12,   -7), S(  12,   -7),
		S( -33,   18), S( -14,   47), S(  -9,   38), S( -32,   33), S(  12,   -7), S(  12,   -7), S(  12,   -7), S(  12,   -7),
		S( -47,    6), S( -12,   26), S(   2,   14), S( -18,   12), S(  12,   -7), S(  12,   -7), S(  12,   -7), S(  12,   -7),
		S(  -3,  -16), S(  23,    3), S(  10,   -7), S(   6,   -9), S(  12,   -7), S(  12,   -7), S(  12,   -7), S(  12,   -7),
		S(  36,  -34), S(  37,  -10), S(  21,  -19), S(   4,  -22), S(  12,   -7), S(  12,   -7), S(  12,   -7), S(  12,   -7),
		S(  21,  -65), S(  25,  -29), S(   3,  -32), S(  14,  -52), S(  12,   -7), S(  12,   -7), S(  12,   -7), S(  12,   -7),
	},
};

constexpr PackedScore MOBILITY[4][28] = {
	{S(  -9,  -23), S( -41,  -62), S( -15,  -31), S(  -7,   -5), S(   3,    8), S(   6,   18), S(  14,   25), S(  22,   32), S(  31,   32), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -15,  -38), S( -50,  -93), S( -27,  -37), S( -21,  -15), S(  -9,   -3), S(  -2,    7), S(   3,   18), S(   8,   22), S(  10,   27), S(  14,   28), S(  16,   30), S(  26,   21), S(  24,   25), S(  36,    8), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -25,  -35), S(  12,  -64), S( -24,  -53), S( -12,  -32), S(  -6,  -25), S(  -2,   -7), S(   0,   -1), S(  -5,    8), S(  -1,   12), S(   2,   17), S(   6,   24), S(   6,   32), S(   8,   38), S(  15,   39), S(  22,   36), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -26,   25), S( -54,  -60), S(-103,  -69), S( -78, -249), S( -72,  -95), S( -28,  -33), S( -21,   -8), S( -13,   -5), S(  -4,   -5), S(  -4,   22), S(  -3,   29), S(   0,   39), S(   3,   43), S(   6,   45), S(  10,   47), S(  12,   49), S(  14,   50), S(  13,   54), S(  15,   53), S(  17,   51), S(  24,   42), S(  33,   23), S(  37,   20), S(  51,    0), S(  54,   -6), S(  55,  -17), S(  31,   -6), S(  12,  -46)}
};

constexpr PackedScore THREAT_BY_PAWN[6] = {S(   9,  -17), S(  65,   31), S(  62,   62), S(  79,   28), S(  76,   -8), S(   0,    0)};
constexpr PackedScore THREAT_BY_KNIGHT[2][6] = {
	{S(   8,   29), S(  26,   31), S(  42,   43), S(  74,   15), S(  56,  -26), S(   0,    0)},
	{S(  -5,   10), S(  13,   30), S(  29,   31), S(  64,   33), S(  57,   -1), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_BISHOP[2][6] = {
	{S(   0,   38), S(  42,   35), S(  -9,   27), S(  71,   16), S(  68,   62), S(   0,    0)},
	{S(   0,    9), S(  22,   23), S( -22,  -22), S(  44,   47), S(  48,  123), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_ROOK[2][6] = {
	{S(   0,   44), S(  18,   64), S(  27,   58), S(   9,  -28), S(  75,   12), S(   0,    0)},
	{S(  -8,    9), S(   2,   16), S(  14,    3), S(   9,  -74), S(  65,   48), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_QUEEN[2][6] = {
	{S(   6,   10), S(  24,   19), S(   9,   49), S(  19,   16), S(  10,  -52), S(  97,   43)},
	{S(  -1,   11), S(   0,    7), S(  -7,   19), S(  -6,    5), S( -17,  -73), S( 111,   69)}
};
constexpr PackedScore THREAT_BY_KING[6] = {S( -36,   52), S(   4,   52), S(  32,   43), S(  77,    8), S(   0,    0), S(   0,    0)};
constexpr PackedScore PUSH_THREAT = S(  16,   19);

constexpr PackedScore ISOLATED_PAWN[8] = {S(  -8,    6), S(  -3,  -16), S( -11,   -9), S( -11,  -17), S( -11,  -17), S(  -6,   -8), S(  -1,  -15), S( -10,    7)};
constexpr PackedScore DOUBLED_PAWN[8] = {S(  -5,  -63), S(   9,  -38), S(  -2,  -30), S(  -3,  -21), S(  -6,  -16), S( -16,  -20), S(   5,  -42), S(   2,  -76)};
constexpr PackedScore BACKWARDS_PAWN[8] = {S(   0,    0), S(  -4,  -12), S(  -1,  -14), S( -10,  -12), S(   2,  -23), S(  24,  -10), S(   0,    0), S(   0,    0)};
constexpr PackedScore PAWN_PHALANX[8] = {S(   0,    0), S(   5,   -5), S(  11,   -2), S(  19,   13), S(  48,   63), S( 107,  234), S( -26,  361), S(   0,    0)};
constexpr PackedScore DEFENDED_PAWN[8] = {S(   0,    0), S(   0,    0), S(  20,    7), S(  11,    8), S(  15,   21), S(  18,   68), S( 122,   86), S(   0,    0)};

constexpr PackedScore PASSED_PAWN[2][2][8] = {
	{
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -33,  -39), S( -10,   22), S(  -4,  145), S(  46,  232), S(   0,    0)},
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -23,  -50), S(  10,  -21), S(  18,   19), S(  60,   37), S(   0,    0)}
	},
	{
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -31,  -54), S(  -1,  -23), S(  17,    7), S(  66,   -1), S(   0,    0)},
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -32,  -59), S(   0,  -33), S(  -4,  -15), S(  -6,  -15), S(   0,    0)}
	}
};
constexpr PackedScore OUR_PASSER_PROXIMITY[8] = {S(   0,    0), S(  36,   83), S(   3,   67), S(   2,   41), S(   6,   28), S(  10,   21), S(  18,   20), S(  14,   18)};
constexpr PackedScore THEIR_PASSER_PROXIMITY[8] = {S(   0,    0), S( -42,    4), S(  19,   -1), S(  13,   27), S(  18,   45), S(  14,   75), S(  17,   76), S(  20,   64)};
constexpr PackedScore UNSTOPPABLE_PASSER = S(-825,  202);

constexpr PackedScore PAWN_STORM[2][4][8] = {
	{
		{S(  16,   14), S(-137,  -45), S( -11,   -7), S(   3,  -13), S(   0,    0), S(  -5,    9), S(  -4,    8), S(   0,    0)},
		{S(  13,    3), S( -26, -100), S(  44,  -41), S(   6,  -12), S(   2,   -6), S( -10,    7), S(  -7,    9), S(   0,    0)},
		{S(  -3,    7), S(  56,  -96), S(  63,  -46), S(  18,  -18), S(   3,   -2), S(  -6,    7), S(  -8,   12), S(   0,    0)},
		{S(   9,   -7), S( 101,  -84), S(  38,  -24), S(  13,   -2), S(  -2,    4), S(  -8,    0), S(  -3,    1), S(   0,    0)}
	},
	{
		{S(   0,    0), S(  -4,  -31), S( -29,  117), S(   6,  -37), S(  -3,    8), S(  -2,    5), S(  -5,    9), S(   0,    0)},
		{S(   0,    0), S(   5,  -81), S(  -2,   74), S(  53,  -42), S(   2,    2), S(  -7,    6), S(  -7,    8), S(   0,    0)},
		{S(   0,    0), S(  -6,   19), S( -59, -113), S(  20,  -25), S(   2,    4), S(  -1,    5), S(  -9,   11), S(   0,    0)},
		{S(   0,    0), S( -11,  -51), S(  77,  -28), S(  21,   -1), S(   1,    8), S(   1,   -9), S(   0,    6), S(   0,    0)}
	}
};
constexpr PackedScore PAWN_SHIELD[4][8] = {
	{S(  15,    2), S(  -8,   25), S( -15,   17), S(  -4,    9), S(   3,    1), S( -34,  -27), S( -81,  -32), S(   0,    0)},
	{S(  16,    0), S( -12,   10), S( -10,    8), S(  11,   -2), S(   7,  -11), S(  -5,  -19), S( -49,  -35), S(   0,    0)},
	{S(   4,    8), S( -15,    7), S(  16,    4), S(   1,   -2), S(  -2,   -1), S(   7,  -19), S( -16,  -37), S(   0,    0)},
	{S(  14,   -4), S(   5,   -2), S(  -3,    0), S(   0,   -6), S(   9,   -9), S(  30,  -22), S(  -2,  -28), S(   0,    0)}
};
constexpr PackedScore SAFE_KNIGHT_CHECK = S(  90,   -3);
constexpr PackedScore SAFE_BISHOP_CHECK = S(  17,   21);
constexpr PackedScore SAFE_ROOK_CHECK = S(  72,    8);
constexpr PackedScore SAFE_QUEEN_CHECK = S(  28,   31);
constexpr PackedScore UNSAFE_KNIGHT_CHECK = S(   9,    1);
constexpr PackedScore UNSAFE_BISHOP_CHECK = S(  15,   11);
constexpr PackedScore UNSAFE_ROOK_CHECK = S(  22,   -2);
constexpr PackedScore UNSAFE_QUEEN_CHECK = S(   6,   10);
constexpr PackedScore KING_ATTACKER_WEIGHT[4] = {S(  17,   -3), S(  14,   -1), S(  14,  -14), S(   3,    5)};
constexpr PackedScore KING_ATTACKS[14] = {S( -39,   11), S( -45,    8), S( -50,    5), S( -53,    8), S( -52,    7), S( -45,    4), S( -30,    0), S( -12,   -9), S(  16,  -21), S(  38,  -16), S(  55,  -24), S(  61,   13), S(  82,  -16), S(  74,   19)};
constexpr PackedScore WEAK_KING_RING[17] = {S( -30,   44), S( -29,   24), S( -24,   21), S( -21,   18), S( -14,   11), S(  -5,    5), S(   6,    0), S(  20,   -3), S(  38,   -7), S(  51,   -9), S(  63,  -11), S(  66,   -7), S(  76,  -10), S(  77,  -11), S(  76,   -7), S(  93,  -10), S( 100,  -11)};

constexpr PackedScore MINOR_BEHIND_PAWN = S(   7,   14);
constexpr PackedScore KNIGHT_OUTPOST = S(  26,   17);
constexpr PackedScore BISHOP_PAWNS[7] = {S(   4,   22), S(   6,   21), S(   3,   13), S(   0,    5), S(  -3,   -5), S(  -3,  -19), S(  -7,  -33)};
constexpr PackedScore BISHOP_PAIR = S(  19,   63);
constexpr PackedScore ROOK_OPEN[2] = {S(  26,    3), S(  15,    4)};

constexpr PackedScore TEMPO = S(  32,   35);

constexpr PackedScore COMPLEXITY_PAWNS = S(   0,    8);
constexpr PackedScore COMPLEXITY_PASSERS = S(   0,    1);
constexpr PackedScore COMPLEXITY_PAWNS_BOTH_SIDES = S(   0,   70);
constexpr PackedScore COMPLEXITY_PAWN_ENDGAME = S(   0,   64);
constexpr PackedScore COMPLEXITY_OFFSET = S(   0, -133);

#undef S


}