#pragma once

#include "../defs.h"

namespace eval
{

// clang-format off
#define S(mg, eg) ScorePair(mg, eg)

constexpr ScorePair MATERIAL[6] = {S(  67,  131), S( 313,  457), S( 326,  476), S( 422,  812), S( 874, 1848), S(0, 0)};

constexpr ScorePair PSQT[6][64] = {
    {
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  67,   84), S(  15,   98), S(  33,   98), S(  41,   84), S(  64,   60), S(  45,   60), S(  36,   93), S(  82,   80),
        S(   6,   10), S(  -7,   21), S(   4,    0), S(   4,   -7), S(  -5,  -16), S(  -5,   -6), S( -17,   18), S(  -5,   11),
        S(   5,   10), S(   5,   17), S(  10,   -5), S(  10,  -16), S(   3,  -16), S(   0,   -9), S(  -4,   12), S(  -8,   11),
        S(  -5,   -3), S(  -6,   13), S(  18,  -25), S(  17,  -16), S(  13,  -17), S(   2,  -12), S( -15,   11), S( -15,   -3),
        S( -11,   -6), S(  13,    3), S(   4,    2), S(   6,   -1), S(  -3,    0), S(  -9,   -1), S( -18,   11), S( -23,   -4),
        S(  -4,   -7), S(  25,    4), S(  25,   50), S(   4,    7), S(  -3,    0), S(  -6,    1), S( -10,   10), S( -19,   -1),
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
    },
    {
        S( -57, -122), S( -88,   15), S(-113,   46), S(  -6,   14), S( -23,   16), S( -63,    8), S(-105,   10), S( -88,  -68),
        S(   0,   -2), S( -10,   21), S(  23,   11), S(  36,   14), S(  26,   18), S(  23,   -6), S( -19,   15), S(  -7,  -10),
        S(  14,   -4), S(  11,   12), S(  37,   10), S(  28,   14), S(  21,   15), S(  25,    6), S(  10,    8), S(  11,  -11),
        S(  30,    6), S(  30,   12), S(  35,   16), S(  29,   25), S(  34,   21), S(  20,   15), S(  20,    5), S(  13,    5),
        S(  21,    6), S(  28,    7), S(  25,   16), S(  18,   30), S(  19,   22), S(  19,   15), S(  17,    4), S(   9,    3),
        S(   5,   -6), S(  19,   -1), S(  16,    0), S(  15,   15), S(  12,   10), S(   0,   -2), S(   5,   -7), S(  -7,   -8),
        S(  11,  -10), S(   3,    2), S(   8,  -13), S(  12,   -1), S(   5,   -1), S(   3,  -13), S(  -5,   -6), S( -14,  -22),
        S( -27,  -22), S( -10,  -21), S(  -1,  -15), S(   5,   -8), S(   0,   -4), S( -10,  -17), S( -15,  -22), S( -28,  -41),
    },
    {
        S( -28,  -36), S( -51,   19), S( -86,   22), S( -67,   21), S( -77,   26), S( -68,   20), S( -54,   23), S( -32,  -12),
        S( -13,   -5), S( -38,    4), S( -11,   10), S( -29,   14), S( -19,   16), S( -13,   11), S( -13,  -11), S(  -9,    0),
        S(  22,   -8), S(  10,   11), S(  21,    6), S(  23,   13), S(  19,   13), S(  10,    1), S(  17,    4), S(   6,   -3),
        S(   8,   -3), S(  12,   16), S(  15,   18), S(  17,   30), S(  27,   25), S(  17,   15), S(  14,   10), S(   7,   -9),
        S(  19,   -9), S(   7,    7), S(  11,   17), S(  20,   16), S(  21,   19), S(  14,   11), S(   8,    6), S(  13,   -9),
        S(  20,   -9), S(  24,   -5), S(  13,   -6), S(  15,   12), S(  13,    5), S(   7,   -9), S(  28,   -5), S(  14,  -11),
        S(  22,  -16), S(  28,  -29), S(  26,  -13), S(  11,   -5), S(   2,   -6), S(  12,  -15), S(   9,  -27), S(  19,  -10),
        S(  10,  -39), S(  -8,    0), S( -11,   -8), S(  10,  -14), S(   6,  -12), S(  -3,   -6), S(   6,  -10), S(   5,  -24),
    },
    {
        S(  18,   15), S(  32,   14), S(  28,   14), S(  12,   26), S(  23,   16), S(  15,   20), S(  18,   22), S(  23,   21),
        S(  22,   12), S(  11,   22), S(  19,   20), S(  14,   24), S(  20,   26), S(  12,   25), S(  11,   23), S(  19,   21),
        S( -18,   18), S(  10,   12), S(  14,   11), S(  15,    9), S(  12,    9), S(   7,   15), S(   6,   18), S(  -4,   22),
        S( -17,   11), S(  -8,   16), S(  -2,   12), S(  -9,   12), S(  -2,    8), S(  -1,   11), S(  -3,   16), S(  -5,   12),
        S( -23,   -1), S(  -9,    4), S( -14,   11), S( -10,    8), S( -12,    5), S( -15,   10), S( -16,   11), S( -12,    2),
        S( -17,  -24), S(   6,  -25), S(  -8,   -7), S(   0,  -17), S(  -1,  -17), S( -14,   -8), S(  -5,  -15), S( -18,  -13),
        S( -51,  -26), S(  -7,  -33), S(   3,  -24), S(  -1,  -22), S(  -2,  -22), S(  -7,  -18), S( -12,  -24), S( -19,  -23),
        S( -15,  -35), S( -19,  -19), S(   7,  -23), S(  14,  -29), S(   7,  -28), S(  -1,  -21), S(   0,  -25), S(  -1,  -23),
    },
    {
        S(   9,   29), S(  39,    7), S(  23,   28), S(  13,   33), S(  19,   24), S(  26,   15), S(  14,   11), S( -19,   35),
        S(  35,   -6), S(  31,   -5), S(  10,   22), S( -14,   39), S(   7,   32), S(  15,    3), S(  18,   -9), S(  12,    1),
        S(   8,    8), S(  11,   11), S(  -3,   23), S( -20,   38), S(  -4,   36), S(  13,    2), S(  26,  -23), S(  20,  -12),
        S(  -3,   12), S( -12,   22), S( -12,   22), S( -24,   41), S( -20,   38), S(   6,    9), S(   0,   20), S(   4,   -2),
        S( -14,   25), S(  -9,   18), S( -14,   18), S( -18,   32), S( -21,   43), S(  -8,   23), S(   0,    9), S(  -5,    5),
        S(  -5,  -13), S(   0,  -15), S(  -8,    2), S( -17,   14), S( -11,   15), S(  -5,    6), S(   7,   -7), S(   3,   -7),
        S(  -2,  -57), S(   7,  -80), S(   1,  -47), S(  -3,  -21), S(  -6,  -13), S(   6,  -33), S(   1,  -29), S(   2,  -21),
        S( -15,  -39), S( -21,  -72), S( -15,  -54), S(  -6,  -47), S(  -2,  -36), S(  -9,  -34), S( -12,  -32), S( -19,   -8),
    },
    {
        S(  66, -164), S(  25,   71), S(  10,   20), S( -12,   12), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  31,   13), S(   5,  104), S( -24,   61), S( -46,   49), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  34,   50), S(  11,  107), S( -46,   55), S(-119,   18), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S( -26,   49), S( -41,   92), S( -64,   38), S(-126,    7), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S( -66,   40), S( -56,   70), S( -84,   21), S(-111,   -9), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  -6,   17), S(  -9,   41), S( -41,   -2), S( -63,  -32), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  56,  -12), S(  43,   14), S(  15,  -35), S( -12,  -67), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  56,  -42), S(  55,   -7), S(  18,  -56), S(  14, -106), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
    },
};

constexpr ScorePair MOBILITY[4][28] = {
    {S(  -7,  -23), S( -36,  -55), S( -21,  -19), S( -10,   -2), S(   0,    8), S(   6,   18), S(  14,   22), S(  22,   26), S(  32,   17), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S( -12,  -31), S( -41,  -62), S( -21,  -32), S( -10,  -11), S(  -4,   -1), S(   0,    9), S(   1,   16), S(   5,   20), S(   4,   22), S(   7,   22), S(   6,   23), S(  12,   16), S(  16,   16), S(  42,  -11), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S( -25,  -63), S( -49,  -64), S( -18,  -43), S( -11,  -26), S(  -3,  -16), S(   2,   -5), S(   1,    6), S(   3,   11), S(   4,   14), S(   6,   21), S(   9,   27), S(   9,   35), S(   9,   40), S(  12,   41), S(  38,   20), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S( -12,   38), S( -40,    7), S( -61,  -11), S( -42, -123), S( -26, -105), S( -12,  -68), S(  -4,  -51), S(   0,  -32), S(   0,  -15), S(   0,   -1), S(   3,    7), S(   3,   17), S(   5,   23), S(   6,   31), S(   7,   35), S(   8,   36), S(   7,   41), S(   8,   41), S(   9,   41), S(  11,   37), S(  15,   34), S(  20,   19), S(  21,   17), S(  26,    6), S(  20,   12), S(  22,   -8), S(  33,  -49), S( -32,    4)}
};

constexpr ScorePair THREAT_BY_PAWN[6] = {S(  -6,  -21), S(  72,   42), S(  65,   71), S(  72,   49), S(  57,   23), S(   0,    0)};
constexpr ScorePair THREAT_BY_KNIGHT[2][6] = {
    {S(   6,   35), S(   7,   81), S(  50,   31), S(  85,   13), S(  42,    6), S(   0,    0)},
    {S(  -8,   10), S(   3,   75), S(  38,   29), S(  71,   44), S(  51,   46), S(   0,    0)}
};
constexpr ScorePair THREAT_BY_BISHOP[2][6] = {
    {S(   3,   33), S(  36,   45), S(   2,   32), S(  58,   36), S(  61,   49), S(   0,    0)},
    {S(  -5,    3), S(  20,   21), S(  -6,    2), S(  56,   75), S(  62,   75), S(   0,    0)}
};
constexpr ScorePair THREAT_BY_ROOK[2][6] = {
    {S(  -2,   49), S(  36,   50), S(  45,   48), S(   5,  -70), S(  69,  -18), S(   0,    0)},
    {S( -10,   10), S(   8,   14), S(  19,    4), S(  19, -100), S(  54,   90), S(   0,    0)}
};
constexpr ScorePair THREAT_BY_QUEEN[2][6] = {
    {S(   8,   22), S(  25,   28), S(  21,   55), S(  16,   12), S(   0,  -53), S( 149,   67)},
    {S(  -5,   17), S(   2,    5), S(  -8,   26), S(  -4,   -6), S( -17,  -44), S( 101,  211)}
};
constexpr ScorePair THREAT_BY_KING[6] = {S(  45,   19), S(  26,   40), S(  97,   32), S(  84,    7), S(   0,    0), S(   0,    0)};
constexpr ScorePair KNIGHT_HIT_QUEEN = S(   7,    0);
constexpr ScorePair BISHOP_HIT_QUEEN = S(  16,   14);
constexpr ScorePair ROOK_HIT_QUEEN = S(  19,   -3);
constexpr ScorePair PUSH_THREAT = S(  13,   18);
constexpr ScorePair RESTRICTED_SQUARES = S(   2,    2);

constexpr ScorePair ISOLATED_PAWN[4] = {S(  -5,    0), S(  -4,  -16), S(  -8,  -11), S( -12,  -16)};
constexpr ScorePair DOUBLED_PAWN[4] = {S(   2,  -45), S(   2,  -36), S(  -6,  -19), S( -12,   -4)};
constexpr ScorePair BACKWARDS_PAWN[8] = {S(   0,    0), S(  -7,  -13), S(   0,  -15), S(  -7,  -14), S(   8,  -22), S(  11,   22), S(   0,    0), S(   0,    0)};
constexpr ScorePair PAWN_PHALANX[8] = {S(   0,    0), S(   5,   -4), S(  11,    0), S(  18,   11), S(  38,   38), S(  69,  147), S( 109,  203), S(   0,    0)};
constexpr ScorePair DEFENDED_PAWN[8] = {S(   0,    0), S(   0,    0), S(  17,    7), S(  11,   10), S(  18,   24), S(  39,   61), S(  71,  124), S(   0,    0)};
constexpr ScorePair CANDIDATE_PASSER[2][8] = {
    {S(   0,    0), S( -22,  -13), S(  -7,  -14), S(  -2,    3), S(  16,   24), S(  41,   87), S(   0,    0), S(   0,    0)},
    {S(   0,    0), S( -14,  -10), S( -10,   10), S(  -4,   26), S(  10,   36), S(  47,   97), S(   0,    0), S(   0,    0)}
};

constexpr ScorePair PASSED_PAWN[2][2][8] = {
    {
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -34,  -28), S( -12,   23), S(  28,  128), S( 118,  197), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -25,  -41), S(  -2,  -15), S(  30,   54), S(  67,   68), S(   0,    0)}
    },
    {
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -28,  -41), S(  -7,  -11), S(  29,   51), S(  37,   36), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -30,  -50), S(  -5,  -28), S(  16,   28), S(  -3,   12), S(   0,    0)}
    }
};
constexpr ScorePair OUR_PASSER_PROXIMITY[8] = {S(  75,   90), S( 115,   56), S(  53,   60), S(  -1,   59), S(   0,   37), S(   2,   27), S(  15,   17), S(  -2,   29)};
constexpr ScorePair THEIR_PASSER_PROXIMITY[8] = {S( -42,   -5), S(   6,   -8), S(  26,   -2), S(  21,   24), S(  11,   58), S(  15,   72), S(  21,   76), S(  20,   61)};
constexpr ScorePair PASSER_DEFENDED_PUSH[8] = {S(   0,    0), S(   0,    0), S(   0,    0), S(   8,    7), S(  10,   19), S(  36,   30), S(  58,  101), S(   0,    0)};

constexpr ScorePair PAWN_STORM[2][4][8] = {
    {
        {S(  30,   27), S( -97,  -80), S(   0,  -40), S(  43,    8), S(  19,   22), S(   2,   24), S(  -4,   27), S(   0,    0)},
        {S(  22,   16), S(  52, -112), S(  76,  -63), S(  33,   -3), S(   7,   16), S( -26,   19), S(   1,   17), S(   0,    0)},
        {S(   8,   15), S(  48,  -79), S( 107,  -52), S(  67,   -5), S(   8,   17), S( -17,   20), S(  -4,   16), S(   0,    0)},
        {S(   9,   -2), S( 121,  -93), S( 113,  -55), S(  57,   -4), S(   6,    6), S( -25,    1), S( -25,    3), S(   0,    0)}
    },
    {
        {S(   0,    0), S(   0,    0), S(  74,   42), S(  -5,   27), S(  -3,   33), S(   9,   42), S(  34,   31), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S( 138,   35), S( -26,   27), S( -14,   32), S( -18,   44), S(   7,   25), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S( 129,   15), S(  12,   21), S(  -8,   33), S(  -1,   36), S(  51,   13), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S( 130,    2), S(  12,   15), S( -21,   16), S( -10,   14), S( -18,  -12), S(   0,    0)}
    }
};
constexpr ScorePair PAWN_SHIELD[4][8] = {
    {S(  54,   26), S(   2,   42), S( -13,   33), S(  30,   26), S(  36,   17), S(   1,   12), S( -28,   22), S(   0,    0)},
    {S(  42,   18), S( -26,   26), S(   8,   20), S(  41,   11), S(  38,    1), S(  -7,   -2), S( -40,  -21), S(   0,    0)},
    {S(  21,   13), S(   6,   52), S(   5,    8), S(  34,   -9), S(  30,   -9), S(   3,   -6), S( -65,    2), S(   0,    0)},
    {S(  12,    7), S( -24,    0), S(   5,   -6), S(  27,  -12), S(  20,  -11), S(  24,   -1), S( -35,    2), S(   0,    0)}
};
constexpr ScorePair SAFE_KNIGHT_CHECK = S( 100,    1);
constexpr ScorePair SAFE_BISHOP_CHECK = S(  69,   18);
constexpr ScorePair SAFE_ROOK_CHECK = S( 106,   10);
constexpr ScorePair SAFE_QUEEN_CHECK = S(  64,   21);
constexpr ScorePair UNSAFE_KNIGHT_CHECK = S(  17,    0);
constexpr ScorePair UNSAFE_BISHOP_CHECK = S(  35,    7);
constexpr ScorePair UNSAFE_ROOK_CHECK = S(  41,    2);
constexpr ScorePair UNSAFE_QUEEN_CHECK = S(  20,    5);
constexpr ScorePair QUEENLESS_ATTACK = S(-111,  342);
constexpr ScorePair KING_ATTACKER_WEIGHT[4] = {S(  57,   -3), S(  24,   -1), S(  24,  -10), S(   6,  -18)};
constexpr ScorePair KING_ATTACKS = S(   7,    0);
constexpr ScorePair WEAK_KING_RING = S(   4,    0);
constexpr ScorePair KING_FLANK_ATTACKS[2] = {S(  13,   -4), S(   3,    0)};
constexpr ScorePair KING_FLANK_DEFENSES[2] = {S(  -8,    0), S(  -6,    3)};
constexpr ScorePair SAFETY_OFFSET = S(  76,  142);

constexpr ScorePair KING_STRANDED = S(  -2,   11);

constexpr ScorePair MINOR_BEHIND_PAWN = S(   2,   10);
constexpr ScorePair KNIGHT_OUTPOST = S(  18,   16);
constexpr ScorePair BISHOP_PAWNS[7] = {S(  10,    8), S(   7,   12), S(   4,    8), S(   1,    3), S(  -3,   -3), S(  -6,  -10), S(  -9,  -18)};
constexpr ScorePair BISHOP_PAIR = S(  22,   65);
constexpr ScorePair LONG_DIAG_BISHOP = S(  13,   13);
constexpr ScorePair ROOK_OPEN[2] = {S(  31,    0), S(  19,    1)};

constexpr ScorePair TEMPO = S(  29,   20);

constexpr ScorePair COMPLEXITY_PAWNS = S(   0,   10);
constexpr ScorePair COMPLEXITY_PAWNS_BOTH_SIDES = S(   0,  130);
constexpr ScorePair COMPLEXITY_PAWN_ENDGAME = S(   0,  128);
constexpr ScorePair COMPLEXITY_OFFSET = S(   0, -213);

#undef S
// clang-format on

}
