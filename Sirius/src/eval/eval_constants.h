#pragma once

#include "../defs.h"

namespace eval
{

#define S(mg, eg) PackedScore(mg, eg)

constexpr PackedScore MATERIAL[6] = {S(  58,   85), S( 283,  356), S( 289,  375), S( 402,  660), S( 847, 1207), S(0, 0)};

constexpr PackedScore PSQT[6][64] = {
	{
		S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
		S(  36,   77), S(  43,   79), S(  27,   86), S(  63,   44), S(  48,   50), S(  36,   58), S( -25,   96), S( -29,   90),
		S(  15,   38), S(  10,   54), S(  37,   13), S(  45,  -16), S(  54,  -17), S(  85,   -8), S(  46,   37), S(  30,   27),
		S(  -8,   23), S(  -2,   25), S(   5,    2), S(   5,  -10), S(  25,   -9), S(  27,  -11), S(  11,   16), S(  12,    0),
		S( -15,    6), S( -11,   20), S(  -2,   -3), S(   7,   -8), S(   9,   -7), S(  13,  -11), S(   2,    9), S(   0,  -12),
		S( -25,   -1), S( -19,   10), S( -11,   -6), S(  -9,   -3), S(   1,   -2), S(  -4,   -7), S(   4,   -1), S(  -7,  -18),
		S( -18,    4), S( -10,   16), S(  -4,    1), S(  -4,   -3), S(   4,    9), S(  28,   -7), S(  21,    3), S(  -3,  -16),
		S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
	},
	{
		S( -96,  -32), S( -92,   -6), S( -70,    9), S( -25,   -6), S(   3,   -5), S( -51,  -24), S( -83,   -5), S( -66,  -52),
		S( -14,    6), S(   1,   10), S(   3,    1), S(  13,    1), S(  12,   -9), S(  28,  -14), S(  12,    2), S(   6,  -10),
		S(   3,    0), S(   6,    1), S(  13,    4), S(  20,    3), S(  31,   -3), S(  60,  -23), S(  18,  -10), S(  24,  -14),
		S(   7,   11), S(  12,    2), S(  26,    5), S(  36,    9), S(  32,    8), S(  39,    1), S(  26,    0), S(  36,   -1),
		S(   0,   10), S(  12,    0), S(  14,   12), S(  25,   11), S(  17,   21), S(  19,    4), S(  16,    2), S(   3,   11),
		S( -12,    1), S(  -1,    0), S(   2,    1), S(   8,   15), S(  21,   13), S(   4,   -5), S(  18,   -4), S(   3,    4),
		S( -15,    7), S( -12,   11), S(  -5,    0), S(   8,    2), S(   7,    1), S(   9,    0), S(  10,   -1), S(   5,   19),
		S( -44,   22), S(  -8,   -1), S( -16,    1), S(  -7,    4), S(   0,    5), S(   4,   -6), S(  -7,    7), S( -12,   17),
	},
	{
		S( -11,    8), S( -44,   11), S( -45,    5), S( -79,   11), S( -72,   11), S( -67,    1), S( -31,    4), S( -45,   -2),
		S(  -4,   -7), S(  -9,   -1), S(  -6,   -5), S( -18,    0), S( -10,   -7), S( -18,   -4), S( -51,    8), S( -35,    2),
		S(   6,    8), S(  16,   -1), S(   5,    1), S(  18,   -8), S(   6,   -3), S(  36,    2), S(  20,    1), S(  24,    7),
		S(  -7,    5), S(  -2,    8), S(   9,    1), S(  20,   12), S(   9,    4), S(   5,    8), S(  -7,    7), S(   0,    4),
		S(   1,    3), S(  -6,    6), S(   0,    5), S(  13,    6), S(  10,    3), S(  -1,    0), S(  -1,    4), S(   8,   -6),
		S(   3,    1), S(  16,    1), S(   8,    0), S(   5,    4), S(   9,    7), S(  11,   -1), S(  19,   -6), S(  21,   -6),
		S(  24,    6), S(  11,  -15), S(  18,  -13), S(   1,   -2), S(  10,    0), S(  22,   -9), S(  31,  -12), S(  27,  -10),
		S(  14,   -5), S(  23,   10), S(   8,    3), S(   5,    0), S(  15,   -6), S(   4,    9), S(  27,   -9), S(  37,  -21),
	},
	{
		S( -12,   17), S( -14,   20), S( -21,   29), S( -27,   26), S( -16,   19), S(   2,   16), S(  -2,   21), S(  19,   11),
		S(  -2,   12), S(   5,   17), S(  14,   19), S(  30,    7), S(  15,    8), S(  17,    8), S(  26,    4), S(  29,    1),
		S(  -8,   11), S(  21,    6), S(  12,    9), S(  11,    4), S(  30,   -2), S(  38,   -9), S(  53,   -7), S(  22,   -7),
		S(  -9,   14), S(   5,    7), S(   5,   11), S(   5,    7), S(  11,   -4), S(  14,   -6), S(   8,    0), S(   6,   -3),
		S( -17,    7), S( -15,    7), S(  -9,    5), S(  -2,    3), S(  -1,    1), S( -15,    3), S(   2,   -5), S( -13,   -3),
		S( -21,    2), S( -17,   -3), S( -13,   -4), S( -11,   -2), S(  -1,   -7), S(  -5,  -10), S(  15,  -23), S(   1,  -20),
		S( -22,   -5), S( -18,   -4), S(  -8,   -5), S(  -7,   -7), S(  -3,  -12), S(   1,  -15), S(   7,  -20), S( -18,  -15),
		S( -15,   -4), S( -13,   -8), S( -13,   -3), S(  -5,  -10), S(   1,  -16), S(  -4,  -11), S(  -5,  -13), S( -18,  -11),
	},
	{
		S( -19,   -9), S( -35,    4), S( -27,   26), S(  -3,   15), S(  -8,   17), S(   3,   11), S(  46,  -36), S(   8,   -7),
		S(   7,  -15), S(  -7,   -8), S(  -8,   22), S( -20,   40), S( -24,   56), S(   4,   23), S(   7,    3), S(  41,    9),
		S(   9,   -5), S(   6,   -4), S(  -2,   21), S(   0,   25), S( -12,   40), S(  11,    9), S(  27,   -4), S(  28,    0),
		S(  -1,    7), S(  -4,   18), S(   0,   15), S( -10,   28), S( -17,   30), S(   1,   17), S(   1,   32), S(  11,   13),
		S(  -1,    3), S(  -3,   18), S(  -5,   13), S(  -9,   23), S(  -2,   22), S(  -4,   20), S(   9,    6), S(  14,    7),
		S(   4,  -17), S(   2,   -4), S(  -9,    8), S(  -8,   15), S(  -3,   20), S(   0,    6), S(  13,  -14), S(  17,  -20),
		S(   5,  -32), S(  -1,  -31), S(   3,  -21), S(   3,   -6), S(   3,   -6), S(   8,  -33), S(  17,  -64), S(  30,  -77),
		S( -13,  -28), S( -14,  -24), S( -12,  -14), S(  -9,  -13), S(  -8,  -15), S( -17,  -25), S(  -7,  -40), S(  11,  -47),
	},
	{
		S(  47,  -54), S(  88,  -31), S( 123,  -34), S(  57,  -11), S(  65,  -34), S( -19,    2), S(  18,    7), S(  98,  -69),
		S( -96,   27), S(  12,   28), S(  33,   13), S( 150,  -17), S(  92,  -10), S(  45,   27), S(   9,   45), S( -91,   48),
		S(-108,   26), S(  41,   19), S(  36,    9), S(  47,    3), S(  85,    1), S( 104,   13), S(  -6,   43), S( -69,   32),
		S( -63,    1), S( -23,    9), S( -13,    7), S( -12,    2), S( -18,   -2), S( -26,   16), S( -62,   26), S(-151,   29),
		S( -69,  -10), S( -31,    0), S( -30,    4), S( -30,    2), S( -35,    1), S( -38,    6), S( -71,   14), S(-149,   19),
		S( -48,   -5), S(   8,   -2), S( -20,    3), S(  -4,    0), S(  -6,   -1), S( -23,    6), S( -14,    5), S( -71,   10),
		S(  33,  -15), S(  23,   -1), S(  19,   -1), S(   2,   -3), S(  -3,   -1), S(   7,    1), S(  23,   -1), S(  18,  -11),
		S(  21,  -34), S(  53,  -25), S(  25,  -10), S( -30,   -3), S(   7,  -19), S( -23,    3), S(  31,  -15), S(  29,  -39),
	},
};

constexpr PackedScore MOBILITY[4][28] = {
	{S(  -8,   -9), S( -31,  -54), S(  -8,  -25), S(   1,   -0), S(  11,   12), S(  14,   23), S(  23,   29), S(  33,   33), S(  42,   32), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S(   3,  -17), S( -32,  -82), S( -11,  -35), S(  -3,  -13), S(  10,   -1), S(  16,    9), S(  22,   20), S(  27,   26), S(  31,   32), S(  35,   35), S(  35,   41), S(  46,   35), S(  40,   42), S(  58,   30), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -41,  -20), S(   5,  -53), S( -23,  -39), S( -13,  -22), S(  -8,  -19), S(  -2,   -2), S(  -0,    5), S(  -3,   12), S(   0,   14), S(   4,   18), S(   9,   22), S(  11,   28), S(  15,   32), S(  21,   32), S(  27,   28), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -37,   24), S( -54,  -56), S( -99,  -45), S( -68, -258), S( -72, -103), S( -31,  -43), S( -21,  -19), S( -13,  -13), S(  -5,   -5), S(  -2,   17), S(   1,   25), S(   6,   34), S(   9,   40), S(  13,   43), S(  16,   46), S(  19,   49), S(  22,   52), S(  22,   56), S(  22,   61), S(  24,   63), S(  31,   58), S(  38,   46), S(  43,   47), S(  68,   21), S(  72,   23), S( 116,  -12), S( 113,  -13), S(  73,  -15)}
};

constexpr PackedScore THREAT_BY_PAWN[6] = {S(   9,  -14), S(  59,   22), S(  59,   57), S(  86,    4), S(  72,  -26), S(   0,    0)};
constexpr PackedScore THREAT_BY_KNIGHT[6] = {S(  -5,   13), S(  12,   37), S(  31,   35), S(  67,   14), S(  51,  -24), S(   0,    0)};
constexpr PackedScore THREAT_BY_BISHOP[6] = {S(   2,   17), S(  24,   26), S( -12,   14), S(  51,   23), S(  61,   80), S(   0,    0)};
constexpr PackedScore THREAT_BY_ROOK[6] = {S(  -7,   20), S(   4,   23), S(  14,   15), S(   7,  -47), S(  67,   14), S(   0,    0)};
constexpr PackedScore THREAT_BY_QUEEN[6] = {S(  -1,   14), S(   3,   10), S(  -2,   26), S(  -2,    3), S(  -7,  -47), S( 135,   -2)};

constexpr PackedScore PASSED_PAWN[8] = {S(   0,    0), S( -17,  -67), S( -15,  -52), S( -13,  -18), S(  11,   17), S(   0,   86), S(  49,   94), S(   0,    0)};
constexpr PackedScore ISOLATED_PAWN[8] = {S(  -4,    6), S(  -3,  -11), S( -11,   -5), S(  -6,  -12), S( -11,  -13), S(  -7,   -4), S(  -2,  -12), S( -11,    7)};
constexpr PackedScore PAWN_PHALANX[8] = {S(   0,    0), S(   4,   -2), S(  13,    6), S(  22,   17), S(  49,   57), S( 135,  179), S(-129,  424), S(   0,    0)};
constexpr PackedScore DEFENDED_PAWN[8] = {S(   0,    0), S(   0,    0), S(  19,   11), S(  12,    8), S(  12,   16), S(  28,   40), S( 169,   30), S(   0,    0)};
constexpr PackedScore OUR_PASSER_PROXIMITY[8] = {S(   0,    0), S(   5,   53), S(  -5,   39), S(  -4,   23), S(  -1,   13), S(   2,   10), S(  17,    8), S(   5,    7)};
constexpr PackedScore THEIR_PASSER_PROXIMITY[8] = {S(   0,    0), S( -72,   -6), S(   6,    1), S(  -1,   27), S(   5,   36), S(   5,   44), S(   8,   49), S( -11,   48)};

constexpr PackedScore PAWN_STORM[3][8] = {
	{S(  46,  -35), S(  26,  -17), S(  18,   -2), S(   9,   -0), S(   2,    2), S(  -2,    7), S(  -1,    5), S(   7,  -11)},
	{S(   0,    0), S(  13,  -29), S(  29,    1), S(   4,    1), S(  -5,    7), S(  -7,   12), S(  -8,   14), S(   7,   -2)},
	{S(   1,   -2), S(  -6,    6), S(   5,    9), S(   3,    9), S(   4,    8), S(   4,    9), S(   4,    9), S(  -8,   -4)}
};
constexpr PackedScore PAWN_SHIELD[3][8] = {
	{S(   2,  -13), S(  -9,   -7), S(  -5,  -11), S(  -0,  -10), S(  14,  -14), S(  18,  -26), S(  30,  -29), S(   8,    0)},
	{S(   0,    0), S( -16,    3), S(  -9,   -4), S(   9,   -4), S(  21,  -11), S(  36,  -31), S(  52,  -39), S(  17,    2)},
	{S(  -3,   -8), S(  -2,   -5), S(   0,   -5), S(   1,    0), S(   5,    1), S(   6,    1), S(  24,    5), S(  -8,    7)}
};
constexpr PackedScore SAFE_KNIGHT_CHECK = S(  79,   -4);
constexpr PackedScore SAFE_BISHOP_CHECK = S(  16,   -6);
constexpr PackedScore SAFE_ROOK_CHECK = S(  56,   -3);
constexpr PackedScore SAFE_QUEEN_CHECK = S(  32,   11);
constexpr PackedScore KING_ATTACKER_WEIGHT[4] = {S(  15,   -5), S(   9,   -0), S(   8,  -18), S(  -2,   12)};
constexpr PackedScore KING_ATTACKS[14] = {S( -23,    8), S( -26,    4), S( -28,    2), S( -28,    7), S( -20,    4), S(  -5,   -1), S(  18,   -8), S(  47,  -21), S(  93,  -43), S( 122,  -46), S( 158,  -61), S( 183,  -49), S( 220, -131), S( 181,    8)};

constexpr PackedScore KNIGHT_OUTPOST = S(  33,   23);
constexpr PackedScore BISHOP_PAIR = S(  21,   59);
constexpr PackedScore ROOK_OPEN[2] = {S(  22,    7), S(  12,    7)};

constexpr PackedScore TEMPO = S(  28,   25);

#undef S


}
