#pragma once

#include "../defs.h"

namespace eval
{

#define S(mg, eg) PackedScore(mg, eg)

constexpr PackedScore MATERIAL[6] = {S(  59,   86), S( 287,  359), S( 292,  378), S( 405,  665), S( 852, 1214), S(0, 0)};

constexpr PackedScore PSQT[6][64] = {
	{
		S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
		S(  35,   77), S(  43,   79), S(  27,   86), S(  63,   44), S(  49,   50), S(  36,   58), S( -25,   96), S( -30,   89),
		S(  16,   38), S(  12,   54), S(  38,   13), S(  47,  -16), S(  55,  -17), S(  87,   -8), S(  47,   37), S(  31,   26),
		S(  -7,   23), S(  -1,   25), S(   5,    2), S(   6,  -10), S(  25,  -10), S(  27,  -11), S(  11,   15), S(  12,    0),
		S( -15,    6), S( -11,   20), S(  -2,   -4), S(   7,   -9), S(   9,   -7), S(  13,  -11), S(   2,    9), S(   0,  -12),
		S( -25,   -2), S( -19,   10), S( -12,   -6), S(  -9,   -3), S(   1,   -2), S(  -5,   -7), S(   4,   -1), S(  -7,  -18),
		S( -18,    3), S( -10,   16), S(  -5,    1), S(  -5,   -3), S(   4,    8), S(  27,   -8), S(  20,    2), S(  -3,  -16),
		S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
	},
	{
		S( -89,  -34), S( -80,   -9), S( -56,    5), S( -11,  -10), S(  13,   -9), S( -23,  -31), S( -76,   -7), S( -63,  -53),
		S( -13,    6), S(   1,    9), S(   3,    2), S(  14,    0), S(  12,   -9), S(  29,  -14), S(  11,    0), S(   6,  -11),
		S(   3,   -1), S(   5,    1), S(  12,    4), S(  19,    4), S(  31,   -2), S(  59,  -23), S(  18,  -10), S(  23,  -14),
		S(   6,   10), S(  10,    2), S(  24,    5), S(  35,   10), S(  30,   10), S(  38,    3), S(  25,    1), S(  36,   -1),
		S(  -2,   10), S(  10,    0), S(  12,   12), S(  23,   12), S(  15,   22), S(  16,    5), S(  14,    3), S(   2,   10),
		S( -14,    1), S(  -3,    1), S(  -1,    2), S(   6,   16), S(  19,   14), S(   2,   -4), S(  15,   -4), S(   1,    4),
		S( -17,    6), S( -14,   10), S(  -7,    1), S(   6,    2), S(   4,    1), S(   7,    0), S(   8,   -1), S(   3,   18),
		S( -47,   22), S( -10,   -2), S( -18,    0), S(  -9,    3), S(  -2,    4), S(   2,   -7), S( -10,    6), S( -14,   17),
	},
	{
		S(  -4,    9), S( -35,    9), S( -35,    4), S( -69,   10), S( -63,    9), S( -50,   -2), S( -27,    4), S( -45,    0),
		S(  -3,   -5), S(  -9,   -1), S(  -5,   -5), S( -17,    0), S(  -7,   -8), S( -18,   -4), S( -55,    9), S( -35,    4),
		S(   7,    9), S(  15,   -1), S(   4,    1), S(  17,   -9), S(   5,   -3), S(  36,    2), S(  19,    1), S(  24,    8),
		S(  -7,    6), S(  -2,    8), S(   7,    0), S(  19,   11), S(   7,    4), S(   4,    8), S(  -7,    7), S(  -1,    6),
		S(   0,    5), S(  -7,    6), S(  -1,    6), S(  11,    5), S(   9,    3), S(  -3,    0), S(  -2,    5), S(   7,   -4),
		S(   3,    3), S(  15,    2), S(   7,    0), S(   3,    5), S(   8,    7), S(  10,   -1), S(  18,   -6), S(  21,   -5),
		S(  24,    8), S(  10,  -13), S(  18,  -12), S(   0,   -1), S(   9,    1), S(  21,   -9), S(  31,  -11), S(  26,   -9),
		S(  13,   -4), S(  21,   12), S(   7,    2), S(   4,    0), S(  14,   -5), S(   3,   10), S(  26,   -9), S(  37,  -20),
	},
	{
		S( -10,   16), S( -13,   20), S( -22,   28), S( -27,   25), S( -16,   18), S(   4,   16), S(  -1,   21), S(  21,   11),
		S(   0,   11), S(   5,   16), S(  13,   18), S(  27,    6), S(  14,    7), S(  16,    7), S(  27,    2), S(  30,    0),
		S(  -8,   11), S(  20,    5), S(  11,    9), S(  11,    4), S(  29,   -3), S(  38,  -10), S(  53,   -8), S(  23,   -7),
		S(  -9,   13), S(   4,    6), S(   5,   10), S(   5,    6), S(  11,   -5), S(  13,   -7), S(   8,   -2), S(   7,   -4),
		S( -17,    6), S( -15,    6), S(  -9,    4), S(  -2,    2), S(  -1,    0), S( -15,    2), S(   2,   -5), S( -13,   -4),
		S( -21,    0), S( -17,   -4), S( -13,   -5), S( -11,   -3), S(  -1,   -8), S(  -6,  -11), S(  15,  -23), S(   0,  -21),
		S( -22,   -6), S( -17,   -5), S(  -8,   -6), S(  -7,   -8), S(  -3,  -13), S(   1,  -16), S(   7,  -20), S( -18,  -16),
		S( -15,   -3), S( -14,   -8), S( -13,   -3), S(  -5,  -10), S(   1,  -16), S(  -4,  -10), S(  -5,  -12), S( -18,  -11),
	},
	{
		S( -17,  -10), S( -31,    2), S( -24,   24), S(   3,   12), S(  -3,   14), S(   8,    8), S(  50,  -38), S(  10,   -8),
		S(   7,  -14), S( -12,   -3), S( -10,   24), S( -22,   43), S( -23,   57), S(   4,   24), S(   0,   11), S(  42,   10),
		S(  10,   -4), S(   5,   -2), S(  -2,   22), S(   1,   26), S( -11,   41), S(  11,   11), S(  27,   -2), S(  31,    0),
		S(  -1,    9), S(  -4,   19), S(  -1,   15), S( -11,   29), S( -18,   31), S(   2,   17), S(   1,   34), S(  12,   14),
		S(  -1,    3), S(  -3,   19), S(  -5,   13), S(  -9,   23), S(  -2,   23), S(  -4,   21), S(   9,    7), S(  15,    7),
		S(   3,  -17), S(   1,   -4), S(  -9,    8), S(  -8,   14), S(  -3,   19), S(   1,    5), S(  14,  -14), S(  17,  -19),
		S(   5,  -31), S(  -1,  -31), S(   3,  -21), S(   3,   -6), S(   2,   -6), S(   8,  -33), S(  17,  -63), S(  31,  -77),
		S( -13,  -28), S( -14,  -24), S( -12,  -13), S(  -9,  -13), S(  -8,  -15), S( -17,  -24), S(  -7,  -38), S(  11,  -47),
	},
	{
		S(  48,  -54), S(  87,  -31), S( 124,  -35), S(  58,  -12), S(  64,  -34), S( -22,    1), S(  16,    6), S(  97,  -70),
		S( -98,   27), S(  12,   28), S(  32,   13), S( 149,  -18), S(  91,  -10), S(  45,   27), S(   9,   45), S( -92,   47),
		S(-111,   26), S(  40,   18), S(  35,    9), S(  46,    2), S(  84,    0), S( 103,   12), S(  -9,   43), S( -70,   32),
		S( -65,    1), S( -25,    9), S( -14,    7), S( -14,    1), S( -19,   -3), S( -28,   15), S( -64,   25), S(-154,   29),
		S( -71,  -10), S( -32,    0), S( -32,    3), S( -31,    1), S( -36,    1), S( -39,    5), S( -73,   14), S(-153,   19),
		S( -50,   -6), S(   6,   -3), S( -22,    2), S(  -5,   -1), S(  -7,   -2), S( -24,    5), S( -16,    3), S( -72,    9),
		S(  33,  -16), S(  23,   -2), S(  18,   -2), S(   1,   -4), S(  -3,   -2), S(   7,    0), S(  23,   -3), S(  18,  -11),
		S(  21,  -36), S(  54,  -27), S(  25,  -12), S( -29,   -4), S(   8,  -21), S( -22,    2), S(  32,  -17), S(  30,  -41),
	},
};

constexpr PackedScore MOBILITY[4][28] = {
	{S(  -8,  -12), S( -31,  -55), S(  -9,  -25), S(   1,   -1), S(  10,   10), S(  14,   21), S(  22,   26), S(  32,   30), S(  41,   29), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S(   2,  -21), S( -33,  -85), S( -12,  -39), S(  -4,  -16), S(   9,   -4), S(  15,    5), S(  21,   17), S(  26,   23), S(  30,   29), S(  34,   32), S(  35,   38), S(  46,   33), S(  41,   41), S(  59,   30), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -43,  -21), S(   3,  -49), S( -24,  -41), S( -14,  -25), S(  -9,  -21), S(  -3,   -6), S(  -1,    1), S(  -4,    8), S(  -1,    9), S(   3,   13), S(   8,   17), S(  10,   23), S(  14,   27), S(  21,   27), S(  26,   23), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -44,   14), S( -60,  -65), S(-106,  -56), S( -72, -263), S( -74, -109), S( -32,  -47), S( -23,  -23), S( -14,  -16), S(  -7,   -8), S(  -4,   15), S(  -2,   23), S(   3,   32), S(   6,   38), S(  10,   41), S(  13,   44), S(  16,   47), S(  19,   50), S(  19,   54), S(  19,   59), S(  21,   61), S(  28,   56), S(  36,   43), S(  40,   45), S(  66,   18), S(  71,   20), S( 118,  -17), S( 114,  -16), S(  71,  -17)}
};

constexpr PackedScore THREAT_BY_PAWN[6] = {S(   9,  -15), S(  60,   23), S(  60,   57), S(  86,    5), S(  72,  -23), S(   0,    0)};
constexpr PackedScore THREAT_BY_KNIGHT[2][6] = {
	{S(   5,   25), S(  27,   20), S(  37,   37), S(  78,    1), S(  43,  -27), S(   0,    0)},
	{S(  -5,   10), S(  11,   40), S(  31,   34), S(  63,   27), S(  53,   -4), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_BISHOP[2][6] = {
	{S(   7,   36), S(  52,   23), S(   1,   33), S(  73,    6), S(  73,   34), S(   0,    0)},
	{S(   2,   14), S(  24,   26), S( -12,   13), S(  45,   39), S(  51,  124), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_ROOK[2][6] = {
	{S(   1,   41), S(  30,   46), S(  29,   45), S(  15,  -27), S(  74,   -8), S(   0,    0)},
	{S(  -6,   13), S(   5,   16), S(  16,    6), S(   6,  -52), S(  56,   51), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_QUEEN[2][6] = {
	{S(  12,    4), S(  37,    5), S(  20,   39), S(  25,  -12), S(  14,  -70), S( 156,  -58)},
	{S(  -1,   15), S(   1,    9), S(  -5,   23), S(  -4,    3), S( -19,  -54), S( 115,   58)}
};

constexpr PackedScore PASSED_PAWN[8] = {S(   0,    0), S( -16,  -67), S( -15,  -52), S( -13,  -18), S(  11,   18), S(   0,   86), S(  50,   95), S(   0,    0)};
constexpr PackedScore ISOLATED_PAWN[8] = {S(  -3,    6), S(  -3,  -11), S( -11,   -5), S(  -6,  -12), S( -11,  -13), S(  -7,   -4), S(  -2,  -12), S( -11,    8)};
constexpr PackedScore PAWN_PHALANX[8] = {S(   0,    0), S(   4,   -2), S(  13,    6), S(  22,   17), S(  49,   58), S( 135,  180), S(-136,  433), S(   0,    0)};
constexpr PackedScore DEFENDED_PAWN[8] = {S(   0,    0), S(   0,    0), S(  19,   10), S(  11,    7), S(  12,   15), S(  28,   39), S( 170,   29), S(   0,    0)};
constexpr PackedScore OUR_PASSER_PROXIMITY[8] = {S(   0,    0), S(   5,   52), S(  -5,   39), S(  -4,   23), S(  -1,   13), S(   2,   10), S(  17,    8), S(   5,    7)};
constexpr PackedScore THEIR_PASSER_PROXIMITY[8] = {S(   0,    0), S( -73,   -7), S(   6,    1), S(  -1,   27), S(   5,   36), S(   5,   44), S(   7,   49), S( -11,   49)};

constexpr PackedScore PAWN_STORM[3][8] = {
	{S(  45,  -35), S(  25,  -17), S(  18,   -2), S(   9,   -0), S(   2,    2), S(  -2,    7), S(  -1,    5), S(   8,  -11)},
	{S(   0,    0), S(  12,  -30), S(  28,    1), S(   3,    1), S(  -5,    7), S(  -7,   12), S(  -8,   14), S(   7,   -2)},
	{S(   0,   -2), S(  -7,    6), S(   4,    9), S(   3,    9), S(   4,    8), S(   4,   10), S(   4,    9), S(  -8,   -4)}
};
constexpr PackedScore PAWN_SHIELD[3][8] = {
	{S(   1,  -13), S(  -9,   -7), S(  -5,  -11), S(  -0,  -11), S(  14,  -15), S(  18,  -27), S(  30,  -30), S(   7,    0)},
	{S(   0,    0), S( -16,    3), S(  -9,   -4), S(   9,   -4), S(  21,  -12), S(  36,  -31), S(  55,  -40), S(  17,    2)},
	{S(  -3,   -8), S(  -2,   -5), S(   0,   -5), S(   1,   -0), S(   5,    1), S(   6,    1), S(  24,    5), S(  -8,    7)}
};
constexpr PackedScore SAFE_KNIGHT_CHECK = S(  79,   -4);
constexpr PackedScore SAFE_BISHOP_CHECK = S(  16,   -6);
constexpr PackedScore SAFE_ROOK_CHECK = S(  56,   -4);
constexpr PackedScore SAFE_QUEEN_CHECK = S(  31,   11);
constexpr PackedScore KING_ATTACKER_WEIGHT[4] = {S(  14,   -3), S(   9,    1), S(   7,  -13), S(  -2,   13)};
constexpr PackedScore KING_ATTACKS[14] = {S( -24,   11), S( -27,    6), S( -29,    3), S( -28,    7), S( -20,    4), S(  -4,   -2), S(  18,   -9), S(  48,  -24), S(  94,  -46), S( 124,  -50), S( 162,  -67), S( 185,  -54), S( 221, -135), S( 184,    3)};

constexpr PackedScore KNIGHT_OUTPOST = S(  31,   22);
constexpr PackedScore BISHOP_PAIR = S(  21,   60);
constexpr PackedScore ROOK_OPEN[2] = {S(  22,    9), S(  11,   11)};

constexpr PackedScore TEMPO = S(  30,   28);

#undef S


}
