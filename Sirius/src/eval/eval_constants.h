#pragma once

#include "../defs.h"

namespace eval
{

#define S(mg, eg) PackedScore(mg, eg)

constexpr PackedScore MATERIAL[6] = {S(  61,  115), S( 288,  459), S( 318,  477), S( 388,  838), S( 776, 1567), S(0, 0)};

constexpr PackedScore PSQT[6][64] = {
	{
		S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
		S(  28,  119), S(  30,  113), S(  52,   79), S(  55,   96), S(  65,   87), S(  38,  111), S(  36,  118), S(  42,  122),
		S(  34,   42), S(  22,   71), S(  27,   24), S(  53,   -1), S(  40,    3), S(  24,   26), S(   0,   58), S(  10,   52),
		S(  16,   34), S(  -2,   33), S(  19,    4), S(  19,    0), S(   6,    0), S(  -1,   16), S(  -8,   34), S( -12,   42),
		S(   3,   23), S(  -4,   29), S(  13,  -15), S(  13,    4), S(   7,    4), S(  -4,   11), S( -15,   30), S( -18,   27),
		S(   0,   17), S(   9,   13), S(  -1,  -15), S(   0,   18), S(  -7,   17), S( -14,   11), S( -24,   23), S( -29,   24),
		S(  10,   21), S(  36,   12), S(  35, -530), S(   9,   27), S(  -3,   17), S(  -8,   17), S( -15,   32), S( -18,   31),
		S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
	},
	{
		S( -70,  -86), S( -79,  -21), S( -23,  -21), S(   8,  -10), S( -42,   10), S( -67,    8), S(-103,    8), S( -85,  -45),
		S( -11,  -10), S(  21,   -3), S(  35,   -7), S(  13,    3), S(  12,   11), S(   0,   11), S(  -6,   18), S( -12,    7),
		S(  14,   -7), S(  12,   -1), S(  57,  -17), S(  36,    4), S(  23,    9), S(  17,    5), S(   3,    4), S(  -9,    4),
		S(  34,    5), S(  35,    8), S(  55,    4), S(  41,   14), S(  38,   15), S(  29,    9), S(  18,    4), S(   5,   16),
		S(  12,   15), S(  24,   10), S(  32,    7), S(  26,   19), S(  24,   13), S(  19,   13), S(  20,    2), S(   1,   11),
		S(   3,   -2), S(  18,   -3), S(   9,  -10), S(  16,    9), S(   5,    8), S(  -1,   -5), S(  -2,   -5), S( -14,   -2),
		S(   3,    7), S(   5,   -6), S(   7,   -7), S(   4,   -2), S(   4,   -2), S(  -8,   -6), S( -14,   -3), S( -19,   -1),
		S( -13,    6), S(  -9,   -2), S(  -3,   -8), S(  -3,    5), S(  -7,   -1), S( -21,   -7), S( -14,   -3), S( -51,   11),
	},
	{
		S( -40,   -3), S( -40,    9), S( -20,    2), S( -70,   10), S( -73,   20), S( -58,    6), S( -27,    6), S( -15,   13),
		S( -23,   -7), S( -37,   13), S( -15,    2), S(  -7,    3), S( -24,    9), S(  -2,   -3), S(  -2,   -3), S(  -4,   -7),
		S(  21,   10), S(   9,    0), S(  41,    7), S(   6,    7), S(  14,   -1), S(   5,    3), S(   5,    3), S(   4,    2),
		S(  -4,    5), S(   7,    9), S(   7,   10), S(  17,   15), S(  19,   20), S(  11,    4), S(   2,    9), S( -10,    7),
		S(  17,   -7), S(   0,    9), S(   7,    6), S(  11,    9), S(  14,   10), S(  -4,   12), S(  -3,    5), S(  -1,   -1),
		S(  22,  -12), S(  21,   -9), S(  10,   -2), S(   6,    6), S(  -2,    2), S(   4,    4), S(  11,    1), S(   1,   -6),
		S(  24,  -20), S(  30,  -25), S(  22,  -16), S(   2,   -6), S(  -3,   -2), S(  10,  -19), S(   6,  -18), S(  17,   -9),
		S(  35,  -26), S(  25,  -25), S(  -4,    0), S(  16,   -4), S(   1,   -3), S(   4,    6), S(  17,   -8), S(  12,   -6),
	},
	{
		S(  15,    7), S(  19,   13), S(  -6,   25), S(  -9,   15), S( -30,   28), S( -24,   32), S( -17,   27), S(  -2,   16),
		S(  36,   -6), S(  27,    8), S(  18,   13), S(   8,   12), S(  19,   13), S(   0,   29), S(  -4,   25), S(  -2,   17),
		S(  11,    2), S(  47,   -3), S(  31,    0), S(  24,    5), S(   5,   13), S(   0,   23), S(  10,   19), S( -13,   25),
		S(   5,    9), S(   2,   17), S(  12,   14), S(  11,    4), S(   2,   12), S(   3,   19), S(   0,   20), S( -14,   23),
		S(  -8,    0), S(  10,    5), S(  -5,   10), S(   4,    2), S(  -8,    6), S( -12,   10), S( -15,   10), S( -19,   11),
		S(  10,  -29), S(  20,  -28), S(   0,  -14), S(   1,  -16), S( -13,   -8), S( -17,  -10), S( -16,  -10), S( -22,   -8),
		S(  -8,  -30), S(  16,  -37), S(   3,  -23), S(   2,  -24), S(  -6,  -20), S(  -8,  -16), S( -17,  -14), S( -20,  -20),
		S( -10,  -38), S(  -7,  -19), S(  -3,  -19), S(   4,  -27), S(  -4,  -24), S( -12,  -16), S( -11,  -20), S( -12,  -17),
	},
	{
		S(   0,  -12), S(  44,  -51), S( -30,   42), S( -24,   23), S(  -3,    0), S( -29,   19), S( -49,   14), S( -22,   -1),
		S(  36,   -1), S(  -9,   12), S( -19,   38), S( -38,   62), S( -25,   38), S(  -7,    8), S(  -5,  -12), S(   5,  -10),
		S(  11,   13), S(  11,   12), S(   1,   24), S(  -7,   29), S(   5,   18), S(   8,   11), S(   6,   -5), S(  20,  -11),
		S(  14,   20), S(  10,   39), S(   9,   20), S( -11,   38), S(  -6,   33), S(   8,    6), S(   8,   11), S(   5,    6),
		S(  14,   11), S(  18,   16), S(   3,   27), S(   6,   26), S(  -1,   26), S(  -1,   17), S(   5,   13), S(   2,    4),
		S(  15,  -18), S(  17,   -6), S(   7,    6), S(  -4,   16), S(  -2,    9), S(  -3,   12), S(   7,  -11), S(   6,  -14),
		S(  16,  -63), S(  20,  -72), S(  13,  -42), S(   8,  -11), S(   6,   -6), S(   8,  -21), S(   6,  -23), S(  14,  -40),
		S(  13,  -60), S(  -2,  -60), S( -13,  -24), S(  -3,  -22), S(  -3,  -19), S(  -8,  -10), S( -10,  -17), S( -10,  -14),
	},
	{
		S(  21,   30), S(   9,  111), S( -51,  -44), S( -53, -178), S(   8,   -8), S(   8,   -8), S(   8,   -8), S(   8,   -8),
		S( -46,  142), S(   2,  177), S(  -9,    3), S(  25, -160), S(   8,   -8), S(   8,   -8), S(   8,   -8), S(   8,   -8),
		S( -18,  137), S(  37,  164), S(  31,    0), S(  -1, -132), S(   8,   -8), S(   8,   -8), S(   8,   -8), S(   8,   -8),
		S( -58,  137), S(  -9,  157), S( -20,   -2), S( -72, -131), S(   8,   -8), S(   8,   -8), S(   8,   -8), S(   8,   -8),
		S( -62,  117), S( -27,  140), S( -29,  -23), S( -73, -148), S(   8,   -8), S(   8,   -8), S(   8,   -8), S(   8,   -8),
		S( -10,   92), S(  15,  114), S( -13,  -46), S( -37, -170), S(   8,   -8), S(   8,   -8), S(   8,   -8), S(   8,   -8),
		S(  40,   71), S(  42,   96), S(  12,  -62), S( -21, -188), S(   8,   -8), S(   8,   -8), S(   8,   -8), S(   8,   -8),
		S(  34,   36), S(  35,   76), S(   1,  -78), S(  -7, -220), S(   8,   -8), S(   8,   -8), S(   8,   -8), S(   8,   -8),
	},
};

constexpr PackedScore MOBILITY[4][28] = {
	{S( -12,  -19), S( -40,  -65), S( -15,  -30), S(  -7,   -4), S(   3,    9), S(   5,   20), S(  13,   27), S(  21,   35), S(  30,   34), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -21,  -32), S( -55,  -98), S( -32,  -38), S( -25,  -16), S( -13,   -3), S(  -5,    6), S(   1,   17), S(   7,   22), S(   9,   27), S(  14,   29), S(  15,   31), S(  27,   22), S(  30,   24), S(  39,   11), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -27,  -43), S(  11,  -74), S( -26,  -52), S( -14,  -31), S(  -8,  -23), S(  -2,   -6), S(   0,    0), S(  -5,   10), S(  -1,   13), S(   2,   19), S(   6,   27), S(   7,   36), S(   9,   43), S(  17,   43), S(  25,   41), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -26,    0), S( -51,  -85), S( -98,  -76), S( -47, -326), S( -67, -114), S( -27,  -40), S( -19,  -15), S( -10,  -11), S(  -3,   -7), S(  -2,   19), S(  -1,   26), S(   2,   36), S(   5,   41), S(   8,   44), S(  11,   48), S(  14,   50), S(  15,   53), S(  13,   60), S(  14,   61), S(  14,   65), S(  23,   54), S(  28,   43), S(  31,   40), S(  42,   26), S(  43,   22), S(  57,   -2), S(  29,   18), S(  -4,   -8)}
};

constexpr PackedScore THREAT_BY_PAWN[6] = {S(   9,  -14), S(  65,   32), S(  64,   64), S(  81,   28), S(  78,  -14), S(   0,    0)};
constexpr PackedScore THREAT_BY_KNIGHT[2][6] = {
	{S(   7,   30), S(  25,   36), S(  38,   46), S(  75,   11), S(  47,  -19), S(   0,    0)},
	{S(  -4,   11), S(  12,   35), S(  30,   32), S(  64,   35), S(  56,    2), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_BISHOP[2][6] = {
	{S(   1,   38), S(  43,   38), S( -10,   37), S(  71,   15), S(  68,   64), S(   0,    0)},
	{S(   1,    7), S(  22,   24), S( -22,  -15), S(  44,   48), S(  47,  127), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_ROOK[2][6] = {
	{S(   0,   45), S(  17,   67), S(  26,   62), S(  16,  -51), S(  74,   11), S(   0,    0)},
	{S(  -8,    8), S(   2,   17), S(  14,    3), S(  15,  -96), S(  64,   46), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_QUEEN[2][6] = {
	{S(   7,    9), S(  25,   21), S(   9,   55), S(  13,   15), S(  12,  -60), S(  97,   23)},
	{S(  -1,   11), S(   0,    8), S(  -7,   21), S(  -4,    2), S( -17,  -76), S( 117,   43)}
};
constexpr PackedScore THREAT_BY_KING[6] = {S( -36,   51), S(   1,   52), S(  19,   44), S(  81,   22), S(   0,    0), S(   0,    0)};
constexpr PackedScore PUSH_THREAT = S(  15,   21);

constexpr PackedScore ISOLATED_PAWN[8] = {S(  -7,   -1), S(  -5,  -11), S( -12,  -10), S( -10,  -16), S( -11,  -14), S(  -8,   -6), S(  -4,  -10), S( -10,    1)};
constexpr PackedScore PAWN_PHALANX[8] = {S(   0,    0), S(   5,   -3), S(  11,    4), S(  19,   16), S(  47,   63), S( 118,  224), S(-177,  456), S(   0,    0)};
constexpr PackedScore DEFENDED_PAWN[8] = {S(   0,    0), S(   0,    0), S(  19,   11), S(  12,    9), S(  13,   18), S(  20,   57), S( 140,   75), S(   0,    0)};

constexpr PackedScore PASSED_PAWN[2][2][8] = {
	{
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -32,  -39), S( -16,   26), S( -29,  161), S(   2,  264), S(   0,    0)},
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -19,  -54), S(  12,  -28), S(  15,   13), S(  57,   42), S(   0,    0)}
	},
	{
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -26,  -61), S(   0,  -29), S(  16,    0), S(  63,    1), S(   0,    0)},
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -27,  -68), S(   2,  -41), S(  -7,  -23), S( -10,  -17), S(   0,    0)}
	}
};
constexpr PackedScore OUR_PASSER_PROXIMITY[8] = {S(   0,    0), S(  59,   84), S(  10,   71), S(  -1,   47), S(   1,   36), S(   8,   27), S(  18,   25), S(  11,   26)};
constexpr PackedScore THEIR_PASSER_PROXIMITY[8] = {S(   0,    0), S( -57,    8), S(  18,   -1), S(  13,   26), S(  17,   45), S(  11,   79), S(  13,   81), S(  16,   69)};

constexpr PackedScore PAWN_STORM[2][4][8] = {
	{
		{S(  22,   67), S( -66,  -30), S(   3,   44), S(  18,   39), S(  11,   52), S(  -7,   63), S(  -9,   62), S(   0,    0)},
		{S(  24,   41), S(  21,  -67), S(  75,   -9), S(  32,   28), S(  11,   37), S( -12,   48), S(  -5,   50), S(   0,    0)},
		{S(   9,   38), S(  74,  -63), S(  89,  -12), S(  41,   13), S(  12,   33), S(  -9,   43), S( -14,   44), S(   0,    0)},
		{S(   8,  -21), S( 124, -106), S(  50,  -34), S(  27,  -15), S(  -3,   -9), S( -15,  -12), S( -28,   -1), S(   0,    0)}
	},
	{
		{S(   0,    0), S(  -3,  -49), S(-129,  287), S(  35,   -5), S(  -6,   65), S(   5,   59), S( -12,   63), S(   0,    0)},
		{S(   0,    0), S(   1,  -92), S(  18,   86), S(  76,   -4), S(  13,   41), S( -16,   51), S(  -3,   49), S(   0,    0)},
		{S(   0,    0), S( -19,   60), S( -40,  -90), S(  41,    1), S(   3,   40), S(  -5,   43), S(  -5,   42), S(   0,    0)},
		{S(   0,    0), S( -55, -146), S( 102,  -38), S(  34,  -14), S( -10,    0), S(  -4,  -20), S(  -5,   -2), S(   0,    0)}
	}
};
constexpr PackedScore PAWN_SHIELD[4][8] = {
	{S(  20,   76), S( -12,   93), S( -18,   82), S(   8,   74), S(  24,   58), S(  -4,   26), S( -64,   16), S(   0,    0)},
	{S(  30,   59), S(  -6,   59), S(  -1,   53), S(  12,   53), S(  10,   46), S(   7,   38), S( -33,   17), S(   0,    0)},
	{S(   5,  181), S(  -3, -370), S(  -9,  146), S(   8,  147), S(  12,  153), S(   1,  143), S(   0,   91), S(   0,    0)},
	{S(   9,  -19), S(   3,  -19), S( -12,  -18), S(   2,  -25), S(  12,  -28), S(  21,  -38), S( -51,  -34), S(   0,    0)}
};
constexpr PackedScore SAFE_KNIGHT_CHECK = S(  88,   -4);
constexpr PackedScore SAFE_BISHOP_CHECK = S(  37,   10);
constexpr PackedScore SAFE_ROOK_CHECK = S(  67,    5);
constexpr PackedScore SAFE_QUEEN_CHECK = S(  38,   12);
constexpr PackedScore UNSAFE_KNIGHT_CHECK = S(   6,    4);
constexpr PackedScore UNSAFE_BISHOP_CHECK = S(  17,   13);
constexpr PackedScore UNSAFE_ROOK_CHECK = S(  26,    2);
constexpr PackedScore UNSAFE_QUEEN_CHECK = S(   8,   12);
constexpr PackedScore KING_ATTACKER_WEIGHT[4] = {S(  41,   -5), S(  29,   -2), S(  27,  -16), S(  13,   -4)};
constexpr PackedScore KING_ATTACKS[14] = {S( -36,   44), S( -41,   42), S( -39,   34), S( -44,   35), S( -42,   28), S( -42,   25), S( -30,   18), S( -18,   11), S(   3,    5), S(  20,   15), S(  37,    1), S(  36,   56), S(  66,   -2), S(  56,   34)};
constexpr PackedScore SAFETY_OFFSET = S(  -5,  466);

constexpr PackedScore MINOR_BEHIND_PAWN = S(   7,   14);
constexpr PackedScore KNIGHT_OUTPOST = S(  25,   11);
constexpr PackedScore BISHOP_PAWNS[7] = {S(  -1,   17), S(   1,   15), S(   0,    5), S(  -4,   -4), S(  -7,  -14), S(  -8,  -29), S( -13,  -35)};
constexpr PackedScore BISHOP_PAIR = S(  20,   64);
constexpr PackedScore ROOK_OPEN[2] = {S(  26,    4), S(  15,    4)};

constexpr PackedScore TEMPO = S(  32,   37);

constexpr PackedScore COMPLEXITY_PAWNS = S(   0,   12);
constexpr PackedScore COMPLEXITY_PASSERS = S(   0,    8);
constexpr PackedScore COMPLEXITY_PAWNS_BOTH_SIDES = S(   0,   91);
constexpr PackedScore COMPLEXITY_PAWN_ENDGAME = S(   0,   72);
constexpr PackedScore COMPLEXITY_OFFSET = S(   0, -196);

#undef S


}