#pragma once

#include "../defs.h"

namespace eval
{

#define S(mg, eg) PackedScore(mg, eg)

constexpr PackedScore MATERIAL[6] = {S(  61,  131), S( 284,  431), S( 306,  444), S( 386,  787), S( 744, 1613), S(0, 0)};

constexpr PackedScore PSQT[6][64] = {
    {
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  55,   79), S(  38,   89), S(  21,  101), S(  56,   77), S(  73,   62), S(  57,   76), S(  47,   95), S(  68,   77),
        S(   4,    0), S( -13,   30), S(   8,   -8), S(   9,  -38), S(   1,  -38), S(   2,  -23), S( -19,   15), S(  -6,    2),
        S(  13,    3), S(  -4,   15), S(  11,   -9), S(  11,  -23), S(  -1,  -23), S(   0,  -16), S(  -8,    8), S(  -8,    6),
        S(   4,   -5), S(  -5,   14), S(  13,  -22), S(  16,  -17), S(   9,  -16), S(   0,  -15), S( -13,    9), S( -12,   -4),
        S(  -2,   -6), S(   8,    9), S(   4,    0), S(   1,   -2), S(  -7,   -2), S(  -8,   -9), S( -21,    8), S( -22,   -5),
        S(   9,   -7), S(  24,   10), S(  30,  128), S(   9,    0), S(  -1,  -11), S(  -5,   -8), S( -14,   12), S( -14,   -2),
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
    },
    {
        S( -63,  -99), S( -70,  -26), S( -23,  -19), S(   2,  -10), S( -26,    0), S( -53,    2), S( -96,    2), S( -80,  -59),
        S( -13,  -14), S(  16,    1), S(  28,   -3), S(   4,    7), S(   8,   11), S(   8,   10), S(   3,   12), S(  -7,   -1),
        S(   6,   -7), S(  -6,    7), S(  33,   -3), S(  23,   15), S(  11,   22), S(  19,   12), S(  11,    2), S(  -2,   -1),
        S(  22,    6), S(  19,   17), S(  32,   19), S(  18,   27), S(  22,   26), S(  29,   14), S(  21,    3), S(  15,    8),
        S(   6,   18), S(  11,   17), S(  15,   21), S(  16,   28), S(  16,   22), S(  19,   18), S(  24,    0), S(  11,    2),
        S(  11,    1), S(  13,    6), S(  14,    5), S(  12,   17), S(   2,   17), S(   3,    0), S(   7,   -7), S(  -5,   -7),
        S(   6,    0), S(  12,   -4), S(   5,   -4), S(  10,    1), S(   5,    0), S(  -2,   -3), S(  -1,   -7), S( -12,   -7),
        S(  -8,  -15), S(  -9,  -10), S(   0,  -10), S(   3,    3), S(  -2,   -1), S( -15,   -9), S(  -8,  -15), S( -40,   -5),
    },
    {
        S( -48,  -13), S( -27,    6), S(  -8,   -3), S( -69,   10), S( -63,   16), S( -57,    5), S( -29,    6), S( -32,    5),
        S( -22,   -9), S( -43,    6), S( -12,    4), S(  -7,    2), S( -20,   10), S(   4,   -1), S( -11,   -6), S(  -2,   -8),
        S(  11,   12), S(  -2,    8), S(  22,    6), S(   7,   13), S(  18,    6), S(   3,    0), S(  12,    4), S(   7,    1),
        S( -10,    5), S(   3,   13), S(   3,   17), S(  20,   19), S(  24,   24), S(  21,    8), S(   7,   12), S(  -3,    0),
        S(  17,   -6), S(  -2,   13), S(   8,   12), S(  15,   15), S(  23,   12), S(   6,   14), S(   5,    5), S(   5,   -2),
        S(  20,   -9), S(  23,   -1), S(   4,   -1), S(  10,   12), S(   1,    8), S(   4,   -3), S(  19,    1), S(   6,   -9),
        S(  26,  -19), S(  24,  -24), S(  27,  -10), S(   6,   -4), S(  -2,   -1), S(  11,  -16), S(   5,  -26), S(  16,  -12),
        S(  28,  -36), S(  20,  -16), S(  -5,   -2), S(  18,   -6), S(   0,   -3), S(  -1,    1), S(  10,   -4), S(   6,  -18),
    },
    {
        S(  17,   10), S( -15,   32), S(  -9,   25), S( -18,   22), S( -11,   21), S( -14,   29), S(   7,   18), S(   9,   18),
        S(  27,    1), S(  33,    6), S(  15,   16), S(  -3,   19), S(  24,   13), S(  12,   23), S(   9,   19), S(  12,   11),
        S(  -5,    4), S(  23,    6), S(   6,    7), S(   9,    9), S(   6,    8), S(   1,   18), S(  16,   11), S(  -4,   14),
        S( -10,   10), S( -14,   20), S(  -4,   15), S(  -7,   10), S(  -1,    9), S(   4,   12), S(   5,   10), S(  -8,   13),
        S( -18,    5), S(   0,   10), S( -18,   14), S(  -7,    9), S(  -6,    4), S( -10,    7), S( -11,    6), S(  -9,    3),
        S(   5,  -20), S(  23,  -24), S(   0,  -11), S(  -1,  -13), S(  -5,  -12), S(  -9,  -12), S(  -5,  -15), S( -12,  -11),
        S(  -5,  -27), S(  27,  -35), S(   7,  -22), S(   3,  -19), S(   4,  -21), S(   1,  -18), S(  -7,  -17), S( -11,  -21),
        S(  -5,  -38), S(  -1,  -18), S(   3,  -18), S(   9,  -24), S(   7,  -24), S(  -1,  -19), S(   0,  -23), S(  -2,  -20),
    },
    {
        S(  11,   -8), S(  54,  -31), S( -12,   38), S(  -8,   19), S(  17,    4), S( -11,   20), S( -23,    9), S( -17,   14),
        S(  35,    7), S(  12,   15), S(  -5,   26), S( -30,   53), S(  -4,   34), S(  18,    3), S(  27,  -21), S(  20,   -8),
        S(   5,   10), S(  -1,    2), S(  -7,   18), S( -11,   14), S(  11,   11), S(  23,    2), S(  22,  -18), S(  30,  -15),
        S(  -6,   17), S( -15,   33), S(  -8,   16), S( -15,   25), S(  -3,   24), S(  13,    3), S(  10,    6), S(   6,    0),
        S(  -5,   14), S(  -3,   14), S( -14,   20), S( -10,   28), S( -12,   35), S(  -4,   19), S(   4,   13), S(   1,    4),
        S(   2,  -11), S(   5,   -6), S(  -7,    9), S( -14,   15), S( -10,   13), S(  -6,   14), S(   9,   -9), S(   8,  -16),
        S(   2,  -40), S(  11,  -60), S(   1,  -29), S(   0,  -13), S(  -2,   -4), S(   1,  -16), S(   2,  -22), S(   9,  -38),
        S(   8,  -58), S( -16,  -41), S( -19,  -22), S( -11,  -19), S(  -8,  -19), S( -12,  -15), S( -14,  -18), S( -12,  -18),
    },
    {
        S(  43,  -73), S(  27,   -5), S( -42,  -22), S( -67,    3), S(  10,   -5), S(  10,   -5), S(  10,   -5), S(  10,   -5),
        S( -11,   17), S(  23,   54), S( -10,   29), S( -21,   36), S(  10,   -5), S(  10,   -5), S(  10,   -5), S(  10,   -5),
        S(  31,   13), S(  43,   52), S(  24,   32), S( -33,   55), S(  10,   -5), S(  10,   -5), S(  10,   -5), S(  10,   -5),
        S( -17,   17), S( -16,   52), S( -41,   33), S( -89,   51), S(  10,   -5), S(  10,   -5), S(  10,   -5), S(  10,   -5),
        S( -57,   13), S( -50,   42), S( -49,   12), S( -86,   32), S(  10,   -5), S(  10,   -5), S(  10,   -5), S(  10,   -5),
        S( -14,   -4), S(  -9,   20), S( -33,   -7), S( -52,   10), S(  10,   -5), S(  10,   -5), S(  10,   -5), S(  10,   -5),
        S(  39,  -25), S(  32,   -2), S(   7,  -29), S( -22,  -14), S(  10,   -5), S(  10,   -5), S(  10,   -5), S(  10,   -5),
        S(  39,  -57), S(  39,  -22), S(  13,  -51), S(   3,  -45), S(  10,   -5), S(  10,   -5), S(  10,   -5), S(  10,   -5),
    },
};

constexpr PackedScore MOBILITY[4][28] = {
    {S(   2,  -28), S( -40,  -47), S( -18,  -16), S(  -9,    1), S(   1,    9), S(   5,   19), S(  12,   22), S(  20,   26), S(  29,   19), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S( -11,  -45), S( -30,  -61), S( -18,  -32), S( -11,  -14), S(  -3,   -4), S(   2,    6), S(   3,   15), S(   6,   18), S(   7,   21), S(   9,   22), S(  10,   22), S(  15,   16), S(  12,   23), S(  17,    3), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S( -12,  -44), S( -29,  -69), S( -14,  -52), S(  -2,  -31), S(   0,  -16), S(  -1,   -5), S(  -1,    2), S(   2,    8), S(   3,   11), S(   6,   18), S(   4,   27), S(   4,   34), S(   7,   38), S(  10,   39), S(  17,   36), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S(  -1,    7), S( -32,  -72), S( -62, -112), S( -19, -200), S( -24,  -64), S( -16,  -12), S(  -6,  -24), S(  -3,   -5), S(  -3,   12), S(   0,   22), S(   3,   25), S(   6,   28), S(   6,   38), S(  10,   37), S(  10,   43), S(  12,   44), S(  13,   46), S(  15,   47), S(  15,   46), S(  21,   39), S(  26,   29), S(  31,   13), S(  29,   18), S(  36,   -6), S(  36,   -9), S(   9,   -5), S( -18,   -3), S(-114,   10)}
};

constexpr PackedScore THREAT_BY_PAWN[6] = {S(   4,  -20), S(  66,   28), S(  60,   60), S(  81,   24), S(  72,   -2), S(   0,    0)};
constexpr PackedScore THREAT_BY_KNIGHT[2][6] = {
    {S(   3,   28), S(  14,   36), S(  35,   43), S(  72,   13), S(  53,  -33), S(   0,    0)},
    {S(  -7,    9), S(   6,   36), S(  29,   29), S(  64,   34), S(  60,   -2), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_BISHOP[2][6] = {
    {S(  -3,   34), S(  38,   32), S( -16,   36), S(  67,   14), S(  68,   44), S(   0,    0)},
    {S(  -4,    5), S(  17,   22), S( -27,  -11), S(  44,   44), S(  46,  111), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_ROOK[2][6] = {
    {S(  -1,   40), S(  16,   57), S(  24,   53), S( -13,  -29), S(  60,   13), S(   0,    0)},
    {S(  -7,    7), S(   2,   16), S(  14,    3), S( -12,  -67), S(  42,   63), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_QUEEN[2][6] = {
    {S(   6,    4), S(  24,   21), S(  10,   41), S(  14,    1), S(  10,  -56), S(  99,   54)},
    {S(  -3,   12), S(   1,   11), S(  -5,   14), S(  -3,    2), S( -15,  -76), S( 119,   52)}
};
constexpr PackedScore THREAT_BY_KING[6] = {S( -14,   43), S(   8,   48), S(  28,   41), S(  82,    8), S(   0,    0), S(   0,    0)};
constexpr PackedScore KNIGHT_HIT_QUEEN = S(  10,    1);
constexpr PackedScore BISHOP_HIT_QUEEN = S(  16,   10);
constexpr PackedScore ROOK_HIT_QUEEN = S(  18,   -5);
constexpr PackedScore PUSH_THREAT = S(  14,   17);
constexpr PackedScore RESTRICTED_SQUARES = S(   2,    3);

constexpr PackedScore ISOLATED_PAWN[8] = {S(  -8,    6), S(  -3,  -16), S( -12,   -9), S( -10,  -16), S( -12,  -14), S(  -8,   -7), S(  -4,  -14), S( -12,    7)};
constexpr PackedScore DOUBLED_PAWN[8] = {S(   0,  -61), S(  13,  -37), S(   0,  -27), S(  -2,  -17), S(  -5,  -12), S(  -8,  -20), S(   5,  -37), S(   6,  -71)};
constexpr PackedScore BACKWARDS_PAWN[8] = {S(   0,    0), S(  -8,  -12), S(  -2,  -14), S(  -7,  -12), S(   1,  -18), S(  32,  -13), S(   0,    0), S(   0,    0)};
constexpr PackedScore PAWN_PHALANX[8] = {S(   0,    0), S(   5,   -4), S(  11,   -2), S(  20,    8), S(  39,   41), S( 118,  212), S(   5,  340), S(   0,    0)};
constexpr PackedScore DEFENDED_PAWN[8] = {S(   0,    0), S(   0,    0), S(  18,    6), S(  11,    8), S(  17,   21), S(  33,   64), S( 142,   75), S(   0,    0)};
constexpr PackedScore CANDIDATE_PASSER[2][8] = {
    {S(   0,    0), S( -31,  -16), S( -18,   -7), S(   0,   26), S(  25,   52), S(  65,  113), S(   0,    0), S(   0,    0)},
    {S(   0,    0), S( -17,  -10), S(  -8,   13), S(  -4,   28), S(  18,   41), S(  26,  180), S(   0,    0), S(   0,    0)}
};

constexpr PackedScore PASSED_PAWN[2][2][8] = {
    {
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -36,  -41), S( -16,   21), S(  11,  159), S(  68,  217), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -23,  -52), S(   2,  -20), S(  37,   41), S(  70,   25), S(   0,    0)}
    },
    {
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -29,  -55), S(  -6,  -18), S(  39,   34), S(  68,   -3), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -31,  -55), S(  -7,  -24), S(  17,   18), S(  -9,  -11), S(   0,    0)}
    }
};
constexpr PackedScore OUR_PASSER_PROXIMITY[8] = {S(  81,   97), S(  73,  100), S(  46,   72), S(   7,   58), S(   5,   38), S(   7,   25), S(  12,   18), S(  -8,   25)};
constexpr PackedScore THEIR_PASSER_PROXIMITY[8] = {S( -44,  -10), S(  -2,    3), S(  25,    0), S(  20,   31), S(  15,   64), S(  18,   78), S(  25,   79), S(  31,   68)};

constexpr PackedScore PAWN_STORM[2][4][8] = {
    {
        {S(  40,   36), S(-111,  -51), S( -40,  -34), S(  59,    1), S(  27,   21), S(   0,   30), S( -11,   30), S(   0,    0)},
        {S(  33,    7), S(  44, -124), S(  92,  -82), S(  59,  -20), S(  16,   -2), S( -20,    8), S(   5,    7), S(   0,    0)},
        {S(   8,   21), S( 102, -102), S( 103,  -50), S(  63,   -2), S(  15,   17), S( -12,   23), S( -14,   27), S(   0,    0)},
        {S(  17,    6), S( 148,  -77), S( 120,  -22), S(  69,    6), S(  11,   17), S( -13,   10), S( -18,   21), S(   0,    0)}
    },
    {
        {S(   0,    0), S(   0,    0), S(  62,   61), S( -21,   33), S( -24,   40), S( -16,   57), S(  -5,   45), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(  98,   16), S(  -2,   18), S( -15,   27), S( -25,   42), S( -41,   34), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S( 109,   17), S(  11,   25), S( -13,   40), S(  16,   44), S(  52,   29), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(  89,   17), S(  17,   26), S( -23,   26), S( -21,   23), S(   1,   18), S(   0,    0)}
    }
};
constexpr PackedScore PAWN_SHIELD[4][8] = {
    {S(  46,   36), S( -20,   51), S( -12,   41), S(  40,   31), S(  44,   16), S( -24,   -2), S( -65,  -18), S(   0,    0)},
    {S(  49,   10), S( -23,   19), S(   9,    7), S(  53,   -1), S(  44,  -15), S(  14,  -19), S( -36,  -34), S(   0,    0)},
    {S(  23,   -4), S(  17,  123), S(  12,   -3), S(  36,  -23), S(  25,  -20), S(  -4,  -26), S( -57,  -42), S(   0,    0)},
    {S(  16,   18), S(   6,   13), S(   4,   11), S(  30,    6), S(  34,    2), S(   8,    7), S( -81,    9), S(   0,    0)}
};
constexpr PackedScore SAFE_KNIGHT_CHECK = S( 108,    7);
constexpr PackedScore SAFE_BISHOP_CHECK = S(  71,   18);
constexpr PackedScore SAFE_ROOK_CHECK = S( 113,   14);
constexpr PackedScore SAFE_QUEEN_CHECK = S(  55,   25);
constexpr PackedScore UNSAFE_KNIGHT_CHECK = S(  16,    2);
constexpr PackedScore UNSAFE_BISHOP_CHECK = S(  38,   10);
constexpr PackedScore UNSAFE_ROOK_CHECK = S(  38,    3);
constexpr PackedScore UNSAFE_QUEEN_CHECK = S(  15,    4);
constexpr PackedScore QUEENLESS_ATTACK = S(-142,  138);
constexpr PackedScore KNIGHT_DEFENDING_KING = S( -28,    3);
constexpr PackedScore KING_ATTACKER_WEIGHT[4] = {S(  55,   -4), S(  23,    0), S(  28,  -13), S(   3,   -9)};
constexpr PackedScore KING_ATTACKS = S(   7,   -1);
constexpr PackedScore WEAK_KING_RING = S(   7,   -1);
constexpr PackedScore KING_FLANK_ATTACKS[2] = {S(  12,   -3), S(   5,   -1)};
constexpr PackedScore KING_FLANK_DEFENSES[2] = {S(  -6,    0), S(  -7,    2)};
constexpr PackedScore SAFETY_OFFSET = S(  83,  215);

constexpr PackedScore MINOR_BEHIND_PAWN = S(   5,   12);
constexpr PackedScore KNIGHT_OUTPOST = S(  23,   16);
constexpr PackedScore BISHOP_PAWNS[7] = {S(   4,   20), S(   5,   19), S(   4,   11), S(   1,    4), S(  -2,   -5), S(  -2,  -18), S(  -6,  -30)};
constexpr PackedScore BISHOP_PAIR = S(  18,   61);
constexpr PackedScore LONG_DIAG_BISHOP = S(  16,    8);
constexpr PackedScore ROOK_OPEN[2] = {S(  23,    4), S(  12,    5)};

constexpr PackedScore TEMPO = S(  32,   34);

constexpr PackedScore COMPLEXITY_PAWNS = S(   0,   10);
constexpr PackedScore COMPLEXITY_PAWNS_BOTH_SIDES = S(   0,   63);
constexpr PackedScore COMPLEXITY_PAWN_ENDGAME = S(   0,   80);
constexpr PackedScore COMPLEXITY_OFFSET = S(   0, -133);

#undef S


}