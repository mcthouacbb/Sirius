#pragma once

#include "../defs.h"

namespace eval
{

// clang-format off
#define S(mg, eg) ScorePair(mg, eg)

constexpr ScorePair MATERIAL[6] = {S(  62,  143), S( 254,  404), S( 271,  417), S( 364,  744), S( 768, 1545), S(0, 0)};

constexpr ScorePair PSQT[6][64] = {
    {
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S( 119,    9), S(  16,   93), S(  23,   88), S(  57,   67), S(  56,   45), S(  55,   67), S(  30,   69), S(  78,   49),
        S(  16,   17), S(  24,   29), S(   8,   23), S(  20,   -1), S(  10,   -8), S(   1,    3), S( -10,   21), S(  -4,   16),
        S(  10,   14), S(  -3,   25), S(  -1,   -5), S(  12,  -11), S(  11,  -14), S(  -2,   -9), S(  -8,   15), S(  -6,   11),
        S(   4,    4), S(  -6,   21), S(  12,  -28), S(  19,  -15), S(  12,  -14), S(   2,  -14), S( -14,   14), S(  -8,   -1),
        S(   0,    1), S(  15,    9), S(  -2,   -5), S(   0,    0), S(  -4,   -3), S( -13,   -5), S( -22,   12), S( -18,   -6),
        S(   7,   -7), S(  28,    4), S(  29,   57), S(   4,   -6), S(   2,  -20), S(  -6,   -9), S( -16,    8), S( -11,   -7),
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
    },
    {
        S(-105,  -28), S(  12,  -13), S( -80,   33), S( -10,   17), S( -41,   26), S( -70,   39), S( -67,    4), S(-109,   -3),
        S( -13,   -9), S(   7,   11), S(  44,   -7), S(  20,   27), S(  26,   35), S(  22,   -5), S(   6,   -1), S(  -2,   -9),
        S( -10,   15), S(   3,   20), S(  20,   25), S(  19,   26), S(  12,   27), S(  19,   16), S(   9,    1), S(   3,   -9),
        S(  28,    4), S(  20,    8), S(  21,   23), S(  20,   22), S(  17,   31), S(  24,   16), S(  20,   -9), S(  11,   -7),
        S(  11,   10), S(  18,    1), S(  14,   18), S(  15,   23), S(  13,   19), S(  22,   13), S(  21,   -3), S(  10,  -12),
        S(   4,  -10), S(  18,   -9), S(  17,  -12), S(  11,   14), S(  10,   12), S(  -1,   -7), S(   5,  -12), S(  -5,  -22),
        S(  23,  -10), S(  13,    5), S(   3,  -11), S(   4,    1), S(   6,  -10), S(  -1,  -23), S(  -2,   -4), S( -12,  -31),
        S( -11,  -19), S(  -8,  -23), S(   0,  -22), S(  13,  -15), S(  -2,  -11), S( -11,  -34), S( -12,  -29), S( -34,  -53),
    },
    {
        S( -39,    1), S( -20,   19), S( -40,   10), S( -66,   18), S( -57,   20), S( -72,   12), S( -29,   25), S( -12,   -6),
        S( -16,   -1), S( -36,   15), S(   3,   15), S(  -5,   12), S( -26,   21), S(   3,    9), S( -10,  -11), S( -16,    1),
        S(  -4,   20), S(  13,    9), S(  49,   -1), S(  16,   18), S(  19,   12), S(  11,   -4), S(  27,    3), S(   9,   -3),
        S(  -6,   -6), S(   2,   15), S(  12,   15), S(  18,   23), S(  29,   16), S(  15,   14), S(   0,   20), S(  -3,    0),
        S(  20,  -20), S(  12,    3), S(   7,   16), S(  14,   13), S(  12,   26), S(   8,   14), S(  13,   -2), S(  10,  -13),
        S(  18,  -11), S(  25,   -4), S(   5,  -13), S(   5,   12), S(   2,   10), S(  -2,   -3), S(  24,  -11), S(   7,  -11),
        S(  25,  -33), S(  27,  -32), S(  25,  -17), S(   3,   -3), S(  -6,   -4), S(   7,  -16), S(   2,  -26), S(  22,  -30),
        S(  24,  -54), S( -13,   -4), S( -16,   -7), S(   9,  -12), S( -10,   -6), S(  -9,   -2), S(  -5,  -12), S(   0,  -10),
    },
    {
        S(  48,    2), S(  44,    9), S(  10,   25), S(   1,   30), S(   4,   28), S(  13,   23), S(   7,   27), S(  16,   20),
        S(  33,    9), S(  28,    9), S(  37,   10), S(  24,   19), S(  45,   11), S(  21,   20), S(  12,   20), S(  11,   24),
        S( -20,   28), S(  17,   19), S(  23,   21), S(  18,   18), S(  18,   15), S(  -3,   24), S(  17,   18), S(  -7,   30),
        S( -22,   20), S( -16,   25), S( -12,   26), S(   1,    8), S(  12,    6), S(  -2,   20), S(   6,   13), S( -15,   16),
        S( -41,    5), S(  -2,   -1), S( -25,   19), S( -15,    9), S( -13,    5), S( -22,   17), S( -19,   13), S( -25,    5),
        S( -31,  -14), S(   7,  -24), S(  -6,  -20), S( -12,  -20), S(  -6,  -22), S( -21,  -10), S( -13,  -22), S( -24,  -17),
        S( -17,  -33), S(   7,  -38), S(   4,  -33), S(  -7,  -26), S(   3,  -32), S(  -8,  -26), S( -14,  -33), S( -21,  -32),
        S( -17,  -36), S( -22,  -21), S(  -1,  -27), S(   6,  -37), S(   2,  -32), S(  -6,  -28), S(  -3,  -36), S(  -6,  -31),
    },
    {
        S(  12,   52), S(  33,   17), S(  13,   38), S( -17,   67), S(   3,   49), S( -10,   51), S(   5,   39), S(  -1,   21),
        S(  25,   18), S(  -2,   33), S(  14,   24), S( -35,   75), S(  -2,   54), S(   5,   30), S(   6,    0), S(  13,  -11),
        S(  -5,   33), S(  -1,   40), S(   1,   37), S( -28,   71), S( -13,   60), S(   9,   26), S(  17,    1), S(  14,    0),
        S(  -1,    7), S( -12,   31), S( -12,   18), S( -34,   64), S( -24,   75), S(   6,   20), S(   2,   16), S(  -1,   14),
        S( -12,   26), S(   3,    2), S( -15,   36), S( -14,   28), S( -20,   62), S(  -3,   23), S(   1,   15), S(  -2,    0),
        S(  -1,  -14), S(  11,  -22), S(   0,    1), S( -10,    3), S(  -2,    4), S(  -5,   16), S(  12,  -27), S(   7,  -19),
        S(   0,  -65), S(  23, -123), S(  11,  -59), S(   6,  -25), S(   0,  -13), S(   9,  -41), S(   9,  -33), S(   2,  -27),
        S(  41, -177), S(  26, -241), S(  -6, -103), S(   6,  -74), S(   3,  -51), S(   3,  -55), S(  -5,  -42), S(  -5,  -34),
    },
    {
        S(-103,  -98), S(  38,   33), S( -33,   41), S(-132,    6), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  71,  -28), S(  16,   66), S( -42,   48), S( -34,   36), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  56,   26), S(   3,   56), S( -20,   36), S(-103,   16), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  33,   24), S(  30,   53), S( -13,   26), S( -76,   12), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S( -11,   19), S(   3,   46), S( -11,   13), S( -72,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S( -11,    7), S(   8,   27), S( -18,   -1), S( -63,  -14), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  41,  -16), S(  35,    8), S(   5,  -23), S( -39,  -42), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  28,  -38), S(  33,   -8), S(   5,  -44), S(   9,  -90), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
    },
};

constexpr ScorePair MOBILITY[4][28] = {
    {S(   3,  -30), S( -40,  -57), S( -20,  -18), S( -10,    3), S(   0,   11), S(   5,   22), S(  10,   26), S(  19,   27), S(  27,   14), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S( -17,  -22), S( -32,  -67), S( -15,  -30), S(  -8,  -14), S(  -1,   -4), S(   2,    8), S(   4,   14), S(   5,   22), S(   5,   24), S(   8,   26), S(  10,   23), S(  16,   18), S(  25,    7), S(  -5,   -8), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S( -29,  -50), S( -36,  -83), S( -11,  -52), S(  -5,  -29), S(  -4,  -12), S(  -4,   -2), S(  -3,    5), S(   0,   11), S(   3,   15), S(   6,   23), S(   5,   29), S(   8,   38), S(  13,   38), S(   8,   41), S(  40,   19), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S( -17,  102), S( -14,   26), S( -85,   45), S( -49,  -34), S( -36,  -24), S( -23,    8), S( -19,    5), S( -20,   27), S( -19,   40), S( -18,   46), S( -17,   56), S( -14,   60), S( -13,   68), S( -13,   74), S( -13,   78), S( -11,   79), S( -11,   83), S(  -9,   77), S( -12,   83), S(  -4,   65), S(   8,   47), S(  44,  -18), S(  24,    4), S(  87, -115), S(  36,  -48), S( 160, -324), S(  50, -151), S(  18, -372)}
};

constexpr ScorePair THREAT_BY_PAWN[6] = {S(   4,  -33), S(  50,   31), S(  31,   68), S(  49,   42), S(  39,   14), S(   0,    0)};
constexpr ScorePair THREAT_BY_KNIGHT[2][6] = {
    {S(   7,   36), S(   0,   43), S(  23,   35), S(  67,    1), S(  26,   28), S(   0,    0)},
    {S(  -7,   11), S(   8,   49), S(  33,   26), S(  58,   35), S(  34,   50), S(   0,    0)}
};
constexpr ScorePair THREAT_BY_BISHOP[2][6] = {
    {S(   5,   33), S(  36,   28), S( -21,   51), S(  48,   27), S(  41,   49), S(   0,    0)},
    {S(  -3,    4), S(  18,   25), S( -23,   25), S(  42,   63), S(  23,  121), S(   0,    0)}
};
constexpr ScorePair THREAT_BY_ROOK[2][6] = {
    {S(   3,   43), S(  23,   53), S(  32,   43), S(  -5,  -61), S(  33,   44), S(   0,    0)},
    {S(  -7,    8), S(   2,   16), S(  10,    8), S(   4,  -85), S(  15,  126), S(   0,    0)}
};
constexpr ScorePair THREAT_BY_QUEEN[2][6] = {
    {S(   8,   22), S(  19,   24), S(  10,   61), S(   0,   36), S(  -7,  -36), S(  91,   19)},
    {S(  -2,   16), S(   0,   13), S(  -7,   24), S(  -5,   -4), S( -12,  -31), S(  42,  172)}
};
constexpr ScorePair THREAT_BY_KING[6] = {S(  22,   50), S(  -9,   36), S(  58,   38), S(  59,   10), S(   0,    0), S(   0,    0)};
constexpr ScorePair KNIGHT_HIT_QUEEN = S(   6,    4);
constexpr ScorePair BISHOP_HIT_QUEEN = S(  11,   21);
constexpr ScorePair ROOK_HIT_QUEEN = S(  17,   -4);
constexpr ScorePair PUSH_THREAT = S(  10,   19);
constexpr ScorePair RESTRICTED_SQUARES = S(   2,    2);

constexpr ScorePair ISOLATED_PAWN[8] = {S( -11,    6), S(  -6,  -17), S(  -8,  -10), S( -13,  -11), S( -14,  -11), S( -11,   -5), S(  -2,  -11), S( -14,    6)};
constexpr ScorePair DOUBLED_PAWN[8] = {S(  -3,  -59), S(  12,  -41), S(  -3,  -25), S( -10,  -11), S( -14,   -6), S(   4,  -16), S(   3,  -41), S(   5,  -72)};
constexpr ScorePair BACKWARDS_PAWN[8] = {S(   0,    0), S(  -8,  -13), S(  -2,  -13), S( -11,   -7), S(  19,  -19), S(  51,   -5), S(   0,    0), S(   0,    0)};
constexpr ScorePair PAWN_PHALANX[8] = {S(   0,    0), S(   4,   -3), S(  13,   -3), S(  24,    3), S(  47,   24), S(  87,  130), S(  94,  397), S(   0,    0)};
constexpr ScorePair DEFENDED_PAWN[8] = {S(   0,    0), S(   0,    0), S(  17,    3), S(  10,    2), S(  21,    8), S(  29,   49), S( 117,   74), S(   0,    0)};
constexpr ScorePair CANDIDATE_PASSER[2][8] = {
    {S(   0,    0), S( -53,   29), S( -12,  -16), S( -14,   16), S(   3,   27), S(  14,   88), S(   0,    0), S(   0,    0)},
    {S(   0,    0), S( -13,  -11), S(  -9,    7), S(  -7,   28), S(   1,   49), S(  48,   68), S(   0,    0), S(   0,    0)}
};

constexpr ScorePair PASSED_PAWN[2][2][8] = {
    {
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -34,  -20), S( -15,   34), S(  32,  112), S(  44,  182), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -28,  -35), S(   1,  -10), S(  28,   37), S( 112,   49), S(   0,    0)}
    },
    {
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -29,  -37), S(  -1,   -4), S(  45,   34), S(  87,   16), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -37,  -38), S(  -4,  -15), S(  24,   21), S(  14,   41), S(   0,    0)}
    }
};
constexpr ScorePair OUR_PASSER_PROXIMITY[8] = {S(  71,  119), S( 107,   81), S(  76,   57), S(   9,   48), S(   4,   26), S(   1,   18), S(   8,   11), S( -26,   27)};
constexpr ScorePair THEIR_PASSER_PROXIMITY[8] = {S( -43,  -17), S(  -8,  -13), S(  18,   -7), S(  18,   21), S(  12,   58), S(  21,   69), S(  35,   67), S(  21,   63)};
constexpr ScorePair PASSER_DEFENDED_PUSH[8] = {S(   0,    0), S(   0,    0), S(   0,    0), S(   3,    7), S(  14,   17), S(  50,   25), S(  49,   87), S(   0,    0)};

constexpr ScorePair PAWN_STORM[2][4][8] = {
    {
        {S(  28,   22), S( -46, -153), S( -30,  -36), S(  62,   -3), S(  28,   11), S(  -7,   20), S( -10,   23), S(   0,    0)},
        {S(  39,    7), S(  68,  -83), S(  76,  -59), S(  48,  -16), S(  38,    5), S( -26,   14), S(  14,   10), S(   0,    0)},
        {S(   1,    9), S(  80,  -85), S(  97,  -58), S(  73,  -11), S(  18,    7), S( -13,   10), S( -18,   13), S(   0,    0)},
        {S(   8,   -5), S( 111,  -98), S( 126,  -57), S(  59,   -8), S(  -1,    0), S( -33,   -7), S( -53,   10), S(   0,    0)}
    },
    {
        {S(   0,    0), S(   0,    0), S(  29,   37), S( -38,   31), S( -37,   31), S( -20,   42), S(  -2,   13), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S( 118,   14), S( -17,   22), S( -31,   34), S( -22,   48), S(  54,    9), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S( 117,   -5), S(   9,   20), S( -28,   32), S( -24,   32), S(  70,    5), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(  80,  -33), S(   8,   13), S( -34,   12), S( -25,    9), S( -72,   29), S(   0,    0)}
    }
};
constexpr ScorePair PAWN_SHIELD[4][8] = {
    {S(  38,   18), S( -30,   35), S( -20,   30), S(  35,   17), S(  39,    3), S(  11,    7), S(  32,  -21), S(   0,    0)},
    {S(  56,   13), S( -30,   23), S(  14,   16), S(  57,    1), S(  48,  -16), S(   4,   -5), S( -21,  -10), S(   0,    0)},
    {S(  23,    9), S(   0,   64), S(  -8,   -9), S(  35,  -25), S(  21,  -17), S(   2,   -1), S(-163,   12), S(   0,    0)},
    {S(   3,    6), S( -22,   -3), S( -18,   -9), S(  10,  -11), S(  15,  -15), S(  36,  -16), S(  -7,  -18), S(   0,    0)}
};
constexpr ScorePair SAFE_KNIGHT_CHECK = S(  68,   -2);
constexpr ScorePair SAFE_BISHOP_CHECK = S(  38,   14);
constexpr ScorePair SAFE_ROOK_CHECK = S(  92,    9);
constexpr ScorePair SAFE_QUEEN_CHECK = S(  48,    9);
constexpr ScorePair UNSAFE_KNIGHT_CHECK = S(  13,   -1);
constexpr ScorePair UNSAFE_BISHOP_CHECK = S(  34,    7);
constexpr ScorePair UNSAFE_ROOK_CHECK = S(  36,    1);
constexpr ScorePair UNSAFE_QUEEN_CHECK = S(  16,    4);
constexpr ScorePair QUEENLESS_ATTACK = S(-125,  306);
constexpr ScorePair KING_ATTACKER_WEIGHT[4] = {S(  58,   -7), S(  22,    0), S(  24,  -11), S(   2,  -17)};
constexpr ScorePair KING_ATTACKS = S(   6,    0);
constexpr ScorePair WEAK_KING_RING = S(   5,   -1);
constexpr ScorePair KING_FLANK_ATTACKS[2] = {S(  14,   -4), S(   8,   -1)};
constexpr ScorePair KING_FLANK_DEFENSES[2] = {S(  -6,    0), S(  -6,    0)};
constexpr ScorePair SAFETY_OFFSET = S(  48,  129);

constexpr ScorePair MINOR_BEHIND_PAWN = S(   3,   15);
constexpr ScorePair KNIGHT_OUTPOST = S(  13,   16);
constexpr ScorePair BISHOP_PAWNS[7] = {S(   6,   19), S(   4,   22), S(   3,   12), S(  -1,    3), S(  -3,   -7), S(  -4,  -18), S(  -7,  -33)};
constexpr ScorePair BISHOP_PAIR = S(  17,   62);
constexpr ScorePair LONG_DIAG_BISHOP = S(  13,   14);
constexpr ScorePair ROOK_OPEN[2] = {S(  22,   -1), S(  13,    5)};

constexpr ScorePair TEMPO = S(  14,   14);

constexpr ScorePair COMPLEXITY_PAWNS = S(   0,    9);
constexpr ScorePair COMPLEXITY_PAWNS_BOTH_SIDES = S(   0,  144);
constexpr ScorePair COMPLEXITY_PAWN_ENDGAME = S(   0,  128);
constexpr ScorePair COMPLEXITY_OFFSET = S(   0, -232);

#undef S
// clang-format on

}
