#pragma once

#include "../defs.h"

namespace eval
{

#define S(mg, eg) PackedScore(mg, eg)

constexpr PackedScore MATERIAL[6] = {S(  60,  129), S( 289,  445), S( 314,  451), S( 387,  812), S( 791, 1502), S(0, 0)};

constexpr PackedScore PSQT[6][64] = {
	{
		S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
		S(  64,   85), S(  31,   90), S(  34,   96), S(  55,   75), S(  65,   66), S(  30,   98), S(  32,  101), S(  63,   90),
		S(  26,   26), S(  31,   44), S(  31,   14), S(  56,  -20), S(  41,  -14), S(  26,    7), S(   3,   35), S(  10,   31),
		S(  18,   18), S(  10,   13), S(  12,   -5), S(  19,  -17), S(   7,  -17), S(   0,   -3), S(  -4,   12), S( -10,   21),
		S(   7,    4), S(   8,   10), S(   6,  -17), S(  14,  -13), S(   8,  -13), S(  -4,   -7), S( -12,    9), S( -16,    7),
		S(   0,    0), S(  10,   -3), S(   1,  -23), S(  -1,    1), S(  -7,    0), S( -15,   -7), S( -22,    3), S( -28,    5),
		S(  15,    3), S(  33,   -2), S(  15,   -9), S(   8,   10), S(  -5,    3), S(  -7,   -2), S( -12,   11), S( -18,   11),
		S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
	},
	{
		S( -70,  -85), S( -77,  -22), S( -28,  -16), S(  15,  -13), S( -35,    6), S( -69,    9), S(-114,   17), S( -86,  -40),
		S(  -3,  -11), S(  21,    1), S(  35,   -6), S(  13,    5), S(  18,    5), S(   1,   13), S(  -4,   19), S( -11,   10),
		S(  20,   -9), S(  14,   -4), S(  59,  -18), S(  40,    0), S(  22,    8), S(  12,    5), S(   3,    5), S(  -7,    5),
		S(  36,    2), S(  36,    6), S(  49,    5), S(  35,   13), S(  32,   16), S(  29,    8), S(  18,    4), S(   6,   17),
		S(   9,   15), S(  21,   10), S(  27,    7), S(  20,   20), S(  24,   13), S(  19,   13), S(  20,    3), S(   1,   12),
		S(   1,   -2), S(  16,   -4), S(   7,  -10), S(  16,    7), S(   5,    7), S(  -2,   -5), S(  -2,   -5), S( -15,   -1),
		S(   1,    6), S(   4,   -6), S(   3,   -7), S(   3,   -2), S(   3,   -3), S(  -9,   -6), S( -14,   -4), S( -21,   -1),
		S( -14,   -5), S( -14,    0), S(  -5,   -9), S(  -4,    3), S( -11,    0), S( -24,   -6), S( -17,   -2), S( -51,   10),
	},
	{
		S( -39,   -4), S( -36,    6), S( -15,    1), S( -75,   13), S( -71,   18), S( -53,    4), S( -27,    7), S( -17,   16),
		S( -21,   -6), S( -36,   11), S(  -7,   -2), S(  -1,   -1), S( -21,    8), S(   0,   -2), S(  -3,    0), S(  -3,   -6),
		S(  19,   12), S(  13,   -1), S(  41,    6), S(   9,    4), S(  14,    0), S(   5,    4), S(   6,    5), S(   6,    3),
		S(  -4,    5), S(   8,    8), S(   6,   11), S(  17,   14), S(  16,   20), S(  11,    5), S(   3,   10), S(  -8,    8),
		S(  13,   -5), S(   1,    8), S(   4,    7), S(   6,   11), S(  15,    9), S(  -5,   13), S(  -3,    6), S(  -1,    2),
		S(  21,  -11), S(  21,  -10), S(  11,   -3), S(   2,    7), S(  -5,    3), S(   5,    3), S(   9,    2), S(   0,   -6),
		S(  22,  -19), S(  29,  -24), S(  19,  -14), S(   3,   -5), S(  -5,    0), S(   7,  -18), S(   6,  -17), S(  13,   -7),
		S(  35,  -31), S(  18,  -20), S(  -5,    0), S(  13,   -3), S(  -1,   -2), S(   0,    7), S(  11,   -2), S(  12,   -7),
	},
	{
		S(   9,   10), S( -26,   37), S(  -1,   22), S( -13,   16), S( -28,   24), S( -23,   28), S( -12,   22), S(  -8,   19),
		S(  27,    0), S(  33,    5), S(  24,    9), S(   5,   12), S(  15,   15), S(   0,   27), S(  -3,   22), S(   0,   14),
		S(   9,    3), S(  44,    1), S(  34,    0), S(  25,    4), S(   3,   15), S(  -1,   25), S(  12,   19), S(  -8,   21),
		S(   2,   10), S(   5,   15), S(  17,   10), S(  11,    4), S(   1,   15), S(   5,   18), S(   5,   18), S( -10,   21),
		S(  -7,   -2), S(  12,    3), S(  -2,    6), S(   6,    1), S(  -6,    6), S(  -9,    9), S( -11,    9), S( -15,    8),
		S(   9,  -28), S(  19,  -27), S(   2,  -17), S(   1,  -17), S( -11,  -10), S( -16,  -10), S( -15,  -10), S( -20,   -8),
		S(  -5,  -31), S(  19,  -37), S(   5,  -26), S(   2,  -25), S(  -5,  -20), S(  -5,  -18), S( -16,  -14), S( -18,  -19),
		S(  -9,  -35), S(  -8,  -17), S(  -1,  -22), S(   5,  -28), S(  -2,  -24), S(  -9,  -16), S(  -9,  -21), S(  -9,  -17),
	},
	{
		S(   6,  -27), S(  45,  -51), S(   1,    9), S(  -3,   -2), S(  12,  -18), S( -16,    0), S( -40,   -1), S( -17,  -12),
		S(  35,    3), S(  -6,   13), S(  -1,   20), S( -36,   52), S( -27,   34), S(  -9,    8), S(  -7,  -13), S(   7,  -13),
		S(  14,    4), S(  16,    6), S(   7,   16), S(  -4,   25), S(   4,   17), S(   7,   14), S(   7,   -6), S(  19,   -9),
		S(  10,   19), S(   8,   40), S(   9,   13), S( -12,   34), S(  -9,   33), S(   6,    7), S(   4,   16), S(   2,    9),
		S(  12,    9), S(  15,   18), S(   1,   27), S(  -1,   29), S(  -6,   30), S(  -6,   24), S(   1,   17), S(  -2,    7),
		S(  13,  -21), S(  12,   -4), S(   3,    9), S(  -9,   23), S(  -9,   15), S(  -8,   17), S(   2,   -3), S(   2,  -12),
		S(  13,  -59), S(  17,  -67), S(   8,  -40), S(   3,   -5), S(   0,    2), S(   3,  -17), S(   1,  -20), S(   8,  -34),
		S(   5,  -51), S( -14,  -52), S( -18,  -23), S(  -8,  -17), S(  -8,  -11), S( -13,   -4), S( -15,  -13), S( -15,  -11),
	},
	{
		S(   3,  -66), S(   3,    0), S( -29,   -7), S( -22,   -9), S(   8,   -5), S(   8,   -5), S(   8,   -5), S(   8,   -5),
		S( -55,   32), S(   1,   59), S(  -7,   46), S(  28,   20), S(   8,   -5), S(   8,   -5), S(   8,   -5), S(   8,   -5),
		S( -24,   25), S(  25,   53), S(  33,   42), S(   2,   43), S(   8,   -5), S(   8,   -5), S(   8,   -5), S(   8,   -5),
		S( -62,   24), S( -22,   46), S( -17,   38), S( -46,   34), S(   8,   -5), S(   8,   -5), S(   8,   -5), S(   8,   -5),
		S( -80,   12), S( -34,   30), S( -23,   19), S( -46,   17), S(   8,   -5), S(   8,   -5), S(   8,   -5), S(   8,   -5),
		S( -38,   -4), S(   7,    8), S(  -9,   -2), S( -15,   -3), S(   8,   -5), S(   8,   -5), S(   8,   -5), S(   8,   -5),
		S(  24,  -27), S(  35,   -8), S(  13,  -15), S(  -3,  -18), S(   8,   -5), S(   8,   -5), S(   8,   -5), S(   8,   -5),
		S(  19,  -62), S(  24,  -27), S(   4,  -31), S(  14,  -51), S(   8,   -5), S(   8,   -5), S(   8,   -5), S(   8,   -5),
	},
};

constexpr PackedScore MOBILITY[4][28] = {
	{S( -11,  -20), S( -39,  -65), S( -14,  -32), S(  -6,   -5), S(   4,    7), S(   6,   18), S(  14,   26), S(  22,   33), S(  31,   33), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -21,  -31), S( -52,  -97), S( -30,  -37), S( -23,  -16), S( -11,   -3), S(  -4,    6), S(   1,   17), S(   6,   22), S(   8,   27), S(  14,   29), S(  15,   30), S(  28,   22), S(  30,   25), S(  49,    6), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -26,  -44), S(  16,  -72), S( -25,  -51), S( -13,  -31), S(  -7,  -23), S(  -3,   -5), S(   0,    0), S(  -5,   10), S(  -1,   13), S(   2,   19), S(   6,   26), S(   7,   35), S(  10,   40), S(  17,   42), S(  24,   40), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -34,    5), S( -51,  -81), S( -95,  -80), S( -76, -253), S( -73,  -96), S( -29,  -36), S( -22,   -8), S( -14,   -4), S(  -6,   -2), S(  -6,   22), S(  -4,   29), S(  -1,   38), S(   2,   42), S(   6,   45), S(   9,   47), S(  11,   49), S(  13,   49), S(  12,   56), S(  14,   55), S(  16,   55), S(  24,   47), S(  31,   32), S(  36,   28), S(  53,    7), S(  63,   -5), S(  65,  -11), S(  47,   -6), S(  17,  -26)}
};

constexpr PackedScore THREAT_BY_PAWN[6] = {S(   8,  -18), S(  63,   29), S(  61,   62), S(  77,   28), S(  73,  -10), S(   0,    0)};
constexpr PackedScore THREAT_BY_KNIGHT[2][6] = {
	{S(   8,   29), S(  27,   43), S(  39,   43), S(  74,   12), S(  47,  -21), S(   0,    0)},
	{S(  -4,   10), S(  13,   37), S(  28,   26), S(  63,   26), S(  54,   -8), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_BISHOP[2][6] = {
	{S(   1,   38), S(  43,   36), S(  -6,   37), S(  71,   16), S(  70,   64), S(   0,    0)},
	{S(   0,    8), S(  21,   19), S( -21,  -21), S(  43,   38), S(  47,  115), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_ROOK[2][6] = {
	{S(   2,   43), S(  19,   64), S(  29,   57), S(  18,  -51), S(  76,   11), S(   0,    0)},
	{S(  -8,    7), S(   3,   10), S(  13,   -4), S(  17, -102), S(  62,   40), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_QUEEN[2][6] = {
	{S(   7,   10), S(  24,   22), S(  10,   51), S(  15,    8), S(  11,  -57), S(  98,   35)},
	{S(  -1,   10), S(  -1,    1), S(  -9,   13), S(  -7,   -6), S( -20,  -81), S( 111,   56)}
};
constexpr PackedScore THREAT_BY_KING[6] = {S( -32,   48), S(   1,   51), S(  22,   43), S(  84,   19), S(   0,    0), S(   0,    0)};
constexpr PackedScore PUSH_THREAT = S(  16,   21);
constexpr PackedScore OVERLOADED_THREAT = S(   5,    8);

constexpr PackedScore ISOLATED_PAWN[8] = {S(  -5,   -2), S(  -5,  -12), S( -10,  -10), S( -10,  -16), S( -10,  -14), S(  -6,   -7), S(  -2,  -11), S(  -7,   -2)};
constexpr PackedScore PAWN_PHALANX[8] = {S(   0,    0), S(   6,   -3), S(  13,    3), S(  20,   16), S(  47,   61), S( 110,  227), S( -36,  357), S(   0,    0)};
constexpr PackedScore DEFENDED_PAWN[8] = {S(   0,    0), S(   0,    0), S(  21,   10), S(  13,    9), S(  13,   18), S(  21,   58), S( 131,   80), S(   0,    0)};

constexpr PackedScore PASSED_PAWN[2][2][8] = {
	{
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -32,  -36), S( -14,   25), S( -21,  152), S(  28,  241), S(   0,    0)},
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -20,  -49), S(  11,  -24), S(  15,   15), S(  60,   37), S(   0,    0)}
	},
	{
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -27,  -56), S(   0,  -27), S(  16,    1), S(  66,   -2), S(   0,    0)},
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -28,  -62), S(   1,  -37), S(  -7,  -19), S(  -3,  -19), S(   0,    0)}
	}
};
constexpr PackedScore OUR_PASSER_PROXIMITY[8] = {S(   0,    0), S(  46,   82), S(   1,   68), S(   0,   42), S(   3,   31), S(   9,   24), S(  19,   22), S(  11,   22)};
constexpr PackedScore THEIR_PASSER_PROXIMITY[8] = {S(   0,    0), S( -39,    6), S(  21,   -1), S(  13,   26), S(  17,   45), S(  10,   79), S(  12,   80), S(  12,   69)};

constexpr PackedScore PAWN_STORM[2][4][8] = {
	{
		{S(  15,   13), S(-133,  -51), S(  -1,   -9), S(   5,  -12), S(   0,    1), S(  -5,   10), S(  -3,    8), S(   0,    0)},
		{S(  11,    1), S(  -7, -105), S(  54,  -43), S(  10,  -10), S(   2,   -4), S( -10,    7), S(  -7,   11), S(   0,    0)},
		{S(  -2,    5), S(  61, -101), S(  71,  -45), S(  18,  -17), S(   3,   -1), S(  -8,    8), S(  -9,   12), S(   0,    0)},
		{S(   8,   -7), S( 105,  -86), S(  39,  -21), S(  14,   -1), S(  -2,    4), S(  -9,    0), S(  -3,    1), S(   0,    0)}
	},
	{
		{S(   0,    0), S(  -3,  -27), S( -30,  118), S(  17,  -52), S(  -2,    8), S(  -1,    6), S(  -5,   10), S(   0,    0)},
		{S(   0,    0), S(  -3,  -83), S(  -2,   68), S(  53,  -35), S(   3,    2), S(  -7,    6), S(  -8,   10), S(   0,    0)},
		{S(   0,    0), S(  -8,   12), S( -55, -109), S(  21,  -30), S(   2,    4), S(  -2,    7), S(  -9,   11), S(   0,    0)},
		{S(   0,    0), S( -13,  -55), S(  66,   -8), S(  23,   -2), S(   0,    9), S(   0,   -9), S(   0,    7), S(   0,    0)}
	}
};
constexpr PackedScore PAWN_SHIELD[4][8] = {
	{S(  16,    3), S(  -7,   26), S( -15,   15), S(  -2,    8), S(   3,   -1), S( -31,  -27), S( -79,  -33), S(   0,    0)},
	{S(  19,    2), S( -15,   11), S( -11,    2), S(  12,   -2), S(  10,   -9), S(  -3,  -16), S( -41,  -32), S(   0,    0)},
	{S(   9,   14), S( -15,    9), S(   5,   -9), S(   3,   -1), S(   2,    1), S(  10,  -12), S(  -5,  -38), S(   0,    0)},
	{S(  14,   -3), S(   5,   -1), S(  -4,    0), S(   0,   -6), S(   8,   -9), S(  29,  -21), S( -11,  -22), S(   0,    0)}
};
constexpr PackedScore SAFE_KNIGHT_CHECK = S(  82,   -2);
constexpr PackedScore SAFE_BISHOP_CHECK = S(  24,   11);
constexpr PackedScore SAFE_ROOK_CHECK = S(  60,    6);
constexpr PackedScore SAFE_QUEEN_CHECK = S(  24,   21);
constexpr PackedScore UNSAFE_KNIGHT_CHECK = S(   6,    2);
constexpr PackedScore UNSAFE_BISHOP_CHECK = S(  12,   12);
constexpr PackedScore UNSAFE_ROOK_CHECK = S(  21,    1);
constexpr PackedScore UNSAFE_QUEEN_CHECK = S(   6,   13);
constexpr PackedScore KING_ATTACKER_WEIGHT[4] = {S(  20,    1), S(  16,    2), S(  19,  -14), S(   6,   -1)};
constexpr PackedScore KING_ATTACKS[14] = {S( -44,   24), S( -52,   18), S( -60,   13), S( -64,   16), S( -63,   13), S( -56,    9), S( -40,    4), S( -20,   -5), S(  17,  -21), S(  40,  -20), S(  70,  -29), S(  82,   -3), S( 116,  -82), S(  82,   61)};

constexpr PackedScore MINOR_BEHIND_PAWN = S(   8,   14);
constexpr PackedScore KNIGHT_OUTPOST = S(  26,   19);
constexpr PackedScore BISHOP_PAWNS[7] = {S(   5,   24), S(   7,   22), S(   5,   13), S(   1,    5), S(  -2,   -5), S(  -3,  -19), S(  -8,  -34)};
constexpr PackedScore BISHOP_PAIR = S(  20,   62);
constexpr PackedScore ROOK_OPEN[2] = {S(  26,    3), S(  14,    3)};

constexpr PackedScore TEMPO = S(  32,   35);

constexpr PackedScore COMPLEXITY_PAWNS = S(   0,    8);
constexpr PackedScore COMPLEXITY_PASSERS = S(   0,    1);
constexpr PackedScore COMPLEXITY_PAWNS_BOTH_SIDES = S(   0,   69);
constexpr PackedScore COMPLEXITY_PAWN_ENDGAME = S(   0,   62);
constexpr PackedScore COMPLEXITY_OFFSET = S(   0, -132);

#undef S


}