#pragma once

#include "../defs.h"

namespace eval
{

// clang-format off
#define S(mg, eg) ScorePair(mg, eg)

constexpr ScorePair MATERIAL[6] = {S(  69,  142), S( 344,  473), S( 363,  492), S( 468,  851), S( 975, 1760), S(0, 0)};

constexpr ScorePair PSQT[6][64] = {
    {
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  72,   77), S(  38,   88), S(  18,   82), S(  64,   78), S(  64,   60), S(  38,   76), S(  36,   93), S(  86,   79),
        S(  16,    2), S(  -5,   23), S(   3,   -9), S(   5,  -11), S(   6,  -25), S(  -9,   -8), S( -11,   12), S(   1,    7),
        S(   7,    8), S(   8,   24), S(  13,    0), S(  11,  -14), S(   4,  -14), S(   3,  -12), S(   2,   11), S(  -3,    4),
        S(  -3,   -8), S(  -4,   18), S(  15,  -18), S(  16,  -22), S(  11,  -19), S(   4,  -15), S( -14,   14), S( -15,   -7),
        S( -11,  -11), S(  11,   10), S(   1,    6), S(   4,   -2), S(  -7,    0), S(  -9,   -3), S( -17,   12), S( -23,  -10),
        S(  -3,  -11), S(  25,    8), S(  26,   28), S(   2,   12), S(  -6,    4), S(  -4,    0), S(  -8,   14), S( -18,   -7),
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
    },
    {
        S( -76, -124), S( -45,   24), S(-120,   38), S(  -5,    8), S( -18,    9), S( -99,   23), S(-118,   32), S(-124,  -80),
        S(  12,  -19), S(  16,    0), S(  33,    7), S(  30,   17), S(  36,   11), S(  26,    5), S(  -4,   11), S(  -7,   -5),
        S(  11,    3), S(  23,    5), S(  42,    8), S(  38,   10), S(  24,   19), S(  24,   14), S(   5,    9), S(   1,    2),
        S(  26,   10), S(  36,    7), S(  38,   18), S(  33,   28), S(  35,   24), S(  24,   14), S(  25,    1), S(  15,    3),
        S(  22,    6), S(  19,   18), S(  25,   16), S(  23,   25), S(  22,   22), S(  19,   15), S(  19,    5), S(   4,    3),
        S(   3,   -7), S(  21,   -7), S(  19,   -2), S(  16,   16), S(  12,   13), S(   0,    0), S(   3,   -6), S( -12,  -14),
        S(   7,   -7), S(   4,    0), S(   9,  -15), S(  11,   -3), S(   2,   -1), S(  -3,  -11), S( -11,   -4), S( -29,  -15),
        S( -31,  -31), S( -14,  -21), S(  -1,  -19), S(   3,   -5), S(  -1,  -12), S( -15,  -17), S( -21,  -24), S( -49,  -30),
    },
    {
        S( -34,  -26), S( -35,   15), S(-109,   25), S( -55,   16), S( -90,   33), S( -44,   24), S( -41,   32), S( -34,   -5),
        S( -13,    0), S( -43,    6), S( -16,   15), S( -28,   19), S( -11,   17), S(  -7,    4), S( -15,   -8), S(  -8,   -6),
        S(  24,   -9), S(  12,   10), S(  18,   10), S(  24,   14), S(  22,   10), S(  11,    0), S(  21,    3), S(  11,   -9),
        S(   2,    3), S(   9,   16), S(  17,   13), S(  23,   27), S(  23,   33), S(  18,   13), S(  10,   12), S(   7,  -10),
        S(  14,   -6), S(  12,    3), S(   8,   16), S(  19,   16), S(  21,   19), S(  17,    9), S(  16,    0), S(  17,  -24),
        S(  17,   -8), S(  25,   -3), S(  10,   -6), S(   8,   14), S(  10,    5), S(   1,   -5), S(  21,    0), S(   9,   -9),
        S(  12,  -18), S(  23,  -27), S(  22,  -17), S(   8,   -5), S(  -4,   -4), S(  12,  -18), S(   2,  -26), S(  25,  -25),
        S(   4,  -32), S(  11,  -17), S( -18,   -2), S(   6,  -13), S(   8,  -20), S( -10,   -5), S(  13,  -25), S(   3,  -21),
    },
    {
        S(  34,    2), S(  24,   15), S(   7,   28), S(   8,   30), S(  10,   27), S(  15,   19), S(  28,   15), S(  16,   24),
        S(  12,   20), S(  18,   20), S(  18,   23), S(  11,   32), S(  31,   23), S(  15,   28), S(   6,   28), S(  19,   21),
        S(  -7,   12), S(  14,   16), S(  18,   10), S(  10,   16), S(  26,    5), S(   6,   14), S(  10,   15), S(   3,   20),
        S( -11,    9), S( -14,   24), S(   2,   18), S(  -4,   16), S(   6,    8), S(   5,   11), S(  -1,   13), S( -14,   20),
        S( -17,   -9), S( -15,   14), S(  -7,    8), S(  -7,    6), S(  -8,    1), S(  -8,    8), S( -17,    5), S( -17,    2),
        S( -23,  -26), S(   0,  -20), S(   0,  -13), S(  -7,  -12), S(  -2,  -19), S( -11,  -12), S(  -9,  -16), S( -16,  -19),
        S( -65,  -26), S( -10,  -36), S(   6,  -33), S(   1,  -27), S(   1,  -29), S(  -1,  -27), S( -16,  -26), S( -21,  -29),
        S( -17,  -40), S( -27,  -19), S(   8,  -29), S(  14,  -34), S(   6,  -32), S(  -4,  -23), S(   0,  -32), S(  -1,  -29),
    },
    {
        S(   7,   25), S(  28,   10), S(  20,   39), S(  12,   30), S(  35,   19), S(  39,   -4), S(  31,   -7), S( -12,   32),
        S(  38,    2), S(  30,   -5), S(  14,    9), S( -25,   56), S(   6,   30), S(  11,    8), S(  26,  -28), S(  20,  -17),
        S(  -2,   26), S(  16,   15), S(   3,   23), S( -13,   29), S(   6,   25), S(   9,   10), S(  21,   -9), S(  19,   -7),
        S(   1,   18), S( -15,   29), S( -11,   20), S( -26,   40), S( -20,   47), S(  -5,   20), S(   2,   11), S(   9,   -5),
        S( -15,   29), S(  -6,   15), S( -16,   21), S( -18,   32), S( -18,   35), S(  -6,   16), S(  -4,   12), S(  -8,   19),
        S(  -7,   -1), S(   2,  -14), S(  -6,    0), S( -14,    5), S(  -7,    2), S(  -6,    8), S(   8,   -9), S(  -2,   -1),
        S( -14,  -46), S(   3,  -72), S(  -2,  -55), S(  -5,  -21), S(  -9,   -8), S(   2,  -27), S(  -7,  -12), S(  -1,  -17),
        S(   9,  -77), S( -21,  -83), S( -20,  -67), S( -23,  -31), S(  -9,  -31), S( -19,  -21), S( -15,  -33), S( -18,  -14),
    },
    {
        S( -41,  -80), S(  23,   91), S( -40,   68), S( -38,   52), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(   5,   27), S(   0,  128), S(  -9,   57), S(  -4,   51), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  22,   65), S(  36,  114), S( -17,   36), S( -86,  -12), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S( -53,   66), S( -33,  106), S( -67,   27), S(-126,  -21), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S( -62,   49), S( -45,   81), S( -62,    9), S(-101,  -35), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(   1,   23), S(   0,   52), S( -38,  -15), S( -62,  -51), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  61,   -7), S(  47,   24), S(  11,  -46), S( -16,  -85), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  54,  -39), S(  56,    1), S(  13,  -68), S(   9, -128), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
    },
};

constexpr ScorePair MOBILITY[4][28] = {
    {S(  -7,  -28), S( -39,  -59), S( -24,  -18), S(  -9,   -1), S(   0,   13), S(   8,   22), S(  15,   26), S(  24,   29), S(  36,   16), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S(   0,  -38), S( -45,  -64), S( -28,  -30), S( -14,  -12), S(  -7,    2), S(  -1,   12), S(   1,   20), S(   3,   25), S(   3,   29), S(   8,   27), S(   9,   27), S(  21,   12), S(  19,   20), S(  36,  -28), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S( -28,  -66), S( -65,  -72), S( -22,  -46), S( -13,  -26), S(  -4,  -16), S(   2,   -4), S(   2,    7), S(   6,   13), S(   8,   16), S(   9,   25), S(  11,   32), S(  12,   40), S(  14,   46), S(  16,   47), S(  58,    9), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S(  -1,   12), S( -14,  -24), S(  -8, -115), S( -43, -154), S( -48,  -64), S( -13,  -73), S( -15,  -30), S(  -5,  -27), S(  -7,   -2), S(  -6,    8), S(  -1,   17), S(  -2,   29), S(   1,   31), S(   3,   37), S(   4,   41), S(   6,   45), S(   8,   44), S(   9,   46), S(   9,   45), S(  11,   45), S(  16,   39), S(  22,   30), S(  15,   33), S(  28,   12), S(  37,    0), S(  18,   -6), S( -11,   11), S(   0,  -12)}
};

constexpr ScorePair THREAT_BY_PAWN[6] = {S( -13,   -8), S(  78,   46), S(  72,   76), S(  82,   58), S(  63,   24), S(   0,    0)};
constexpr ScorePair THREAT_BY_KNIGHT[2][6] = {
    {S(   7,   37), S(   6,   53), S(  49,   38), S(  82,   19), S(  42,   14), S(   0,    0)},
    {S(  -8,   11), S(  13,   33), S(  42,   28), S(  72,   47), S(  60,   32), S(   0,    0)}
};
constexpr ScorePair THREAT_BY_BISHOP[2][6] = {
    {S(   1,   35), S(  45,   45), S(  -3,   21), S(  54,   50), S(  69,   61), S(   0,    0)},
    {S(  -4,    2), S(  23,   21), S(  -3,   -9), S(  61,   72), S(  49,  128), S(   0,    0)}
};
constexpr ScorePair THREAT_BY_ROOK[2][6] = {
    {S(  -2,   52), S(  43,   49), S(  55,   40), S(   1,  -62), S(  67,    0), S(   0,    0)},
    {S(  -9,    9), S(  10,   16), S(  25,    2), S(  14, -100), S(  51,   98), S(   0,    0)}
};
constexpr ScorePair THREAT_BY_QUEEN[2][6] = {
    {S(   7,   26), S(  24,   33), S(  23,   51), S(   7,   25), S(  11,  -70), S( 154,   57)},
    {S(  -6,   19), S(   0,   12), S(  -5,   26), S(  -5,   -1), S(  -8,  -62), S( 157,   78)}
};
constexpr ScorePair THREAT_BY_KING[6] = {S(  53,   14), S(  22,   37), S( 106,   30), S(  85,    5), S(   0,    0), S(   0,    0)};
constexpr ScorePair KNIGHT_HIT_QUEEN = S(   6,    2);
constexpr ScorePair BISHOP_HIT_QUEEN = S(  17,   14);
constexpr ScorePair ROOK_HIT_QUEEN = S(  21,   -6);
constexpr ScorePair PUSH_THREAT = S(  14,   20);
constexpr ScorePair RESTRICTED_SQUARES = S(   3,    2);

constexpr ScorePair ISOLATED_PAWN[8] = {S(  -3,    4), S(  -4,  -18), S(  -9,  -10), S( -10,  -17), S( -12,  -15), S(  -9,   -7), S(  -4,  -14), S( -10,    5)};
constexpr ScorePair DOUBLED_PAWN[8] = {S(  -7,  -55), S(   6,  -49), S(  -7,  -25), S( -10,  -12), S( -14,   -6), S(  -3,  -26), S(   0,  -44), S(   8,  -58)};
constexpr ScorePair BACKWARDS_PAWN[8] = {S(   0,    0), S(  -8,  -14), S(   1,  -16), S(  -6,  -14), S(   4,  -12), S(  27,   11), S(   0,    0), S(   0,    0)};
constexpr ScorePair PAWN_PHALANX[8] = {S(   0,    0), S(   6,   -5), S(  13,   -3), S(  20,   12), S(  36,   43), S(  79,  138), S( 170,  155), S(   0,    0)};
constexpr ScorePair DEFENDED_PAWN[8] = {S(   0,    0), S(   0,    0), S(  20,    4), S(  12,    9), S(  19,   23), S(  45,   60), S( 119,  112), S(   0,    0)};
constexpr ScorePair CANDIDATE_PASSER[2][8] = {
    {S(   0,    0), S( -26,   -9), S(  -8,  -11), S(   2,   -8), S(  16,   17), S(  44,   91), S(   0,    0), S(   0,    0)},
    {S(   0,    0), S( -12,   -8), S(  -5,    6), S(  -6,   28), S(  14,   38), S(  55,  108), S(   0,    0), S(   0,    0)}
};

constexpr ScorePair PASSED_PAWN[2][2][8] = {
    {
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -37,  -32), S( -18,   23), S(  36,  136), S( 149,  204), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -28,  -44), S(  -6,  -16), S(  38,   58), S(  88,   84), S(   0,    0)}
    },
    {
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -32,  -46), S( -11,  -13), S(  38,   55), S(  46,   41), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -30,  -59), S(  -7,  -29), S(  26,   33), S(  -2,   38), S(   0,    0)}
    }
};
constexpr ScorePair OUR_PASSER_PROXIMITY[8] = {S( 110,   85), S( 119,   64), S(  49,   70), S(   3,   61), S(   1,   36), S(   3,   24), S(  16,   16), S(   6,   20)};
constexpr ScorePair THEIR_PASSER_PROXIMITY[8] = {S( -60,   12), S(   2,    2), S(  25,    4), S(  24,   25), S(  20,   57), S(  19,   73), S(  30,   72), S(  23,   65)};
constexpr ScorePair PASSER_DEFENDED_PUSH[8] = {S(   0,    0), S(   0,    0), S(   0,    0), S(   4,   10), S(  15,   18), S(  34,   39), S(  66,  101), S(   0,    0)};

constexpr ScorePair PAWN_STORM[2][4][8] = {
    {
        {S(  30,   36), S( -54, -157), S( -33,  -48), S(  47,   12), S(  21,   32), S(   1,   37), S(  -2,   41), S(   0,    0)},
        {S(  21,   17), S(  46, -154), S(  69,  -81), S(  36,   -6), S(  12,   12), S( -26,   21), S(   5,   21), S(   0,    0)},
        {S(   3,   15), S(  59, -117), S( 119,  -70), S(  62,   -8), S(   9,   19), S( -15,   23), S(  -3,   21), S(   0,    0)},
        {S(   6,   -9), S( 107, -158), S( 126,  -92), S(  67,  -14), S(   9,    1), S( -27,   -2), S( -26,   -3), S(   0,    0)}
    },
    {
        {S(   0,    0), S(   0,    0), S(  80,   52), S(  -7,   35), S(  -2,   43), S(  12,   56), S(  21,   41), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S( 145,   44), S( -31,   28), S( -29,   43), S( -11,   52), S(  32,   30), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S( 149,   12), S(   2,   26), S( -17,   41), S(  -3,   48), S(  44,    3), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S( 136,   16), S(  23,   14), S( -17,   21), S( -14,   10), S(  -9,  -29), S(   0,    0)}
    }
};
constexpr ScorePair PAWN_SHIELD[4][8] = {
    {S(  57,   38), S(  -7,   55), S( -15,   43), S(  25,   36), S(  42,   22), S(   4,   22), S( -19,   22), S(   0,    0)},
    {S(  40,   23), S( -32,   27), S(   6,   26), S(  41,   13), S(  42,    5), S(  -7,   -8), S(   1,  -36), S(   0,    0)},
    {S(  25,   19), S(  -6,   42), S(   9,   17), S(  39,    2), S(  40,   -1), S(  15,  -12), S( -76,   -9), S(   0,    0)},
    {S(  13,    2), S( -25,   -7), S(   4,  -20), S(  29,  -27), S(  20,  -19), S(  30,  -11), S(  14,  -17), S(   0,    0)}
};
constexpr ScorePair SAFE_KNIGHT_CHECK = S(  94,    3);
constexpr ScorePair SAFE_BISHOP_CHECK = S(  67,   23);
constexpr ScorePair SAFE_ROOK_CHECK = S( 107,   13);
constexpr ScorePair SAFE_QUEEN_CHECK = S(  62,   22);
constexpr ScorePair UNSAFE_KNIGHT_CHECK = S(  16,    1);
constexpr ScorePair UNSAFE_BISHOP_CHECK = S(  35,   11);
constexpr ScorePair UNSAFE_ROOK_CHECK = S(  44,    1);
constexpr ScorePair UNSAFE_QUEEN_CHECK = S(  19,    6);
constexpr ScorePair QUEENLESS_ATTACK = S(-141,  211);
constexpr ScorePair KING_ATTACKER_WEIGHT[4] = {S(  62,   -2), S(  25,   -1), S(  26,  -12), S(   7,  -13)};
constexpr ScorePair KING_ATTACKS = S(   7,    0);
constexpr ScorePair WEAK_KING_RING = S(   3,    1);
constexpr ScorePair KING_FLANK_ATTACKS[2] = {S(  14,   -5), S(   3,    1)};
constexpr ScorePair KING_FLANK_DEFENSES[2] = {S(  -8,    0), S(  -7,    4)};
constexpr ScorePair SAFETY_OFFSET = S(  73,  164);

constexpr ScorePair MINOR_BEHIND_PAWN = S(   3,   12);
constexpr ScorePair KNIGHT_OUTPOST = S(  17,   19);
constexpr ScorePair BISHOP_PAWNS[7] = {S(  11,    3), S(   5,   17), S(   4,   11), S(   1,    4), S(  -1,   -3), S(  -5,   -9), S(  -9,  -20)};
constexpr ScorePair BISHOP_PAIR = S(  25,   71);
constexpr ScorePair LONG_DIAG_BISHOP = S(  14,   11);
constexpr ScorePair ROOK_OPEN[2] = {S(  35,   -1), S(  20,    3)};

constexpr ScorePair TEMPO = S(  27,   16);

constexpr ScorePair COMPLEXITY_PAWNS = S(   0,   11);
constexpr ScorePair COMPLEXITY_PAWNS_BOTH_SIDES = S(   0,  174);
constexpr ScorePair COMPLEXITY_PAWN_ENDGAME = S(   0,  157);
constexpr ScorePair COMPLEXITY_OFFSET = S(   0, -275);

#undef S
// clang-format on

}
