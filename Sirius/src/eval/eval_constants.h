#pragma once

#include "../defs.h"

namespace eval
{

#define S(mg, eg) PackedScore(mg, eg)

constexpr PackedScore MATERIAL[6] = {S(   2,   57), S( 292,  328), S( 263,  361), S( 440,  633), S( 733, 1071), S(0, 0)};

constexpr PackedScore PSQT[6][64] = {
	{
		S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
		S(  20,   88), S(  46,   87), S(  90,   90), S( 102,   70), S(  99,   62), S(  79,   67), S(  53,   85), S(  44,   80),
		S(  30,   35), S(  46,   54), S(  74,   13), S(  40,    5), S(  32,    2), S(  27,   11), S(  -2,   52), S(  -5,   38),
		S(  14,    9), S(   8,   25), S(  25,   -3), S(  14,   -6), S(  -2,   -5), S(  -6,    2), S( -13,   25), S( -15,   19),
		S(   7,   -6), S(   2,   16), S(  16,   -9), S(   6,   -5), S(   0,   -6), S(  -7,   -4), S( -19,   18), S( -20,    1),
		S(  15,  -19), S(  18,   -1), S(   0,   -4), S(  -1,   -1), S( -13,    0), S( -17,  -11), S( -27,    5), S( -31,   -8),
		S(  31,  -27), S(  54,   -6), S(  40,   -9), S(   2,   11), S( -14,    1), S( -13,   -4), S( -20,   11), S( -23,   -4),
		S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
	},
	{
		S( -76,  -47), S( -54,   -5), S(  -2,  -15), S(  16,   -5), S( -23,    7), S( -69,   14), S( -97,   21), S( -90,  -22),
		S(   0,   -2), S(  27,   -2), S(  27,  -13), S(  10,   -3), S(  10,    2), S(  -2,    2), S(  -9,   17), S( -14,    9),
		S(  27,   -5), S(  11,   -5), S(  58,  -23), S(  29,   -7), S(  16,   -1), S(  12,   -4), S(   2,    0), S(  -6,    2),
		S(  39,    4), S(  35,    4), S(  49,   -3), S(  34,    7), S(  37,    6), S(  28,    1), S(  16,    0), S(   7,   15),
		S(  10,   16), S(  26,    6), S(  28,    2), S(  25,   15), S(  28,    8), S(  19,    8), S(  20,    1), S(   0,   12),
		S(  -1,    1), S(  16,   -9), S(   5,  -20), S(  18,    4), S(   4,    4), S(  -4,  -15), S(  -6,   -9), S( -18,   -1),
		S(   4,   14), S(   5,    5), S(   8,   -7), S(   2,   -7), S(   2,  -10), S( -12,   -7), S( -15,    2), S( -21,   10),
		S( -21,   33), S( -13,    3), S(  -1,   -6), S(  -4,    3), S( -12,   -3), S( -25,   -5), S( -16,   -4), S( -59,   31),
	},
	{
		S( -42,    1), S( -36,   13), S( -14,   -2), S( -68,   10), S( -64,   12), S( -56,    4), S( -29,    8), S( -10,   11),
		S( -42,    7), S( -59,   16), S( -20,    2), S( -14,   -6), S( -27,    3), S(  -7,   -5), S(  -9,   -2), S( -13,   -4),
		S(  16,   13), S(  17,    4), S(  32,    6), S(   6,    4), S(  15,   -9), S(   4,    1), S(   9,    1), S(   2,    4),
		S(   1,    6), S(   9,    6), S(  12,   11), S(  15,   12), S(  24,   14), S(  12,    2), S(   3,    8), S(  -9,    6),
		S(  21,  -11), S(   6,    6), S(  11,    2), S(  17,   10), S(  17,    8), S(   2,   10), S(  -2,    5), S(   0,    2),
		S(  21,  -11), S(  24,  -13), S(  12,   -5), S(   8,    5), S(  -1,    5), S(   5,    2), S(  12,    1), S(   0,   -6),
		S(  27,  -17), S(  33,  -22), S(  27,  -16), S(   4,   -5), S(  -4,   -3), S(  11,  -20), S(   6,  -19), S(  22,   -6),
		S(  36,  -28), S(  22,   -7), S(  -3,    5), S(  15,   -6), S(  -1,   -4), S(   5,    4), S(  16,    4), S(  12,   -5),
	},
	{
		S(  21,    2), S( -22,   27), S(   3,   18), S(  -5,   13), S( -32,   28), S( -24,   27), S( -12,   18), S( -15,   19),
		S(  44,   -8), S(  42,    0), S(  28,    5), S(   9,    9), S(  19,   10), S(   3,   20), S(  -4,   17), S(  -7,   13),
		S(  26,   -7), S(  58,   -9), S(  42,   -9), S(  22,    2), S(   6,    6), S(   1,   14), S(  14,    8), S( -12,   15),
		S(  13,    2), S(  17,    4), S(  21,    1), S(  15,    1), S(   4,    7), S(   6,   11), S(   5,    9), S( -11,   16),
		S(  -6,   -1), S(  20,    1), S(  -1,    4), S(   5,    3), S(  -5,    5), S( -11,    8), S( -13,    7), S( -19,    8),
		S(   5,  -20), S(  21,  -23), S(  -2,  -12), S(  -1,  -10), S( -16,   -2), S( -21,   -7), S( -19,   -7), S( -26,   -4),
		S( -15,  -23), S(  18,  -29), S(   4,  -20), S(  -4,  -16), S( -11,  -13), S( -13,  -11), S( -22,   -8), S( -28,  -10),
		S( -23,  -20), S( -15,   -6), S(  -8,  -12), S(  -3,  -18), S( -11,  -15), S( -19,   -9), S( -17,  -15), S( -19,  -10),
	},
	{
		S(   0,    4), S(  39,  -21), S(  -6,   22), S( -11,   22), S(  -8,   13), S( -29,   30), S( -48,   26), S( -30,   20),
		S(  43,    9), S(  -4,   18), S(   6,   32), S( -30,   60), S( -22,   42), S(  -8,   18), S( -15,    7), S(  -3,   10),
		S(  19,   16), S(  24,    9), S(   4,   24), S(  -8,   37), S(  -2,   27), S(   2,   16), S(   1,    6), S(  10,    5),
		S(  18,   22), S(   7,   40), S(  13,   20), S( -11,   28), S(  -6,   26), S(   9,    5), S(   3,   18), S(   1,   17),
		S(  17,    8), S(  20,    7), S(   7,   17), S(   9,   16), S(  -3,   11), S(   1,    7), S(   4,    8), S(   0,    6),
		S(  17,  -26), S(  16,  -20), S(   7,   -7), S(  -3,    7), S(  -3,    0), S(  -5,   -6), S(   4,  -15), S(   3,  -20),
		S(  14,  -57), S(  19,  -73), S(  15,  -54), S(   7,  -23), S(   4,  -22), S(   5,  -33), S(   2,  -41), S(   9,  -43),
		S(   5,  -52), S( -19,  -42), S( -18,  -27), S(  -6,  -30), S(  -6,  -32), S( -12,  -26), S( -14,  -28), S( -15,  -33),
	},
	{
		S(  62,  -51), S(  29,   -4), S(   8,   -6), S(   5,  -12), S(  -1,    0), S(  -1,    0), S(  -1,    0), S(  -1,    0),
		S( -35,   24), S(  36,   23), S(  28,   18), S(  83,  -12), S(  -1,    0), S(  -1,    0), S(  -1,    0), S(  -1,    0),
		S( -32,   12), S(  50,   12), S(  62,    5), S(  60,   -2), S(  -1,    0), S(  -1,    0), S(  -1,    0), S(  -1,    0),
		S( -61,    5), S(  -6,    6), S(  -2,    6), S(   3,   -6), S(  -1,    0), S(  -1,    0), S(  -1,    0), S(  -1,    0),
		S(-100,    7), S( -36,    8), S( -15,    3), S( -21,    0), S(  -1,    0), S(  -1,    0), S(  -1,    0), S(  -1,    0),
		S( -67,    7), S(  -2,    1), S( -12,    5), S(   3,   -1), S(  -1,    0), S(  -1,    0), S(  -1,    0), S(  -1,    0),
		S(  -1,   -4), S(  21,    3), S(   9,    7), S(   5,    3), S(  -1,    0), S(  -1,    0), S(  -1,    0), S(  -1,    0),
		S(  -7,  -23), S(   3,    3), S( -22,   17), S( -12,   -0), S(  -1,    0), S(  -1,    0), S(  -1,    0), S(  -1,    0),
	},
};

constexpr PackedScore IMBALANCE_US[5][5] = {
	{S(   4,   10), S(   8,   43), S(  13,   31), S(  13,   54), S(   1,  111)},
	{S(   0,    0), S(  -5,  -19), S( -10,  -29), S(   0,  -42), S(  -1,  -67)},
	{S(   0,    0), S(   0,    0), S(  -7,  -19), S(   6,  -46), S( -29,  -55)},
	{S(   0,    0), S(   0,    0), S(   0,    0), S(  15,  -65), S(   6, -153)},
	{S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S( -89,  -29)}
};
constexpr PackedScore IMBALANCE_THEM[5][5] = {
	{S(   0,    0), S( -11,  -42), S(  -7,  -52), S(   0,  -74), S( -10, -157)},
	{S(   0,    0), S(   0,    0), S(  -9,   -3), S(  23,  -12), S( -70,  -75)},
	{S(   0,    0), S(   0,    0), S(   0,    0), S(  38,   14), S( -10,  -69)},
	{S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S( -36, -161)},
	{S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)}
};
constexpr PackedScore MOBILITY[4][28] = {
	{S( -31, -150), S( -56, -237), S( -33, -188), S( -23, -157), S( -12, -139), S(  -9, -124), S(  -0, -114), S(   9, -106), S(  17, -105), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -50,  -98), S( -85, -189), S( -62, -126), S( -55,  -98), S( -42,  -83), S( -34,  -72), S( -29,  -60), S( -24,  -53), S( -21,  -48), S( -18,  -44), S( -18,  -41), S( -10,  -46), S( -16,  -41), S(  -7,  -48), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -21, -211), S(  32, -261), S( -11, -249), S(  -1, -227), S(   6, -218), S(  12, -199), S(  17, -192), S(  11, -180), S(  16, -177), S(  20, -170), S(  25, -165), S(  26, -156), S(  29, -152), S(  38, -152), S(  45, -157), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S(-271, -563), S(-287, -650), S(-345, -620), S(-330, -764), S(-309, -686), S(-254, -654), S(-244, -630), S(-237, -624), S(-229, -615), S(-228, -588), S(-226, -577), S(-222, -565), S(-219, -557), S(-215, -553), S(-212, -549), S(-209, -544), S(-207, -539), S(-208, -532), S(-208, -526), S(-208, -520), S(-201, -524), S(-199, -525), S(-191, -530), S(-174, -542), S(-166, -546), S(-156, -550), S(-134, -570), S(-274, -501)}
};

constexpr PackedScore THREAT_BY_PAWN[6] = {S(   8,  -16), S(  68,   36), S(  69,   66), S(  91,   11), S(  80,  -19), S(   0,    0)};
constexpr PackedScore THREAT_BY_KNIGHT[2][6] = {
	{S(   9,   28), S(  33,   32), S(  40,   40), S(  79,    7), S(  47,  -21), S(   0,    0)},
	{S(  -4,   11), S(  15,   50), S(  33,   34), S(  67,   29), S(  57,   -1), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_BISHOP[2][6] = {
	{S(   5,   35), S(  52,   29), S(  -1,   43), S(  75,    6), S(  77,   36), S(   0,    0)},
	{S(   1,    9), S(  23,   30), S( -15,   15), S(  48,   39), S(  55,  123), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_ROOK[2][6] = {
	{S(  -2,   47), S(  33,   52), S(  30,   60), S(  13,  -30), S(  79,    0), S(   0,    0)},
	{S(  -8,   15), S(   5,   21), S(  16,   13), S(   7,  -58), S(  61,   60), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_QUEEN[2][6] = {
	{S(  14,    2), S(  39,   10), S(  23,   33), S(  25,    1), S(  12,  -65), S( 138,  -28)},
	{S(   1,    8), S(   1,    8), S(  -2,    9), S(  -3,    2), S( -19,  -69), S( 120,   30)}
};
constexpr PackedScore THREAT_BY_KING[6] = {S( -19,   46), S(  36,   44), S(  37,   49), S( 101,   13), S(   0,    0), S(   0,    0)};
constexpr PackedScore PUSH_THREAT = S(  20,   20);

constexpr PackedScore PASSED_PAWN[8] = {S(   0,    0), S(   3,   13), S(   2,   21), S( -11,  -15), S(  10,   17), S(   6,   42), S( -14,   48), S(   0,    0)};
constexpr PackedScore ISOLATED_PAWN[8] = {S(  -5,    4), S(  -1,  -16), S( -10,   -7), S(  -6,  -17), S( -10,  -14), S(  -6,   -4), S(  -2,  -12), S( -11,    6)};
constexpr PackedScore PAWN_PHALANX[8] = {S(   0,    0), S(   3,   -2), S(  14,    6), S(  20,   17), S(  49,   62), S( 119,  165), S(-153,  443), S(   0,    0)};
constexpr PackedScore DEFENDED_PAWN[8] = {S(   0,    0), S(   0,    0), S(  19,   12), S(  13,    9), S(  15,   18), S(  30,   49), S( 166,    6), S(   0,    0)};

constexpr PackedScore OUR_PASSER_PROXIMITY[8] = {S(   0,    0), S(  -5,   69), S( -17,   45), S(  -6,   18), S(  -1,    6), S(   7,    0), S(  13,    5), S(   7,    4)};
constexpr PackedScore THEIR_PASSER_PROXIMITY[8] = {S(   0,    0), S( -66,  -11), S(  15,  -20), S(  -0,   18), S(   3,   37), S(  -3,   65), S(   2,   65), S(   4,   53)};
constexpr PackedScore FREE_PASSER[8] = {S(   0,    0), S(   0,    0), S(   0,    0), S(   8,    9), S(   6,   23), S( -10,   80), S(  33,   98), S(   0,    0)};

constexpr PackedScore PAWN_STORM[3][8] = {
	{S(  79,  -44), S(  50,  -25), S(  34,  -10), S(  18,   -3), S(   6,    3), S(  -3,   11), S(  -6,   16), S(   7,  -10)},
	{S(   0,    0), S(  40,  -30), S(  39,   -9), S(  11,   -3), S(  -3,    7), S( -10,   19), S( -14,   23), S(   5,   -5)},
	{S(  21,  -11), S(   8,   -2), S(  13,    3), S(   6,    5), S(   3,    8), S(  -2,   14), S(  -5,   16), S( -13,   -4)}
};
constexpr PackedScore PAWN_SHIELD[3][8] = {
	{S(  16,  -15), S(   2,   -8), S(  -1,  -11), S(  -2,  -10), S(  11,  -13), S(  20,  -26), S(  29,  -25), S(  -2,    4)},
	{S(   0,    0), S(  -7,    0), S(  -9,   -4), S(   5,   -3), S(  20,  -10), S(  39,  -25), S(  55,  -27), S(  13,    2)},
	{S(  -9,   -3), S(  -7,   -1), S(   1,   -3), S(   6,    1), S(   9,    1), S(   7,   -3), S(  19,   -8), S(  -1,    9)}
};
constexpr PackedScore SAFE_KNIGHT_CHECK = S(  82,   -1);
constexpr PackedScore SAFE_BISHOP_CHECK = S(  15,   -5);
constexpr PackedScore SAFE_ROOK_CHECK = S(  58,   -2);
constexpr PackedScore SAFE_QUEEN_CHECK = S(  30,   14);
constexpr PackedScore KING_ATTACKER_WEIGHT[4] = {S(  15,   -0), S(   9,    0), S(  11,  -19), S(   0,   11)};
constexpr PackedScore KING_ATTACKS[14] = {S( -26,   10), S( -29,    6), S( -31,    3), S( -29,    7), S( -21,    5), S(  -6,    3), S(  17,   -5), S(  46,  -16), S(  89,  -34), S( 116,  -37), S( 153,  -55), S( 176,  -47), S( 216, -136), S( 173,    5)};

constexpr PackedScore KNIGHT_OUTPOST = S(  26,   18);
constexpr PackedScore BISHOP_PAWNS[7] = {S( -32,  -54), S( -28,  -59), S( -31,  -68), S( -37,  -76), S( -44,  -86), S( -48, -102), S( -55, -121)};
constexpr PackedScore BISHOP_PAIR = S(  26,   76);
constexpr PackedScore ROOK_OPEN[2] = {S(  26,    5), S(  18,    4)};

constexpr PackedScore TEMPO = S(  32,   34);

#undef S


}
