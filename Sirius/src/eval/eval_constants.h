#pragma once

#include "../defs.h"

namespace eval
{

#define S(mg, eg) PackedScore(mg, eg)

constexpr PackedScore MATERIAL[6] = {S(  61,  131), S( 292,  439), S( 309,  451), S( 390,  803), S( 775, 1445), S(0, 0)};

constexpr PackedScore PSQT[6][64] = {
	{
		S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
		S(  67,   76), S(  34,   89), S(  30,   94), S(  54,   75), S(  66,   67), S(  33,   93), S(  32,  104), S(  65,   84),
		S(  10,   13), S(   0,   42), S(  13,    5), S(  30,  -27), S(  17,  -21), S(   5,    1), S( -16,   34), S(  -3,   19),
		S(  15,    9), S(   5,   14), S(   8,   -9), S(  13,  -24), S(   0,  -22), S(  -3,   -9), S(  -8,   14), S( -12,   12),
		S(   8,    1), S(   4,   18), S(   7,  -14), S(  16,  -15), S(  11,  -14), S(  -2,   -8), S( -14,   15), S( -14,    2),
		S(   2,   -2), S(  12,   13), S(  16,   -2), S(  -1,    2), S(  -6,    0), S( -11,   -4), S( -22,   13), S( -26,    1),
		S(  14,   -2), S(  29,    8), S(  16,   -8), S(   7,    7), S(  -6,   -1), S(  -6,   -4), S( -14,   18), S( -17,    5),
		S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
	},
	{
		S( -79,  -95), S( -84,  -23), S( -35,  -13), S(   2,  -10), S( -35,    3), S( -64,    7), S(-106,    9), S( -92,  -52),
		S( -12,  -15), S(  23,   -1), S(  26,   -2), S(   8,    4), S(   7,   10), S(   3,   13), S(  -3,   18), S( -11,    3),
		S(  14,   -9), S(   4,    2), S(  49,   -9), S(  38,    7), S(  22,   16), S(  15,   14), S(   3,    7), S(  -7,    4),
		S(  31,    1), S(  31,    9), S(  43,   13), S(  30,   19), S(  26,   25), S(  32,   13), S(  20,    6), S(   9,   13),
		S(  12,   13), S(  16,   15), S(  25,   15), S(  20,   26), S(  26,   19), S(  20,   19), S(  21,    4), S(   6,    7),
		S(  12,   -1), S(  17,    1), S(  16,   -2), S(  12,   16), S(   6,   15), S(   2,    1), S(   3,   -4), S( -10,   -4),
		S(   5,    2), S(  12,   -6), S(   7,   -5), S(  10,    1), S(   4,    1), S(  -6,   -2), S(  -7,   -5), S( -19,   -5),
		S( -11,  -17), S( -13,   -6), S(  -5,   -9), S(   1,    3), S(  -5,    0), S( -20,   -7), S( -15,  -11), S( -48,   -5),
	},
	{
		S( -46,  -14), S( -35,    5), S( -11,    0), S( -75,   12), S( -64,   17), S( -51,    3), S( -26,    8), S( -32,    8),
		S( -22,   -8), S( -45,    6), S(  -9,    2), S(  -2,    0), S( -18,   10), S(   3,    0), S( -13,   -5), S(  -4,   -5),
		S(  14,   11), S(  12,    3), S(  27,    4), S(  13,    9), S(  20,    5), S(   0,    0), S(   9,    8), S(   6,    3),
		S(  -9,    4), S(   8,    9), S(   8,   14), S(  19,   18), S(  22,   24), S(  18,    9), S(   6,   12), S(  -7,    5),
		S(  19,   -8), S(   4,    9), S(  10,   11), S(  10,   16), S(  21,   13), S(   3,   17), S(   1,    9), S(   3,    1),
		S(  22,  -10), S(  25,   -7), S(   6,   -6), S(  10,   11), S(   2,    8), S(   2,   -1), S(  17,    3), S(   2,   -6),
		S(  27,  -20), S(  20,  -25), S(  27,   -9), S(   6,   -3), S(   0,    1), S(  11,  -16), S(   2,  -23), S(  14,  -10),
		S(  27,  -40), S(  15,  -16), S(  -9,    1), S(  16,   -4), S(   2,   -3), S(   0,    3), S(  14,   -4), S(   5,  -18),
	},
	{
		S(  10,   10), S( -28,   37), S( -11,   25), S( -14,   19), S( -31,   28), S( -25,   32), S( -15,   25), S(  -4,   20),
		S(  24,    3), S(  30,    9), S(  12,   16), S(   2,   16), S(  12,   19), S(   0,   30), S(  -2,   25), S(   1,   17),
		S(   4,    3), S(  30,    4), S(  16,    4), S(  22,    3), S(   1,   12), S(  -2,   21), S(  10,   16), S(  -9,   18),
		S(   1,    6), S(   4,   12), S(  11,    8), S(  11,    1), S(   4,   10), S(   8,   14), S(   7,   13), S(  -6,   16),
		S( -10,    1), S(  11,    4), S( -10,    8), S(   8,    1), S(  -2,    3), S(  -6,    7), S(  -8,    7), S( -10,    7),
		S(   8,  -23), S(  22,  -25), S(   1,  -16), S(   5,  -17), S(  -7,  -10), S( -11,   -9), S(  -9,  -11), S( -15,   -8),
		S(  -6,  -28), S(  23,  -36), S(   5,  -24), S(   5,  -23), S(  -1,  -19), S(  -2,  -16), S( -11,  -14), S( -15,  -20),
		S(  -6,  -35), S(  -4,  -16), S(   1,  -19), S(  10,  -25), S(   3,  -22), S(  -4,  -15), S(  -4,  -20), S(  -5,  -17),
	},
	{
		S( -10,   -3), S(  30,  -32), S(  -9,   19), S( -11,   16), S(  11,   -6), S( -23,   13), S( -42,    8), S( -32,   11),
		S(  39,    0), S(  -1,   12), S( -11,   30), S( -34,   55), S( -23,   40), S(  -4,    9), S(  -3,   -7), S(   6,   -6),
		S(  18,    4), S(  16,    4), S(   7,   22), S(  -8,   26), S(   3,   16), S(   8,   10), S(   8,  -10), S(  18,  -10),
		S(   8,   17), S(   5,   33), S(   9,    9), S( -11,   33), S(  -7,   31), S(   9,    6), S(   7,   13), S(   4,    7),
		S(  10,   10), S(  14,   12), S(   0,   16), S(   3,   26), S(  -5,   34), S(  -2,   22), S(   4,   17), S(   2,    5),
		S(  14,  -21), S(  13,  -10), S(   5,    3), S(  -5,   18), S(  -3,   13), S(  -2,   16), S(  10,   -8), S(  10,  -19),
		S(   8,  -48), S(  10,  -68), S(   8,  -40), S(   5,  -12), S(   4,   -4), S(   4,  -17), S(   4,  -21), S(   9,  -37),
		S(   8,  -47), S( -17,  -43), S( -19,  -23), S(  -3,  -23), S(  -3,  -16), S(  -6,  -13), S( -10,  -19), S( -10,  -16),
	},
	{
		S( -25,  -56), S( -14,    1), S( -55,    1), S( -44,   -3), S(   7,   -5), S(   7,   -5), S(   7,   -5), S(   7,   -5),
		S( -64,   32), S( -13,   60), S( -19,   48), S(  22,   20), S(   7,   -5), S(   7,   -5), S(   7,   -5), S(   7,   -5),
		S(   2,   20), S(  30,   51), S(  37,   41), S(  14,   40), S(   7,   -5), S(   7,   -5), S(   7,   -5), S(   7,   -5),
		S( -33,   17), S( -11,   44), S(  -4,   35), S( -29,   31), S(   7,   -5), S(   7,   -5), S(   7,   -5), S(   7,   -5),
		S( -53,    6), S( -26,   29), S(  -8,   17), S( -28,   14), S(   7,   -5), S(   7,   -5), S(   7,   -5), S(   7,   -5),
		S( -18,  -11), S(  10,    7), S(   1,   -3), S(  -5,   -5), S(   7,   -5), S(   7,   -5), S(   7,   -5), S(   7,   -5),
		S(  24,  -28), S(  26,   -6), S(   9,  -15), S(  -4,  -19), S(   7,   -5), S(   7,   -5), S(   7,   -5), S(   7,   -5),
		S(  15,  -60), S(  21,  -24), S(   1,  -28), S(   8,  -46), S(   7,   -5), S(   7,   -5), S(   7,   -5), S(   7,   -5),
	},
};

constexpr PackedScore MOBILITY[4][28] = {
	{S( -15,  -27), S( -38,  -47), S( -17,  -16), S(  -9,    1), S(   2,    9), S(   7,   19), S(  15,   22), S(  23,   26), S(  34,   19), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -24,  -44), S( -35,  -59), S( -21,  -30), S( -14,  -12), S(  -4,   -3), S(   2,    8), S(   4,   16), S(   8,   19), S(   9,   21), S(  12,   21), S(  13,   21), S(  18,   15), S(  16,   21), S(  24,   -1), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -23,  -52), S( -31,  -73), S( -18,  -49), S(  -5,  -27), S(  -2,  -14), S(  -4,   -3), S(  -3,    3), S(   1,   10), S(   3,   13), S(   7,   17), S(   7,   26), S(   9,   32), S(  13,   36), S(  19,   35), S(  28,   33), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -31,   -1), S( -61,  -86), S( -89, -126), S( -31, -212), S( -30,  -69), S( -24,   -7), S( -15,  -18), S( -13,    2), S( -12,   20), S(  -9,   30), S(  -7,   33), S(  -3,   35), S(  -3,   46), S(   1,   43), S(   2,   48), S(   4,   49), S(   5,   51), S(   7,   52), S(   6,   52), S(  12,   46), S(  20,   36), S(  28,   20), S(  31,   21), S(  41,    3), S(  59,  -10), S(  52,  -16), S(  36,  -12), S(   4,  -40)}
};

constexpr PackedScore THREAT_BY_PAWN[6] = {S(   4,  -20), S(  66,   30), S(  61,   60), S(  77,   27), S(  73,   -5), S(   0,    0)};
constexpr PackedScore THREAT_BY_KNIGHT[2][6] = {
	{S(   7,   29), S(  24,   22), S(  40,   44), S(  73,   16), S(  56,  -28), S(   0,    0)},
	{S(  -7,    8), S(  12,   21), S(  28,   29), S(  64,   33), S(  58,   -6), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_BISHOP[2][6] = {
	{S(  -3,   36), S(  40,   32), S(  -8,   26), S(  68,   16), S(  69,   54), S(   0,    0)},
	{S(  -3,    6), S(  18,   22), S( -21,  -21), S(  44,   46), S(  46,  122), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_ROOK[2][6] = {
	{S(  -1,   43), S(  18,   60), S(  26,   56), S(   9,  -42), S(  74,   13), S(   0,    0)},
	{S(  -8,    7), S(   3,   15), S(  13,    1), S(   9,  -88), S(  65,   43), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_QUEEN[2][6] = {
	{S(   6,    9), S(  24,   20), S(   8,   53), S(  18,   14), S(  10,  -51), S( 100,   42)},
	{S(  -2,   10), S(   0,    6), S(  -8,   18), S(  -6,    4), S( -16,  -77), S( 115,   67)}
};
constexpr PackedScore THREAT_BY_KING[6] = {S( -26,   49), S(   5,   52), S(  28,   43), S(  70,   10), S(   0,    0), S(   0,    0)};
constexpr PackedScore PUSH_THREAT = S(  15,   19);

constexpr PackedScore ISOLATED_PAWN[8] = {S(  -8,    5), S(  -4,  -15), S( -12,   -9), S( -11,  -16), S( -11,  -16), S(  -7,   -8), S(  -1,  -15), S( -10,    7)};
constexpr PackedScore DOUBLED_PAWN[8] = {S(   1,  -62), S(  13,  -38), S(   1,  -29), S(   1,  -20), S(  -3,  -14), S( -13,  -19), S(   6,  -42), S(   7,  -75)};
constexpr PackedScore BACKWARDS_PAWN[8] = {S(   0,    0), S(  -8,  -14), S(  -2,  -14), S(  -9,  -11), S(   1,  -16), S(  28,   -6), S(   0,    0), S(   0,    0)};
constexpr PackedScore PAWN_PHALANX[8] = {S(   0,    0), S(   5,   -5), S(  10,   -3), S(  20,    7), S(  42,   39), S( 104,  220), S( -16,  353), S(   0,    0)};
constexpr PackedScore DEFENDED_PAWN[8] = {S(   0,    0), S(   0,    0), S(  19,    6), S(  11,    7), S(  16,   21), S(  29,   62), S( 137,   73), S(   0,    0)};
constexpr PackedScore CANDIDATE_PASSER[2][8] = {
	{S(   0,    0), S( -40,   -8), S( -20,   -7), S(   0,   30), S(  29,   55), S(  62,   82), S(   0,    0), S(   0,    0)},
	{S(   0,    0), S( -22,   -6), S( -10,   15), S(  -5,   30), S(  20,   43), S(  33,  154), S(   0,    0), S(   0,    0)}
};

constexpr PackedScore PASSED_PAWN[2][2][8] = {
	{
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -38,  -40), S( -16,   26), S(  -1,  153), S(  45,  231), S(   0,    0)},
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -27,  -52), S(   7,  -22), S(  31,   19), S(  59,   34), S(   0,    0)}
	},
	{
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -30,  -56), S(   2,  -23), S(  34,    8), S(  66,   -1), S(   0,    0)},
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -31,  -61), S(   2,  -34), S(  11,  -13), S(  -9,  -14), S(   0,    0)}
	}
};
constexpr PackedScore OUR_PASSER_PROXIMITY[8] = {S(   0,    0), S(  44,   84), S(   8,   68), S(   3,   43), S(   5,   31), S(  12,   23), S(  21,   21), S(  16,   19)};
constexpr PackedScore THEIR_PASSER_PROXIMITY[8] = {S(   0,    0), S( -41,    7), S(  23,    0), S(  16,   27), S(  20,   47), S(  14,   79), S(  17,   79), S(  18,   68)};

constexpr PackedScore PAWN_STORM[2][4][8] = {
	{
		{S(  14,   15), S(-134,  -49), S( -11,   -8), S(   5,  -13), S(   1,   -1), S(  -5,    9), S(  -3,    8), S(   0,    0)},
		{S(  11,    4), S( -20,  -96), S(  42,  -42), S(   7,  -11), S(   2,   -5), S( -10,    7), S(  -7,    9), S(   0,    0)},
		{S(  -3,    6), S(  56,  -96), S(  61,  -44), S(  19,  -18), S(   3,   -1), S(  -5,    7), S(  -8,   12), S(   0,    0)},
		{S(   9,   -7), S( 110,  -84), S(  32,  -21), S(  13,   -2), S(  -2,    3), S(  -7,    0), S(  -2,    1), S(   0,    0)}
	},
	{
		{S(   0,    0), S(  -3,  -28), S( -31,  121), S(  10,  -42), S(  -2,    8), S(  -1,    5), S(  -4,    9), S(   0,    0)},
		{S(   0,    0), S(   6,  -92), S(  -6,   69), S(  55,  -41), S(   2,    3), S(  -7,    6), S(  -7,    8), S(   0,    0)},
		{S(   0,    0), S(  -6,   21), S( -65, -114), S(  21,  -28), S(   2,    5), S(   0,    5), S(  -8,   11), S(   0,    0)},
		{S(   0,    0), S(  -2,  -46), S(  65,   -6), S(  21,   -1), S(   1,    8), S(   1,  -10), S(   0,    7), S(   0,    0)}
	}
};
constexpr PackedScore PAWN_SHIELD[4][8] = {
	{S(  18,    1), S(  -8,   25), S( -15,   16), S(  -1,    7), S(   4,    1), S( -41,  -24), S( -77,  -37), S(   0,    0)},
	{S(  18,   -1), S( -14,   11), S(  -9,    7), S(  11,   -3), S(   9,  -12), S( -14,  -17), S( -51,  -32), S(   0,    0)},
	{S(   6,    7), S( -16,    8), S(  16,    6), S(   2,   -1), S(  -1,   -2), S(   5,  -19), S( -14,  -41), S(   0,    0)},
	{S(  14,   -4), S(   3,   -1), S(  -3,    0), S(   1,   -5), S(   9,   -9), S(  29,  -21), S( -20,  -18), S(   0,    0)}
};
constexpr PackedScore SAFE_KNIGHT_CHECK = S( 117,    3);
constexpr PackedScore SAFE_BISHOP_CHECK = S(  23,   41);
constexpr PackedScore SAFE_ROOK_CHECK = S( 105,   24);
constexpr PackedScore SAFE_QUEEN_CHECK = S(  45,   61);
constexpr PackedScore UNSAFE_KNIGHT_CHECK = S(  13,    1);
constexpr PackedScore UNSAFE_BISHOP_CHECK = S(  23,   16);
constexpr PackedScore UNSAFE_ROOK_CHECK = S(  32,   -2);
constexpr PackedScore UNSAFE_QUEEN_CHECK = S(  10,   21);
constexpr PackedScore KING_ATTACKER_WEIGHT[4] = {S(   0,   23), S(  -8,   21), S(  -1,    4), S( -13,  -26)};
constexpr PackedScore QUEENLESS_ATTACK = S( -76,  -94);
constexpr PackedScore KING_ATTACKS = S(   5,   -2);
constexpr PackedScore WEAK_KING_RING = S(  10,   -1);

constexpr int SAFETY_SCALE_ATTACKERS[6] = {48, 68, 96, 127, 164, 218};

constexpr PackedScore MINOR_BEHIND_PAWN = S(   6,   13);
constexpr PackedScore KNIGHT_OUTPOST = S(  23,   17);
constexpr PackedScore BISHOP_PAWNS[7] = {S(   4,   20), S(   6,   19), S(   4,   11), S(   2,    4), S(  -2,   -5), S(  -2,  -18), S(  -6,  -30)};
constexpr PackedScore BISHOP_PAIR = S(  22,   62);
constexpr PackedScore LONG_DIAG_BISHOP = S(  16,    9);
constexpr PackedScore ROOK_OPEN[2] = {S(  26,    4), S(  14,    4)};

constexpr PackedScore TEMPO = S(  32,   35);

constexpr PackedScore COMPLEXITY_PAWNS = S(   0,    8);
constexpr PackedScore COMPLEXITY_PASSERS = S(   0,    1);
constexpr PackedScore COMPLEXITY_PAWNS_BOTH_SIDES = S(   0,   68);
constexpr PackedScore COMPLEXITY_PAWN_ENDGAME = S(   0,   65);
constexpr PackedScore COMPLEXITY_OFFSET = S(   0, -130);

#undef S


}