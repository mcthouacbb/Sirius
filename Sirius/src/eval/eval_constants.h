#pragma once

#include "../defs.h"

namespace eval
{

// clang-format off
#define S(mg, eg) ScorePair(mg, eg)

constexpr ScorePair MATERIAL[6] = {S(  63,  132), S( 323,  439), S( 337,  461), S( 433,  797), S( 930, 1614), S(0, 0)};

constexpr ScorePair PSQT[6][64] = {
    {
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  71,   95), S(  40,   76), S(  26,   84), S(  67,   72), S(  57,   68), S(  57,   55), S(  23,  101), S(  72,   87),
        S(   5,   15), S(  -5,   24), S(  -3,    7), S(   9,   -9), S(  -6,  -10), S(   0,   -7), S( -18,   25), S(   1,   10),
        S(   3,   15), S(   7,   17), S(   9,   -6), S(   8,  -16), S(   5,  -16), S(   3,  -11), S(   0,   11), S(  -7,    7),
        S(  -7,   -2), S(  -6,   16), S(  17,  -25), S(  16,  -15), S(  11,  -16), S(   4,  -11), S( -11,   10), S( -16,   -4),
        S( -13,   -3), S(  12,    8), S(   5,    2), S(   7,    2), S(  -3,    2), S(  -6,    0), S( -16,   14), S( -22,   -6),
        S(  -4,   -6), S(  24,    7), S(  26,   23), S(   3,   12), S(  -3,    2), S(  -3,    1), S(  -7,   11), S( -18,   -2),
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
    },
    {
        S( -92, -107), S( -79,    3), S(-122,   41), S(  31,  -10), S( -34,   12), S( -69,   16), S( -70,    3), S( -95,  -63),
        S( -12,   -3), S( -16,    7), S(  29,    9), S(  17,   18), S(  20,   24), S(  14,    1), S(  -9,    3), S(   6,  -26),
        S(  25,   -8), S(  18,    1), S(  46,    4), S(  26,   24), S(  23,   21), S(  27,    6), S(  18,    7), S(  -4,   -4),
        S(  32,    2), S(  32,    9), S(  33,   19), S(  28,   31), S(  33,   24), S(  22,   14), S(  19,    8), S(  12,   10),
        S(  23,    6), S(  23,   12), S(  26,   18), S(  20,   28), S(  18,   28), S(  19,   17), S(  20,    7), S(   4,    4),
        S(   2,  -11), S(  19,    2), S(  15,    2), S(  14,   21), S(   8,   21), S(  -2,    4), S(   1,   -1), S( -13,   -6),
        S(   7,  -11), S(   8,   -6), S(  13,  -20), S(  12,    1), S(   4,    1), S(  -4,   -4), S( -17,   -8), S(  -4,  -39),
        S( -24,  -34), S( -11,  -20), S(   6,  -12), S(   5,   -8), S(   1,   -8), S( -10,   -7), S( -19,  -14), S( -27,  -21),
    },
    {
        S( -22,  -38), S( -58,    9), S( -90,   24), S( -85,   26), S(-116,   26), S( -69,   28), S( -64,   22), S( -45,    3),
        S( -16,  -15), S( -43,   14), S(  -3,    5), S( -26,   12), S(  -8,   13), S( -15,    9), S( -14,  -10), S(  -1,  -17),
        S(  27,    0), S(  14,    3), S(  23,   11), S(  22,   14), S(  14,   18), S(  21,   -3), S(   9,   13), S(  12,   -5),
        S(   3,    3), S(  17,   14), S(   9,   29), S(  16,   33), S(  28,   26), S(  18,   14), S(  17,   14), S(  -2,   -4),
        S(  15,   -7), S(   4,   15), S(  14,   15), S(  28,   10), S(  21,   19), S(  16,   13), S(   0,   11), S(  14,   -5),
        S(  19,   -8), S(  23,   -7), S(  11,   -2), S(  16,   10), S(  15,    4), S(   7,  -12), S(  23,    2), S(  21,  -22),
        S(  25,  -13), S(  28,  -29), S(  27,  -15), S(  14,   -5), S(   3,   -6), S(  18,  -22), S(   8,  -21), S(  29,   -9),
        S(  18,  -55), S(  33,  -27), S( -11,   -8), S(  14,  -22), S(  -1,   -8), S(  -3,   -2), S(   5,   -4), S(  14,  -24),
    },
    {
        S(  30,    4), S(  41,   11), S(  14,   10), S(  24,   15), S(  16,   16), S(  24,    8), S(  24,   25), S(  28,   20),
        S(  23,   15), S(  12,   22), S(  30,   13), S(  29,   10), S(  34,   22), S(  16,   25), S(   5,   28), S(  22,   20),
        S( -22,   27), S(   9,   11), S(  15,   13), S(  16,    9), S(   4,    9), S(  12,   14), S(   4,   18), S( -11,   29),
        S( -24,   19), S(  -9,   19), S( -10,   17), S( -12,   14), S(  -2,    7), S(  -3,   18), S(  -4,   14), S( -12,   17),
        S( -24,   -5), S(  -9,    6), S( -17,   13), S( -14,   14), S(  -6,    1), S(  -9,    3), S( -18,   10), S( -15,    0),
        S( -26,  -17), S(   4,  -30), S( -13,   -5), S(  -2,  -17), S(   1,  -20), S( -13,   -9), S(  -7,  -16), S( -15,  -18),
        S( -65,  -21), S( -15,  -33), S(   0,  -22), S(   3,  -25), S(  -2,  -22), S(  -3,  -24), S( -13,  -23), S( -19,  -23),
        S( -19,  -32), S( -27,  -17), S(   6,  -24), S(  13,  -27), S(   4,  -26), S(   1,  -25), S(  -2,  -23), S(  -2,  -21),
    },
    {
        S(  -4,   54), S(  23,   28), S(   6,   37), S(  24,   23), S(  22,   19), S(  26,   13), S(  -6,   24), S( -15,   33),
        S(  38,    3), S(  23,    4), S(  21,   11), S(  -8,   33), S(  14,   18), S(   9,   10), S(  17,  -12), S(  11,   12),
        S(   8,   13), S(  18,    7), S(  -1,    7), S( -15,   47), S(   6,   25), S(  16,   -7), S(  20,   -2), S(  21,  -11),
        S(  -5,   16), S( -12,   18), S(  -9,    9), S( -12,   31), S( -23,   49), S(   4,   20), S(   3,   34), S(  13,   -8),
        S( -15,   23), S( -14,   30), S( -10,   10), S( -15,   32), S( -20,   43), S( -12,   29), S(  -4,   19), S(  -7,    7),
        S(  -4,  -12), S(  -1,  -16), S(  -6,    1), S( -15,   12), S( -12,   25), S(  -4,   14), S(   6,    8), S(   5,   -6),
        S(  -8,  -68), S(  18, -105), S(  -2,  -57), S(  -2,  -22), S(  -7,  -10), S(   7,  -35), S(   7,  -39), S(   5,  -36),
        S( -15,  -40), S( -16,  -92), S( -17,  -59), S( -12,  -38), S(  -4,  -34), S(  -6,  -40), S( -15,  -24), S(  -3,  -26),
    },
    {
        S( -18, -152), S(  52,   71), S(   2,   35), S( -75,   54), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  -9,  -14), S(  54,   70), S(   8,   73), S(  -4,   66), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  66,   29), S(  40,   94), S( -49,   47), S(-124,   18), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S( -36,   31), S( -16,   82), S( -82,   45), S(-143,   12), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S( -70,   32), S( -65,   67), S(-100,   26), S(-129,    5), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  13,    2), S(  -5,   37), S( -32,    0), S( -63,  -18), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  61,  -16), S(  44,   11), S(  15,  -29), S( -17,  -51), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  59,  -49), S(  59,  -12), S(  15,  -53), S(  10,  -92), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
    },
};

constexpr ScorePair MOBILITY[4][28] = {
    {S(  -5,  -27), S( -39,  -57), S( -20,  -18), S(  -9,    0), S(  -1,   11), S(   5,   20), S(  14,   24), S(  23,   26), S(  34,   16), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S(  -4,  -31), S( -40,  -63), S( -25,  -31), S( -13,  -12), S(  -7,    0), S(  -2,   10), S(   0,   17), S(   2,   21), S(   4,   21), S(   8,   21), S(   2,   28), S(  20,   11), S(   7,   22), S(  50,  -19), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S( -31,  -56), S( -56,  -64), S( -18,  -44), S( -12,  -26), S(  -4,  -16), S(   3,   -5), S(   3,    4), S(   4,   11), S(   5,   14), S(   9,   20), S(  10,   30), S(  10,   36), S(  13,   38), S(  13,   43), S(  48,   14), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S(   6,   29), S( -31,   41), S( -28,  -17), S( -43,  -83), S( -26, -126), S(  -6,  -94), S( -10,  -37), S(  -2,  -37), S(  -7,   -9), S(  -5,    5), S(   1,    4), S(  -3,   20), S(  -1,   29), S(   3,   30), S(   5,   31), S(   3,   39), S(   6,   36), S(   8,   35), S(   9,   35), S(   8,   36), S(  11,   37), S(  13,   18), S(  23,   12), S(  22,    4), S( -21,   59), S(  46,  -33), S(   3,  -34), S(  -3,  -19)}
};

constexpr ScorePair THREAT_BY_PAWN[6] = {S(  -9,  -11), S(  75,   43), S(  65,   75), S(  74,   50), S(  52,   28), S(   0,    0)};
constexpr ScorePair THREAT_BY_KNIGHT[2][6] = {
    {S(   6,   35), S(  -7,   68), S(  49,   33), S(  89,   12), S(  54,    3), S(   0,    0)},
    {S(  -9,   12), S(  -1,   46), S(  37,   28), S(  77,   44), S(  46,   63), S(   0,    0)}
};
constexpr ScorePair THREAT_BY_BISHOP[2][6] = {
    {S(   2,   33), S(  45,   34), S(   2,   37), S(  73,   16), S(  64,   59), S(   0,    0)},
    {S(  -6,    4), S(  22,   17), S(   0,   -4), S(  56,   71), S(  75,   53), S(   0,    0)}
};
constexpr ScorePair THREAT_BY_ROOK[2][6] = {
    {S(  -2,   49), S(  35,   55), S(  45,   46), S( -13,  -47), S(  71,  -13), S(   0,    0)},
    {S( -11,    9), S(  11,   11), S(  17,    4), S(   5,  -79), S(  52,  106), S(   0,    0)}
};
constexpr ScorePair THREAT_BY_QUEEN[2][6] = {
    {S(   6,   26), S(  22,   38), S(  31,   32), S(  16,    3), S(   6,  -40), S( 186,   65)},
    {S(  -7,   21), S(  -1,    9), S( -10,   35), S(   0,  -12), S(  -7,  -38), S( 128,  167)}
};
constexpr ScorePair THREAT_BY_KING[6] = {S(  54,   16), S(  22,   45), S(  77,   37), S(  72,   10), S(   0,    0), S(   0,    0)};
constexpr ScorePair KNIGHT_HIT_QUEEN = S(   5,    5);
constexpr ScorePair BISHOP_HIT_QUEEN = S(  13,   26);
constexpr ScorePair ROOK_HIT_QUEEN = S(  19,   -1);
constexpr ScorePair PUSH_THREAT = S(  14,   18);
constexpr ScorePair RESTRICTED_SQUARES = S(   3,    2);

constexpr ScorePair ISOLATED_PAWN[8] = {S(  -1,    0), S(  -3,  -17), S(  -8,  -11), S(  -9,  -14), S( -12,  -14), S( -10,   -7), S(  -4,  -12), S(  -7,    0)};
constexpr ScorePair DOUBLED_PAWN[8] = {S(   0,  -48), S(  -5,  -33), S(  -6,  -23), S( -14,   -3), S(  -9,   -8), S(  -5,  -17), S(   1,  -35), S(   4,  -46)};
constexpr ScorePair BACKWARDS_PAWN[8] = {S(   0,    0), S(  -7,  -14), S(   1,  -17), S(  -6,  -12), S(  11,  -22), S(  16,   51), S(   0,    0), S(   0,    0)};
constexpr ScorePair PAWN_PHALANX[8] = {S(   0,    0), S(   5,   -6), S(  12,   -5), S(  17,   10), S(  37,   37), S(  87,  104), S( 103,  185), S(   0,    0)};
constexpr ScorePair DEFENDED_PAWN[8] = {S(   0,    0), S(   0,    0), S(  18,    4), S(  11,   10), S(  17,   24), S(  40,   53), S(  25,  150), S(   0,    0)};
constexpr ScorePair CANDIDATE_PASSER[2][8] = {
    {S(   0,    0), S(  20,  -35), S(  -4,  -15), S(  -3,    3), S(  17,   22), S(  52,   77), S(   0,    0), S(   0,    0)},
    {S(   0,    0), S(  -9,  -12), S(  -3,    9), S(  -6,   28), S(   7,   38), S(  52,   81), S(   0,    0), S(   0,    0)}
};

constexpr ScorePair PASSED_PAWN[2][2][8] = {
    {
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -37,  -24), S( -13,   26), S(  30,  128), S( 118,  206), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -22,  -40), S(  -5,   -9), S(  32,   50), S(  77,   79), S(   0,    0)}
    },
    {
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -23,  -45), S( -10,  -12), S(  33,   53), S(  38,   40), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -17,  -58), S(  -7,  -28), S(  21,   19), S(   5,   22), S(   0,    0)}
    }
};
constexpr ScorePair OUR_PASSER_PROXIMITY[8] = {S(  97,  104), S( 130,   61), S(  46,   66), S(  -4,   58), S(  -2,   33), S(   3,   19), S(  13,   14), S(   0,   20)};
constexpr ScorePair THEIR_PASSER_PROXIMITY[8] = {S( -52,   12), S(  15,   -5), S(  27,    1), S(  22,   25), S(  11,   60), S(  13,   75), S(  23,   73), S(  17,   61)};
constexpr ScorePair PASSER_DEFENDED_PUSH[8] = {S(   0,    0), S(   0,    0), S(   0,    0), S(   9,    7), S(  13,   18), S(  33,   38), S(  61,   98), S(   0,    0)};

constexpr ScorePair PAWN_STORM[2][4][8] = {
    {
        {S(  32,   29), S( -87, -189), S(  -8,  -70), S(  48,   -4), S(  25,   24), S(   8,   23), S(  -1,   32), S(   0,    0)},
        {S(  26,   12), S(  28, -253), S(  54, -111), S(  41,  -16), S(  11,    7), S( -16,   17), S(   5,   14), S(   0,    0)},
        {S(   8,   11), S(  50, -164), S(  95,  -91), S(  65,  -17), S(   9,   15), S( -13,   14), S(   3,    9), S(   0,    0)},
        {S(   8,  -11), S(  92, -275), S( 114, -123), S(  65,  -18), S(  11,   -3), S( -24,   -7), S( -18,   -8), S(   0,    0)}
    },
    {
        {S(   0,    0), S(   0,    0), S(  71,   47), S(  -4,   33), S(   2,   37), S(   5,   52), S(  25,   48), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S( 157,   36), S( -26,   22), S( -29,   38), S( -16,   50), S(  21,   32), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S( 151,   -5), S(   8,   20), S(   2,   28), S(  -4,   42), S(  70,  -11), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S( 144,    9), S(  11,   22), S( -20,   20), S(  -1,   10), S( -31,    8), S(   0,    0)}
    }
};
constexpr ScorePair PAWN_SHIELD[4][8] = {
    {S(  54,   28), S(   9,   45), S( -12,   33), S(  32,   22), S(  42,    7), S(  -2,    5), S(  -2,   21), S(   0,    0)},
    {S(  38,   16), S( -28,   23), S(  11,   16), S(  47,    1), S(  44,  -16), S(   3,  -16), S(   4,  -94), S(   0,    0)},
    {S(  31,   15), S(   7,   32), S(  13,    2), S(  37,  -19), S(  28,  -20), S(  -5,  -10), S( -49,  -10), S(   0,    0)},
    {S(  14,    3), S( -27,  -10), S(   7,  -23), S(  32,  -34), S(  16,  -24), S(  48,  -19), S( -42,  -24), S(   0,    0)}
};
constexpr ScorePair SAFE_KNIGHT_CHECK = S( 100,   -2);
constexpr ScorePair SAFE_BISHOP_CHECK = S(  70,   22);
constexpr ScorePair SAFE_ROOK_CHECK = S( 112,   13);
constexpr ScorePair SAFE_QUEEN_CHECK = S(  67,   26);
constexpr ScorePair UNSAFE_KNIGHT_CHECK = S(  18,   -2);
constexpr ScorePair UNSAFE_BISHOP_CHECK = S(  39,   11);
constexpr ScorePair UNSAFE_ROOK_CHECK = S(  43,    1);
constexpr ScorePair UNSAFE_QUEEN_CHECK = S(  19,   11);
constexpr ScorePair QUEENLESS_ATTACK = S(-113,  243);
constexpr ScorePair KING_ATTACKER_WEIGHT[4] = {S(  56,   -2), S(  21,    0), S(  23,  -16), S(   6,  -45)};
constexpr ScorePair KING_ATTACKS = S(   8,   -1);
constexpr ScorePair WEAK_KING_RING = S(   5,    0);
constexpr ScorePair KING_FLANK_ATTACKS[2] = {S(  12,   -6), S(   3,    1)};
constexpr ScorePair KING_FLANK_DEFENSES[2] = {S(  -9,    1), S(  -7,    4)};
constexpr ScorePair SAFETY_OFFSET = S(  92,   50);

constexpr ScorePair MINOR_BEHIND_PAWN = S(   1,   10);
constexpr ScorePair KNIGHT_OUTPOST = S(  18,   18);
constexpr ScorePair BISHOP_PAWNS[7] = {S(  11,    5), S(   5,   14), S(   4,   10), S(   0,    5), S(  -3,   -1), S(  -5,   -9), S(  -8,  -22)};
constexpr ScorePair BISHOP_PAIR = S(  20,   68);
constexpr ScorePair LONG_DIAG_BISHOP = S(  12,   13);
constexpr ScorePair ROOK_OPEN[2] = {S(  32,    0), S(  21,    0)};

constexpr ScorePair TEMPO = S(  26,   16);

constexpr ScorePair COMPLEXITY_PAWNS = S(   0,   10);
constexpr ScorePair COMPLEXITY_PAWNS_BOTH_SIDES = S(   0,  141);
constexpr ScorePair COMPLEXITY_PAWN_ENDGAME = S(   0,  146);
constexpr ScorePair COMPLEXITY_OFFSET = S(   0, -217);

#undef S
// clang-format on

}
