#pragma once

#include "../defs.h"

namespace eval
{

#define S(mg, eg) PackedScore(mg, eg)

constexpr PackedScore MATERIAL[6] = {S(  61,  129), S( 288,  445), S( 313,  452), S( 387,  812), S( 791, 1503), S(0, 0)};

constexpr PackedScore PSQT[6][64] = {
	{
		S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
		S(  64,   84), S(  29,   90), S(  33,   95), S(  55,   75), S(  64,   66), S(  30,   97), S(  30,  102), S(  62,   90),
		S(  25,   26), S(  31,   43), S(  30,   13), S(  55,  -21), S(  40,  -14), S(  24,    7), S(   2,   34), S(   9,   31),
		S(  18,   18), S(   9,   13), S(  11,   -5), S(  18,  -17), S(   6,  -17), S(  -1,   -3), S(  -5,   12), S( -11,   21),
		S(   6,    5), S(   7,   10), S(   5,  -17), S(  13,  -13), S(   7,  -13), S(  -5,   -7), S( -13,    9), S( -17,    7),
		S(   0,    1), S(   9,   -3), S(   1,  -23), S(  -2,    1), S(  -8,    0), S( -16,   -7), S( -23,    3), S( -29,    5),
		S(  14,    4), S(  32,   -2), S(  14,   -9), S(   8,   10), S(  -6,    3), S(  -8,   -2), S( -14,   11), S( -18,   12),
		S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
	},
	{
		S( -69,  -86), S( -79,  -20), S( -27,  -16), S(  16,  -14), S( -34,    5), S( -69,    8), S(-113,   17), S( -84,  -40),
		S(  -5,   -9), S(  21,    0), S(  34,   -5), S(  13,    4), S(  17,    5), S(   1,   13), S(  -4,   19), S( -11,   11),
		S(  19,   -9), S(  14,   -4), S(  59,  -19), S(  40,    0), S(  22,    8), S(  12,    5), S(   2,    5), S(  -7,    6),
		S(  36,    2), S(  37,    6), S(  49,    4), S(  36,   13), S(  33,   16), S(  30,    8), S(  19,    4), S(   7,   17),
		S(  10,   15), S(  21,   10), S(  28,    7), S(  21,   20), S(  25,   13), S(  20,   13), S(  21,    3), S(   1,   12),
		S(   2,   -2), S(  17,   -4), S(   8,  -10), S(  17,    7), S(   6,    7), S(  -1,   -5), S(  -1,   -5), S( -15,   -1),
		S(   2,    6), S(   5,   -6), S(   5,   -8), S(   4,   -3), S(   5,   -3), S(  -8,   -7), S( -13,   -3), S( -20,   -1),
		S( -13,   -4), S( -12,   -1), S(  -4,   -9), S(  -2,    3), S(  -9,    0), S( -22,   -6), S( -16,   -2), S( -50,   10),
	},
	{
		S( -39,   -4), S( -37,    7), S( -15,    1), S( -74,   13), S( -70,   18), S( -53,    4), S( -27,    8), S( -16,   16),
		S( -23,   -5), S( -36,   11), S(  -7,   -2), S(  -1,   -1), S( -21,    8), S(   1,   -1), S(  -2,    0), S(  -3,   -5),
		S(  20,   12), S(  14,   -2), S(  43,    4), S(  10,    4), S(  15,   -1), S(   6,    4), S(   6,    5), S(   6,    3),
		S(  -3,    5), S(   8,    8), S(   7,   11), S(  19,   13), S(  18,   19), S(  12,    5), S(   4,    9), S(  -8,    8),
		S(  14,   -4), S(   2,    8), S(   5,    7), S(   8,   11), S(  16,    8), S(  -4,   12), S(  -2,    6), S(  -1,    3),
		S(  22,  -11), S(  22,  -10), S(  12,   -3), S(   3,    7), S(  -4,    3), S(   6,    3), S(  10,    2), S(   1,   -6),
		S(  23,  -19), S(  30,  -24), S(  20,  -14), S(   4,   -6), S(  -4,   -1), S(   8,  -18), S(   7,  -17), S(  14,   -7),
		S(  36,  -31), S(  19,  -20), S(  -4,    0), S(  14,   -3), S(   0,   -2), S(   2,    8), S(  12,   -1), S(  13,   -7),
	},
	{
		S(   9,   10), S( -24,   36), S(  -3,   24), S( -12,   16), S( -28,   25), S( -22,   28), S( -12,   22), S(  -7,   19),
		S(  26,    1), S(  32,    5), S(  23,    8), S(   5,   12), S(  15,   15), S(   0,   27), S(  -2,   22), S(   0,   15),
		S(   9,    3), S(  45,    1), S(  34,    0), S(  26,    4), S(   3,   14), S(  -1,   24), S(  12,   19), S(  -8,   22),
		S(   2,   10), S(   5,   15), S(  17,    9), S(  11,    4), S(   2,   14), S(   5,   18), S(   5,   18), S( -10,   21),
		S(  -8,   -2), S(  12,    3), S(  -2,    6), S(   6,    2), S(  -6,    6), S(  -9,    9), S( -12,   10), S( -15,    9),
		S(   9,  -28), S(  19,  -27), S(   2,  -17), S(   1,  -17), S( -11,  -10), S( -16,  -10), S( -14,  -10), S( -20,   -9),
		S(  -6,  -31), S(  20,  -37), S(   5,  -25), S(   2,  -24), S(  -5,  -20), S(  -6,  -18), S( -16,  -13), S( -19,  -20),
		S(  -9,  -35), S(  -7,  -17), S(  -1,  -21), S(   5,  -28), S(  -2,  -24), S(  -9,  -17), S(  -9,  -21), S(  -9,  -17),
	},
	{
		S(   6,  -26), S(  39,  -44), S(   2,    7), S(  -3,   -2), S(  15,  -22), S( -15,   -1), S( -37,   -4), S( -17,  -12),
		S(  36,    3), S(  -5,   11), S(  -1,   20), S( -38,   54), S( -27,   33), S(  -9,    8), S(  -7,  -13), S(   7,  -14),
		S(  12,    5), S(  16,    7), S(   7,   15), S(  -4,   26), S(   3,   17), S(   7,   15), S(   6,   -6), S(  18,   -9),
		S(  10,   20), S(   8,   41), S(   8,   13), S( -12,   34), S(  -8,   33), S(   5,    6), S(   4,   16), S(   2,   10),
		S(  12,   10), S(  15,   18), S(   2,   27), S(  -1,   29), S(  -6,   30), S(  -6,   22), S(   1,   18), S(  -2,    8),
		S(  13,  -21), S(  12,   -4), S(   3,    9), S(  -9,   23), S(  -8,   15), S(  -8,   17), S(   2,   -3), S(   2,  -12),
		S(  13,  -59), S(  17,  -68), S(   8,  -39), S(   3,   -5), S(   1,    1), S(   3,  -17), S(   1,  -20), S(   8,  -36),
		S(   5,  -51), S( -14,  -51), S( -18,  -23), S(  -8,  -17), S(  -8,  -11), S( -12,   -4), S( -16,  -13), S( -16,  -11),
	},
	{
		S(   2,  -65), S(   4,    0), S( -29,   -6), S( -22,   -8), S(   8,   -5), S(   8,   -5), S(   8,   -5), S(   8,   -5),
		S( -56,   33), S(   1,   59), S(  -7,   46), S(  31,   19), S(   8,   -5), S(   8,   -5), S(   8,   -5), S(   8,   -5),
		S( -23,   25), S(  25,   53), S(  33,   42), S(   3,   43), S(   8,   -5), S(   8,   -5), S(   8,   -5), S(   8,   -5),
		S( -63,   24), S( -21,   46), S( -17,   38), S( -46,   34), S(   8,   -5), S(   8,   -5), S(   8,   -5), S(   8,   -5),
		S( -80,   13), S( -35,   31), S( -23,   19), S( -46,   17), S(   8,   -5), S(   8,   -5), S(   8,   -5), S(   8,   -5),
		S( -38,   -4), S(   7,    8), S(  -9,   -2), S( -15,   -3), S(   8,   -5), S(   8,   -5), S(   8,   -5), S(   8,   -5),
		S(  24,  -27), S(  35,   -8), S(  13,  -15), S(  -3,  -18), S(   8,   -5), S(   8,   -5), S(   8,   -5), S(   8,   -5),
		S(  19,  -62), S(  24,  -27), S(   4,  -31), S(  14,  -51), S(   8,   -5), S(   8,   -5), S(   8,   -5), S(   8,   -5),
	},
};

constexpr PackedScore MOBILITY[4][28] = {
	{S( -11,  -20), S( -39,  -65), S( -14,  -32), S(  -6,   -5), S(   4,    7), S(   6,   18), S(  14,   26), S(  22,   33), S(  31,   33), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -21,  -32), S( -52,  -98), S( -30,  -39), S( -23,  -17), S( -11,   -4), S(  -4,    6), S(   1,   16), S(   6,   21), S(   8,   26), S(  13,   28), S(  15,   30), S(  28,   21), S(  30,   24), S(  48,    6), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -27,  -41), S(  13,  -72), S( -25,  -51), S( -13,  -31), S(  -7,  -23), S(  -2,   -6), S(   0,    0), S(  -5,   10), S(  -1,   13), S(   2,   19), S(   6,   25), S(   7,   35), S(  10,   40), S(  17,   42), S(  23,   40), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -33,    6), S( -52,  -80), S( -96,  -80), S( -77, -252), S( -74,  -95), S( -28,  -40), S( -22,   -9), S( -14,   -5), S(  -6,   -4), S(  -5,   20), S(  -3,   27), S(   0,   37), S(   3,   41), S(   6,   44), S(   9,   46), S(  12,   47), S(  13,   49), S(  13,   55), S(  14,   54), S(  16,   55), S(  24,   47), S(  31,   31), S(  35,   28), S(  53,    6), S(  63,   -7), S(  66,  -13), S(  46,   -6), S(  18,  -28)}
};

constexpr PackedScore THREAT_BY_PAWN[6] = {S(   9,  -14), S(  64,   31), S(  63,   63), S(  79,   30), S(  75,   -8), S(   0,    0)};
constexpr PackedScore THREAT_BY_KNIGHT[2][6] = {
	{S(   8,   29), S(  27,   34), S(  38,   43), S(  75,   12), S(  47,  -21), S(   0,    0)},
	{S(  -4,   11), S(  13,   35), S(  30,   31), S(  64,   33), S(  57,    1), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_BISHOP[2][6] = {
	{S(   1,   38), S(  43,   36), S(  -7,   34), S(  71,   16), S(  68,   65), S(   0,    0)},
	{S(   0,    8), S(  22,   24), S( -21,  -18), S(  45,   46), S(  48,  124), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_ROOK[2][6] = {
	{S(   1,   43), S(  18,   64), S(  28,   57), S(  13,  -49), S(  74,   12), S(   0,    0)},
	{S(  -8,    7), S(   2,   16), S(  14,    3), S(  13,  -92), S(  64,   48), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_QUEEN[2][6] = {
	{S(   7,   10), S(  24,   22), S(   9,   51), S(  14,    9), S(  11,  -55), S(  98,   30)},
	{S(  -1,   10), S(   0,    7), S(  -7,   19), S(  -6,    4), S( -19,  -68), S( 111,   65)}
};
constexpr PackedScore THREAT_BY_KING[6] = {S( -32,   48), S(   0,   50), S(  21,   42), S(  83,   18), S(   0,    0), S(   0,    0)};
constexpr PackedScore PUSH_THREAT = S(  16,   21);

constexpr PackedScore ISOLATED_PAWN[8] = {S(  -6,   -2), S(  -5,  -11), S( -11,  -10), S( -11,  -16), S( -10,  -14), S(  -7,   -7), S(  -1,  -11), S(  -8,   -1)};
constexpr PackedScore PAWN_PHALANX[8] = {S(   0,    0), S(   6,   -3), S(  12,    3), S(  19,   16), S(  47,   61), S( 111,  226), S( -36,  356), S(   0,    0)};
constexpr PackedScore DEFENDED_PAWN[8] = {S(   0,    0), S(   0,    0), S(  21,   10), S(  13,    9), S(  13,   18), S(  20,   58), S( 129,   81), S(   0,    0)};

constexpr PackedScore PASSED_PAWN[2][2][8] = {
	{
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -32,  -36), S( -14,   25), S( -21,  152), S(  28,  241), S(   0,    0)},
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -20,  -49), S(  11,  -24), S(  15,   15), S(  61,   37), S(   0,    0)}
	},
	{
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -27,  -56), S(   0,  -27), S(  16,    1), S(  67,   -2), S(   0,    0)},
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -28,  -61), S(   1,  -37), S(  -7,  -19), S(  -3,  -18), S(   0,    0)}
	}
};
constexpr PackedScore OUR_PASSER_PROXIMITY[8] = {S(   0,    0), S(  46,   82), S(   2,   68), S(   0,   42), S(   3,   31), S(   9,   24), S(  19,   22), S(  11,   22)};
constexpr PackedScore THEIR_PASSER_PROXIMITY[8] = {S(   0,    0), S( -39,    6), S(  21,   -2), S(  13,   26), S(  17,   45), S(  10,   79), S(  13,   79), S(  12,   69)};

constexpr PackedScore PAWN_STORM[2][4][8] = {
	{
		{S(  15,   13), S(-132,  -51), S(  -1,   -9), S(   4,  -12), S(   0,    1), S(  -5,   10), S(  -3,    9), S(   0,    0)},
		{S(  11,    2), S(  -8, -105), S(  55,  -42), S(   9,  -10), S(   2,   -4), S( -11,    7), S(  -7,   11), S(   0,    0)},
		{S(  -3,    5), S(  60, -101), S(  71,  -45), S(  18,  -17), S(   3,   -1), S(  -8,    8), S(  -9,   12), S(   0,    0)},
		{S(   8,   -7), S( 105,  -87), S(  39,  -22), S(  14,   -2), S(  -2,    4), S(  -9,    0), S(  -3,    1), S(   0,    0)}
	},
	{
		{S(   0,    0), S(  -3,  -26), S( -30,  118), S(  16,  -52), S(  -2,    8), S(  -1,    6), S(  -5,   10), S(   0,    0)},
		{S(   0,    0), S(  -2,  -82), S(   0,   68), S(  54,  -37), S(   3,    3), S(  -7,    6), S(  -8,   10), S(   0,    0)},
		{S(   0,    0), S(  -8,   13), S( -54, -109), S(  20,  -29), S(   2,    4), S(  -2,    7), S(  -9,   11), S(   0,    0)},
		{S(   0,    0), S( -12,  -55), S(  66,   -9), S(  23,   -3), S(   0,    9), S(   0,   -9), S(   0,    7), S(   0,    0)}
	}
};
constexpr PackedScore PAWN_SHIELD[4][8] = {
	{S(  16,    3), S(  -7,   26), S( -15,   15), S(  -2,    8), S(   3,   -1), S( -31,  -26), S( -78,  -35), S(   0,    0)},
	{S(  19,    2), S( -15,   11), S( -11,    2), S(  12,   -2), S(  10,   -9), S(  -2,  -16), S( -42,  -31), S(   0,    0)},
	{S(   8,   14), S( -15,    9), S(   6,   -9), S(   3,   -1), S(   2,    1), S(  10,  -12), S(  -6,  -38), S(   0,    0)},
	{S(  14,   -3), S(   5,   -2), S(  -4,    0), S(   0,   -6), S(   8,   -9), S(  29,  -20), S( -11,  -22), S(   0,    0)}
};
constexpr PackedScore SAFE_KNIGHT_CHECK = S(  82,   -2);
constexpr PackedScore SAFE_BISHOP_CHECK = S(  24,   11);
constexpr PackedScore SAFE_ROOK_CHECK = S(  60,    6);
constexpr PackedScore SAFE_QUEEN_CHECK = S(  24,   21);
constexpr PackedScore UNSAFE_KNIGHT_CHECK = S(   6,    2);
constexpr PackedScore UNSAFE_BISHOP_CHECK = S(  12,   12);
constexpr PackedScore UNSAFE_ROOK_CHECK = S(  21,    0);
constexpr PackedScore UNSAFE_QUEEN_CHECK = S(   6,   14);
constexpr PackedScore KING_ATTACKER_WEIGHT[4] = {S(  20,    2), S(  16,    3), S(  18,  -13), S(   5,    0)};
constexpr PackedScore KING_ATTACKS[14] = {S( -46,   29), S( -53,   23), S( -61,   17), S( -65,   20), S( -64,   16), S( -57,   11), S( -41,    6), S( -21,   -4), S(  17,  -22), S(  40,  -21), S(  71,  -33), S(  83,   -9), S( 119,  -93), S(  81,   58)};

constexpr PackedScore MINOR_BEHIND_PAWN = S(   8,   14);
constexpr PackedScore KNIGHT_OUTPOST = S(  27,   19);
constexpr PackedScore BISHOP_PAWNS[7] = {S(   5,   24), S(   7,   22), S(   5,   13), S(   1,    5), S(  -2,   -5), S(  -3,  -20), S(  -8,  -34)};
constexpr PackedScore BISHOP_PAIR = S(  20,   62);
constexpr PackedScore ROOK_OPEN[2] = {S(  26,    2), S(  15,    3)};

constexpr PackedScore TEMPO = S(  32,   35);

constexpr PackedScore COMPLEXITY_PAWNS = S(   0,    8);
constexpr PackedScore COMPLEXITY_PASSERS = S(   0,    1);
constexpr PackedScore COMPLEXITY_PAWNS_BOTH_SIDES = S(   0,   70);
constexpr PackedScore COMPLEXITY_PAWN_ENDGAME = S(   0,   62);
constexpr PackedScore COMPLEXITY_OFFSET = S(   0, -132);

#undef S


}