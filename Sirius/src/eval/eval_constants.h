#pragma once

#include "../defs.h"

namespace eval
{

#define S(mg, eg) PackedScore(mg, eg)

constexpr PackedScore MATERIAL[6] = {S(  66,   95), S( 301,  390), S( 292,  393), S( 421,  722), S( 852, 1333), S(0, 0)};

constexpr PackedScore PSQT[6][64] = {
	{
		S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
		S( -11,  103), S(   0,  105), S(  50,   91), S(  66,   45), S(  63,   36), S(  33,   54), S(  13,   80), S(   3,   75),
		S(  46,   39), S(  56,   54), S(  82,    7), S(  54,  -18), S(  45,  -21), S(  37,    0), S(   4,   47), S(   2,   36),
		S(  21,    8), S(  13,   24), S(  30,   -5), S(  20,   -9), S(   5,   -9), S(   2,   -2), S(  -9,   24), S( -11,   19),
		S(   9,   -8), S(   3,   16), S(  16,  -10), S(   8,   -6), S(   3,   -8), S(  -5,   -6), S( -19,   19), S( -19,    2),
		S(  13,  -21), S(  15,   -2), S(  -1,   -6), S(  -2,   -2), S( -12,   -1), S( -18,   -8), S( -30,    9), S( -34,   -2),
		S(  25,  -23), S(  46,   -4), S(  34,   -8), S(   0,   11), S( -15,    2), S( -15,    0), S( -26,   18), S( -29,    5),
		S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
	},
	{
		S( -72,  -69), S( -59,  -28), S(  -8,  -25), S(  18,  -15), S( -28,    3), S( -68,    8), S(-109,   15), S( -90,  -34),
		S(   1,  -13), S(  28,   -6), S(  28,  -13), S(  11,   -5), S(  12,    0), S(   0,    2), S(  -6,   17), S( -12,    9),
		S(  27,  -12), S(  12,   -7), S(  59,  -22), S(  30,   -4), S(  17,    2), S(  13,    1), S(   2,    2), S(  -5,    2),
		S(  39,   -1), S(  34,    5), S(  48,    2), S(  33,   12), S(  36,   11), S(  29,    4), S(  17,    3), S(   7,   16),
		S(  10,   15), S(  26,    6), S(  28,    7), S(  24,   20), S(  27,   14), S(  18,   13), S(  21,    3), S(   0,   14),
		S(   0,    1), S(  16,   -5), S(   4,  -10), S(  18,    9), S(   4,   11), S(  -5,   -4), S(  -6,   -3), S( -17,    1),
		S(   2,   16), S(   6,    2), S(   8,   -6), S(   1,   -1), S(   2,   -3), S( -12,   -1), S( -15,    4), S( -21,   10),
		S( -18,   19), S( -13,    4), S(  -2,   -5), S(  -5,    4), S( -12,   -1), S( -24,   -4), S( -16,   -1), S( -57,   24),
	},
	{
		S( -43,   -6), S( -39,    5), S( -18,   -4), S( -72,    6), S( -75,   13), S( -61,    4), S( -35,    6), S( -14,    7),
		S( -37,   -2), S( -58,   13), S( -16,   -3), S( -10,   -8), S( -27,    3), S(  -4,   -6), S(  -8,   -4), S( -12,   -3),
		S(  17,    9), S(  23,   -1), S(  33,    6), S(   7,    3), S(  14,   -8), S(   4,    2), S(  10,    2), S(   4,    4),
		S(   3,    2), S(   9,    7), S(  14,   10), S(  15,   13), S(  24,   15), S(  12,    4), S(   5,    9), S(  -9,    7),
		S(  20,  -11), S(   7,    5), S(  10,    4), S(  17,   11), S(  16,   11), S(   2,   13), S(  -2,    8), S(   1,    5),
		S(  20,   -8), S(  23,  -11), S(  11,   -3), S(   7,    9), S(  -1,    8), S(   4,    5), S(  12,    4), S(  -1,   -3),
		S(  25,   -8), S(  31,  -18), S(  25,  -13), S(   4,   -2), S(  -4,    1), S(  11,  -15), S(   5,  -14), S(  21,    1),
		S(  35,  -23), S(  21,   -7), S(  -2,    6), S(  14,   -6), S(   0,   -4), S(   4,    6), S(  16,    5), S(  10,   -3),
	},
	{
		S(  22,    6), S( -21,   30), S(  -2,   25), S( -14,   18), S( -34,   31), S( -27,   31), S( -14,   22), S( -14,   22),
		S(  42,   -6), S(  42,    3), S(  26,    8), S(   9,   10), S(  22,   10), S(   4,   21), S(  -2,   19), S(  -7,   16),
		S(  23,   -9), S(  56,   -8), S(  42,   -9), S(  22,    1), S(   6,    6), S(   2,   14), S(  14,    9), S( -12,   15),
		S(  14,   -5), S(  17,    1), S(  22,   -2), S(  15,   -2), S(   5,    5), S(   8,    9), S(   7,    8), S( -10,   14),
		S(  -5,   -5), S(  21,   -4), S(   0,    3), S(   8,    1), S(  -3,    4), S(  -9,    8), S( -12,    9), S( -18,    8),
		S(   5,  -22), S(  21,  -23), S(  -1,  -13), S(   1,  -12), S( -14,   -3), S( -19,   -6), S( -18,   -7), S( -25,   -3),
		S( -15,  -19), S(  19,  -28), S(   6,  -19), S(  -2,  -16), S( -10,  -12), S( -12,   -9), S( -21,   -6), S( -27,   -8),
		S( -22,  -17), S( -14,   -7), S(  -6,  -12), S(   0,  -20), S(  -9,  -16), S( -16,   -9), S( -16,  -14), S( -17,   -7),
	},
	{
		S(   5,  -16), S(  59,  -49), S(  -1,   20), S(  -5,   17), S(   3,    7), S( -29,   26), S( -48,   19), S( -28,    8),
		S(  50,  -10), S(   2,    8), S(   7,   29), S( -32,   63), S( -22,   44), S(  -7,   15), S( -11,   -6), S(   2,   -8),
		S(  21,    3), S(  27,   -3), S(   2,   22), S(  -8,   36), S(  -2,   27), S(   2,   14), S(   4,   -6), S(  15,  -12),
		S(  19,   13), S(   7,   36), S(  12,   21), S( -14,   33), S(  -7,   27), S(   8,    3), S(   5,   11), S(   4,    3),
		S(  16,    7), S(  19,    8), S(   5,   23), S(   7,   25), S(  -5,   20), S(   0,   14), S(   3,   13), S(  -1,    8),
		S(  16,  -25), S(  13,  -11), S(   3,    3), S(  -6,   20), S(  -6,   13), S(  -8,    6), S(   2,   -6), S(   1,  -11),
		S(  13,  -56), S(  17,  -67), S(  11,  -41), S(   3,   -9), S(   0,   -7), S(   2,  -19), S(  -1,  -29), S(   8,  -38),
		S(   3,  -55), S( -17,  -51), S( -21,  -19), S( -11,  -16), S( -10,  -16), S( -14,  -15), S( -17,  -20), S( -17,  -25),
	},
	{
		S(  96,  -72), S(  55,  -15), S(  28,   -8), S(  25,  -11), S(   8,   -3), S(   8,   -3), S(   8,   -3), S(   8,   -3),
		S( -88,   35), S(  12,   35), S(  18,   26), S(  94,   -4), S(   8,   -3), S(   8,   -3), S(   8,   -3), S(   8,   -3),
		S( -76,   28), S(  39,   25), S(  62,   14), S(  43,   10), S(   8,   -3), S(   8,   -3), S(   8,   -3), S(   8,   -3),
		S(-112,   18), S( -40,   16), S( -33,   15), S( -37,    5), S(   8,   -3), S(   8,   -3), S(   8,   -3), S(   8,   -3),
		S(-132,   11), S( -61,   11), S( -45,    7), S( -51,    5), S(   8,   -3), S(   8,   -3), S(   8,   -3), S(   8,   -3),
		S( -78,   10), S( -15,    4), S( -28,    6), S( -17,    2), S(   8,   -3), S(   8,   -3), S(   8,   -3), S(   8,   -3),
		S(   5,   -6), S(  24,   -1), S(   9,    2), S(   1,   -1), S(   8,   -3), S(   8,   -3), S(   8,   -3), S(   8,   -3),
		S(  18,  -35), S(  25,  -12), S(  -3,    1), S(   5,  -15), S(   8,   -3), S(   8,   -3), S(   8,   -3), S(   8,   -3),
	},
};

constexpr PackedScore MOBILITY[4][28] = {
	{S(  -6,   -1), S( -33,  -52), S(  -9,  -17), S(   1,    9), S(  11,   22), S(  15,   34), S(  24,   41), S(  33,   48), S(  42,   47), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S(  -2,  -25), S( -39,  -93), S( -15,  -38), S(  -8,  -13), S(   4,   -0), S(  12,   10), S(  17,   22), S(  22,   27), S(  25,   33), S(  29,   35), S(  29,   39), S(  39,   32), S(  32,   38), S(  47,   26), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -37,  -13), S(   8,  -43), S( -24,  -29), S( -14,  -14), S(  -8,   -8), S(  -2,    8), S(   2,   14), S(  -3,   22), S(   2,   24), S(   6,   29), S(  11,   33), S(  13,   39), S(  17,   44), S(  25,   45), S(  32,   41), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -41,   58), S( -57,  -26), S(-110,  -11), S( -68, -238), S( -76,  -64), S( -31,    0), S( -22,   27), S( -13,   28), S(  -6,   36), S(  -4,   61), S(  -2,   70), S(   2,   81), S(   5,   87), S(   9,   89), S(  13,   93), S(  16,   97), S(  18,   99), S(  18,  105), S(  19,  108), S(  19,  111), S(  27,  105), S(  34,   93), S(  38,   94), S(  64,   66), S(  72,   65), S( 120,   24), S( 120,   23), S(  82,   16)}
};

constexpr PackedScore THREAT_BY_PAWN[6] = {S(   8,  -17), S(  68,   30), S(  68,   61), S(  94,   10), S(  79,  -18), S(   0,    0)};
constexpr PackedScore THREAT_BY_KNIGHT[2][6] = {
	{S(   8,   29), S(  33,   24), S(  38,   40), S(  80,    5), S(  46,  -25), S(   0,    0)},
	{S(  -4,   12), S(  14,   45), S(  32,   33), S(  65,   31), S(  56,   -3), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_BISHOP[2][6] = {
	{S(   5,   36), S(  52,   26), S(   0,   35), S(  75,    9), S(  74,   42), S(   0,    0)},
	{S(   1,   10), S(  24,   26), S( -14,   10), S(  47,   43), S(  52,  130), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_ROOK[2][6] = {
	{S(  -1,   46), S(  30,   53), S(  29,   51), S(  14,  -31), S(  77,   -0), S(   0,    0)},
	{S(  -8,   15), S(   6,   19), S(  17,    7), S(   8,  -60), S(  61,   55), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_QUEEN[2][6] = {
	{S(  12,    6), S(  38,    9), S(  19,   44), S(  26,  -10), S(  12,  -69), S( 142,  -38)},
	{S(  -1,   16), S(   1,    8), S(  -4,   23), S(  -4,    3), S( -20,  -59), S( 117,   48)}
};
constexpr PackedScore THREAT_BY_KING[6] = {S( -17,   45), S(  33,   43), S(  34,   49), S( 106,    8), S(   0,    0), S(   0,    0)};
constexpr PackedScore PUSH_THREAT = S(  20,   18);

constexpr PackedScore PASSED_PAWN[8] = {S(   0,    0), S( -22,  -75), S( -18,  -59), S( -16,  -22), S(  10,   16), S(   0,   90), S(  49,  104), S(   0,    0)};
constexpr PackedScore ISOLATED_PAWN[8] = {S(  -8,    9), S(  -2,  -12), S( -10,   -5), S(  -7,  -15), S( -10,  -13), S(  -7,   -4), S(  -2,  -11), S( -11,    7)};
constexpr PackedScore PAWN_PHALANX[8] = {S(   0,    0), S(   3,   -1), S(  13,    7), S(  20,   16), S(  49,   58), S( 122,  199), S(-168,  492), S(   0,    0)};
constexpr PackedScore DEFENDED_PAWN[8] = {S(   0,    0), S(   0,    0), S(  19,   11), S(  13,    8), S(  15,   16), S(  32,   41), S( 191,   25), S(   0,    0)};
constexpr PackedScore OUR_PASSER_PROXIMITY[8] = {S(   0,    0), S(   8,   54), S(  -7,   43), S(  -5,   27), S(  -1,   16), S(   2,   15), S(  18,   13), S(   7,   11)};
constexpr PackedScore THEIR_PASSER_PROXIMITY[8] = {S(   0,    0), S( -99,    3), S(   2,    1), S(  -2,   30), S(   7,   40), S(  10,   48), S(  15,   53), S(  -2,   52)};

constexpr PackedScore PAWN_STORM[3][8] = {
	{S(  54,  -37), S(  29,  -20), S(  19,   -6), S(   9,   -1), S(   2,    2), S(  -2,    7), S(  -1,    7), S(  11,  -12)},
	{S(   0,    0), S(  15,  -29), S(  24,   -1), S(   4,    1), S(  -4,    7), S(  -7,   14), S(  -6,   14), S(  10,   -3)},
	{S(   1,   -1), S(  -8,    7), S(   3,    9), S(   1,    9), S(   2,    9), S(   2,   10), S(   3,   10), S(  -7,   -5)}
};
constexpr PackedScore PAWN_SHIELD[3][8] = {
	{S(  15,  -18), S(   0,  -10), S(  -3,  -12), S(  -4,   -9), S(   9,  -10), S(  22,  -22), S(  32,  -23), S(  -4,    4)},
	{S(   0,    0), S(  -7,    0), S( -11,   -3), S(   2,   -0), S(  16,   -6), S(  35,  -24), S(  53,  -31), S(  10,    3)},
	{S(  -7,   -6), S(  -7,   -3), S(  -0,   -5), S(   3,   -1), S(   6,    0), S(   4,   -0), S(  23,    3), S(  -4,    7)}
};
constexpr PackedScore SAFE_KNIGHT_CHECK = S(  82,   -4);
constexpr PackedScore SAFE_BISHOP_CHECK = S(  16,   -7);
constexpr PackedScore SAFE_ROOK_CHECK = S(  58,   -3);
constexpr PackedScore SAFE_QUEEN_CHECK = S(  31,   13);
constexpr PackedScore KING_ATTACKER_WEIGHT[4] = {S(  16,   -5), S(   9,   -1), S(  11,  -20), S(   1,    8)};
constexpr PackedScore KING_ATTACKS[14] = {S( -26,    9), S( -29,    6), S( -30,    3), S( -29,    8), S( -21,    5), S(  -6,    2), S(  18,   -6), S(  48,  -18), S(  95,  -39), S( 126,  -45), S( 165,  -61), S( 196,  -54), S( 234, -146), S( 191,    9)};

constexpr PackedScore KNIGHT_OUTPOST = S(  25,   19);
constexpr PackedScore BISHOP_PAWNS[7] = {S(  30,   41), S(  32,   36), S(  29,   28), S(  24,   20), S(  19,   11), S(  17,   -2), S(  11,  -16)};
constexpr PackedScore BISHOP_PAIR = S(  22,   64);
constexpr PackedScore ROOK_OPEN[2] = {S(  23,   11), S(  14,   10)};

constexpr PackedScore TEMPO = S(  31,   32);

#undef S


}
