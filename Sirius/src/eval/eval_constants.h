#pragma once

#include "../defs.h"

namespace eval
{

#define S(mg, eg) PackedScore(mg, eg)

constexpr PackedScore MATERIAL[6] = {S(  61,  128), S( 288,  429), S( 305,  443), S( 387,  783), S( 744, 1623), S(0, 0)};

constexpr PackedScore PSQT[6][64] = {
    {
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  60,   78), S(  37,   94), S(  19,  106), S(  52,   81), S(  71,   65), S(  56,   77), S(  46,   97), S(  70,   78),
        S(  15,    7), S(  -8,   39), S(   4,    2), S(  12,  -21), S(   5,  -20), S(   7,  -12), S( -17,   26), S(   0,   12),
        S(  14,    4), S(  -4,   13), S(  12,  -18), S(  11,  -21), S(  -1,  -22), S(   0,  -15), S(  -7,    9), S(  -8,    7),
        S(   6,   -3), S(  -4,   15), S(  14,  -26), S(  16,  -15), S(  10,  -15), S(   0,  -13), S( -13,   10), S( -11,   -2),
        S(  -1,   -4), S(   8,   10), S(   5,   -1), S(   1,    0), S(  -7,   -1), S(  -8,   -7), S( -21,   10), S( -22,   -3),
        S(   9,   -5), S(  25,   11), S(  30,  106), S(   9,    3), S(  -1,   -8), S(  -4,   -6), S( -14,   13), S( -14,    1),
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
    },
    {
        S( -63,  -98), S( -69,  -27), S( -26,  -18), S(  -1,   -8), S( -26,   -1), S( -58,    5), S( -98,    3), S( -81,  -60),
        S( -14,  -14), S(  14,    2), S(  24,   -2), S(  -2,    8), S(   3,   11), S(   4,   11), S(   0,   12), S(  -9,   -3),
        S(   7,   -8), S(  -9,    6), S(  28,   -3), S(  17,   16), S(   6,   22), S(  14,   13), S(   6,    3), S(  -5,   -1),
        S(  29,    4), S(  23,   16), S(  36,   18), S(  20,   26), S(  22,   27), S(  28,   14), S(  21,    3), S(  13,    8),
        S(  10,   16), S(  15,   16), S(  20,   19), S(  19,   28), S(  21,   20), S(  20,   17), S(  23,    1), S(  10,    2),
        S(  15,   -2), S(  16,    3), S(  18,    2), S(  16,   15), S(   7,   15), S(   5,   -1), S(   7,   -7), S(  -6,   -8),
        S(  10,    0), S(  12,   -5), S(   9,   -4), S(  13,   -1), S(   8,   -1), S(  -2,   -4), S(  -2,   -8), S( -14,   -9),
        S(  -3,  -15), S(  -5,  -11), S(   4,  -10), S(   7,    0), S(   1,   -3), S( -15,  -10), S(  -8,  -17), S( -42,   -9),
    },
    {
        S( -45,  -15), S( -27,    6), S(  -9,   -1), S( -71,   10), S( -64,   17), S( -56,    5), S( -29,    7), S( -31,    6),
        S( -22,   -9), S( -45,    5), S( -13,    4), S( -10,    4), S( -23,   12), S(   2,   -1), S( -12,   -6), S(  -3,   -7),
        S(  10,   12), S(  -2,    8), S(  21,    6), S(   4,   12), S(  16,    6), S(   1,    0), S(  11,    5), S(   7,    1),
        S( -10,    5), S(   2,   13), S(   2,   17), S(  18,   19), S(  23,   22), S(  19,    8), S(   6,   11), S(  -4,    1),
        S(  16,   -6), S(  -3,   13), S(   9,   11), S(  15,   14), S(  22,   12), S(   6,   13), S(   4,    5), S(   5,   -1),
        S(  20,   -8), S(  22,   -2), S(   4,   -2), S(  10,   11), S(   1,    8), S(   5,   -3), S(  20,    1), S(   6,   -9),
        S(  26,  -19), S(  25,  -24), S(  27,   -8), S(   7,   -3), S(  -1,    0), S(  12,  -16), S(   6,  -26), S(  16,  -12),
        S(  29,  -36), S(  22,  -15), S(  -4,   -2), S(  19,   -5), S(   2,   -3), S(   1,    1), S(  11,   -4), S(   7,  -19),
    },
    {
        S(  13,   11), S( -13,   31), S( -12,   26), S( -22,   24), S( -14,   23), S( -15,   30), S(   5,   19), S(   7,   19),
        S(  26,    2), S(  31,    8), S(  10,   17), S(  -7,   20), S(  22,   14), S(   9,   24), S(   6,   21), S(  10,   13),
        S(  -5,    5), S(  24,    6), S(   6,    8), S(   6,    9), S(   4,    9), S(   1,   17), S(  15,   11), S(  -5,   14),
        S(  -8,    9), S( -14,   20), S(  -5,   16), S(  -8,   11), S(  -2,   10), S(   5,   11), S(   5,   11), S(  -7,   13),
        S( -17,    4), S(   0,   10), S( -19,   14), S(  -7,    9), S(  -6,    3), S( -10,    6), S( -10,    6), S(  -9,    4),
        S(   4,  -20), S(  23,  -24), S(  -1,  -11), S(  -2,  -13), S(  -6,  -11), S(  -8,  -12), S(  -5,  -14), S( -12,  -10),
        S(  -5,  -28), S(  27,  -36), S(   5,  -22), S(   2,  -20), S(   3,  -21), S(   1,  -19), S(  -8,  -17), S( -12,  -22),
        S(  -5,  -39), S(  -2,  -19), S(   2,  -19), S(   8,  -24), S(   6,  -25), S(  -1,  -19), S(  -1,  -23), S(  -2,  -21),
    },
    {
        S(  12,   -8), S(  51,  -31), S( -17,   43), S( -16,   25), S(  13,    5), S( -12,   19), S( -26,    9), S( -13,    6),
        S(  40,    4), S(  16,    8), S(  -8,   27), S( -34,   55), S(  -6,   32), S(  15,    2), S(  26,  -22), S(  20,   -9),
        S(   6,   11), S(  -1,    5), S(  -7,   20), S( -15,   14), S(   8,   12), S(  21,    3), S(  22,  -18), S(  30,  -16),
        S(  -5,   17), S( -15,   33), S(  -9,   14), S( -16,   24), S(  -3,   23), S(  12,    2), S(  11,    4), S(   9,   -3),
        S(  -4,   14), S(  -2,   12), S( -14,   19), S(  -7,   25), S( -11,   33), S(  -2,   18), S(   5,   13), S(   3,    3),
        S(   3,  -11), S(   6,   -6), S(  -6,    7), S( -13,   15), S(  -8,   13), S(  -4,   12), S(  12,  -11), S(  10,  -19),
        S(   3,  -42), S(  11,  -62), S(   1,  -29), S(   0,  -14), S(  -1,   -4), S(   2,  -17), S(   4,  -23), S(   9,  -38),
        S(  11,  -60), S( -16,  -40), S( -19,  -23), S( -10,  -20), S(  -8,  -19), S( -12,  -14), S( -14,  -18), S( -12,  -18),
    },
    {
        S(  52,  -76), S(  23,   -1), S( -43,  -18), S( -75,    3), S(   9,   -5), S(   9,   -5), S(   9,   -5), S(   9,   -5),
        S( -14,   21), S(  23,   58), S( -10,   33), S( -14,   30), S(   9,   -5), S(   9,   -5), S(   9,   -5), S(   9,   -5),
        S(  31,   15), S(  56,   50), S(  30,   31), S( -32,   51), S(   9,   -5), S(   9,   -5), S(   9,   -5), S(   9,   -5),
        S( -16,   19), S( -10,   53), S( -36,   33), S( -89,   46), S(   9,   -5), S(   9,   -5), S(   9,   -5), S(   9,   -5),
        S( -54,   14), S( -48,   43), S( -46,   13), S( -88,   27), S(   9,   -5), S(   9,   -5), S(   9,   -5), S(   9,   -5),
        S( -14,   -2), S(  -8,   21), S( -28,   -7), S( -55,    6), S(   9,   -5), S(   9,   -5), S(   9,   -5), S(   9,   -5),
        S(  38,  -23), S(  32,    0), S(   6,  -28), S( -27,  -18), S(   9,   -5), S(   9,   -5), S(   9,   -5), S(   9,   -5),
        S(  36,  -55), S(  37,  -20), S(  12,  -48), S(  -2,  -49), S(   9,   -5), S(   9,   -5), S(   9,   -5), S(   9,   -5),
    },
};

constexpr PackedScore MOBILITY[4][28] = {
    {S(   8,  -40), S( -31,  -56), S( -12,  -22), S(  -7,   -3), S(   1,    8), S(   3,   20), S(   7,   27), S(  12,   35), S(  19,   31), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S(   0,  -54), S( -22,  -69), S( -12,  -38), S(  -7,  -19), S(   0,   -8), S(   4,    3), S(   5,   13), S(   6,   19), S(   6,   23), S(   6,   26), S(   6,   27), S(   8,   24), S(   4,   32), S(   5,   15), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S(   0,  -51), S( -21,  -78), S(  -7,  -61), S(   2,  -37), S(   4,  -22), S(   1,   -9), S(   1,   -1), S(   3,    7), S(   2,   12), S(   4,   20), S(   0,   32), S(  -1,   40), S(  -1,   46), S(   0,   48), S(   3,   47), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S(  10,    2), S( -25,  -82), S( -57, -117), S(  -9, -207), S( -15,  -68), S(  -8,  -17), S(   0,  -27), S(   1,   -7), S(   2,    9), S(   4,   18), S(   6,   22), S(   9,   24), S(   8,   35), S(  11,   34), S(  11,   41), S(  12,   43), S(  12,   46), S(  14,   47), S(  12,   47), S(  17,   41), S(  21,   33), S(  26,   17), S(  21,   24), S(  27,    0), S(  26,   -3), S( -12,   11), S( -19,  -11), S(-130,   21)}
};

constexpr PackedScore THREAT_BY_PAWN[6] = {S(   4,  -18), S(  66,   28), S(  59,   59), S(  80,   24), S(  71,   -1), S(   0,    0)};
constexpr PackedScore THREAT_BY_KNIGHT[2][6] = {
    {S(   4,   29), S(  15,   39), S(  37,   44), S(  73,   15), S(  60,  -32), S(   0,    0)},
    {S(  -8,    9), S(   7,   37), S(  29,   29), S(  64,   33), S(  61,   -3), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_BISHOP[2][6] = {
    {S(  -2,   34), S(  39,   32), S( -13,   35), S(  67,   15), S(  70,   42), S(   0,    0)},
    {S(  -4,    5), S(  17,   22), S( -25,  -12), S(  44,   44), S(  46,  110), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_ROOK[2][6] = {
    {S(  -1,   41), S(  15,   59), S(  25,   55), S( -12,  -22), S(  59,   18), S(   0,    0)},
    {S(  -7,    7), S(   2,   15), S(  14,    3), S( -13,  -63), S(  40,   64), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_QUEEN[2][6] = {
    {S(   7,    8), S(  25,   22), S(  10,   49), S(  17,   16), S(  10,  -56), S(  98,   47)},
    {S(  -3,   11), S(   1,    8), S(  -5,   13), S(  -4,    3), S( -16,  -75), S( 114,   50)}
};
constexpr PackedScore THREAT_BY_KING[6] = {S( -20,   44), S(   8,   48), S(  27,   40), S(  82,    8), S(   0,    0), S(   0,    0)};
constexpr PackedScore KNIGHT_HIT_QUEEN = S(  11,    1);
constexpr PackedScore BISHOP_HIT_QUEEN = S(  17,   10);
constexpr PackedScore ROOK_HIT_QUEEN = S(  20,   -3);
constexpr PackedScore PUSH_THREAT = S(  14,   17);

constexpr PackedScore ISOLATED_PAWN[8] = {S(  -8,    5), S(  -3,  -16), S( -12,   -8), S( -10,  -16), S( -12,  -14), S(  -8,   -7), S(  -4,  -13), S( -11,    6)};
constexpr PackedScore DOUBLED_PAWN[8] = {S(  -1,  -60), S(  13,  -36), S(   1,  -26), S(  -2,  -17), S(  -4,  -12), S(  -6,  -19), S(   5,  -37), S(   7,  -70)};
constexpr PackedScore BACKWARDS_PAWN[8] = {S(   0,    0), S(  -7,  -14), S(  -2,  -14), S(  -9,  -11), S(   1,  -17), S(  27,   -1), S(   0,    0), S(   0,    0)};
constexpr PackedScore PAWN_PHALANX[8] = {S(   0,    0), S(   5,   -4), S(  11,   -2), S(  20,    8), S(  39,   41), S( 115,  212), S(   1,  341), S(   0,    0)};
constexpr PackedScore DEFENDED_PAWN[8] = {S(   0,    0), S(   0,    0), S(  18,    6), S(  11,    8), S(  17,   21), S(  30,   63), S( 138,   75), S(   0,    0)};
constexpr PackedScore CANDIDATE_PASSER[2][8] = {
    {S(   0,    0), S( -32,  -16), S( -18,   -8), S(  -1,   26), S(  27,   51), S(  59,   86), S(   0,    0), S(   0,    0)},
    {S(   0,    0), S( -19,   -7), S(  -9,   14), S(  -5,   28), S(  19,   41), S(  29,  151), S(   0,    0), S(   0,    0)}
};

constexpr PackedScore PASSED_PAWN[2][2][8] = {
    {
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -36,  -39), S( -16,   25), S(   7,  148), S(  65,  218), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -23,  -48), S(   4,  -15), S(  34,   23), S(  67,   27), S(   0,    0)}
    },
    {
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -29,  -52), S(  -4,  -13), S(  36,   19), S(  69,   -2), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -30,  -51), S(  -5,  -18), S(  13,    0), S( -10,  -10), S(   0,    0)}
    }
};
constexpr PackedScore OUR_PASSER_PROXIMITY[8] = {S(  74,   99), S(  64,  102), S(  42,   72), S(   5,   57), S(   4,   36), S(   7,   23), S(  11,   16), S(  -7,   22)};
constexpr PackedScore THEIR_PASSER_PROXIMITY[8] = {S( -57,  -16), S(  -3,   -6), S(  27,   -2), S(  19,   31), S(  14,   65), S(  19,   79), S(  24,   81), S(  29,   70)};

constexpr PackedScore PAWN_STORM[2][4][8] = {
    {
        {S(  40,   34), S(-127,  -43), S(  -5,   13), S(  31,   13), S(  17,   24), S(  -3,   29), S( -11,   29), S(   0,    0)},
        {S(  35,    6), S(  49, -120), S(  95,  -46), S(  40,   -4), S(  14,    3), S( -21,   10), S(   4,    7), S(   0,    0)},
        {S(  11,   18), S( 101,  -99), S( 107,  -19), S(  55,    6), S(  13,   19), S( -10,   22), S( -13,   24), S(   0,    0)},
        {S(  17,    2), S( 145,  -80), S( 113,  -12), S(  41,   13), S(  -2,   18), S( -18,    8), S( -19,   17), S(   0,    0)}
    },
    {
        {S(   0,    0), S(   0,    0), S(  37,   41), S( -22,   26), S(  -3,   29), S(  21,   30), S( -10,   29), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S( 100,   -3), S(   8,    7), S(  -3,   18), S(   2,   16), S(   4,    7), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(  89,    5), S(   4,   12), S(   3,   25), S(  27,   24), S(   2,   21), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(  38,    2), S(  18,   17), S( -29,   15), S(  -6,   10), S(  -2,   10), S(   0,    0)}
    }
};
constexpr PackedScore PAWN_SHIELD[4][8] = {
    {S(  46,   31), S( -16,   47), S( -12,   38), S(  27,   31), S(  34,   24), S( -26,   -4), S( -76,  -22), S(   0,    0)},
    {S(  52,    6), S( -19,   18), S(  10,    7), S(  51,    0), S(  39,   -8), S(   2,  -18), S( -41,  -32), S(   0,    0)},
    {S(  23,   -1), S(  16,  109), S(   8,   -2), S(  29,  -23), S(  27,  -21), S(   2,  -26), S( -67,  -30), S(   0,    0)},
    {S(  16,   14), S(   5,    8), S(  -6,    9), S(  19,    5), S(  28,    3), S(  10,    4), S( -87,    7), S(   0,    0)}
};
constexpr PackedScore SAFE_KNIGHT_CHECK = S( 110,    5);
constexpr PackedScore SAFE_BISHOP_CHECK = S(  60,   18);
constexpr PackedScore SAFE_ROOK_CHECK = S( 104,   17);
constexpr PackedScore SAFE_QUEEN_CHECK = S(  53,   27);
constexpr PackedScore UNSAFE_KNIGHT_CHECK = S(  17,    2);
constexpr PackedScore UNSAFE_BISHOP_CHECK = S(  38,   11);
constexpr PackedScore UNSAFE_ROOK_CHECK = S(  38,    3);
constexpr PackedScore UNSAFE_QUEEN_CHECK = S(  16,    4);
constexpr PackedScore QUEENLESS_ATTACK = S(-131,  166);
constexpr PackedScore KING_ATTACKER_WEIGHT[4] = {S(  52,   -5), S(  21,    0), S(  26,  -13), S(   2,  -10)};
constexpr PackedScore KING_ATTACKS = S(   7,   -1);
constexpr PackedScore WEAK_KING_RING = S(   7,   -1);
constexpr PackedScore KING_FLANK_ATTACKS[2] = {S(  11,   -4), S(   6,    1)};
constexpr PackedScore KING_FLANK_DEFENSES[2] = {S(  -6,    0), S(  -9,    2)};
constexpr PackedScore SAFETY_MOBILITY_DIFF = S(   5,   -2);
constexpr PackedScore SAFETY_OFFSET = S(  69,  175);

constexpr PackedScore MINOR_BEHIND_PAWN = S(   5,   12);
constexpr PackedScore KNIGHT_OUTPOST = S(  22,   16);
constexpr PackedScore BISHOP_PAWNS[7] = {S(   4,   20), S(   5,   19), S(   4,   11), S(   1,    4), S(  -2,   -5), S(  -2,  -18), S(  -6,  -30)};
constexpr PackedScore BISHOP_PAIR = S(  18,   59);
constexpr PackedScore LONG_DIAG_BISHOP = S(  15,    8);
constexpr PackedScore ROOK_OPEN[2] = {S(  24,    4), S(  12,    5)};

constexpr PackedScore TEMPO = S(  31,   34);

constexpr PackedScore COMPLEXITY_PAWNS = S(   0,   10);
constexpr PackedScore COMPLEXITY_PAWNS_BOTH_SIDES = S(   0,   63);
constexpr PackedScore COMPLEXITY_PAWN_ENDGAME = S(   0,   81);
constexpr PackedScore COMPLEXITY_OFFSET = S(   0, -132);

#undef S


}