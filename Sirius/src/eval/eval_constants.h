#pragma once

#include "../defs.h"

namespace eval
{

#define S(mg, eg) PackedScore(mg, eg)

constexpr PackedScore MATERIAL[6] = {S(  60,  127), S( 288,  441), S( 314,  448), S( 387,  805), S( 794, 1489), S(0, 0)};

constexpr PackedScore PSQT[6][64] = {
	{
		S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
		S(  65,   86), S(  30,   92), S(  36,   95), S(  56,   75), S(  66,   67), S(  33,   96), S(  31,  103), S(  63,   92),
		S(  22,   25), S(  22,   43), S(  26,   13), S(  47,  -22), S(  34,  -15), S(  18,    7), S(  -1,   33), S(   7,   31),
		S(  19,   18), S(   9,   12), S(  11,   -5), S(  18,  -18), S(   6,  -18), S(   0,   -3), S(  -5,   12), S( -10,   21),
		S(   7,    6), S(   7,   11), S(   6,  -17), S(  14,  -14), S(   8,  -13), S(  -4,   -6), S( -12,   10), S( -16,    8),
		S(   1,    2), S(  10,   -2), S(   2,  -22), S(  -1,    1), S(  -7,    0), S( -14,   -6), S( -22,    4), S( -28,    6),
		S(  15,    4), S(  33,   -2), S(  15,   -7), S(   9,    9), S(  -5,    3), S(  -7,   -2), S( -12,   11), S( -17,   12),
		S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
	},
	{
		S( -69,  -85), S( -77,  -20), S( -28,  -14), S(  18,  -15), S( -34,    6), S( -67,    8), S(-110,   17), S( -83,  -41),
		S(  -7,   -9), S(  22,    0), S(  33,   -5), S(   8,    6), S(  12,    7), S(   2,   13), S(  -4,   19), S( -10,   11),
		S(  16,   -8), S(  13,   -2), S(  58,  -19), S(  39,    1), S(  20,    9), S(  12,    5), S(   3,    5), S(  -7,    7),
		S(  35,    3), S(  37,    6), S(  48,    5), S(  36,   13), S(  30,   17), S(  30,    8), S(  19,    5), S(   7,   17),
		S(  10,   16), S(  20,   12), S(  28,    7), S(  20,   20), S(  25,   13), S(  20,   13), S(  21,    3), S(   2,   13),
		S(   2,   -1), S(  17,   -4), S(   8,  -10), S(  17,    7), S(   7,    7), S(  -1,   -5), S(  -1,   -5), S( -14,    0),
		S(   3,    6), S(   5,   -5), S(   5,   -7), S(   4,   -3), S(   5,   -3), S(  -7,   -6), S( -13,   -3), S( -18,    0),
		S( -11,   -5), S( -11,    0), S(  -3,   -9), S(  -2,    4), S(  -8,    0), S( -22,   -6), S( -15,   -2), S( -48,    9),
	},
	{
		S( -39,   -5), S( -34,    6), S( -14,    0), S( -75,   12), S( -71,   18), S( -53,    3), S( -27,    7), S( -17,   16),
		S( -25,   -5), S( -36,   10), S( -14,   -1), S(  -4,   -1), S( -22,    9), S(   0,   -2), S(  -2,   -1), S(  -3,   -6),
		S(  19,   11), S(  13,   -1), S(  42,    4), S(   9,    3), S(  13,   -1), S(   6,    3), S(   6,    5), S(   6,    3),
		S(  -4,    5), S(   8,    8), S(   6,   10), S(  18,   12), S(  17,   18), S(  11,    4), S(   4,    9), S(  -8,    8),
		S(  12,   -5), S(   1,    8), S(   4,    6), S(   7,   10), S(  15,    8), S(  -5,   12), S(  -3,    6), S(  -1,    2),
		S(  20,  -11), S(  22,  -10), S(  11,   -4), S(   2,    6), S(  -5,    2), S(   5,    3), S(   9,    2), S(  -1,   -6),
		S(  22,  -19), S(  29,  -24), S(  20,  -15), S(   3,   -6), S(  -5,   -1), S(   7,  -19), S(   6,  -17), S(  13,   -7),
		S(  34,  -31), S(  18,  -18), S(  -5,    0), S(  14,   -3), S(  -1,   -2), S(   1,    7), S(  11,   -1), S(  12,   -7),
	},
	{
		S(  11,   10), S( -28,   38), S( -15,   27), S( -11,   14), S( -28,   25), S( -26,   30), S( -11,   22), S(  -3,   17),
		S(  28,    0), S(  30,    6), S(  16,   12), S(   5,   13), S(  16,   15), S(   1,   27), S(  -2,   22), S(   1,   15),
		S(  11,    3), S(  40,    2), S(  31,    1), S(  26,    4), S(   4,   15), S(  -1,   25), S(  13,   19), S(  -7,   21),
		S(   3,   10), S(   5,   14), S(  14,   11), S(  12,    3), S(   3,   14), S(   6,   18), S(   6,   18), S(  -9,   21),
		S(  -7,   -1), S(  13,    3), S(  -4,    8), S(   8,    1), S(  -4,    6), S(  -8,    9), S( -10,    9), S( -14,    9),
		S(  10,  -27), S(  20,  -27), S(   1,  -16), S(   3,  -16), S( -10,   -9), S( -14,  -10), S( -13,  -10), S( -18,   -9),
		S(  -5,  -30), S(  22,  -39), S(   5,  -24), S(   4,  -25), S(  -3,  -21), S(  -4,  -18), S( -14,  -14), S( -17,  -20),
		S(  -8,  -35), S(  -5,  -17), S(   0,  -21), S(   7,  -28), S(   0,  -24), S(  -8,  -16), S(  -7,  -21), S(  -8,  -17),
	},
	{
		S(   8,  -26), S(  43,  -48), S( -12,   15), S( -14,    6), S(   9,  -16), S( -18,    2), S( -39,   -1), S( -15,  -13),
		S(  37,    3), S(  -5,   14), S( -19,   24), S( -38,   54), S( -26,   36), S(  -9,    8), S(  -6,  -12), S(   8,  -12),
		S(  13,    6), S(  10,    8), S(   6,   12), S(  -8,   25), S(   4,   18), S(   9,   13), S(   6,   -4), S(  19,   -8),
		S(  11,   19), S(   8,   39), S(   8,   12), S( -11,   33), S(  -6,   31), S(   7,    6), S(   5,   15), S(   3,    9),
		S(  12,   10), S(  15,   17), S(   2,   25), S(   0,   28), S(  -6,   31), S(  -5,   23), S(   2,   19), S(  -1,    9),
		S(  14,  -22), S(  13,   -5), S(   4,    8), S(  -8,   22), S(  -7,   15), S(  -7,   18), S(   3,   -2), S(   3,  -11),
		S(  14,  -56), S(  18,  -67), S(   8,  -39), S(   4,   -4), S(   2,    2), S(   4,  -16), S(   2,  -20), S(  10,  -35),
		S(   6,  -51), S(  -8,  -53), S( -17,  -22), S(  -8,  -15), S(  -7,   -9), S( -12,   -4), S( -15,  -12), S( -14,  -11),
	},
	{
		S(  -4,  -64), S(   0,    1), S( -31,   -4), S( -22,   -7), S(   8,   -5), S(   8,   -5), S(   8,   -5), S(   8,   -5),
		S( -56,   31), S(  -7,   62), S(  -9,   47), S(  34,   19), S(   8,   -5), S(   8,   -5), S(   8,   -5), S(   8,   -5),
		S( -16,   22), S(  23,   53), S(  32,   42), S(   5,   42), S(   8,   -5), S(   8,   -5), S(   8,   -5), S(   8,   -5),
		S( -56,   21), S( -25,   47), S( -18,   38), S( -44,   34), S(   8,   -5), S(   8,   -5), S(   8,   -5), S(   8,   -5),
		S( -71,    9), S( -38,   31), S( -24,   19), S( -46,   18), S(   8,   -5), S(   8,   -5), S(   8,   -5), S(   8,   -5),
		S( -24,  -10), S(   3,   10), S( -11,   -1), S( -15,   -2), S(   8,   -5), S(   8,   -5), S(   8,   -5), S(   8,   -5),
		S(  29,  -30), S(  32,   -6), S(  12,  -15), S(  -3,  -18), S(   8,   -5), S(   8,   -5), S(   8,   -5), S(   8,   -5),
		S(  19,  -64), S(  21,  -26), S(   2,  -30), S(  14,  -50), S(   8,   -5), S(   8,   -5), S(   8,   -5), S(   8,   -5),
	},
};

constexpr PackedScore MOBILITY[4][28] = {
	{S( -11,  -20), S( -40,  -64), S( -14,  -32), S(  -7,   -6), S(   4,    7), S(   6,   18), S(  14,   25), S(  22,   32), S(  31,   33), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -21,  -32), S( -51,  -97), S( -30,  -38), S( -23,  -16), S( -11,   -4), S(  -4,    6), S(   1,   17), S(   6,   22), S(   9,   27), S(  14,   28), S(  15,   30), S(  28,   22), S(  29,   25), S(  47,    7), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -26,  -42), S(  15,  -73), S( -24,  -51), S( -13,  -31), S(  -6,  -23), S(  -2,   -6), S(   0,    0), S(  -5,   10), S(   0,   13), S(   3,   19), S(   6,   26), S(   7,   35), S(   9,   40), S(  16,   42), S(  24,   39), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -34,    6), S( -52,  -81), S( -99,  -75), S( -90, -216), S( -75,  -94), S( -28,  -42), S( -21,  -12), S( -13,   -8), S(  -5,   -6), S(  -5,   18), S(  -3,   25), S(   0,   34), S(   3,   39), S(   7,   41), S(  10,   43), S(  13,   45), S(  14,   46), S(  14,   52), S(  15,   52), S(  16,   54), S(  24,   45), S(  31,   30), S(  36,   27), S(  51,    8), S(  59,   -3), S(  62,   -9), S(  46,   -7), S(   3,  -18)}
};

constexpr PackedScore THREAT_BY_PAWN[6] = {S(   3,  -19), S(  64,   31), S(  63,   62), S(  79,   29), S(  76,   -9), S(   0,    0)};
constexpr PackedScore THREAT_BY_KNIGHT[2][6] = {
	{S(   8,   29), S(  27,   32), S(  38,   43), S(  75,   12), S(  48,  -24), S(   0,    0)},
	{S(  -4,   10), S(  14,   33), S(  30,   31), S(  64,   33), S(  57,    0), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_BISHOP[2][6] = {
	{S(   1,   38), S(  43,   36), S(  -8,   34), S(  70,   16), S(  69,   63), S(   0,    0)},
	{S(   0,    8), S(  22,   24), S( -21,  -19), S(  44,   47), S(  48,  122), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_ROOK[2][6] = {
	{S(   1,   43), S(  18,   63), S(  28,   57), S(  12,  -47), S(  74,   12), S(   0,    0)},
	{S(  -8,    7), S(   2,   16), S(  14,    3), S(  13,  -90), S(  65,   46), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_QUEEN[2][6] = {
	{S(   7,   10), S(  24,   21), S(   9,   52), S(  14,    9), S(  11,  -55), S(  94,   29)},
	{S(  -1,   10), S(   0,    8), S(  -7,   21), S(  -6,    4), S( -19,  -68), S( 109,   64)}
};
constexpr PackedScore THREAT_BY_KING[6] = {S( -31,   48), S(   0,   50), S(  21,   43), S(  81,   19), S(   0,    0), S(   0,    0)};
constexpr PackedScore PUSH_THREAT = S(  16,   21);

constexpr PackedScore CANDIDATE_PASSER[2][8] = {
	{S(   0,    0), S( -38,  -65), S(  25,   34), S(  12,   46), S(  18,   53), S(  29,   38), S( -56,  -45), S(   0,    0)},
	{S(   0,    0), S( -21,   -3), S( -10,   14), S(   0,   32), S(   3,   33), S(  -8,   21), S( -18,    1), S(   0,    0)}
};
constexpr PackedScore ISOLATED_PAWN[8] = {S(  -6,   -3), S(  -5,  -11), S( -10,  -10), S( -11,  -15), S( -11,  -14), S(  -7,   -7), S(  -2,  -11), S(  -9,   -2)};
constexpr PackedScore PAWN_PHALANX[8] = {S(   0,    0), S(   6,   -3), S(  12,    2), S(  20,    9), S(  46,   44), S( 103,  225), S(  17,  340), S(   0,    0)};
constexpr PackedScore DEFENDED_PAWN[8] = {S(   0,    0), S(   0,    0), S(  20,   10), S(  12,    9), S(  14,   19), S(  26,   58), S( 132,   80), S(   0,    0)};

constexpr PackedScore PASSED_PAWN[2][2][8] = {
	{
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -33,  -35), S( -14,   26), S( -16,  152), S(  31,  237), S(   0,    0)},
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -21,  -49), S(  11,  -23), S(  20,   17), S(  60,   35), S(   0,    0)}
	},
	{
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -28,  -56), S(   0,  -26), S(  20,    2), S(  66,   -3), S(   0,    0)},
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -30,  -61), S(   1,  -36), S(  -2,  -17), S(  -3,  -20), S(   0,    0)}
	}
};
constexpr PackedScore OUR_PASSER_PROXIMITY[8] = {S(   0,    0), S(  46,   82), S(   2,   68), S(   0,   42), S(   3,   31), S(  10,   23), S(  19,   22), S(  13,   21)};
constexpr PackedScore THEIR_PASSER_PROXIMITY[8] = {S(   0,    0), S( -39,    7), S(  22,   -1), S(  14,   26), S(  18,   46), S(  11,   79), S(  13,   79), S(  15,   67)};

constexpr PackedScore PAWN_STORM[2][4][8] = {
	{
		{S(  14,   13), S(-135,  -50), S(  -2,  -10), S(   4,  -12), S(   0,    1), S(  -5,   10), S(  -4,    9), S(   0,    0)},
		{S(  11,    2), S(  -5, -104), S(  51,  -43), S(   9,   -9), S(   2,   -4), S( -11,    7), S(  -8,   11), S(   0,    0)},
		{S(  -4,    5), S(  59,  -99), S(  71,  -45), S(  18,  -17), S(   4,   -1), S(  -7,    8), S(  -8,   11), S(   0,    0)},
		{S(   9,   -7), S( 103,  -83), S(  38,  -21), S(  15,   -1), S(  -1,    4), S(  -8,    0), S(  -2,    0), S(   0,    0)}
	},
	{
		{S(   0,    0), S(  -2,  -18), S( -17,   74), S(   8,  -42), S(  -3,    8), S(  -2,    6), S(  -5,   10), S(   0,    0)},
		{S(   0,    0), S(  -5,  -57), S(   6,   28), S(  51,  -35), S(   3,    3), S(  -7,    7), S(  -8,   10), S(   0,    0)},
		{S(   0,    0), S(  -5,    8), S( -68,  -98), S(  20,  -28), S(   3,    5), S(  -2,    7), S(  -9,   10), S(   0,    0)},
		{S(   0,    0), S(  -8,  -34), S(  54,   -2), S(  24,   -2), S(   1,    9), S(   1,   -9), S(   1,    7), S(   0,    0)}
	}
};
constexpr PackedScore PAWN_SHIELD[4][8] = {
	{S(  15,    3), S(  -7,   26), S( -15,   15), S(  -2,    8), S(   4,   -1), S( -34,  -26), S( -77,  -33), S(   0,    0)},
	{S(  18,    2), S( -15,   11), S( -10,    2), S(  13,   -2), S(  11,   -9), S(  -5,  -14), S( -40,  -32), S(   0,    0)},
	{S(   8,   14), S( -14,    9), S(   6,   -9), S(   3,   -1), S(   2,    1), S(  11,  -13), S(  -1,  -40), S(   0,    0)},
	{S(  14,   -3), S(   5,   -2), S(  -3,    0), S(   0,   -5), S(   9,   -9), S(  29,  -21), S( -14,  -20), S(   0,    0)}
};
constexpr PackedScore SAFE_KNIGHT_CHECK = S(  83,   -2);
constexpr PackedScore SAFE_BISHOP_CHECK = S(  24,   11);
constexpr PackedScore SAFE_ROOK_CHECK = S(  60,    5);
constexpr PackedScore SAFE_QUEEN_CHECK = S(  24,   21);
constexpr PackedScore UNSAFE_KNIGHT_CHECK = S(   7,    1);
constexpr PackedScore UNSAFE_BISHOP_CHECK = S(  12,   12);
constexpr PackedScore UNSAFE_ROOK_CHECK = S(  20,    0);
constexpr PackedScore UNSAFE_QUEEN_CHECK = S(   6,   13);
constexpr PackedScore KING_ATTACKER_WEIGHT[4] = {S(  20,    1), S(  16,    2), S(  18,  -14), S(   5,    2)};
constexpr PackedScore KING_ATTACKS[14] = {S( -36,   14), S( -43,    7), S( -50,    3), S( -55,    4), S( -54,    0), S( -47,   -3), S( -32,   -7), S( -14,  -14), S(  15,  -23), S(  39,  -16), S(  58,  -26), S(  67,   20), S(  89,  -13), S(  76,   44)};

constexpr PackedScore MINOR_BEHIND_PAWN = S(   8,   14);
constexpr PackedScore KNIGHT_OUTPOST = S(  27,   18);
constexpr PackedScore BISHOP_PAWNS[7] = {S(   5,   23), S(   7,   22), S(   5,   13), S(   1,    5), S(  -3,   -5), S(  -3,  -19), S(  -8,  -34)};
constexpr PackedScore BISHOP_PAIR = S(  21,   62);
constexpr PackedScore ROOK_OPEN[2] = {S(  26,    3), S(  15,    3)};

constexpr PackedScore TEMPO = S(  32,   35);

constexpr PackedScore COMPLEXITY_PAWNS = S(   0,    8);
constexpr PackedScore COMPLEXITY_PASSERS = S(   0,    1);
constexpr PackedScore COMPLEXITY_PAWNS_BOTH_SIDES = S(   0,   69);
constexpr PackedScore COMPLEXITY_PAWN_ENDGAME = S(   0,   63);
constexpr PackedScore COMPLEXITY_OFFSET = S(   0, -130);

#undef S


}