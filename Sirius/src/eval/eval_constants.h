#pragma once

#include "../defs.h"

namespace eval
{

#define S(mg, eg) PackedScore(mg, eg)

constexpr PackedScore MATERIAL[6] = {S(  61,  128), S( 288,  444), S( 313,  451), S( 387,  811), S( 795, 1498), S(0, 0)};

constexpr PackedScore PSQT[6][64] = {
	{
		S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
		S(  67,   84), S(  30,   91), S(  33,   96), S(  57,   75), S(  67,   66), S(  31,   97), S(  30,  103), S(  63,   91),
		S(  27,   26), S(  32,   44), S(  30,   14), S(  56,  -19), S(  41,  -13), S(  24,    8), S(   3,   35), S(  10,   32),
		S(  19,   18), S(  10,   13), S(  11,   -4), S(  18,  -17), S(   7,  -16), S(  -1,   -2), S(  -5,   13), S( -11,   22),
		S(   7,    5), S(   7,   10), S(   6,  -17), S(  13,  -12), S(   7,  -12), S(  -5,   -6), S( -13,   10), S( -17,    8),
		S(   0,    1), S(   9,   -2), S(   1,  -22), S(  -2,    2), S(  -8,    0), S( -16,   -6), S( -24,    4), S( -29,    6),
		S(  15,    4), S(  32,   -1), S(  14,   -8), S(   8,   11), S(  -6,    4), S(  -8,   -1), S( -14,   12), S( -18,   12),
		S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
	},
	{
		S( -70,  -85), S( -75,  -21), S( -28,  -15), S(  15,  -13), S( -36,    7), S( -67,    8), S(-108,   15), S( -83,  -41),
		S(  -6,   -9), S(  22,    0), S(  33,   -5), S(  10,    5), S(  13,    7), S(   2,   13), S(  -4,   19), S( -10,   11),
		S(  16,   -7), S(  14,   -3), S(  58,  -19), S(  39,    1), S(  20,    8), S(  12,    5), S(   3,    5), S(  -6,    6),
		S(  35,    3), S(  37,    6), S(  48,    5), S(  37,   13), S(  31,   17), S(  30,    8), S(  19,    4), S(   7,   17),
		S(  10,   16), S(  20,   11), S(  28,    7), S(  20,   20), S(  25,   13), S(  20,   13), S(  21,    3), S(   2,   12),
		S(   3,   -1), S(  18,   -4), S(   8,  -10), S(  17,    7), S(   7,    7), S(  -1,   -6), S(  -1,   -5), S( -14,   -1),
		S(   4,    6), S(   6,   -5), S(   5,   -7), S(   5,   -3), S(   6,   -3), S(  -7,   -6), S( -12,   -3), S( -19,    0),
		S( -11,   -5), S( -11,    0), S(  -3,   -8), S(  -1,    3), S(  -8,    0), S( -22,   -6), S( -15,   -2), S( -49,   10),
	},
	{
		S( -36,   -2), S( -33,    8), S( -13,    2), S( -73,   14), S( -68,   19), S( -51,    6), S( -25,    9), S( -14,   17),
		S( -23,   -2), S( -35,   12), S( -10,    0), S(  -2,    0), S( -19,    9), S(   2,   -1), S(   0,    0), S(   0,   -4),
		S(  22,   13), S(  11,   -3), S(  33,    3), S(   0,    3), S(   1,   -2), S(  -2,    2), S(  -3,    4), S(   8,    4),
		S(  -2,    6), S(  10,    5), S(   4,    6), S(  12,    8), S(   5,   14), S(   4,    2), S(   2,    6), S(  -8,    9),
		S(  15,   -4), S(   3,    7), S(   6,    4), S(   7,    6), S(  13,    4), S(  -3,   10), S(  -3,    4), S(   0,    2),
		S(  24,   -9), S(  25,   -9), S(  15,   -3), S(   5,    8), S(  -2,    3), S(   9,    4), S(  12,    3), S(   3,   -4),
		S(  26,  -17), S(  33,  -22), S(  23,  -13), S(   7,   -5), S(  -2,    1), S(  11,  -17), S(   9,  -16), S(  16,   -5),
		S(  38,  -29), S(  22,  -17), S(  -2,    2), S(  18,   -2), S(   3,    0), S(   4,    9), S(  15,    0), S(  16,   -5),
	},
	{
		S(  10,   10), S( -27,   38), S( -17,   28), S( -14,   16), S( -29,   26), S( -25,   30), S( -11,   22), S(  -4,   18),
		S(  28,    0), S(  29,    7), S(  16,   12), S(   5,   13), S(  16,   15), S(   0,   28), S(  -2,   23), S(   1,   15),
		S(  11,    3), S(  41,    1), S(  30,    2), S(  26,    4), S(   3,   15), S(  -1,   25), S(  12,   19), S(  -8,   22),
		S(   3,   10), S(   4,   16), S(  14,   12), S(  12,    4), S(   3,   14), S(   6,   18), S(   5,   19), S(  -9,   21),
		S(  -7,   -1), S(  13,    2), S(  -4,    8), S(   7,    1), S(  -4,    6), S(  -8,    9), S( -11,    9), S( -14,    8),
		S(  10,  -27), S(  20,  -28), S(   2,  -16), S(   3,  -16), S(  -9,  -10), S( -14,  -10), S( -13,  -11), S( -18,   -9),
		S(  -4,  -31), S(  22,  -38), S(   5,  -24), S(   5,  -25), S(  -2,  -21), S(  -3,  -18), S( -14,  -14), S( -16,  -20),
		S(  -8,  -35), S(  -5,  -17), S(   0,  -21), S(   7,  -28), S(   0,  -25), S(  -7,  -16), S(  -7,  -21), S(  -8,  -17),
	},
	{
		S(   8,  -26), S(  44,  -49), S( -11,   14), S( -10,    2), S(   9,  -17), S( -17,    2), S( -37,   -3), S( -15,  -14),
		S(  38,    3), S(  -3,   11), S( -18,   23), S( -38,   54), S( -26,   36), S( -10,   10), S(  -5,  -13), S(   8,  -14),
		S(  14,    5), S(  10,    8), S(   6,   14), S(  -8,   27), S(   4,   18), S(   9,   13), S(   7,   -4), S(  20,   -9),
		S(  11,   18), S(   8,   39), S(   8,   12), S( -12,   34), S(  -6,   33), S(   7,    6), S(   6,   15), S(   3,   11),
		S(  13,   10), S(  16,   17), S(   2,   25), S(   0,   29), S(  -5,   30), S(  -4,   23), S(   3,   17), S(   0,    8),
		S(  15,  -24), S(  14,   -6), S(   4,    8), S(  -7,   22), S(  -6,   14), S(  -6,   17), S(   5,   -3), S(   4,  -12),
		S(  15,  -57), S(  20,  -69), S(  10,  -40), S(   5,   -5), S(   3,    1), S(   5,  -17), S(   4,  -21), S(  11,  -37),
		S(   7,  -52), S(  -8,  -53), S( -17,  -23), S(  -7,  -16), S(  -6,  -10), S( -11,   -5), S( -14,  -13), S( -13,  -13),
	},
	{
		S(  -3,  -64), S(   1,    2), S( -28,   -6), S( -21,   -8), S(   8,   -5), S(   8,   -5), S(   8,   -5), S(   8,   -5),
		S( -55,   31), S(  -2,   61), S(  -8,   47), S(  33,   19), S(   8,   -5), S(   8,   -5), S(   8,   -5), S(   8,   -5),
		S( -17,   23), S(  24,   54), S(  33,   42), S(   5,   42), S(   8,   -5), S(   8,   -5), S(   8,   -5), S(   8,   -5),
		S( -55,   21), S( -24,   48), S( -16,   38), S( -47,   34), S(   8,   -5), S(   8,   -5), S(   8,   -5), S(   8,   -5),
		S( -70,    9), S( -37,   32), S( -24,   19), S( -46,   17), S(   8,   -5), S(   8,   -5), S(   8,   -5), S(   8,   -5),
		S( -23,  -10), S(   4,   10), S( -11,   -1), S( -16,   -3), S(   8,   -5), S(   8,   -5), S(   8,   -5), S(   8,   -5),
		S(  31,  -30), S(  33,   -6), S(  12,  -15), S(  -4,  -18), S(   8,   -5), S(   8,   -5), S(   8,   -5), S(   8,   -5),
		S(  20,  -64), S(  22,  -25), S(   3,  -31), S(  14,  -51), S(   8,   -5), S(   8,   -5), S(   8,   -5), S(   8,   -5),
	},
};

constexpr PackedScore MOBILITY[4][28] = {
	{S( -11,  -20), S( -40,  -64), S( -14,  -32), S(  -6,   -6), S(   4,    7), S(   7,   18), S(  14,   25), S(  23,   32), S(  31,   33), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -23,  -32), S( -54,  -99), S( -32,  -41), S( -25,  -19), S( -13,   -5), S(  -6,    4), S(  -1,   15), S(   4,   21), S(   7,   26), S(  13,   28), S(  16,   31), S(  31,   24), S(  36,   30), S(  56,   11), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -26,  -43), S(  14,  -73), S( -25,  -52), S( -13,  -31), S(  -6,  -24), S(  -2,   -6), S(   0,   -1), S(  -5,    9), S(   0,   13), S(   3,   19), S(   6,   25), S(   7,   35), S(   9,   40), S(  16,   42), S(  25,   39), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -32,    6), S( -50,  -80), S( -95,  -80), S( -74, -252), S( -73,  -98), S( -28,  -41), S( -21,  -10), S( -14,   -5), S(  -5,   -4), S(  -4,   20), S(  -3,   27), S(   0,   36), S(   3,   41), S(   7,   43), S(  10,   45), S(  13,   47), S(  14,   48), S(  14,   54), S(  15,   54), S(  17,   55), S(  25,   47), S(  33,   30), S(  36,   28), S(  53,    8), S(  65,   -7), S(  64,   -9), S(  46,   -5), S(  10,  -23)}
};

constexpr PackedScore THREAT_BY_PAWN[6] = {S(   8,  -15), S(  64,   31), S(  61,   60), S(  79,   30), S(  76,   -9), S(   0,    0)};
constexpr PackedScore THREAT_BY_KNIGHT[2][6] = {
	{S(   8,   29), S(  27,   36), S(  37,   42), S(  74,   12), S(  47,  -23), S(   0,    0)},
	{S(  -4,   11), S(  13,   37), S(  30,   32), S(  64,   33), S(  57,    1), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_BISHOP[2][6] = {
	{S(   1,   39), S(  44,   37), S(  -8,   36), S(  72,   18), S(  70,   68), S(   0,    0)},
	{S(   0,    9), S(  22,   25), S( -21,  -15), S(  46,   48), S(  50,  128), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_ROOK[2][6] = {
	{S(   1,   43), S(  18,   64), S(  28,   56), S(  14,  -49), S(  75,   10), S(   0,    0)},
	{S(  -8,    7), S(   2,   16), S(  15,    4), S(  14,  -92), S(  65,   46), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_QUEEN[2][6] = {
	{S(   7,   10), S(  24,   21), S(   7,   51), S(  14,    9), S(  12,  -56), S(  96,   27)},
	{S(  -1,   10), S(   0,    7), S(  -6,   23), S(  -6,    3), S( -17,  -70), S( 109,   64)}
};
constexpr PackedScore THREAT_BY_KING[6] = {S( -33,   48), S(   0,   50), S(  22,   40), S(  81,   19), S(   0,    0), S(   0,    0)};
constexpr PackedScore PUSH_THREAT = S(  15,   20);

constexpr PackedScore ISOLATED_PAWN[8] = {S(  -6,   -2), S(  -4,  -11), S( -10,  -10), S( -10,  -16), S( -11,  -14), S(  -6,   -7), S(  -1,  -11), S(  -9,   -1)};
constexpr PackedScore PAWN_PHALANX[8] = {S(   0,    0), S(   6,   -3), S(  12,    4), S(  19,   16), S(  47,   61), S( 110,  228), S( -35,  355), S(   0,    0)};
constexpr PackedScore DEFENDED_PAWN[8] = {S(   0,    0), S(   0,    0), S(  21,   10), S(  13,    9), S(  13,   18), S(  21,   58), S( 134,   79), S(   0,    0)};

constexpr PackedScore PASSED_PAWN[2][2][8] = {
	{
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -32,  -35), S( -13,   25), S( -20,  152), S(  31,  240), S(   0,    0)},
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -21,  -49), S(  11,  -24), S(  16,   15), S(  61,   36), S(   0,    0)}
	},
	{
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -27,  -56), S(   0,  -26), S(  16,    1), S(  67,   -2), S(   0,    0)},
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -30,  -62), S(   1,  -37), S(  -7,  -19), S(  -3,  -18), S(   0,    0)}
	}
};
constexpr PackedScore OUR_PASSER_PROXIMITY[8] = {S(   0,    0), S(  46,   82), S(   1,   68), S(   0,   42), S(   3,   31), S(   9,   24), S(  18,   22), S(  13,   21)};
constexpr PackedScore THEIR_PASSER_PROXIMITY[8] = {S(   0,    0), S( -41,    6), S(  21,   -2), S(  13,   25), S(  17,   45), S(  10,   79), S(  12,   80), S(  15,   67)};

constexpr PackedScore PAWN_STORM[2][4][8] = {
	{
		{S(  15,   13), S(-136,  -49), S(  -2,   -9), S(   4,  -12), S(   0,    1), S(  -5,   10), S(  -4,    9), S(   0,    0)},
		{S(  11,    2), S(  -5, -106), S(  54,  -42), S(   9,  -10), S(   2,   -4), S( -10,    6), S(  -7,   10), S(   0,    0)},
		{S(  -3,    5), S(  62, -102), S(  71,  -45), S(  18,  -17), S(   3,   -1), S(  -8,    8), S(  -9,   12), S(   0,    0)},
		{S(   8,   -7), S( 102,  -84), S(  40,  -22), S(  14,   -2), S(  -2,    4), S(  -9,    0), S(  -3,    1), S(   0,    0)}
	},
	{
		{S(   0,    0), S(  -3,  -27), S( -30,  119), S(  15,  -52), S(  -2,    8), S(  -1,    6), S(  -5,   10), S(   0,    0)},
		{S(   0,    0), S(   1,  -80), S(   1,   71), S(  52,  -35), S(   3,    2), S(  -7,    6), S(  -8,   10), S(   0,    0)},
		{S(   0,    0), S(  -8,   13), S( -59, -106), S(  20,  -30), S(   2,    4), S(  -2,    6), S(  -9,   11), S(   0,    0)},
		{S(   0,    0), S(  -4,  -51), S(  67,   -9), S(  23,   -2), S(   0,    9), S(   0,  -10), S(   0,    7), S(   0,    0)}
	}
};
constexpr PackedScore PAWN_SHIELD[4][8] = {
	{S(  15,    3), S(  -8,   26), S( -15,   16), S(  -2,    8), S(   3,   -1), S( -31,  -26), S( -77,  -35), S(   0,    0)},
	{S(  18,    2), S( -15,   12), S( -11,    2), S(  12,   -2), S(  10,   -9), S(  -2,  -15), S( -41,  -33), S(   0,    0)},
	{S(   8,   14), S( -14,    9), S(   6,   -9), S(   3,   -1), S(   2,    1), S(  10,  -13), S(  -1,  -41), S(   0,    0)},
	{S(  14,   -3), S(   5,   -2), S(  -3,    0), S(   0,   -6), S(   9,   -9), S(  30,  -21), S( -10,  -23), S(   0,    0)}
};
constexpr PackedScore SAFE_KNIGHT_CHECK = S(  83,   -2);
constexpr PackedScore SAFE_BISHOP_CHECK = S(  24,   11);
constexpr PackedScore SAFE_ROOK_CHECK = S(  60,    5);
constexpr PackedScore SAFE_QUEEN_CHECK = S(  24,   21);
constexpr PackedScore UNSAFE_KNIGHT_CHECK = S(   7,    1);
constexpr PackedScore UNSAFE_BISHOP_CHECK = S(  12,   12);
constexpr PackedScore UNSAFE_ROOK_CHECK = S(  20,    0);
constexpr PackedScore UNSAFE_QUEEN_CHECK = S(   6,   13);
constexpr PackedScore KING_ATTACKER_WEIGHT[4] = {S(  20,    1), S(  16,    2), S(  18,  -14), S(   5,    1)};
constexpr PackedScore KING_ATTACKS[14] = {S( -36,   16), S( -43,   10), S( -51,    5), S( -55,    7), S( -54,    3), S( -48,   -1), S( -33,   -5), S( -15,  -13), S(  14,  -21), S(  38,  -15), S(  57,  -23), S(  68,   18), S(  90,  -15), S(  80,   30)};

constexpr PackedScore MINOR_BEHIND_PAWN = S(   8,   14);
constexpr PackedScore KNIGHT_OUTPOST = S(  28,   19);
constexpr PackedScore BISHOP_PAWNS[7] = {S(   5,   24), S(   7,   22), S(   5,   13), S(   1,    4), S(  -3,   -6), S(  -4,  -20), S(  -8,  -35)};
constexpr PackedScore BISHOP_OUTPOST = S(  41,    6);
constexpr PackedScore BISHOP_PAIR = S(  21,   62);
constexpr PackedScore ROOK_OPEN[2] = {S(  26,    3), S(  15,    3)};

constexpr PackedScore TEMPO = S(  32,   35);

constexpr PackedScore COMPLEXITY_PAWNS = S(   0,    8);
constexpr PackedScore COMPLEXITY_PASSERS = S(   0,    1);
constexpr PackedScore COMPLEXITY_PAWNS_BOTH_SIDES = S(   0,   70);
constexpr PackedScore COMPLEXITY_PAWN_ENDGAME = S(   0,   63);
constexpr PackedScore COMPLEXITY_OFFSET = S(   0, -132);

#undef S


}