#pragma once

#include "../defs.h"

namespace eval
{

#define S(mg, eg) PackedScore(mg, eg)

constexpr PackedScore MATERIAL[6] = {S(  61,  132), S( 291,  442), S( 311,  452), S( 385,  810), S( 807, 1493), S(0, 0)};

constexpr PackedScore PSQT[6][64] = {
	{
		S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
		S(  67,   75), S(  30,   91), S(  28,   95), S(  51,   76), S(  61,   68), S(  29,   96), S(  28,  106), S(  64,   84),
		S(   9,   13), S(   0,   42), S(  12,    5), S(  28,  -28), S(  15,  -21), S(   4,    1), S( -17,   34), S(  -3,   19),
		S(  15,    9), S(   4,   14), S(   6,   -9), S(  11,  -24), S(  -1,  -23), S(  -5,   -8), S( -10,   14), S( -13,   12),
		S(   8,    1), S(   3,   17), S(   6,  -14), S(  15,  -15), S(   9,  -14), S(  -4,   -8), S( -15,   15), S( -15,    2),
		S(   2,   -2), S(  10,   12), S(  17,   -4), S(   0,    1), S(  -6,   -1), S( -11,   -4), S( -23,   13), S( -26,    0),
		S(  16,   -3), S(  29,    7), S(  15,   -8), S(   7,    6), S(  -6,   -1), S(  -5,   -4), S( -15,   17), S( -16,    4),
		S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
	},
	{
		S( -77,  -98), S( -79,  -26), S( -27,  -17), S(  11,  -13), S( -32,    3), S( -66,    6), S(-105,    8), S( -88,  -57),
		S( -10,  -15), S(  23,   -1), S(  31,   -5), S(  11,    4), S(  14,    8), S(   4,   13), S(  -3,   18), S( -10,    2),
		S(  14,   -8), S(  10,    1), S(  54,  -10), S(  43,    8), S(  27,   16), S(  17,   14), S(   6,    6), S(  -7,    4),
		S(  30,    1), S(  33,    9), S(  43,   13), S(  33,   18), S(  27,   24), S(  32,   14), S(  19,    5), S(   7,   13),
		S(   9,   15), S(  15,   16), S(  23,   18), S(  19,   28), S(  25,   19), S(  19,   19), S(  20,    4), S(   4,    6),
		S(  10,   -1), S(  16,    3), S(  16,    0), S(  13,   17), S(   6,   15), S(   0,    2), S(   2,   -4), S( -13,   -4),
		S(   3,    0), S(  11,   -7), S(   3,   -4), S(   8,    1), S(   2,    1), S(  -8,   -1), S(  -9,   -5), S( -21,   -6),
		S( -14,  -17), S( -16,   -5), S(  -7,   -9), S(  -1,    2), S(  -7,   -1), S( -23,   -7), S( -18,  -11), S( -50,   -5),
	},
	{
		S( -46,  -16), S( -32,    4), S(  -6,   -2), S( -73,   11), S( -62,   15), S( -49,    1), S( -24,    6), S( -35,    9),
		S( -23,   -7), S( -48,    7), S(  -9,    2), S(   4,   -2), S( -15,   10), S(   7,   -1), S( -13,   -5), S(  -3,   -5),
		S(  16,   11), S(  14,    3), S(  30,    3), S(  16,    8), S(  25,    3), S(   1,    0), S(  11,    7), S(   6,    3),
		S(  -7,    4), S(  10,    9), S(  11,   14), S(  24,   17), S(  25,   24), S(  21,    9), S(   7,   13), S(  -6,    5),
		S(  18,   -7), S(   3,    9), S(   9,   11), S(  11,   17), S(  23,   12), S(   1,   17), S(   2,    8), S(   2,    0),
		S(  21,  -11), S(  25,   -5), S(   3,   -4), S(   8,   12), S(   0,    9), S(   0,   -1), S(  15,    3), S(   3,   -7),
		S(  27,  -21), S(  18,  -22), S(  24,  -10), S(   3,   -3), S(  -3,    0), S(   8,  -16), S(   0,  -23), S(  13,  -11),
		S(  22,  -40), S(  15,  -17), S( -11,    2), S(  13,   -5), S(  -2,   -3), S(  -3,    3), S(  10,   -3), S(   3,  -18),
	},
	{
		S(  16,    8), S( -26,   37), S( -20,   28), S( -10,   18), S( -25,   26), S( -19,   31), S(  -6,   22), S(   0,   19),
		S(  32,    1), S(  32,    9), S(  14,   14), S(   9,   14), S(  18,   17), S(   5,   29), S(   3,   24), S(   5,   16),
		S(   8,    2), S(  32,    3), S(  17,    3), S(  26,    1), S(   3,   11), S(   1,   20), S(  11,   16), S(  -8,   19),
		S(   2,    6), S(   3,   12), S(   9,    8), S(   7,    1), S(   2,    9), S(   5,   14), S(   4,   14), S(  -8,   16),
		S( -10,   -1), S(  11,    4), S( -11,    7), S(   4,    0), S(  -6,    3), S(  -9,    7), S( -11,    7), S( -14,    7),
		S(   7,  -23), S(  23,  -26), S(  -2,  -15), S(   0,  -17), S( -12,  -10), S( -14,  -10), S( -12,  -11), S( -18,   -8),
		S(  -8,  -26), S(  21,  -36), S(   1,  -23), S(   2,  -22), S(  -4,  -18), S(  -5,  -16), S( -15,  -13), S( -18,  -19),
		S(  -8,  -33), S(  -6,  -16), S(  -1,  -20), S(   8,  -26), S(   0,  -23), S(  -7,  -15), S(  -6,  -19), S(  -8,  -17),
	},
	{
		S(  -2,   -8), S(  38,  -35), S( -18,   27), S( -12,   17), S(  15,  -10), S( -20,   14), S( -39,   10), S( -26,    8),
		S(  42,    1), S(   6,   12), S( -11,   26), S( -24,   49), S( -12,   31), S(   4,    4), S(   6,  -14), S(  10,   -9),
		S(  14,    7), S(  10,   12), S(   4,   19), S(  -4,   23), S(  10,   13), S(  15,    6), S(   9,   -7), S(  20,  -10),
		S(   6,   15), S(   4,   33), S(  11,    8), S(  -7,   28), S(  -4,   27), S(  11,    4), S(   7,   13), S(   4,    8),
		S(   8,    8), S(  12,   13), S(  -1,   14), S(   1,   25), S(  -6,   31), S(  -3,   23), S(   3,   17), S(   0,    7),
		S(  14,  -22), S(  12,   -4), S(   1,    5), S(  -9,   14), S(  -6,   12), S(  -6,   15), S(   7,   -6), S(   8,  -17),
		S(   8,  -48), S(  10,  -61), S(   4,  -38), S(   2,  -10), S(   1,   -4), S(   2,  -17), S(   1,  -21), S(   7,  -34),
		S(   1,  -44), S( -15,  -45), S( -22,  -22), S(  -6,  -23), S(  -5,  -19), S(  -9,  -15), S( -13,  -17), S( -15,  -12),
	},
	{
		S( -38,  -52), S( -44,   13), S( -80,   10), S( -69,    7), S(   9,   -6), S(   9,   -6), S(   9,   -6), S(   9,   -6),
		S( -72,   33), S( -25,   62), S( -31,   49), S(  16,   20), S(   9,   -6), S(   9,   -6), S(   9,   -6), S(   9,   -6),
		S(   8,   16), S(  31,   49), S(  39,   40), S(  15,   39), S(   9,   -6), S(   9,   -6), S(   9,   -6), S(   9,   -6),
		S( -32,   15), S( -10,   43), S(  -5,   35), S( -29,   30), S(   9,   -6), S(   9,   -6), S(   9,   -6), S(   9,   -6),
		S( -48,    4), S( -21,   27), S(  -5,   15), S( -27,   14), S(   9,   -6), S(   9,   -6), S(   9,   -6), S(   9,   -6),
		S( -10,  -14), S(  14,    5), S(   2,   -4), S(  -6,   -6), S(   9,   -6), S(   9,   -6), S(   9,   -6), S(   9,   -6),
		S(  28,  -31), S(  28,   -8), S(  11,  -16), S(  -3,  -20), S(   9,   -6), S(   9,   -6), S(   9,   -6), S(   9,   -6),
		S(  17,  -61), S(  23,  -25), S(   3,  -28), S(  11,  -47), S(   9,   -6), S(   9,   -6), S(   9,   -6), S(   9,   -6),
	},
};

constexpr PackedScore MOBILITY[4][28] = {
	{S( -15,  -26), S( -37,  -46), S( -16,  -15), S(  -8,    1), S(   2,    9), S(   7,   19), S(  14,   22), S(  22,   25), S(  32,   18), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -25,  -42), S( -35,  -59), S( -21,  -29), S( -14,  -12), S(  -4,   -2), S(   2,    8), S(   4,   16), S(   8,   19), S(   9,   21), S(  13,   21), S(  14,   20), S(  19,   14), S(  15,   22), S(  23,   -1), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -22,  -50), S( -30,  -74), S( -18,  -48), S(  -5,  -27), S(  -2,  -13), S(  -3,   -2), S(  -2,    4), S(   1,   10), S(   3,   14), S(   7,   19), S(   7,   27), S(   8,   33), S(  11,   37), S(  16,   36), S(  23,   34), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -27,   17), S( -57,  -72), S( -87, -108), S( -32, -194), S( -29,  -70), S( -22,  -10), S( -13,  -21), S( -10,   -1), S( -10,   18), S(  -7,   27), S(  -4,   30), S(  -1,   32), S(   0,   43), S(   3,   40), S(   4,   45), S(   6,   46), S(   7,   48), S(  10,   47), S(   8,   49), S(  15,   40), S(  20,   33), S(  30,   15), S(  33,   14), S(  43,   -4), S(  55,  -12), S(  51,  -23), S(  30,  -16), S( -13,  -36)}
};

constexpr PackedScore THREAT_BY_PAWN[6] = {S(   5,  -21), S(  65,   30), S(  62,   62), S(  78,   28), S(  76,   -6), S(   0,    0)};
constexpr PackedScore THREAT_BY_KNIGHT[2][6] = {
	{S(   6,   29), S(  19,   29), S(  40,   45), S(  73,   15), S(  55,  -26), S(   0,    0)},
	{S(  -6,    9), S(   8,   28), S(  29,   29), S(  64,   35), S(  58,    0), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_BISHOP[2][6] = {
	{S(  -4,   37), S(  37,   34), S( -12,   29), S(  66,   17), S(  66,   58), S(   0,    0)},
	{S(  -3,    6), S(  18,   22), S( -24,  -21), S(  44,   46), S(  46,  123), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_ROOK[2][6] = {
	{S(  -1,   43), S(  17,   61), S(  25,   56), S(   0,  -39), S(  72,   12), S(   0,    0)},
	{S(  -6,    7), S(   3,   15), S(  14,    1), S(   4,  -86), S(  65,   46), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_QUEEN[2][6] = {
	{S(   5,   11), S(  22,   20), S(   8,   49), S(  17,   14), S(  10,  -49), S(  96,   53)},
	{S(  -1,   11), S(   0,    6), S(  -7,   17), S(  -4,    2), S( -13,  -74), S( 119,   63)}
};
constexpr PackedScore THREAT_BY_KING[6] = {S( -26,   49), S(   3,   52), S(  31,   42), S(  72,    9), S(   0,    0), S(   0,    0)};
constexpr PackedScore PUSH_THREAT = S(  14,   19);
constexpr PackedScore RESTRICTED_PIECE = S(   4,    4);

constexpr PackedScore ISOLATED_PAWN[8] = {S(  -9,    6), S(  -4,  -16), S( -12,   -9), S( -11,  -16), S( -11,  -16), S(  -7,   -8), S(  -2,  -15), S( -10,    7)};
constexpr PackedScore DOUBLED_PAWN[8] = {S(   1,  -63), S(  13,  -38), S(   1,  -29), S(   0,  -21), S(  -3,  -14), S( -13,  -19), S(   7,  -42), S(   7,  -76)};
constexpr PackedScore BACKWARDS_PAWN[8] = {S(   0,    0), S(  -7,  -14), S(  -2,  -14), S(  -8,  -12), S(   2,  -16), S(  29,   -8), S(   0,    0), S(   0,    0)};
constexpr PackedScore PAWN_PHALANX[8] = {S(   0,    0), S(   4,   -4), S(  10,   -2), S(  20,    7), S(  44,   39), S(  98,  225), S( -20,  345), S(   0,    0)};
constexpr PackedScore DEFENDED_PAWN[8] = {S(   0,    0), S(   0,    0), S(  19,    7), S(  11,    8), S(  17,   21), S(  29,   63), S( 137,   73), S(   0,    0)};
constexpr PackedScore CANDIDATE_PASSER[2][8] = {
	{S(   0,    0), S( -39,  -11), S( -20,   -7), S(   0,   29), S(  29,   56), S(  61,   84), S(   0,    0), S(   0,    0)},
	{S(   0,    0), S( -21,   -6), S(  -9,   14), S(  -5,   30), S(  20,   44), S(  37,  153), S(   0,    0), S(   0,    0)}
};

constexpr PackedScore PASSED_PAWN[2][2][8] = {
	{
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -38,  -40), S( -16,   26), S(  -3,  154), S(  38,  233), S(   0,    0)},
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -26,  -53), S(   8,  -22), S(  31,   19), S(  58,   34), S(   0,    0)}
	},
	{
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -30,  -57), S(   2,  -23), S(  34,    7), S(  65,   -1), S(   0,    0)},
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -31,  -63), S(   2,  -35), S(  11,  -13), S( -10,  -13), S(   0,    0)}
	}
};
constexpr PackedScore OUR_PASSER_PROXIMITY[8] = {S(   0,    0), S(  37,   85), S(   5,   69), S(   3,   43), S(   6,   31), S(  12,   23), S(  21,   21), S(  17,   19)};
constexpr PackedScore THEIR_PASSER_PROXIMITY[8] = {S(   0,    0), S( -40,    7), S(  22,    0), S(  16,   27), S(  20,   47), S(  14,   79), S(  16,   80), S(  17,   69)};

constexpr PackedScore PAWN_STORM[2][4][8] = {
	{
		{S(  15,   14), S(-130,  -49), S(  -9,   -9), S(   5,  -14), S(   0,   -1), S(  -6,    9), S(  -3,    8), S(   0,    0)},
		{S(  12,    4), S( -20,  -99), S(  40,  -41), S(   6,  -11), S(   2,   -5), S( -10,    7), S(  -6,    9), S(   0,    0)},
		{S(  -3,    6), S(  59,  -98), S(  61,  -44), S(  19,  -18), S(   3,   -1), S(  -6,    6), S(  -8,   12), S(   0,    0)},
		{S(   9,   -7), S( 110,  -85), S(  34,  -22), S(  13,   -1), S(  -2,    4), S(  -8,    0), S(  -3,    1), S(   0,    0)}
	},
	{
		{S(   0,    0), S(  -3,  -28), S( -30,  118), S(   8,  -37), S(  -3,    9), S(  -2,    5), S(  -5,    9), S(   0,    0)},
		{S(   0,    0), S(  10,  -93), S(  11,   21), S(  52,  -41), S(   2,    3), S(  -7,    6), S(  -7,    8), S(   0,    0)},
		{S(   0,    0), S(  -6,   26), S( -70, -115), S(  21,  -29), S(   3,    4), S(   0,    5), S(  -8,   11), S(   0,    0)},
		{S(   0,    0), S(  -9,  -49), S(  66,   -8), S(  19,    0), S(   1,    8), S(   1,   -9), S(  -1,    7), S(   0,    0)}
	}
};
constexpr PackedScore PAWN_SHIELD[4][8] = {
	{S(  16,    1), S(  -7,   25), S( -15,   17), S(  -2,    8), S(   4,    1), S( -40,  -25), S( -77,  -36), S(   0,    0)},
	{S(  17,    0), S( -13,   10), S( -11,    8), S(  12,   -3), S(   8,  -12), S( -13,  -17), S( -53,  -31), S(   0,    0)},
	{S(   5,    8), S( -16,    8), S(  16,    4), S(   2,   -2), S(  -1,   -2), S(   4,  -18), S( -15,  -41), S(   0,    0)},
	{S(  14,   -4), S(   5,   -2), S(  -3,    0), S(   1,   -6), S(   8,   -9), S(  28,  -21), S( -12,  -24), S(   0,    0)}
};
constexpr PackedScore SAFE_KNIGHT_CHECK = S(  91,   -2);
constexpr PackedScore SAFE_BISHOP_CHECK = S(  17,   21);
constexpr PackedScore SAFE_ROOK_CHECK = S(  73,    9);
constexpr PackedScore SAFE_QUEEN_CHECK = S(  28,   32);
constexpr PackedScore UNSAFE_KNIGHT_CHECK = S(  10,    0);
constexpr PackedScore UNSAFE_BISHOP_CHECK = S(  16,   10);
constexpr PackedScore UNSAFE_ROOK_CHECK = S(  22,   -1);
constexpr PackedScore UNSAFE_QUEEN_CHECK = S(   7,   10);
constexpr PackedScore KING_ATTACKER_WEIGHT[4] = {S(  16,   -3), S(  12,   -3), S(  13,  -16), S(   2,    3)};
constexpr PackedScore KING_ATTACKS[14] = {S( -44,    6), S( -48,    5), S( -51,    4), S( -52,    7), S( -52,    7), S( -43,    5), S( -29,    2), S( -10,   -8), S(  18,  -20), S(  39,  -17), S(  57,  -26), S(  59,   21), S(  85,  -20), S(  71,   28)};
constexpr PackedScore WEAK_KING_RING[17] = {S( -29,   49), S( -28,   27), S( -23,   24), S( -20,   21), S( -14,   14), S(  -6,    7), S(   5,    2), S(  19,   -2), S(  35,   -6), S(  48,   -9), S(  60,  -12), S(  63,   -8), S(  75,  -12), S(  76,  -14), S(  75,  -11), S(  94,  -15), S( 102,  -18)};

constexpr PackedScore MINOR_BEHIND_PAWN = S(   6,   13);
constexpr PackedScore KNIGHT_OUTPOST = S(  25,   17);
constexpr PackedScore BISHOP_PAWNS[7] = {S(   4,   21), S(   6,   20), S(   4,   12), S(   1,    5), S(  -2,   -5), S(  -2,  -18), S(  -7,  -31)};
constexpr PackedScore BISHOP_PAIR = S(  20,   64);
constexpr PackedScore LONG_DIAG_BISHOP = S(  16,    9);
constexpr PackedScore ROOK_OPEN[2] = {S(  26,    3), S(  14,    3)};

constexpr PackedScore TEMPO = S(  32,   35);

constexpr PackedScore COMPLEXITY_PAWNS = S(   0,    8);
constexpr PackedScore COMPLEXITY_PASSERS = S(   0,    1);
constexpr PackedScore COMPLEXITY_PAWNS_BOTH_SIDES = S(   0,   69);
constexpr PackedScore COMPLEXITY_PAWN_ENDGAME = S(   0,   65);
constexpr PackedScore COMPLEXITY_OFFSET = S(   0, -131);

#undef S


}