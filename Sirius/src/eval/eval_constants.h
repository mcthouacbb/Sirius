#pragma once

#include "../defs.h"

namespace eval
{

#define S(mg, eg) PackedScore(mg, eg)

constexpr PackedScore MATERIAL[6] = {S(  59,   86), S( 292,  361), S( 297,  381), S( 410,  669), S( 860, 1221), S(0, 0)};

constexpr PackedScore PSQT[6][64] = {
	{
		S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
		S(  38,   77), S(  47,   78), S(  31,   83), S(  66,   43), S(  54,   47), S(  40,   57), S( -23,   96), S( -29,   90),
		S(  17,   37), S(  12,   53), S(  38,   12), S(  47,  -17), S(  55,  -18), S(  87,   -9), S(  48,   35), S(  32,   26),
		S(  -6,   22), S(   0,   25), S(   6,    2), S(   6,   -9), S(  26,  -10), S(  28,  -11), S(  12,   15), S(  12,    0),
		S( -15,    6), S( -11,   20), S(  -1,   -4), S(   7,   -8), S(   9,   -7), S(  13,  -11), S(   1,    9), S(  -1,  -12),
		S( -25,   -1), S( -18,    9), S( -11,   -6), S( -10,   -2), S(   1,   -2), S(  -4,   -7), S(   5,   -2), S(  -8,  -17),
		S( -18,    4), S( -11,   15), S(  -5,    1), S(  -5,   -3), S(   3,    8), S(  27,   -8), S(  19,    2), S(  -4,  -15),
		S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
	},
	{
		S( -92,  -36), S( -81,  -10), S( -59,    4), S( -17,  -11), S(   9,  -10), S( -28,  -32), S( -78,   -9), S( -68,  -54),
		S( -15,    4), S(  -1,    8), S(   1,    1), S(  10,   -1), S(   7,  -10), S(  25,  -15), S(   9,    0), S(   4,  -13),
		S(   2,   -1), S(   5,    1), S(  10,    4), S(  16,    4), S(  29,   -2), S(  56,  -22), S(  14,   -9), S(  19,  -15),
		S(   9,   10), S(  18,    3), S(  29,    6), S(  37,   11), S(  30,   15), S(  45,    5), S(  33,    5), S(  39,   -2),
		S(   3,   11), S(  19,    2), S(  19,   15), S(  28,   13), S(  22,   26), S(  27,    9), S(  26,    8), S(   9,   13),
		S( -14,   -1), S(  -3,    1), S(  -1,    2), S(   4,   16), S(  17,   14), S(   2,   -3), S(  16,   -3), S(   1,    3),
		S( -18,    4), S( -15,    9), S(  -9,    1), S(   4,    2), S(   2,    1), S(   6,   -1), S(   7,   -2), S(   2,   16),
		S( -47,   18), S( -11,   -4), S( -19,   -1), S( -10,    2), S(  -4,    3), S(   1,   -7), S( -11,    4), S( -14,   15),
	},
	{
		S(  -6,    8), S( -38,    9), S( -38,    4), S( -72,    9), S( -67,    9), S( -53,   -2), S( -30,    4), S( -48,   -1),
		S(  -6,   -6), S( -10,   -1), S(  -7,   -5), S( -19,    0), S( -10,   -8), S( -19,   -4), S( -57,    9), S( -38,    4),
		S(   5,    9), S(  12,   -1), S(   3,    1), S(  15,   -8), S(   4,   -2), S(  34,    2), S(  17,    0), S(  22,    7),
		S(  -6,    6), S(   8,    7), S(  12,    0), S(  20,   11), S(  12,    5), S(  13,    7), S(   6,    9), S(   3,    6),
		S(   4,    5), S(  -1,    6), S(   5,    7), S(  15,    5), S(  16,    4), S(   7,    2), S(   7,    6), S(  17,   -5),
		S(   0,    2), S(  15,    2), S(   6,   -1), S(   2,    4), S(   7,    6), S(  10,   -1), S(  18,   -6), S(  19,   -5),
		S(  20,    7), S(   8,  -14), S(  15,  -12), S(  -3,   -1), S(   7,    0), S(  19,   -9), S(  28,  -11), S(  23,  -10),
		S(  11,   -5), S(  19,   11), S(   5,    1), S(   2,   -1), S(  12,   -5), S(   1,    9), S(  24,   -9), S(  36,  -21),
	},
	{
		S( -12,   16), S( -16,   20), S( -25,   29), S( -29,   26), S( -19,   18), S(   0,   16), S(  -5,   22), S(  18,   11),
		S(  -3,   12), S(   2,   17), S(   9,   18), S(  24,    6), S(  11,    7), S(  13,    7), S(  24,    2), S(  27,    1),
		S( -10,   11), S(  16,    6), S(   8,    9), S(   8,    4), S(  26,   -3), S(  34,   -9), S(  48,   -7), S(  19,   -7),
		S(  -9,   13), S(  10,    7), S(  10,   10), S(   6,    6), S(  16,   -4), S(  21,   -7), S(  17,    0), S(  10,   -3),
		S( -15,    7), S(  -8,    8), S(  -4,    5), S(   2,    4), S(   7,    2), S(  -5,    5), S(  13,   -1), S(  -7,   -2),
		S( -22,    1), S( -18,   -2), S( -13,   -5), S( -11,   -3), S(  -2,   -7), S(  -6,  -10), S(  16,  -21), S(  -1,  -21),
		S( -24,   -6), S( -19,   -5), S(  -9,   -6), S(  -8,   -8), S(  -4,  -14), S(   1,  -16), S(   7,  -20), S( -19,  -16),
		S( -16,   -4), S( -15,   -8), S( -14,   -3), S(  -6,  -11), S(  -1,  -17), S(  -5,  -11), S(  -6,  -13), S( -19,  -12),
	},
	{
		S( -19,   -9), S( -33,    2), S( -25,   24), S(   0,   12), S(  -5,   15), S(   7,    7), S(  48,  -38), S(   9,   -8),
		S(   6,  -14), S( -14,   -2), S( -12,   25), S( -25,   44), S( -26,   58), S(   1,   25), S(  -2,   11), S(  40,    9),
		S(   7,   -4), S(   2,   -1), S(  -5,   23), S(  -3,   28), S( -14,   42), S(   7,   13), S(  23,   -1), S(  26,    1),
		S(   0,    8), S(   2,   16), S(   5,   13), S( -10,   29), S( -14,   32), S(  10,   17), S(   9,   33), S(  17,   14),
		S(   0,    4), S(   3,   16), S(  -1,   13), S(  -5,   22), S(   5,   23), S(   2,   23), S(  17,    7), S(  16,   10),
		S(   2,  -17), S(   1,   -4), S(  -9,    7), S(  -9,   14), S(  -4,   19), S(   1,    5), S(  13,  -13), S(  15,  -18),
		S(   4,  -31), S(  -3,  -31), S(   1,  -22), S(   1,   -7), S(   1,   -6), S(   7,  -33), S(  16,  -64), S(  28,  -76),
		S( -14,  -29), S( -15,  -24), S( -13,  -14), S( -11,  -14), S( -10,  -15), S( -18,  -25), S(  -7,  -39), S(  10,  -49),
	},
	{
		S(  57,  -58), S( 101,  -37), S( 135,  -38), S(  69,  -16), S(  68,  -36), S( -26,    3), S(  12,    8), S( 100,  -71),
		S(-109,   31), S(  -1,   32), S(  23,   16), S( 153,  -18), S(  85,   -9), S(  26,   33), S( -22,   55), S(-111,   53),
		S(-127,   32), S(  24,   24), S(  31,   11), S(  39,    5), S(  78,    3), S(  84,   18), S( -34,   50), S( -86,   37),
		S( -78,    7), S( -32,   13), S( -18,    9), S( -15,    3), S( -20,   -1), S( -35,   19), S( -69,   29), S(-170,   36),
		S( -70,   -8), S( -29,    2), S( -29,    5), S( -27,    2), S( -29,    1), S( -33,    6), S( -66,   16), S(-151,   21),
		S( -43,   -6), S(  14,   -4), S( -14,    1), S(   2,   -3), S(  -1,   -3), S( -17,    4), S(  -9,    3), S( -65,    8),
		S(  44,  -19), S(  33,   -4), S(  29,   -5), S(  11,   -7), S(   6,   -4), S(  17,   -3), S(  34,   -6), S(  30,  -14),
		S(  35,  -40), S(  66,  -31), S(  37,  -15), S( -17,   -8), S(  19,  -24), S(  -9,   -3), S(  46,  -22), S(  44,  -45),
	},
};

constexpr PackedScore MOBILITY[4][28] = {
	{S(  -9,  -15), S( -34,  -57), S( -12,  -26), S(  -2,   -4), S(   8,    7), S(  11,   18), S(  20,   22), S(  30,   25), S(  39,   23), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S(   1,  -25), S( -34,  -88), S( -12,  -42), S(  -5,  -19), S(   7,   -8), S(  14,    1), S(  19,   13), S(  24,   19), S(  27,   25), S(  31,   28), S(  31,   33), S(  43,   28), S(  38,   35), S(  56,   24), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -44,  -26), S(   1,  -54), S( -27,  -46), S( -16,  -31), S( -11,  -26), S(  -5,  -11), S(  -3,   -4), S(  -6,    3), S(  -2,    4), S(   1,    8), S(   6,   12), S(   9,   17), S(  13,   21), S(  20,   22), S(  25,   18), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -47,    5), S( -61,  -75), S(-107,  -65), S( -75, -271), S( -80, -110), S( -35,  -55), S( -24,  -33), S( -17,  -25), S( -10,  -16), S(  -7,    6), S(  -4,   14), S(  -0,   23), S(   3,   29), S(   7,   31), S(  10,   34), S(  13,   38), S(  15,   40), S(  15,   45), S(  15,   49), S(  16,   51), S(  23,   46), S(  30,   34), S(  34,   36), S(  59,    8), S(  64,   10), S( 108,  -26), S( 105,  -27), S(  65,  -29)}
};

constexpr PackedScore THREAT_BY_PAWN[6] = {S(   7,  -15), S(  64,   25), S(  64,   57), S(  89,    6), S(  76,  -23), S(   0,    0)};
constexpr PackedScore THREAT_BY_KNIGHT[2][6] = {
	{S(   8,   27), S(  31,   21), S(  37,   36), S(  76,    1), S(  44,  -29), S(   0,    0)},
	{S(  -3,   13), S(  13,   40), S(  30,   33), S(  62,   26), S(  52,   -4), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_BISHOP[2][6] = {
	{S(   7,   35), S(  52,   23), S(   3,   32), S(  73,    6), S(  73,   34), S(   0,    0)},
	{S(   3,   15), S(  24,   26), S( -12,   13), S(  45,   39), S(  52,  124), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_ROOK[2][6] = {
	{S(   1,   40), S(  31,   46), S(  30,   44), S(  14,  -26), S(  75,   -9), S(   0,    0)},
	{S(  -6,   13), S(   6,   16), S(  17,    7), S(   6,  -52), S(  57,   51), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_QUEEN[2][6] = {
	{S(  13,    2), S(  38,    5), S(  19,   39), S(  25,  -12), S(  13,  -70), S( 156,  -58)},
	{S(  -1,   14), S(   1,    8), S(  -5,   23), S(  -4,    3), S( -19,  -55), S( 116,   54)}
};
constexpr PackedScore PUSH_THREAT = S(  19,   16);

constexpr PackedScore PASSED_PAWN[8] = {S(   0,    0), S( -20,  -64), S( -18,  -50), S( -14,  -17), S(  11,   17), S(   4,   83), S(  54,   92), S(   0,    0)};
constexpr PackedScore ISOLATED_PAWN[8] = {S(  -2,    5), S(  -2,  -11), S( -10,   -5), S(  -6,  -13), S( -11,  -13), S(  -7,   -4), S(  -1,  -12), S(  -9,    6)};
constexpr PackedScore PAWN_PHALANX[8] = {S(   0,    0), S(   5,   -2), S(  12,    6), S(  18,   16), S(  45,   56), S( 111,  186), S(-163,  460), S(   0,    0)};
constexpr PackedScore DEFENDED_PAWN[8] = {S(   0,    0), S(   0,    0), S(  18,   10), S(  12,    7), S(  13,   15), S(  27,   41), S( 158,   37), S(   0,    0)};
constexpr PackedScore OUR_PASSER_PROXIMITY[8] = {S(   0,    0), S(   5,   51), S(  -5,   39), S(  -4,   22), S(  -1,   12), S(   2,   10), S(  16,    8), S(   6,    6)};
constexpr PackedScore THEIR_PASSER_PROXIMITY[8] = {S(   0,    0), S( -77,   -4), S(   2,    2), S(  -2,   27), S(   5,   35), S(   7,   41), S(  10,   46), S(  -5,   43)};
constexpr PackedScore RULE_OF_SQUARE = S(-453,  195);

constexpr PackedScore PAWN_STORM[3][8] = {
	{S(  44,  -35), S(  23,  -17), S(  15,   -3), S(   7,   -0), S(   1,    2), S(  -2,    6), S(  -0,    5), S(   7,  -10)},
	{S(   0,    0), S(  11,  -29), S(  27,    0), S(   2,    1), S(  -6,    8), S(  -7,   12), S(  -7,   14), S(   7,   -2)},
	{S(  -3,   -0), S(  -9,    7), S(   2,    9), S(   2,    9), S(   4,    8), S(   4,    9), S(   5,    9), S(  -8,   -4)}
};
constexpr PackedScore PAWN_SHIELD[3][8] = {
	{S(   2,  -12), S(  -8,   -7), S(  -5,  -12), S(  -0,  -11), S(  13,  -15), S(  17,  -27), S(  29,  -30), S(   7,    0)},
	{S(   0,    0), S( -15,    3), S(  -8,   -4), S(   9,   -5), S(  20,  -12), S(  35,  -32), S(  55,  -40), S(  16,    2)},
	{S(  -2,   -8), S(  -2,   -5), S(   1,   -5), S(   1,   -0), S(   4,    1), S(   5,    1), S(  25,    5), S(  -8,    7)}
};
constexpr PackedScore SAFE_KNIGHT_CHECK = S(  78,   -4);
constexpr PackedScore SAFE_BISHOP_CHECK = S(  16,   -6);
constexpr PackedScore SAFE_ROOK_CHECK = S(  57,   -4);
constexpr PackedScore SAFE_QUEEN_CHECK = S(  31,   11);
constexpr PackedScore KING_ATTACKER_WEIGHT[4] = {S(  15,   -3), S(   8,    2), S(   6,  -13), S(  -3,   14)};
constexpr PackedScore KING_ATTACKS[14] = {S( -27,   12), S( -29,    7), S( -30,    4), S( -28,    8), S( -20,    4), S(  -3,   -2), S(  20,   -9), S(  50,  -24), S(  96,  -46), S( 125,  -51), S( 162,  -67), S( 186,  -56), S( 220, -134), S( 186,   -6)};

constexpr PackedScore KNIGHT_OUTPOST = S(  24,   20);
constexpr PackedScore BISHOP_PAIR = S(  21,   60);
constexpr PackedScore ROOK_OPEN[2] = {S(  21,    9), S(  11,   10)};

constexpr PackedScore TEMPO = S(  30,   28);

#undef S


}
