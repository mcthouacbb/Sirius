#pragma once

#include "../defs.h"

namespace eval
{

#define S(mg, eg) PackedScore(mg, eg)

constexpr PackedScore MATERIAL[6] = {S(  60,  129), S( 288,  443), S( 313,  451), S( 387,  812), S( 790, 1502), S(0, 0)};

constexpr PackedScore PSQT[6][64] = {
	{
		S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
		S(  65,   84), S(  31,   90), S(  35,   95), S(  56,   75), S(  64,   67), S(  31,   97), S(  31,  101), S(  63,   90),
		S(  26,   26), S(  31,   43), S(  31,   14), S(  57,  -22), S(  41,  -15), S(  26,    6), S(   4,   34), S(  11,   30),
		S(  18,   17), S(   9,   12), S(  11,   -5), S(  18,  -18), S(   6,  -17), S(   0,   -3), S(  -5,   11), S( -10,   21),
		S(   8,    5), S(   7,    9), S(   7,  -17), S(  13,  -13), S(   8,  -12), S(  -4,   -6), S( -13,    9), S( -15,    7),
		S(   1,    1), S(  11,   -3), S(   2,  -22), S(  -1,    1), S(  -6,    0), S( -14,   -7), S( -22,    3), S( -27,    5),
		S(  15,    3), S(  33,   -3), S(  15,   -9), S(   8,    9), S(  -5,    3), S(  -8,   -3), S( -13,   11), S( -17,   11),
		S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
	},
	{
		S( -70,  -84), S( -80,  -19), S( -28,  -15), S(  17,  -14), S( -35,    7), S( -70,   10), S(-112,   17), S( -85,  -40),
		S(  -6,   -9), S(  21,    1), S(  34,   -4), S(  13,    5), S(  17,    6), S(   1,   13), S(  -5,   20), S( -11,   12),
		S(  19,   -8), S(  14,   -3), S(  59,  -18), S(  40,    1), S(  22,    9), S(  13,    6), S(   2,    6), S(  -8,    7),
		S(  36,    3), S(  37,    7), S(  50,    5), S(  37,   14), S(  33,   18), S(  30,    9), S(  19,    5), S(   7,   17),
		S(  10,   16), S(  22,   11), S(  28,    8), S(  21,   21), S(  26,   14), S(  20,   14), S(  21,    4), S(   1,   14),
		S(   2,    0), S(  17,   -3), S(   8,   -9), S(  17,    8), S(   6,    8), S(  -1,   -4), S(  -1,   -5), S( -15,    0),
		S(   2,    6), S(   5,   -5), S(   5,   -7), S(   4,   -2), S(   5,   -2), S(  -8,   -6), S( -13,   -2), S( -20,    0),
		S( -13,   -4), S( -12,    0), S(  -4,   -8), S(  -3,    4), S( -10,    1), S( -23,   -5), S( -16,   -1), S( -50,   11),
	},
	{
		S( -38,   -4), S( -37,    7), S( -16,    2), S( -75,   13), S( -71,   18), S( -53,    4), S( -28,    9), S( -15,   15),
		S( -23,   -5), S( -35,   11), S(  -7,   -3), S(  -1,   -1), S( -20,    8), S(   1,   -2), S(  -2,    0), S(  -3,   -5),
		S(  20,   12), S(  14,   -1), S(  42,    5), S(  11,    4), S(  15,   -1), S(   6,    4), S(   6,    5), S(   6,    3),
		S(  -3,    5), S(   9,    8), S(   7,   11), S(  19,   13), S(  17,   19), S(  13,    5), S(   4,    9), S(  -8,    9),
		S(  14,   -5), S(   2,    8), S(   5,    6), S(   7,   11), S(  16,    8), S(  -4,   12), S(  -2,    5), S(  -1,    3),
		S(  22,  -11), S(  22,  -10), S(  12,   -3), S(   3,    7), S(  -4,    3), S(   6,    3), S(  10,    2), S(   1,   -6),
		S(  23,  -19), S(  30,  -24), S(  20,  -14), S(   4,   -6), S(  -4,    0), S(   8,  -18), S(   7,  -17), S(  14,   -7),
		S(  36,  -31), S(  19,  -19), S(  -4,    0), S(  14,   -3), S(   0,   -2), S(   2,    8), S(  12,   -1), S(  13,   -7),
	},
	{
		S(   8,   10), S( -26,   37), S(  -1,   23), S( -13,   16), S( -28,   25), S( -23,   28), S( -12,   22), S(  -7,   19),
		S(  26,    0), S(  31,    6), S(  23,    9), S(   5,   12), S(  16,   14), S(   0,   27), S(  -2,   22), S(   0,   15),
		S(   8,    3), S(  43,    1), S(  35,   -1), S(  26,    3), S(   3,   14), S(  -1,   24), S(  12,   19), S(  -9,   22),
		S(   2,   10), S(   5,   15), S(  17,    9), S(  10,    4), S(   1,   14), S(   5,   18), S(   5,   18), S( -10,   21),
		S(  -8,   -1), S(  13,    3), S(  -2,    6), S(   6,    2), S(  -6,    6), S(  -9,    9), S( -11,    9), S( -15,    8),
		S(   9,  -28), S(  19,  -27), S(   2,  -17), S(   1,  -17), S( -11,  -10), S( -16,   -9), S( -14,  -11), S( -20,   -9),
		S(  -5,  -31), S(  20,  -37), S(   5,  -26), S(   2,  -25), S(  -6,  -19), S(  -6,  -18), S( -16,  -14), S( -18,  -20),
		S(  -9,  -35), S(  -7,  -17), S(  -1,  -21), S(   5,  -28), S(  -2,  -25), S(  -9,  -16), S(  -8,  -21), S(  -9,  -17),
	},
	{
		S(   6,  -25), S(  41,  -46), S(  -1,   11), S(  -3,   -1), S(  14,  -20), S( -15,   -1), S( -38,   -3), S( -17,  -12),
		S(  35,    4), S(  -5,   14), S(  -1,   21), S( -38,   53), S( -27,   34), S(  -8,    8), S(  -6,  -13), S(   7,  -14),
		S(  12,    6), S(  15,    7), S(   7,   16), S(  -4,   26), S(   3,   19), S(   7,   16), S(   6,   -6), S(  18,   -8),
		S(  10,   21), S(   8,   42), S(   8,   14), S( -13,   35), S(  -9,   34), S(   5,    7), S(   3,   18), S(   1,   11),
		S(  11,   12), S(  15,   19), S(   1,   27), S(  -1,   30), S(  -7,   31), S(  -6,   24), S(   1,   18), S(  -2,    9),
		S(  13,  -20), S(  12,   -3), S(   3,    9), S(  -9,   23), S(  -8,   16), S(  -8,   18), S(   2,   -2), S(   2,  -11),
		S(  13,  -57), S(  17,  -67), S(   7,  -38), S(   3,   -4), S(   1,    2), S(   3,  -16), S(   1,  -20), S(   8,  -35),
		S(   5,  -50), S( -15,  -49), S( -19,  -21), S(  -8,  -16), S(  -8,  -10), S( -13,   -3), S( -16,  -12), S( -16,  -10),
	},
	{
		S(   3,  -65), S(   3,    0), S( -29,   -6), S( -22,   -8), S(   8,   -5), S(   8,   -5), S(   8,   -5), S(   8,   -5),
		S( -57,   34), S(   2,   58), S(  -8,   46), S(  30,   19), S(   8,   -5), S(   8,   -5), S(   8,   -5), S(   8,   -5),
		S( -23,   25), S(  25,   53), S(  34,   41), S(   1,   43), S(   8,   -5), S(   8,   -5), S(   8,   -5), S(   8,   -5),
		S( -63,   24), S( -21,   46), S( -18,   38), S( -46,   34), S(   8,   -5), S(   8,   -5), S(   8,   -5), S(   8,   -5),
		S( -80,   12), S( -34,   31), S( -23,   19), S( -46,   17), S(   8,   -5), S(   8,   -5), S(   8,   -5), S(   8,   -5),
		S( -38,   -5), S(   7,    8), S(  -9,   -2), S( -15,   -3), S(   8,   -5), S(   8,   -5), S(   8,   -5), S(   8,   -5),
		S(  24,  -27), S(  35,   -8), S(  13,  -15), S(  -3,  -18), S(   8,   -5), S(   8,   -5), S(   8,   -5), S(   8,   -5),
		S(  19,  -62), S(  24,  -27), S(   4,  -31), S(  14,  -51), S(   8,   -5), S(   8,   -5), S(   8,   -5), S(   8,   -5),
	},
};

constexpr PackedScore MOBILITY[4][28] = {
	{S( -11,  -19), S( -39,  -64), S( -14,  -31), S(  -6,   -5), S(   4,    8), S(   6,   19), S(  14,   26), S(  22,   33), S(  31,   33), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -21,  -31), S( -52,  -97), S( -30,  -38), S( -23,  -16), S( -11,   -3), S(  -5,    6), S(   0,   17), S(   6,   22), S(   8,   27), S(  13,   29), S(  15,   30), S(  27,   23), S(  30,   25), S(  48,    6), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -27,  -42), S(  14,  -72), S( -25,  -52), S( -13,  -31), S(  -6,  -24), S(  -2,   -6), S(   0,    0), S(  -5,    9), S(  -1,   13), S(   2,   19), S(   6,   25), S(   7,   35), S(  10,   40), S(  17,   42), S(  23,   40), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -32,    6), S( -52,  -78), S( -95,  -80), S( -76, -253), S( -74,  -94), S( -28,  -41), S( -21,   -9), S( -13,   -6), S(  -5,   -5), S(  -4,   20), S(  -3,   27), S(   0,   37), S(   3,   41), S(   7,   43), S(  10,   45), S(  12,   47), S(  14,   48), S(  13,   54), S(  15,   54), S(  16,   55), S(  25,   46), S(  32,   30), S(  36,   28), S(  53,    7), S(  59,   -1), S(  65,  -12), S(  48,   -7), S(  19,  -29)}
};

constexpr PackedScore THREAT_BY_PAWN[6] = {S(   7,  -18), S(  64,   31), S(  63,   63), S(  79,   30), S(  75,   -7), S(   0,    0)};
constexpr PackedScore THREAT_BY_KNIGHT[2][6] = {
	{S(   8,   29), S(  27,   33), S(  38,   43), S(  74,   12), S(  47,  -21), S(   0,    0)},
	{S(  -4,   10), S(  14,   33), S(  30,   31), S(  64,   33), S(  57,    0), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_BISHOP[2][6] = {
	{S(   1,   38), S(  43,   36), S(  -7,   34), S(  71,   16), S(  68,   65), S(   0,    0)},
	{S(   0,    8), S(  22,   24), S( -21,  -17), S(  45,   46), S(  48,  124), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_ROOK[2][6] = {
	{S(   1,   43), S(  18,   64), S(  28,   58), S(  13,  -49), S(  75,   12), S(   0,    0)},
	{S(  -8,    7), S(   2,   16), S(  14,    3), S(  13,  -92), S(  64,   48), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_QUEEN[2][6] = {
	{S(   7,   10), S(  24,   21), S(   9,   50), S(  14,    8), S(  11,  -55), S(  97,   31)},
	{S(  -1,   10), S(   0,    7), S(  -7,   20), S(  -6,    4), S( -18,  -69), S( 111,   65)}
};
constexpr PackedScore THREAT_BY_KING[6] = {S( -33,   48), S(   0,   50), S(  20,   42), S(  83,   18), S(   0,    0), S(   0,    0)};
constexpr PackedScore PUSH_THREAT = S(  16,   21);

constexpr PackedScore ISOLATED_PAWN[8] = {S(  -5,   -2), S(  -4,  -11), S(  -9,  -10), S(  -8,  -15), S(  -8,  -14), S(  -6,   -6), S(  -1,  -10), S(  -7,   -1)};
constexpr PackedScore BACKWARD_PAWN = S(  -6,   -5);
constexpr PackedScore PAWN_PHALANX[8] = {S(   0,    0), S(   5,   -3), S(  11,    2), S(  19,   14), S(  47,   59), S( 111,  226), S( -35,  358), S(   0,    0)};
constexpr PackedScore DEFENDED_PAWN[8] = {S(   0,    0), S(   0,    0), S(  20,    9), S(  13,    8), S(  13,   18), S(  20,   58), S( 130,   81), S(   0,    0)};

constexpr PackedScore PASSED_PAWN[2][2][8] = {
	{
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -32,  -36), S( -13,   26), S( -22,  153), S(  30,  240), S(   0,    0)},
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -20,  -49), S(  12,  -23), S(  15,   16), S(  60,   37), S(   0,    0)}
	},
	{
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -27,  -57), S(   1,  -26), S(  16,    1), S(  67,   -2), S(   0,    0)},
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -29,  -62), S(   2,  -36), S(  -7,  -19), S(  -3,  -18), S(   0,    0)}
	}
};
constexpr PackedScore OUR_PASSER_PROXIMITY[8] = {S(   0,    0), S(  46,   82), S(   2,   68), S(   0,   42), S(   3,   31), S(   9,   24), S(  19,   22), S(  11,   22)};
constexpr PackedScore THEIR_PASSER_PROXIMITY[8] = {S(   0,    0), S( -40,    6), S(  21,   -2), S(  13,   26), S(  17,   46), S(  10,   79), S(  12,   80), S(  12,   69)};

constexpr PackedScore PAWN_STORM[2][4][8] = {
	{
		{S(  15,   13), S(-133,  -51), S(  -1,   -9), S(   6,  -12), S(   0,    1), S(  -5,   10), S(  -3,    9), S(   0,    0)},
		{S(  11,    1), S(  -9, -104), S(  54,  -42), S(   9,  -10), S(   2,   -4), S( -10,    7), S(  -7,   10), S(   0,    0)},
		{S(  -2,    5), S(  61, -101), S(  71,  -45), S(  19,  -17), S(   3,   -1), S(  -8,    8), S(  -9,   12), S(   0,    0)},
		{S(   8,   -7), S( 105,  -86), S(  39,  -21), S(  14,   -2), S(  -2,    4), S(  -9,    0), S(  -3,    1), S(   0,    0)}
	},
	{
		{S(   0,    0), S(  -3,  -27), S( -32,  117), S(  18,  -53), S(  -2,    8), S(  -1,    6), S(  -5,   10), S(   0,    0)},
		{S(   0,    0), S(  -2,  -83), S(   1,   69), S(  52,  -35), S(   3,    3), S(  -7,    6), S(  -8,   10), S(   0,    0)},
		{S(   0,    0), S(  -8,   13), S( -53, -110), S(  22,  -29), S(   2,    4), S(  -2,    7), S(  -9,   11), S(   0,    0)},
		{S(   0,    0), S( -11,  -55), S(  66,   -9), S(  22,   -3), S(   0,    9), S(   0,   -9), S(  -1,    6), S(   0,    0)}
	}
};
constexpr PackedScore PAWN_SHIELD[4][8] = {
	{S(  16,    3), S(  -8,   26), S( -15,   15), S(  -2,    8), S(   4,   -1), S( -31,  -27), S( -78,  -34), S(   0,    0)},
	{S(  19,    2), S( -15,   11), S( -11,    2), S(  12,   -2), S(   9,   -9), S(  -3,  -15), S( -42,  -31), S(   0,    0)},
	{S(   8,   14), S( -15,    9), S(   5,   -9), S(   3,   -1), S(   2,    1), S(  10,  -12), S(  -6,  -39), S(   0,    0)},
	{S(  14,   -3), S(   5,   -2), S(  -4,    0), S(   0,   -6), S(   8,   -9), S(  29,  -21), S( -12,  -21), S(   0,    0)}
};
constexpr PackedScore SAFE_KNIGHT_CHECK = S(  82,   -2);
constexpr PackedScore SAFE_BISHOP_CHECK = S(  24,   11);
constexpr PackedScore SAFE_ROOK_CHECK = S(  60,    6);
constexpr PackedScore SAFE_QUEEN_CHECK = S(  24,   21);
constexpr PackedScore UNSAFE_KNIGHT_CHECK = S(   6,    2);
constexpr PackedScore UNSAFE_BISHOP_CHECK = S(  12,   12);
constexpr PackedScore UNSAFE_ROOK_CHECK = S(  21,    0);
constexpr PackedScore UNSAFE_QUEEN_CHECK = S(   6,   14);
constexpr PackedScore KING_ATTACKER_WEIGHT[4] = {S(  20,    2), S(  16,    2), S(  18,  -13), S(   5,    0)};
constexpr PackedScore KING_ATTACKS[14] = {S( -45,   28), S( -53,   22), S( -61,   16), S( -65,   19), S( -64,   15), S( -57,   10), S( -41,    5), S( -21,   -5), S(  17,  -23), S(  40,  -22), S(  71,  -34), S(  83,   -9), S( 119,  -92), S(  80,   59)};

constexpr PackedScore MINOR_BEHIND_PAWN = S(   8,   14);
constexpr PackedScore KNIGHT_OUTPOST = S(  26,   18);
constexpr PackedScore BISHOP_PAWNS[7] = {S(   5,   24), S(   7,   22), S(   5,   13), S(   1,    4), S(  -2,   -5), S(  -3,  -19), S(  -7,  -33)};
constexpr PackedScore BISHOP_PAIR = S(  20,   62);
constexpr PackedScore ROOK_OPEN[2] = {S(  27,    2), S(  15,    3)};

constexpr PackedScore TEMPO = S(  32,   35);

constexpr PackedScore COMPLEXITY_PAWNS = S(   0,    8);
constexpr PackedScore COMPLEXITY_PASSERS = S(   0,    1);
constexpr PackedScore COMPLEXITY_PAWNS_BOTH_SIDES = S(   0,   69);
constexpr PackedScore COMPLEXITY_PAWN_ENDGAME = S(   0,   62);
constexpr PackedScore COMPLEXITY_OFFSET = S(   0, -132);

#undef S


}