#pragma once

#include "../defs.h"

namespace eval
{

#define S(mg, eg) PackedScore(mg, eg)

constexpr PackedScore MATERIAL[6] = {S(  61,   87), S( 295,  363), S( 291,  377), S( 413,  672), S( 861, 1229), S(0, 0)};

constexpr PackedScore PSQT[6][64] = {
	{
		S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
		S(  36,   77), S(  44,   80), S(  28,   87), S(  64,   45), S(  49,   52), S(  38,   59), S( -27,   98), S( -32,   91),
		S(  14,   40), S(  10,   56), S(  36,   15), S(  46,  -14), S(  52,  -15), S(  84,   -6), S(  44,   39), S(  29,   29),
		S(  -6,   24), S(  -2,   27), S(   6,    3), S(   5,   -8), S(  24,   -9), S(  26,  -10), S(  10,   17), S(  11,    2),
		S( -15,    7), S( -11,   21), S(  -2,   -3), S(   6,   -7), S(   9,   -7), S(  12,  -11), S(   1,    9), S(   0,  -11),
		S( -25,   -1), S( -20,   10), S( -10,   -6), S( -10,   -3), S(   0,   -2), S(  -4,   -8), S(   4,   -1), S(  -6,  -17),
		S( -17,    4), S( -11,   15), S(  -5,    0), S(  -4,   -2), S(   4,    8), S(  27,   -8), S(  18,    2), S(  -3,  -15),
		S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
	},
	{
		S( -95,  -34), S( -84,   -7), S( -61,    8), S( -15,   -8), S(   7,   -4), S(  -5,  -27), S( -69,   -4), S( -72,  -50),
		S( -12,    6), S(  -2,   10), S(   1,    2), S(  10,    1), S(   8,   -6), S(  29,  -13), S(  15,    2), S(   6,  -10),
		S(   2,    0), S(   5,    2), S(  10,    3), S(  16,    3), S(  28,   -2), S(  58,  -21), S(  14,   -6), S(  22,  -11),
		S(   8,   11), S(  17,    3), S(  29,    5), S(  37,    9), S(  30,   13), S(  45,    3), S(  32,    6), S(  39,    1),
		S(   2,   12), S(  18,    2), S(  19,   13), S(  27,   11), S(  22,   22), S(  26,    7), S(  25,    7), S(   8,   14),
		S( -16,   -1), S(  -4,   -1), S(  -2,   -1), S(   2,   12), S(  16,   10), S(   2,   -7), S(  15,   -5), S(   0,    2),
		S( -22,    4), S( -18,    7), S( -12,   -1), S(   2,    0), S(   1,   -2), S(   4,   -3), S(   3,   -6), S(  -3,   14),
		S( -50,   21), S( -14,   -6), S( -21,    0), S( -11,    4), S(  -5,    4), S(  -3,   -9), S( -13,    1), S( -19,   16),
	},
	{
		S(  -9,    2), S( -38,    8), S( -41,    2), S( -67,    8), S( -66,    7), S( -24,   -5), S( -26,   -1), S( -49,   -1),
		S(  -5,   -6), S( -12,   -2), S(  -6,   -4), S( -20,    0), S(  -9,   -7), S( -18,   -4), S( -50,   10), S( -37,    0),
		S(   3,    5), S(  13,    1), S(   1,    3), S(  16,   -4), S(   2,    0), S(  34,    6), S(  16,    0), S(  23,    6),
		S(  -4,    5), S(   7,    6), S(  13,    4), S(  21,   16), S(  14,   12), S(  12,    9), S(   9,    8), S(   3,    3),
		S(   3,    2), S(   0,    8), S(   5,   10), S(  16,   12), S(  15,    9), S(   9,    6), S(   6,    5), S(  19,   -7),
		S(   0,    1), S(  14,    1), S(   6,    4), S(  -2,    8), S(   4,   11), S(   8,    0), S(  19,   -7), S(  17,  -10),
		S(  14,    5), S(   5,  -12), S(   9,  -12), S(  -4,    2), S(   2,   -1), S(  16,  -10), S(  21,  -15), S(  17,  -12),
		S(  11,   -4), S(  12,    9), S(   4,    3), S(   0,   -3), S(  13,   -6), S(  -6,    8), S(  20,  -11), S(  29,  -22),
	},
	{
		S( -11,   15), S( -16,   20), S( -24,   28), S( -29,   26), S( -15,   19), S(   6,   16), S(  -1,   21), S(  20,   10),
		S(  -2,   11), S(   3,   16), S(  10,   18), S(  26,    6), S(  12,    8), S(  16,    7), S(  26,    2), S(  30,    0),
		S(  -9,   10), S(  17,    6), S(   9,    8), S(   9,    3), S(  27,   -2), S(  36,   -9), S(  50,   -7), S(  20,   -7),
		S(  -8,   12), S(   9,    6), S(   9,   10), S(   5,    6), S(  15,   -4), S(  20,   -7), S(  16,    0), S(   9,   -3),
		S( -16,    6), S(  -8,    7), S(  -5,    5), S(   0,    3), S(   6,    1), S(  -6,    5), S(  12,   -1), S(  -8,   -3),
		S( -23,    1), S( -19,   -3), S( -14,   -5), S( -11,   -4), S(  -2,   -8), S(  -6,  -10), S(  15,  -22), S(  -2,  -21),
		S( -25,   -6), S( -20,   -5), S( -10,   -7), S(  -8,   -9), S(  -4,  -15), S(   0,  -17), S(   5,  -20), S( -20,  -16),
		S( -17,   -5), S( -16,   -9), S( -15,   -4), S(  -7,  -12), S(  -1,  -18), S(  -6,  -11), S(  -8,  -13), S( -20,  -13),
	},
	{
		S( -20,   -9), S( -33,    2), S( -24,   22), S(   2,   10), S(  -4,   13), S(   7,    7), S(  49,  -39), S(   9,   -9),
		S(   6,  -15), S( -15,   -2), S( -12,   24), S( -25,   43), S( -26,   57), S(   2,   23), S(  -2,   11), S(  40,    8),
		S(   8,   -5), S(   2,   -2), S(  -4,   21), S(  -3,   27), S( -14,   40), S(   7,   10), S(  23,   -4), S(  27,   -3),
		S(   0,    7), S(   2,   15), S(   5,   12), S( -10,   27), S( -13,   31), S(  10,   15), S(   9,   29), S(  17,   12),
		S(   0,    3), S(   3,   16), S(  -1,   13), S(  -5,   22), S(   5,   22), S(   3,   22), S(  17,    6), S(  16,    9),
		S(   1,  -16), S(   1,   -4), S(  -9,    7), S(  -8,   13), S(  -3,   19), S(   1,    5), S(  13,  -13), S(  14,  -18),
		S(   2,  -29), S(  -3,  -31), S(   1,  -21), S(   2,   -7), S(   1,   -6), S(   8,  -32), S(  16,  -62), S(  28,  -76),
		S( -15,  -27), S( -16,  -23), S( -13,  -13), S( -11,  -13), S( -10,  -13), S( -18,  -24), S(  -7,  -38), S(  10,  -49),
	},
	{
		S(  40,  -51), S(  79,  -30), S( 117,  -33), S(  52,  -10), S(  59,  -33), S( -26,    3), S(  17,    6), S(  87,  -67),
		S( -97,   25), S(  15,   22), S(  29,   11), S( 147,  -18), S(  88,  -10), S(  48,   23), S(  21,   38), S( -86,   44),
		S(-110,   24), S(  53,   12), S(  38,    7), S(  46,    2), S(  85,    0), S(  99,   10), S(   8,   34), S( -62,   29),
		S( -64,    1), S( -19,    5), S( -15,    6), S( -15,    1), S( -19,   -3), S( -29,   15), S( -56,   22), S(-154,   30),
		S( -72,   -9), S( -27,   -1), S( -34,    4), S( -33,    2), S( -35,    1), S( -37,    5), S( -69,   14), S(-151,   19),
		S( -52,   -4), S(   3,   -2), S( -21,    3), S(  -5,   -1), S(  -8,   -2), S( -25,    6), S( -18,    4), S( -76,   11),
		S(  31,  -14), S(  23,    0), S(  18,    0), S(   1,   -3), S(  -4,    0), S(   6,    2), S(  22,   -1), S(  16,   -9),
		S(  21,  -33), S(  54,  -25), S(  26,   -8), S( -28,   -1), S(   7,  -17), S( -21,    4), S(  33,  -15), S(  30,  -37),
	},
};

constexpr PackedScore MOBILITY[4][28] = {
	{S( -12,  -14), S( -36,  -60), S( -14,  -30), S(  -4,   -6), S(   6,    5), S(   9,   16), S(  17,   22), S(  26,   27), S(  35,   25), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S(  -5,  -31), S( -42,  -92), S( -20,  -44), S( -12,  -21), S(   0,   -8), S(   7,    1), S(  13,   11), S(  18,   16), S(  21,   21), S(  24,   23), S(  24,   26), S(  34,   19), S(  28,   25), S(  43,   13), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -46,  -26), S(   1,  -55), S( -29,  -51), S( -17,  -33), S( -11,  -26), S(  -6,  -12), S(  -4,   -4), S(  -7,    2), S(  -4,    3), S(  -0,    8), S(   5,   12), S(   7,   17), S(  11,   21), S(  18,   22), S(  22,   18), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -48,    2), S( -65,  -75), S(-110,  -65), S( -75, -271), S( -81, -114), S( -37,  -57), S( -26,  -33), S( -18,  -27), S( -12,  -17), S(  -9,    4), S(  -7,   12), S(  -3,   21), S(   1,   27), S(   4,   29), S(   7,   32), S(  10,   36), S(  12,   39), S(  11,   44), S(  12,   48), S(  12,   50), S(  19,   46), S(  26,   34), S(  29,   36), S(  55,    8), S(  58,   12), S( 102,  -26), S( 100,  -27), S(  57,  -27)}
};

constexpr PackedScore THREAT_BY_PAWN[6] = {S(   7,  -15), S(  64,   27), S(  64,   56), S(  89,    8), S(  75,  -21), S(   0,    0)};
constexpr PackedScore THREAT_BY_KNIGHT[2][6] = {
	{S(   8,   27), S(  30,   21), S(  35,   38), S(  76,    2), S(  43,  -27), S(   0,    0)},
	{S(  -3,   12), S(  13,   41), S(  28,   32), S(  62,   26), S(  52,   -2), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_BISHOP[2][6] = {
	{S(   6,   32), S(  51,   22), S(   2,   33), S(  71,    7), S(  71,   33), S(   0,    0)},
	{S(   2,    9), S(  23,   23), S( -12,   12), S(  44,   40), S(  50,  122), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_ROOK[2][6] = {
	{S(   0,   42), S(  29,   47), S(  27,   47), S(  11,  -27), S(  74,   -7), S(   0,    0)},
	{S(  -7,   14), S(   4,   18), S(  14,    8), S(   6,  -52), S(  56,   54), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_QUEEN[2][6] = {
	{S(  12,    4), S(  37,    5), S(  18,   42), S(  25,  -11), S(  13,  -70), S( 155,  -61)},
	{S(  -1,   15), S(   1,    8), S(  -6,   24), S(  -3,    3), S( -18,  -57), S( 116,   50)}
};
constexpr PackedScore THREAT_BY_KING[6] = {S( -16,   39), S(  29,   40), S(  30,   45), S( 101,    7), S(   0,    0), S(   0,    0)};
constexpr PackedScore PUSH_THREAT = S(  19,   16);

constexpr PackedScore PASSED_PAWN[8] = {S(   0,    0), S( -17,  -69), S( -16,  -54), S( -14,  -20), S(  10,   16), S(  -1,   85), S(  48,   95), S(   0,    0)};
constexpr PackedScore ISOLATED_PAWN[8] = {S(  -3,    6), S(  -2,  -11), S( -11,   -5), S(  -6,  -13), S( -11,  -13), S(  -8,   -3), S(  -1,  -11), S( -10,    7)};
constexpr PackedScore PAWN_PHALANX[8] = {S(   0,    0), S(   4,   -2), S(  12,    6), S(  18,   15), S(  46,   54), S( 120,  177), S(-160,  437), S(   0,    0)};
constexpr PackedScore DEFENDED_PAWN[8] = {S(   0,    0), S(   0,    0), S(  18,   10), S(  12,    7), S(  14,   15), S(  30,   36), S( 174,   22), S(   0,    0)};
constexpr PackedScore OUR_PASSER_PROXIMITY[8] = {S(   0,    0), S(   6,   52), S(  -6,   40), S(  -5,   24), S(  -2,   14), S(   2,   11), S(  17,    8), S(   6,    7)};
constexpr PackedScore THEIR_PASSER_PROXIMITY[8] = {S(   0,    0), S( -79,    0), S(   7,   -0), S(  -1,   27), S(   5,   37), S(   5,   45), S(   7,   50), S( -10,   49)};

constexpr PackedScore PAWN_STORM[3][8] = {
	{S(  43,  -32), S(  22,  -16), S(  17,   -5), S(   8,   -1), S(   1,    2), S(  -3,    6), S(  -1,    5), S(   7,  -11)},
	{S(   0,    0), S(  15,  -26), S(  27,   -2), S(   4,    1), S(  -5,    7), S(  -6,   13), S(  -7,   14), S(   7,   -3)},
	{S(   0,   -2), S(  -7,    6), S(   3,    8), S(   2,    9), S(   4,    8), S(   4,   10), S(   4,   10), S(  -9,   -4)}
};
constexpr PackedScore PAWN_SHIELD[3][8] = {
	{S(   2,  -13), S(  -8,   -7), S(  -4,  -11), S(   1,  -11), S(  13,  -14), S(  17,  -25), S(  26,  -28), S(   6,    0)},
	{S(   0,    0), S( -16,    3), S(  -8,   -4), S(   9,   -4), S(  20,  -10), S(  34,  -29), S(  53,  -40), S(  16,    2)},
	{S(  -3,   -8), S(  -2,   -5), S(   1,   -5), S(   1,   -0), S(   4,    1), S(   4,    2), S(  22,    6), S(  -9,    7)}
};
constexpr PackedScore SAFE_KNIGHT_CHECK = S(  78,   -4);
constexpr PackedScore SAFE_BISHOP_CHECK = S(  16,   -7);
constexpr PackedScore SAFE_ROOK_CHECK = S(  58,   -4);
constexpr PackedScore SAFE_QUEEN_CHECK = S(  31,   10);
constexpr PackedScore KING_ATTACKER_WEIGHT[4] = {S(  15,   -4), S(   7,   -1), S(   7,  -18), S(  -2,   11)};
constexpr PackedScore KING_ATTACKS[14] = {S( -26,    6), S( -28,    4), S( -29,    2), S( -28,    7), S( -19,    5), S(  -4,    2), S(  20,   -6), S(  48,  -18), S(  94,  -38), S( 124,  -44), S( 161,  -59), S( 185,  -47), S( 219, -127), S( 184,    7)};

constexpr PackedScore KNIGHT_OUTPOST = S(  25,   18);
constexpr PackedScore SHIELDED_KNIGHT = S(   6,   12);
constexpr PackedScore BISHOP_PAWNS[7] = {S(  21,   20), S(  22,   18), S(  20,   11), S(  16,    3), S(  12,   -6), S(  11,  -18), S(   6,  -30)};
constexpr PackedScore SHIELDED_BISHOP = S(   9,   -0);
constexpr PackedScore BISHOP_PAIR = S(  20,   60);
constexpr PackedScore ROOK_OPEN[2] = {S(  21,    9), S(  11,   11)};

constexpr PackedScore TEMPO = S(  29,   30);

#undef S


}
