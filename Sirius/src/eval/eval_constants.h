#pragma once

#include "../defs.h"

namespace eval
{

#define S(mg, eg) PackedScore(mg, eg)

constexpr PackedScore MATERIAL[6] = {S(  61,  129), S( 288,  443), S( 313,  451), S( 387,  811), S( 793, 1499), S(0, 0)};

constexpr PackedScore PSQT[6][64] = {
	{
		S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
		S(  66,   84), S(  30,   91), S(  34,   95), S(  56,   75), S(  67,   65), S(  32,   96), S(  30,  103), S(  64,   89),
		S(  26,   25), S(  31,   43), S(  30,   13), S(  55,  -21), S(  41,  -14), S(  24,    7), S(   3,   34), S(  10,   31),
		S(  18,   17), S(   9,   13), S(  11,   -5), S(  18,  -17), S(   7,  -17), S(   0,   -3), S(  -5,   12), S( -11,   21),
		S(   7,    4), S(   7,   10), S(   5,  -17), S(  13,  -13), S(   7,  -13), S(  -5,   -7), S( -13,    9), S( -17,    7),
		S(   0,    1), S(   9,   -3), S(   1,  -23), S(  -2,    1), S(  -8,    0), S( -16,   -7), S( -23,    3), S( -29,    5),
		S(  15,    3), S(  32,   -2), S(  14,   -9), S(   8,   10), S(  -6,    3), S(  -8,   -2), S( -13,   11), S( -18,   12),
		S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
	},
	{
		S( -70,  -85), S( -77,  -20), S( -30,  -13), S(  15,  -12), S( -37,    7), S( -69,   10), S(-109,   15), S( -84,  -40),
		S(  -7,   -8), S(  21,    1), S(  32,   -4), S(   8,    6), S(  12,    7), S(   2,   14), S(  -4,   20), S( -10,   11),
		S(  15,   -7), S(  13,   -2), S(  57,  -18), S(  39,    2), S(  20,    9), S(  12,    6), S(   3,    5), S(  -7,    6),
		S(  35,    4), S(  37,    7), S(  48,    6), S(  36,   14), S(  30,   18), S(  30,    9), S(  19,    5), S(   7,   17),
		S(  10,   16), S(  20,   12), S(  28,    8), S(  19,   21), S(  25,   14), S(  20,   13), S(  21,    4), S(   2,   13),
		S(   2,   -1), S(  17,   -4), S(   8,  -10), S(  16,    8), S(   7,    8), S(  -1,   -5), S(  -1,   -5), S( -14,    0),
		S(   3,    6), S(   5,   -5), S(   5,   -7), S(   4,   -2), S(   5,   -2), S(  -7,   -6), S( -13,   -2), S( -19,    0),
		S( -11,   -5), S( -11,    0), S(  -4,   -8), S(  -2,    4), S(  -9,    1), S( -22,   -6), S( -15,   -1), S( -49,   10),
	},
	{
		S( -39,   -3), S( -35,    6), S( -13,    0), S( -75,   13), S( -70,   18), S( -53,    4), S( -26,    8), S( -16,   16),
		S( -25,   -4), S( -36,   11), S( -12,   -1), S(  -3,   -1), S( -21,    8), S(   0,   -2), S(  -1,    0), S(  -3,   -6),
		S(  19,   12), S(  14,   -1), S(  43,    4), S(  10,    4), S(  14,   -1), S(   6,    4), S(   7,    5), S(   7,    3),
		S(  -3,    5), S(   8,    8), S(   7,   11), S(  18,   13), S(  18,   19), S(  12,    5), S(   5,    9), S(  -7,    8),
		S(  13,   -4), S(   2,    8), S(   5,    6), S(   8,   11), S(  16,    8), S(  -4,   13), S(  -2,    6), S(   0,    2),
		S(  21,  -11), S(  23,  -10), S(  13,   -3), S(   3,    7), S(  -4,    3), S(   6,    3), S(  10,    2), S(   1,   -6),
		S(  23,  -19), S(  30,  -24), S(  21,  -15), S(   4,   -6), S(  -4,   -1), S(   8,  -18), S(   7,  -17), S(  14,   -7),
		S(  36,  -31), S(  19,  -19), S(  -4,    0), S(  15,   -3), S(   0,   -2), S(   2,    8), S(  12,   -1), S(  13,   -7),
	},
	{
		S(  10,   10), S( -28,   38), S( -16,   28), S( -13,   15), S( -29,   25), S( -25,   29), S( -12,   22), S(  -4,   17),
		S(  27,    0), S(  29,    6), S(  15,   12), S(   5,   13), S(  16,   15), S(   0,   27), S(  -2,   22), S(   1,   15),
		S(  10,    3), S(  41,    1), S(  30,    1), S(  26,    4), S(   3,   15), S(  -1,   25), S(  12,   19), S(  -8,   21),
		S(   3,   10), S(   4,   15), S(  14,   12), S(  12,    3), S(   3,   14), S(   6,   18), S(   6,   18), S(  -9,   21),
		S(  -7,   -2), S(  12,    3), S(  -4,    7), S(   7,    1), S(  -5,    6), S(  -8,    9), S( -10,    9), S( -14,    8),
		S(  10,  -27), S(  20,  -28), S(   1,  -16), S(   3,  -17), S(  -9,  -10), S( -14,  -10), S( -13,  -11), S( -19,   -9),
		S(  -4,  -31), S(  22,  -39), S(   5,  -25), S(   4,  -25), S(  -3,  -21), S(  -4,  -18), S( -14,  -14), S( -17,  -20),
		S(  -8,  -35), S(  -6,  -17), S(  -1,  -21), S(   7,  -28), S(  -1,  -25), S(  -8,  -17), S(  -7,  -21), S(  -8,  -17),
	},
	{
		S(   8,  -26), S(  44,  -49), S( -11,   14), S( -10,    1), S(  10,  -18), S( -17,    1), S( -37,   -2), S( -14,  -14),
		S(  37,    3), S(  -4,   12), S( -18,   23), S( -38,   54), S( -25,   35), S(  -9,    9), S(  -5,  -13), S(   8,  -13),
		S(  13,    6), S(  10,    8), S(   6,   13), S(  -9,   28), S(   4,   18), S(   9,   14), S(   7,   -4), S(  20,   -9),
		S(  11,   19), S(   8,   39), S(   8,   12), S( -11,   33), S(  -6,   33), S(   7,    6), S(   5,   15), S(   4,    9),
		S(  12,   10), S(  16,   17), S(   2,   26), S(   1,   29), S(  -5,   30), S(  -4,   23), S(   2,   18), S(   0,    8),
		S(  15,  -23), S(  14,   -5), S(   4,    8), S(  -7,   22), S(  -7,   15), S(  -6,   17), S(   4,   -3), S(   4,  -11),
		S(  15,  -57), S(  19,  -68), S(   9,  -39), S(   5,   -5), S(   2,    1), S(   4,  -17), S(   3,  -21), S(  11,  -36),
		S(   7,  -53), S(  -8,  -53), S( -17,  -23), S(  -7,  -16), S(  -7,  -10), S( -11,   -5), S( -14,  -12), S( -14,  -12),
	},
	{
		S(  -3,  -64), S(   1,    2), S( -29,   -5), S( -21,   -8), S(   8,   -5), S(   8,   -5), S(   8,   -5), S(   8,   -5),
		S( -54,   31), S(  -1,   60), S(  -7,   47), S(  33,   19), S(   8,   -5), S(   8,   -5), S(   8,   -5), S(   8,   -5),
		S( -15,   23), S(  24,   54), S(  33,   42), S(   4,   43), S(   8,   -5), S(   8,   -5), S(   8,   -5), S(   8,   -5),
		S( -56,   22), S( -24,   48), S( -17,   38), S( -46,   34), S(   8,   -5), S(   8,   -5), S(   8,   -5), S(   8,   -5),
		S( -69,    9), S( -37,   32), S( -24,   19), S( -46,   17), S(   8,   -5), S(   8,   -5), S(   8,   -5), S(   8,   -5),
		S( -23,  -10), S(   4,   10), S( -10,   -1), S( -16,   -3), S(   8,   -5), S(   8,   -5), S(   8,   -5), S(   8,   -5),
		S(  30,  -30), S(  32,   -6), S(  12,  -15), S(  -4,  -18), S(   8,   -5), S(   8,   -5), S(   8,   -5), S(   8,   -5),
		S(  20,  -64), S(  22,  -25), S(   2,  -31), S(  13,  -51), S(   8,   -5), S(   8,   -5), S(   8,   -5), S(   8,   -5),
	},
};

constexpr PackedScore MOBILITY[4][28] = {
	{S( -11,  -19), S( -40,  -64), S( -15,  -31), S(  -7,   -5), S(   4,    8), S(   6,   19), S(  14,   26), S(  22,   33), S(  31,   33), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -21,  -32), S( -52,  -97), S( -30,  -38), S( -23,  -16), S( -11,   -3), S(  -4,    6), S(   1,   17), S(   6,   22), S(   8,   27), S(  13,   29), S(  15,   30), S(  28,   22), S(  29,   26), S(  47,    6), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -26,  -42), S(  13,  -72), S( -25,  -52), S( -13,  -31), S(  -7,  -23), S(  -3,   -6), S(   0,    0), S(  -5,   10), S(  -1,   13), S(   2,   19), S(   6,   26), S(   6,   35), S(   9,   40), S(  16,   42), S(  24,   40), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -33,    6), S( -51,  -82), S( -96,  -80), S( -75, -255), S( -73,  -96), S( -29,  -38), S( -21,  -10), S( -14,   -5), S(  -5,   -4), S(  -5,   20), S(  -3,   27), S(   0,   37), S(   3,   41), S(   6,   44), S(  10,   46), S(  13,   47), S(  14,   48), S(  14,   54), S(  15,   54), S(  16,   55), S(  24,   48), S(  32,   32), S(  35,   28), S(  52,    8), S(  60,   -2), S(  63,   -9), S(  46,   -6), S(   9,  -22)}
};

constexpr PackedScore THREAT_BY_PAWN[6] = {S(   9,  -14), S(  64,   31), S(  63,   63), S(  79,   30), S(  76,   -9), S(   0,    0)};
constexpr PackedScore THREAT_BY_KNIGHT[2][6] = {
	{S(   8,   29), S(  27,   37), S(  38,   43), S(  74,   12), S(  47,  -23), S(   0,    0)},
	{S(  -4,   11), S(  13,   37), S(  30,   31), S(  64,   33), S(  57,    1), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_BISHOP[2][6] = {
	{S(   1,   38), S(  43,   36), S(  -8,   34), S(  71,   16), S(  69,   63), S(   0,    0)},
	{S(   0,    8), S(  22,   24), S( -21,  -18), S(  44,   46), S(  48,  123), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_ROOK[2][6] = {
	{S(   1,   43), S(  18,   64), S(  28,   58), S(  13,  -49), S(  75,   11), S(   0,    0)},
	{S(  -8,    7), S(   2,   16), S(  14,    3), S(  13,  -92), S(  65,   46), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_QUEEN[2][6] = {
	{S(   7,   10), S(  24,   21), S(   9,   52), S(  14,    9), S(  11,  -58), S(  96,   27)},
	{S(  -1,    9), S(   0,    8), S(  -7,   20), S(  -6,    3), S( -19,  -70), S( 108,   65)}
};
constexpr PackedScore THREAT_BY_KING[6] = {S( -33,   48), S(   0,   50), S(  22,   42), S(  81,   19), S(   0,    0), S(   0,    0)};
constexpr PackedScore PUSH_THREAT = S(  16,   21);

constexpr PackedScore ISOLATED_PAWN[8] = {S(  -6,   -2), S(  -5,  -11), S( -10,  -10), S( -11,  -16), S( -11,  -14), S(  -7,   -7), S(  -1,  -11), S(  -9,   -1)};
constexpr PackedScore PAWN_PHALANX[8] = {S(   0,    0), S(   6,   -3), S(  12,    4), S(  19,   16), S(  47,   61), S( 110,  227), S( -32,  353), S(   0,    0)};
constexpr PackedScore DEFENDED_PAWN[8] = {S(   0,    0), S(   0,    0), S(  21,   10), S(  13,    9), S(  13,   18), S(  21,   58), S( 133,   79), S(   0,    0)};

constexpr PackedScore PASSED_PAWN[2][2][8] = {
	{
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -32,  -35), S( -14,   25), S( -21,  152), S(  31,  240), S(   0,    0)},
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -20,  -49), S(  11,  -24), S(  15,   15), S(  61,   36), S(   0,    0)}
	},
	{
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -27,  -56), S(   0,  -26), S(  16,    1), S(  66,   -2), S(   0,    0)},
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -29,  -61), S(   1,  -36), S(  -7,  -19), S(  -3,  -19), S(   0,    0)}
	}
};
constexpr PackedScore OUR_PASSER_PROXIMITY[8] = {S(   0,    0), S(  47,   82), S(   2,   68), S(   0,   42), S(   3,   31), S(   9,   24), S(  18,   23), S(  12,   22)};
constexpr PackedScore THEIR_PASSER_PROXIMITY[8] = {S(   0,    0), S( -40,    6), S(  21,   -2), S(  13,   25), S(  17,   45), S(  10,   79), S(  13,   80), S(  15,   67)};

constexpr PackedScore PAWN_STORM[2][4][8] = {
	{
		{S(  15,   13), S(-136,  -49), S(  -2,   -8), S(   4,  -12), S(   0,    1), S(  -5,   10), S(  -3,    9), S(   0,    0)},
		{S(  11,    2), S(  -5, -106), S(  54,  -42), S(  10,  -10), S(   2,   -4), S( -11,    7), S(  -7,   10), S(   0,    0)},
		{S(  -3,    5), S(  62, -101), S(  70,  -44), S(  18,  -17), S(   3,   -1), S(  -8,    8), S(  -9,   12), S(   0,    0)},
		{S(   8,   -7), S( 104,  -85), S(  39,  -21), S(  14,   -2), S(  -2,    4), S(  -9,    0), S(  -3,    0), S(   0,    0)}
	},
	{
		{S(   0,    0), S(  -3,  -26), S( -31,  120), S(  17,  -53), S(  -3,    8), S(  -1,    6), S(  -5,   10), S(   0,    0)},
		{S(   0,    0), S(  -1,  -82), S(   1,   69), S(  51,  -35), S(   3,    2), S(  -7,    6), S(  -8,   10), S(   0,    0)},
		{S(   0,    0), S(  -8,   13), S( -60, -107), S(  20,  -29), S(   2,    4), S(  -2,    6), S(  -9,   11), S(   0,    0)},
		{S(   0,    0), S( -12,  -54), S(  67,   -9), S(  23,   -3), S(   0,    9), S(   0,  -10), S(   0,    7), S(   0,    0)}
	}
};
constexpr PackedScore PAWN_SHIELD[4][8] = {
	{S(  15,    3), S(  -8,   26), S( -15,   16), S(  -2,    8), S(   4,   -1), S( -32,  -26), S( -77,  -34), S(   0,    0)},
	{S(  18,    2), S( -15,   12), S( -11,    2), S(  12,   -2), S(  10,   -9), S(  -2,  -16), S( -42,  -31), S(   0,    0)},
	{S(   8,   14), S( -14,    9), S(   5,   -9), S(   3,   -1), S(   2,    1), S(  11,  -13), S(  -2,  -40), S(   0,    0)},
	{S(  14,   -3), S(   5,   -2), S(  -3,    0), S(   0,   -6), S(   8,   -9), S(  29,  -20), S(  -9,  -24), S(   0,    0)}
};
constexpr PackedScore SAFE_KNIGHT_CHECK = S(  83,   -2);
constexpr PackedScore SAFE_BISHOP_CHECK = S(  24,   11);
constexpr PackedScore SAFE_ROOK_CHECK = S(  60,    5);
constexpr PackedScore SAFE_QUEEN_CHECK = S(  24,   21);
constexpr PackedScore UNSAFE_KNIGHT_CHECK = S(   7,    1);
constexpr PackedScore UNSAFE_BISHOP_CHECK = S(  12,   12);
constexpr PackedScore UNSAFE_ROOK_CHECK = S(  20,    0);
constexpr PackedScore UNSAFE_QUEEN_CHECK = S(   6,   13);
constexpr PackedScore KING_ATTACKER_WEIGHT[4] = {S(  20,    1), S(  16,    2), S(  18,  -14), S(   5,    2)};
constexpr PackedScore KING_ATTACKS[14] = {S( -37,   15), S( -44,    9), S( -52,    4), S( -56,    6), S( -55,    2), S( -49,   -2), S( -33,   -6), S( -16,  -13), S(  14,  -22), S(  37,  -16), S(  56,  -23), S(  68,   17), S(  88,  -14), S(  79,   32)};

constexpr PackedScore MINOR_BEHIND_PAWN = S(   8,   14);
constexpr PackedScore KNIGHT_OUTPOST = S(  27,   19);
constexpr PackedScore BISHOP_PAWNS[7] = {S(   5,   23), S(   7,   22), S(   5,   13), S(   1,    4), S(  -2,   -5), S(  -3,  -20), S(  -8,  -34)};
constexpr PackedScore BISHOP_PAIR = S(  20,   62);
constexpr PackedScore ROOK_OPEN[2] = {S(  26,    2), S(  15,    3)};

constexpr PackedScore TEMPO = S(  32,   35);

constexpr PackedScore COMPLEXITY_PAWNS = S(   0,    8);
constexpr PackedScore COMPLEXITY_PASSERS = S(   0,    1);
constexpr PackedScore COMPLEXITY_PAWNS_BOTH_SIDES = S(   0,   69);
constexpr PackedScore COMPLEXITY_PAWN_ENDGAME = S(   0,   62);
constexpr PackedScore COMPLEXITY_OFFSET = S(   0, -132);

#undef S


}