#pragma once

#include "../defs.h"

namespace eval
{

#define S(mg, eg) PackedScore(mg, eg)

constexpr PackedScore MATERIAL[6] = {S(  61,  128), S( 288,  444), S( 313,  451), S( 387,  813), S( 789, 1503), S(0, 0)};

constexpr PackedScore PSQT[6][64] = {
	{
		S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
		S(  77,   70), S(  28,   82), S(  29,   93), S(  52,   84), S(  59,   75), S(  22,   96), S(  25,   93), S(  66,   83),
		S(  31,   23), S(  30,   41), S(  28,   16), S(  53,   -7), S(  35,    0), S(  20,   11), S(   2,   32), S(  11,   31),
		S(  20,   15), S(  10,   10), S(  10,   -4), S(  17,  -13), S(   5,  -12), S(  -2,   -2), S(  -4,   10), S( -10,   21),
		S(   8,    3), S(   8,    8), S(   5,  -17), S(  12,   -9), S(   6,   -9), S(  -6,   -5), S( -12,    7), S( -16,    7),
		S(   0,    0), S(  11,   -4), S(   0,  -22), S(  -3,    4), S(  -9,    3), S( -17,   -5), S( -23,    2), S( -29,    5),
		S(  15,    3), S(  34,   -3), S(  14,   -7), S(   7,   14), S(  -7,    6), S(  -9,    0), S( -13,   10), S( -18,   12),
		S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
	},
	{
		S( -69,  -86), S( -81,  -18), S( -28,  -14), S(  18,  -14), S( -34,    7), S( -67,    8), S(-110,   15), S( -84,  -40),
		S(  -6,   -8), S(  22,    0), S(  35,   -5), S(  14,    4), S(  18,    5), S(   1,   15), S(  -4,   19), S( -11,   12),
		S(  19,   -8), S(  14,   -3), S(  59,  -18), S(  40,    1), S(  22,    9), S(  12,    6), S(   2,    6), S(  -8,    7),
		S(  37,    2), S(  36,    8), S(  49,    6), S(  37,   14), S(  33,   18), S(  30,    9), S(  19,    5), S(   7,   18),
		S(  10,   16), S(  21,   11), S(  28,    9), S(  21,   21), S(  25,   14), S(  20,   14), S(  21,    4), S(   1,   13),
		S(   2,    0), S(  17,   -3), S(   8,   -9), S(  16,    8), S(   7,    8), S(  -1,   -4), S(  -1,   -4), S( -15,    0),
		S(   2,    7), S(   5,   -5), S(   5,   -6), S(   4,   -2), S(   5,   -2), S(  -8,   -5), S( -13,   -2), S( -19,    0),
		S( -12,   -4), S( -12,    1), S(  -4,   -8), S(  -2,    4), S(  -9,    1), S( -23,   -5), S( -16,   -1), S( -49,   10),
	},
	{
		S( -39,   -3), S( -38,    8), S( -15,    1), S( -74,   13), S( -70,   18), S( -53,    4), S( -28,    9), S( -16,   16),
		S( -23,   -5), S( -36,   11), S(  -7,   -2), S(  -1,   -2), S( -21,    8), S(   1,   -2), S(  -2,    0), S(  -3,   -5),
		S(  19,   12), S(  14,   -2), S(  42,    5), S(  10,    4), S(  15,    0), S(   6,    4), S(   6,    5), S(   6,    4),
		S(  -3,    5), S(   8,    8), S(   8,   11), S(  19,   14), S(  17,   19), S(  12,    5), S(   4,    9), S(  -8,    8),
		S(  14,   -4), S(   2,    8), S(   5,    6), S(   8,   11), S(  16,    8), S(  -4,   12), S(  -2,    5), S(  -1,    3),
		S(  21,  -10), S(  22,  -10), S(  12,   -3), S(   3,    7), S(  -4,    2), S(   6,    3), S(  10,    2), S(   0,   -5),
		S(  23,  -19), S(  30,  -24), S(  20,  -15), S(   4,   -6), S(  -4,   -1), S(   8,  -19), S(   6,  -17), S(  14,   -7),
		S(  36,  -31), S(  19,  -20), S(  -4,    0), S(  14,   -3), S(   0,   -2), S(   2,    7), S(  12,   -2), S(  13,   -6),
	},
	{
		S(  11,    9), S( -25,   37), S(  -2,   23), S( -14,   17), S( -28,   25), S( -23,   29), S( -12,   22), S(  -6,   19),
		S(  24,    2), S(  32,    6), S(  23,    9), S(   4,   13), S(  15,   15), S(   0,   27), S(  -2,   22), S(   0,   15),
		S(   8,    4), S(  43,    2), S(  34,   -1), S(  26,    3), S(   3,   15), S(  -1,   24), S(  12,   19), S(  -9,   22),
		S(   3,   10), S(   5,   15), S(  17,    9), S(  11,    4), S(   1,   14), S(   5,   18), S(   5,   18), S( -10,   21),
		S(  -8,   -1), S(  12,    3), S(  -2,    6), S(   6,    2), S(  -6,    6), S(  -9,    8), S( -12,   10), S( -15,    9),
		S(   9,  -27), S(  19,  -27), S(   2,  -17), S(   1,  -17), S( -11,  -10), S( -16,  -10), S( -15,  -10), S( -20,   -8),
		S(  -6,  -30), S(  19,  -38), S(   5,  -26), S(   2,  -25), S(  -5,  -20), S(  -6,  -18), S( -16,  -14), S( -19,  -19),
		S(  -9,  -35), S(  -8,  -17), S(  -1,  -21), S(   5,  -28), S(  -2,  -24), S(  -9,  -17), S(  -9,  -21), S(  -9,  -17),
	},
	{
		S(   5,  -24), S(  37,  -40), S(   0,   11), S(   0,   -4), S(  15,  -21), S( -15,    0), S( -41,    0), S( -17,  -12),
		S(  36,    4), S(  -5,   13), S(   0,   20), S( -38,   54), S( -27,   35), S(  -8,    8), S(  -6,  -13), S(   7,  -14),
		S(  13,    6), S(  16,    8), S(   8,   16), S(  -3,   25), S(   4,   18), S(   8,   14), S(   7,   -5), S(  19,   -8),
		S(  11,   20), S(   9,   42), S(   9,   14), S( -11,   34), S(  -8,   32), S(   6,    6), S(   4,   16), S(   3,    9),
		S(  12,    9), S(  16,   18), S(   2,   27), S(   0,   29), S(  -6,   30), S(  -6,   23), S(   1,   19), S(  -1,    7),
		S(  14,  -22), S(  13,   -4), S(   4,    8), S(  -8,   23), S(  -7,   14), S(  -7,   17), S(   3,   -3), S(   3,  -12),
		S(  13,  -57), S(  18,  -68), S(   9,  -40), S(   4,   -5), S(   2,    1), S(   3,  -17), S(   2,  -20), S(  10,  -37),
		S(   4,  -48), S( -13,  -50), S( -18,  -23), S(  -8,  -17), S(  -7,  -11), S( -12,   -4), S( -15,  -13), S( -15,  -12),
	},
	{
		S(  -1,  -66), S(   1,    0), S( -30,   -7), S( -28,   -6), S(   8,   -5), S(   8,   -5), S(   8,   -5), S(   8,   -5),
		S( -54,   31), S(   2,   58), S(  -9,   46), S(  30,   19), S(   8,   -5), S(   8,   -5), S(   8,   -5), S(   8,   -5),
		S( -20,   23), S(  26,   52), S(  34,   41), S(  -1,   44), S(   8,   -5), S(   8,   -5), S(   8,   -5), S(   8,   -5),
		S( -61,   23), S( -22,   46), S( -19,   38), S( -45,   34), S(   8,   -5), S(   8,   -5), S(   8,   -5), S(   8,   -5),
		S( -80,   12), S( -35,   31), S( -23,   19), S( -47,   18), S(   8,   -5), S(   8,   -5), S(   8,   -5), S(   8,   -5),
		S( -38,   -4), S(   7,    9), S(  -9,   -1), S( -15,   -3), S(   8,   -5), S(   8,   -5), S(   8,   -5), S(   8,   -5),
		S(  24,  -27), S(  35,   -7), S(  13,  -15), S(  -3,  -18), S(   8,   -5), S(   8,   -5), S(   8,   -5), S(   8,   -5),
		S(  19,  -62), S(  24,  -27), S(   4,  -31), S(  14,  -51), S(   8,   -5), S(   8,   -5), S(   8,   -5), S(   8,   -5),
	},
};

constexpr PackedScore MOBILITY[4][28] = {
	{S( -12,  -20), S( -40,  -64), S( -15,  -32), S(  -6,   -6), S(   4,    7), S(   6,   18), S(  14,   25), S(  22,   32), S(  31,   33), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -21,  -31), S( -52,  -97), S( -30,  -38), S( -23,  -16), S( -11,   -3), S(  -4,    6), S(   1,   17), S(   6,   22), S(   8,   27), S(  13,   29), S(  15,   31), S(  28,   22), S(  30,   25), S(  49,    5), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -27,  -44), S(  13,  -71), S( -25,  -52), S( -13,  -32), S(  -7,  -24), S(  -3,   -6), S(   0,   -1), S(  -5,    9), S(  -1,   12), S(   2,   18), S(   6,   25), S(   7,   34), S(  10,   39), S(  16,   41), S(  23,   39), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -33,    6), S( -52,  -80), S( -95,  -81), S( -76, -254), S( -73,  -96), S( -28,  -39), S( -21,   -9), S( -14,   -4), S(  -6,   -2), S(  -5,   21), S(  -3,   28), S(   0,   37), S(   3,   42), S(   6,   44), S(   9,   46), S(  12,   48), S(  14,   50), S(  13,   55), S(  14,   56), S(  16,   55), S(  24,   47), S(  32,   30), S(  37,   26), S(  53,    6), S(  64,   -7), S(  68,  -14), S(  43,   -2), S(  15,  -22)}
};

constexpr PackedScore THREAT_BY_PAWN[6] = {S(   8,  -18), S(  64,   31), S(  63,   63), S(  80,   29), S(  76,   -9), S(   0,    0)};
constexpr PackedScore THREAT_BY_KNIGHT[2][6] = {
	{S(   8,   29), S(  26,   36), S(  38,   43), S(  74,   12), S(  47,  -22), S(   0,    0)},
	{S(  -4,   11), S(  13,   37), S(  30,   31), S(  64,   34), S(  57,    1), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_BISHOP[2][6] = {
	{S(   1,   38), S(  43,   36), S(  -7,   34), S(  70,   17), S(  68,   66), S(   0,    0)},
	{S(   0,    8), S(  22,   24), S( -21,  -18), S(  45,   46), S(  48,  124), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_ROOK[2][6] = {
	{S(   1,   43), S(  18,   65), S(  28,   58), S(  13,  -49), S(  75,   12), S(   0,    0)},
	{S(  -8,    7), S(   2,   16), S(  14,    3), S(  12,  -91), S(  65,   46), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_QUEEN[2][6] = {
	{S(   7,   10), S(  24,   22), S(   9,   51), S(  14,    8), S(  10,  -54), S(  98,   30)},
	{S(  -1,    9), S(   0,    7), S(  -7,   20), S(  -5,    3), S( -18,  -70), S( 111,   64)}
};
constexpr PackedScore THREAT_BY_KING[6] = {S( -33,   49), S(   0,   50), S(  21,   42), S(  84,   17), S(   0,    0), S(   0,    0)};
constexpr PackedScore PUSH_THREAT = S(  16,   21);

constexpr PackedScore ISOLATED_PAWN[8] = {S(  -4,   -5), S(  -5,  -12), S( -10,  -11), S( -11,  -14), S(  -9,  -13), S(  -7,   -7), S(  -1,  -12), S(  -4,   -4)};
constexpr PackedScore PAWN_PHALANX[8] = {S(   0,    0), S(   6,   -3), S(  12,    3), S(  20,   16), S(  47,   61), S( 112,  224), S( -33,  353), S(   0,    0)};
constexpr PackedScore DEFENDED_PAWN[8] = {S(   0,    0), S(   0,    0), S(  21,   10), S(  13,    9), S(  13,   18), S(  21,   58), S( 130,   80), S(   0,    0)};

constexpr PackedScore PASSED_PAWN[2][2][8] = {
	{
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -32,  -46), S( -16,   15), S( -21,  140), S(  27,  237), S(   0,    0)},
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -22,  -58), S(   8,  -32), S(  15,    4), S(  60,   32), S(   0,    0)}
	},
	{
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -29,  -66), S(  -3,  -35), S(  16,  -11), S(  68,   -8), S(   0,    0)},
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -32,  -69), S(  -3,  -43), S(  -7,  -31), S(  -4,  -22), S(   0,    0)}
	}
};
constexpr PackedScore PASSED_FILE[8] = {S(   4,   45), S(  17,   39), S(  17,   31), S(  14,   18), S(   7,   18), S(  15,   26), S(   4,   40), S( -12,   39)};
constexpr PackedScore OUR_PASSER_PROXIMITY[8] = {S(   0,    0), S(  43,   72), S(   0,   57), S(  -2,   32), S(  -2,   19), S(   4,    9), S(  17,    5), S(  11,    4)};
constexpr PackedScore THEIR_PASSER_PROXIMITY[8] = {S(   0,    0), S( -39,   -3), S(  21,  -11), S(  11,   17), S(  12,   36), S(   3,   67), S(  10,   64), S(  11,   54)};

constexpr PackedScore PAWN_STORM[2][4][8] = {
	{
		{S(  15,   13), S(-131,  -50), S(   0,   -9), S(   4,  -12), S(   0,    1), S(  -5,   10), S(  -3,    8), S(   0,    0)},
		{S(  11,    2), S(  -8, -104), S(  55,  -43), S(  10,  -10), S(   2,   -4), S( -11,    7), S(  -7,   11), S(   0,    0)},
		{S(  -3,    5), S(  57,  -99), S(  71,  -45), S(  18,  -17), S(   3,   -1), S(  -8,    8), S(  -9,   12), S(   0,    0)},
		{S(   8,   -7), S( 102,  -84), S(  39,  -21), S(  13,   -1), S(  -2,    4), S(  -9,    1), S(  -3,    1), S(   0,    0)}
	},
	{
		{S(   0,    0), S(  -3,  -27), S( -29,  117), S(  15,  -52), S(  -2,    8), S(  -1,    6), S(  -4,   10), S(   0,    0)},
		{S(   0,    0), S(  -5,  -85), S(   2,   65), S(  56,  -41), S(   3,    3), S(  -7,    6), S(  -8,   10), S(   0,    0)},
		{S(   0,    0), S(  -7,   14), S( -56, -111), S(  20,  -28), S(   2,    4), S(  -2,    7), S(  -9,   11), S(   0,    0)},
		{S(   0,    0), S( -13,  -56), S(  66,   -9), S(  22,   -2), S(   0,   10), S(   0,   -9), S(  -1,    7), S(   0,    0)}
	}
};
constexpr PackedScore PAWN_SHIELD[4][8] = {
	{S(  16,    3), S(  -7,   26), S( -15,   15), S(  -3,    8), S(   2,    0), S( -30,  -27), S( -77,  -37), S(   0,    0)},
	{S(  19,    1), S( -15,   11), S( -11,    2), S(  12,   -2), S(   9,   -8), S(  -4,  -14), S( -40,  -30), S(   0,    0)},
	{S(   8,   14), S( -15,    8), S(   6,  -10), S(   3,   -1), S(   2,    2), S(  10,  -13), S(  -5,  -39), S(   0,    0)},
	{S(  14,   -3), S(   5,   -2), S(  -4,    0), S(   0,   -6), S(   8,  -10), S(  30,  -20), S( -13,  -19), S(   0,    0)}
};
constexpr PackedScore SAFE_KNIGHT_CHECK = S(  82,   -2);
constexpr PackedScore SAFE_BISHOP_CHECK = S(  24,   11);
constexpr PackedScore SAFE_ROOK_CHECK = S(  60,    6);
constexpr PackedScore SAFE_QUEEN_CHECK = S(  24,   21);
constexpr PackedScore UNSAFE_KNIGHT_CHECK = S(   6,    1);
constexpr PackedScore UNSAFE_BISHOP_CHECK = S(  12,   12);
constexpr PackedScore UNSAFE_ROOK_CHECK = S(  21,    0);
constexpr PackedScore UNSAFE_QUEEN_CHECK = S(   6,   14);
constexpr PackedScore KING_ATTACKER_WEIGHT[4] = {S(  20,    2), S(  16,    3), S(  18,  -13), S(   5,    0)};
constexpr PackedScore KING_ATTACKS[14] = {S( -46,   28), S( -53,   22), S( -61,   16), S( -65,   19), S( -64,   15), S( -57,   11), S( -41,    5), S( -21,   -6), S(  17,  -22), S(  40,  -22), S(  71,  -34), S(  83,   -9), S( 118,  -93), S(  80,   60)};

constexpr PackedScore MINOR_BEHIND_PAWN = S(   8,   14);
constexpr PackedScore KNIGHT_OUTPOST = S(  27,   18);
constexpr PackedScore BISHOP_PAWNS[7] = {S(   5,   24), S(   7,   22), S(   5,   13), S(   1,    5), S(  -2,   -5), S(  -3,  -19), S(  -8,  -34)};
constexpr PackedScore BISHOP_PAIR = S(  20,   62);
constexpr PackedScore ROOK_OPEN[2] = {S(  26,    2), S(  15,    4)};

constexpr PackedScore TEMPO = S(  32,   35);

constexpr PackedScore COMPLEXITY_PAWNS = S(   0,    8);
constexpr PackedScore COMPLEXITY_PASSERS = S(   0,    1);
constexpr PackedScore COMPLEXITY_PAWNS_BOTH_SIDES = S(   0,   69);
constexpr PackedScore COMPLEXITY_PAWN_ENDGAME = S(   0,   63);
constexpr PackedScore COMPLEXITY_OFFSET = S(   0, -132);

#undef S


}