#pragma once

#include "../defs.h"

namespace eval
{

#define S(mg, eg) PackedScore(mg, eg)

constexpr PackedScore MATERIAL[6] = {S(  56,  104), S( 276,  445), S( 301,  453), S( 364,  812), S( 774, 1473), S(0, 0)};

constexpr PackedScore PSQT[6][64] = {
	{
		S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
		S(  35,   86), S(  46,   85), S(  84,   88), S(  83,   61), S(  92,   47), S(  57,   62), S(  37,   83), S(  18,   82),
		S(  44,   21), S(  59,   42), S(  75,    5), S(  47,  -11), S(  37,  -11), S(  32,   -3), S(   5,   36), S(   0,   23),
		S(  17,    2), S(  10,   22), S(  27,   -7), S(  16,  -10), S(   3,   -9), S(  -1,   -3), S(  -9,   22), S( -12,   13),
		S(   8,  -13), S(   2,   16), S(  13,  -10), S(   8,   -7), S(   1,   -7), S(  -5,   -7), S( -17,   18), S( -17,   -3),
		S(  13,  -21), S(  13,    5), S(  -3,   -1), S(  -4,    2), S( -12,    1), S( -17,   -7), S( -26,   10), S( -28,   -7),
		S(  27,  -25), S(  44,    3), S(  28,   -2), S(   2,   13), S( -14,    6), S( -11,    0), S( -18,   19), S( -20,    0),
		S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
	},
	{
		S( -60,  -82), S( -66,  -20), S( -11,  -21), S(  15,  -12), S( -26,    3), S( -63,   10), S(-109,   18), S( -81,  -41),
		S(   0,   -9), S(  27,   -5), S(  29,   -7), S(   9,    3), S(  12,    5), S(  -2,   10), S(  -7,   20), S( -13,   11),
		S(  22,   -8), S(  14,   -3), S(  57,  -18), S(  33,    1), S(  18,    4), S(  10,    3), S(   2,    6), S(  -6,    6),
		S(  35,    5), S(  35,   10), S(  44,    5), S(  34,   14), S(  30,   15), S(  27,    7), S(  16,    5), S(   7,   18),
		S(  10,   16), S(  20,   11), S(  26,    7), S(  21,   20), S(  23,   14), S(  17,   12), S(  19,    2), S(   1,   13),
		S(   0,    0), S(  14,   -6), S(   5,  -12), S(  15,    7), S(   4,    8), S(  -3,   -7), S(  -4,   -5), S( -14,    0),
		S(   4,   13), S(   6,    1), S(   4,   -8), S(   2,   -3), S(   2,   -4), S(  -9,   -6), S( -12,    1), S( -18,    4),
		S( -11,   -2), S( -12,    1), S(  -2,   -8), S(  -4,    2), S( -10,   -2), S( -21,   -9), S( -14,   -2), S( -49,   12),
	},
	{
		S( -34,  -11), S( -33,    3), S( -12,   -3), S( -75,   13), S( -67,   14), S( -54,    4), S( -31,    7), S( -15,   12),
		S( -28,   -5), S( -39,    9), S( -12,   -2), S(  -5,   -4), S( -24,    6), S(  -2,   -5), S(  -6,   -1), S( -10,   -3),
		S(  23,   11), S(  16,   -1), S(  44,    5), S(   9,    1), S(  14,   -4), S(   5,    4), S(   8,    4), S(   4,    6),
		S(  -2,    5), S(  11,    8), S(   9,   10), S(  19,   13), S(  17,   17), S(  11,    6), S(   3,   11), S(  -6,    5),
		S(  17,   -7), S(   4,    6), S(   9,    3), S(  10,   11), S(  16,   10), S(  -3,   13), S(  -1,    5), S(  -1,    3),
		S(  16,   -8), S(  19,   -9), S(  10,   -3), S(   4,    7), S(  -5,    5), S(   4,    4), S(   7,    3), S(  -1,   -5),
		S(  22,  -12), S(  28,  -17), S(  17,  -11), S(   2,   -3), S(  -5,   -1), S(   7,  -16), S(   5,  -15), S(  15,   -2),
		S(  32,  -28), S(  21,  -20), S(  -5,    4), S(  11,   -6), S(  -2,   -4), S(   2,    5), S(  12,   -2), S(  11,   -8),
	},
	{
		S(   4,   14), S( -19,   36), S(  -7,   29), S( -13,   18), S( -27,   26), S( -27,   32), S( -14,   25), S( -12,   23),
		S(  24,    4), S(  26,   12), S(  17,   16), S(   2,   16), S(  16,   15), S(  -3,   30), S(  -5,   26), S(  -4,   18),
		S(  13,    2), S(  37,    7), S(  26,    6), S(  20,    9), S(   1,   15), S(  -4,   27), S(  10,   20), S( -11,   24),
		S(   7,    9), S(   5,   18), S(  15,   13), S(  11,    6), S(   2,   15), S(   5,   19), S(   4,   20), S(  -8,   21),
		S(  -3,   -4), S(  15,    3), S(   0,    5), S(   8,    1), S(  -4,    5), S(  -7,    8), S( -10,   10), S( -12,    8),
		S(  10,  -30), S(  20,  -30), S(   5,  -21), S(   4,  -19), S(  -8,  -12), S( -13,  -13), S( -10,  -15), S( -15,  -14),
		S(  -6,  -37), S(  21,  -41), S(   9,  -31), S(   4,  -27), S(  -1,  -24), S(  -2,  -23), S( -11,  -19), S( -14,  -25),
		S( -13,  -34), S(  -7,  -21), S(   2,  -27), S(   7,  -32), S(   0,  -29), S(  -6,  -23), S(  -5,  -27), S(  -6,  -22),
	},
	{
		S(   5,  -22), S(  37,  -43), S(  -4,   14), S( -10,    8), S(  10,  -16), S(  -9,   -6), S( -42,    5), S( -23,   -2),
		S(  37,    3), S(  -3,   10), S(  -1,   21), S( -34,   49), S( -29,   38), S( -10,    9), S( -10,   -9), S(   0,   -6),
		S(  14,    3), S(  19,   -4), S(   7,   14), S(  -5,   24), S(   0,   19), S(   4,   15), S(   4,   -7), S(  13,   -4),
		S(  14,   16), S(  11,   38), S(   9,   14), S(  -8,   30), S(  -7,   31), S(   4,    8), S(   4,   15), S(   3,    8),
		S(  15,    9), S(  20,   14), S(   7,   23), S(   3,   27), S(  -4,   28), S(  -3,   21), S(   3,   18), S(   0,    9),
		S(  14,  -21), S(  14,   -6), S(   4,    8), S(  -6,   21), S(  -6,   14), S(  -7,   17), S(   2,   -1), S(   2,  -10),
		S(  15,  -57), S(  19,  -70), S(   9,  -40), S(   4,   -4), S(   1,    1), S(   3,  -16), S(   2,  -20), S(   9,  -36),
		S(   5,  -53), S( -13,  -46), S( -17,  -20), S(  -6,  -18), S(  -7,  -12), S( -10,   -6), S( -14,  -13), S( -13,  -12),
	},
	{
		S(   4,  -56), S(  -8,    7), S(   3,   -6), S(  24,   -9), S(   0,   -4), S(   0,   -4), S(   0,   -4), S(   0,   -4),
		S( -63,   42), S(  -1,   54), S(  21,   39), S(  81,    7), S(   0,   -4), S(   0,   -4), S(   0,   -4), S(   0,   -4),
		S( -43,   31), S(  42,   33), S(  64,   26), S(  67,   17), S(   0,   -4), S(   0,   -4), S(   0,   -4), S(   0,   -4),
		S( -57,   18), S(  -3,   23), S(  17,   21), S(  20,    6), S(   0,   -4), S(   0,   -4), S(   0,   -4), S(   0,   -4),
		S( -83,   13), S( -24,   15), S(  -1,   10), S(  -7,    5), S(   0,   -4), S(   0,   -4), S(   0,   -4), S(   0,   -4),
		S( -48,    3), S(   5,    0), S(  -6,    3), S(  -2,   -2), S(   0,   -4), S(   0,   -4), S(   0,   -4), S(   0,   -4),
		S(  11,  -16), S(  25,  -11), S(   6,   -5), S(  -7,  -10), S(   0,   -4), S(   0,   -4), S(   0,   -4), S(   0,   -4),
		S(   7,  -49), S(  10,  -24), S( -20,   -9), S( -15,  -27), S(   0,   -4), S(   0,   -4), S(   0,   -4), S(   0,   -4),
	},
};

constexpr PackedScore MOBILITY[4][28] = {
	{S( -11,  -15), S( -37,  -68), S( -15,  -33), S(  -7,   -7), S(   3,    7), S(   6,   20), S(  14,   28), S(  21,   35), S(  29,   36), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -19,  -29), S( -49,  -94), S( -28,  -39), S( -22,  -16), S( -11,   -4), S(  -4,    5), S(   0,   16), S(   5,   22), S(   7,   27), S(  12,   29), S(  13,   30), S(  25,   22), S(  29,   20), S(  47,    3), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -29,  -41), S(  13,  -77), S( -23,  -46), S( -14,  -29), S(  -8,  -23), S(  -3,   -8), S(   0,   -3), S(  -5,    8), S(   0,   12), S(   3,   18), S(   6,   24), S(   7,   33), S(  10,   39), S(  16,   41), S(  22,   39), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -35,   11), S( -50,  -79), S( -87,  -89), S( -67, -255), S( -69, -103), S( -29,  -36), S( -21,  -13), S( -15,   -7), S(  -7,   -6), S(  -6,   19), S(  -4,   27), S(  -2,   37), S(   1,   42), S(   4,   46), S(   6,   49), S(   9,   50), S(  11,   52), S(  10,   58), S(  11,   59), S(  12,   59), S(  19,   53), S(  28,   34), S(  34,   29), S(  50,    8), S(  54,    5), S(  51,    6), S(  47,   -9), S(  21,  -26)}
};

constexpr PackedScore THREAT_BY_PAWN[6] = {S(   7,  -13), S(  60,   36), S(  60,   67), S(  72,   35), S(  69,   -5), S(   0,    0)};
constexpr PackedScore THREAT_BY_KNIGHT[2][6] = {
	{S(   6,   31), S(  29,   37), S(  34,   45), S(  72,   10), S(  42,  -23), S(   0,    0)},
	{S(  -3,   11), S(  13,   52), S(  29,   34), S(  60,   34), S(  51,    1), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_BISHOP[2][6] = {
	{S(   4,   38), S(  46,   30), S(  -4,   30), S(  69,   15), S(  64,   60), S(   0,    0)},
	{S(   1,    9), S(  20,   26), S( -17,    0), S(  40,   48), S(  44,  137), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_ROOK[2][6] = {
	{S(  -1,   44), S(  26,   59), S(  27,   55), S(  17,  -54), S(  72,    5), S(   0,    0)},
	{S(  -5,    7), S(   6,   19), S(  17,    5), S(  14,  -91), S(  57,   55), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_QUEEN[2][6] = {
	{S(  10,    8), S(  32,   19), S(  15,   51), S(  18,    3), S(  11,  -64), S(  98,   14)},
	{S(  -1,   12), S(   2,    8), S(  -4,   22), S(  -5,    4), S( -18,  -68), S(  96,   74)}
};
constexpr PackedScore THREAT_BY_KING[6] = {S( -11,   47), S(  25,   49), S(  22,   49), S(  92,   15), S(   0,    0), S(   0,    0)};
constexpr PackedScore PUSH_THREAT = S(  17,   21);

constexpr PackedScore ISOLATED_PAWN[8] = {S(  -6,   10), S(  -1,  -15), S( -10,   -6), S(  -8,  -14), S( -10,  -11), S(  -6,   -4), S(   0,  -13), S( -10,   11)};
constexpr PackedScore PAWN_PHALANX[8] = {S(   0,    0), S(   4,   -4), S(  13,    4), S(  18,   16), S(  43,   62), S(  99,  225), S( -20,  368), S(   0,    0)};
constexpr PackedScore DEFENDED_PAWN[8] = {S(   0,    0), S(   0,    0), S(  19,   10), S(  12,    9), S(  13,   19), S(  19,   61), S( 149,   62), S(   0,    0)};

constexpr PackedScore PASSED_PAWN[2][2][8] = {
	{
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -19,  -49), S(  -3,   13), S( -11,  141), S(  76,  220), S(   0,    0)},
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -23,  -39), S(   7,  -13), S(   7,   29), S(  61,   50), S(   0,    0)}
	},
	{
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -24,  -61), S(   0,  -26), S(  16,    1), S( 112,  -37), S(   0,    0)},
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -34,  -50), S(  -6,  -25), S( -12,  -12), S( -12,  -31), S(   0,    0)}
	}
};
constexpr PackedScore OUR_PASSER_PROXIMITY[8] = {S(   0,    0), S(  36,   80), S(   1,   61), S(   4,   33), S(   6,   21), S(  10,   12), S(  18,   11), S(  12,   10)};
constexpr PackedScore THEIR_PASSER_PROXIMITY[8] = {S(   0,    0), S( -45,   12), S(  29,  -14), S(  11,   23), S(  15,   42), S(  11,   75), S(  17,   75), S(  20,   61)};
constexpr PackedScore SAFE_PROMO_PATH = S( -51,   51);

constexpr PackedScore PAWN_STORM[3][8] = {
	{S(  56,  -32), S(  30,  -18), S(  21,    0), S(  10,    2), S(   2,    5), S(  -4,    9), S(  -5,    8), S(   5,  -14)},
	{S(   0,    0), S(  14,  -20), S(  23,    7), S(   6,    3), S(  -4,    6), S(  -9,   12), S( -10,   12), S(   4,  -10)},
	{S(  18,    0), S(   5,    7), S(   9,   12), S(   6,   11), S(   5,    9), S(   3,   10), S(   2,    9), S(  -8,   -6)}
};
constexpr PackedScore PAWN_SHIELD[3][8] = {
	{S(  11,  -15), S(  -1,   -9), S(  -4,  -10), S(  -5,   -7), S(   6,   -8), S(  24,  -26), S(  38,  -17), S(  -7,    8)},
	{S(   0,    0), S(  -9,    0), S( -11,   -1), S(  -1,    1), S(  11,   -1), S(  33,  -25), S(  57,  -33), S(   7,    8)},
	{S(  -6,   -3), S(  -5,   -1), S(   0,   -2), S(   1,    2), S(   4,    4), S(   5,    0), S(  17,   -3), S(  -5,   12)}
};
constexpr PackedScore SAFE_KNIGHT_CHECK = S(  77,   -1);
constexpr PackedScore SAFE_BISHOP_CHECK = S(  22,   12);
constexpr PackedScore SAFE_ROOK_CHECK = S(  56,    6);
constexpr PackedScore SAFE_QUEEN_CHECK = S(  20,   23);
constexpr PackedScore UNSAFE_KNIGHT_CHECK = S(   5,    2);
constexpr PackedScore UNSAFE_BISHOP_CHECK = S(  11,   12);
constexpr PackedScore UNSAFE_ROOK_CHECK = S(  19,   -1);
constexpr PackedScore UNSAFE_QUEEN_CHECK = S(   4,   14);
constexpr PackedScore KING_ATTACKER_WEIGHT[4] = {S(  17,    2), S(  13,    4), S(  16,  -14), S(   4,    0)};
constexpr PackedScore KING_ATTACKS[14] = {S( -50,   30), S( -57,   22), S( -63,   17), S( -66,   19), S( -64,   15), S( -55,   11), S( -38,    4), S( -17,   -7), S(  21,  -24), S(  44,  -26), S(  72,  -34), S(  83,   -2), S( 114,  -76), S(  87,   43)};

constexpr PackedScore KNIGHT_OUTPOST = S(  25,   20);
constexpr PackedScore BISHOP_PAWNS[7] = {S(   5,   22), S(   7,   21), S(   4,   13), S(   0,    5), S(  -4,   -5), S(  -6,  -19), S( -11,  -35)};
constexpr PackedScore BISHOP_PAIR = S(  19,   63);
constexpr PackedScore ROOK_OPEN[2] = {S(  23,    4), S(  14,    8)};

constexpr PackedScore TEMPO = S(  29,   36);

constexpr PackedScore COMPLEXITY_PAWNS = S(   1,    8);
constexpr PackedScore COMPLEXITY_PASSERS = S(  -1,    1);
constexpr PackedScore COMPLEXITY_PAWNS_BOTH_SIDES = S(   1,   68);
constexpr PackedScore COMPLEXITY_PAWN_ENDGAME = S(   0,   64);
constexpr PackedScore COMPLEXITY_OFFSET = S(   1, -132);

#undef S


}