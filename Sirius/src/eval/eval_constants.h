#pragma once

#include "../defs.h"

namespace eval
{

// clang-format off
#define S(mg, eg) ScorePair(mg, eg)

constexpr ScorePair MATERIAL[6] = {S(  65,  133), S( 314,  451), S( 327,  470), S( 422,  805), S( 874, 1854), S(0, 0)};

constexpr ScorePair PSQT[6][64] = {
    {
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  70,   80), S(  13,   99), S(  31,   97), S(  39,   87), S(  63,   60), S(  45,   60), S(  37,   92), S(  82,   78),
        S(   6,   12), S(  -8,   24), S(   3,    1), S(   5,   -7), S(  -4,  -16), S(  -3,   -6), S( -15,   19), S(  -4,    9),
        S(   6,   10), S(   4,   19), S(  11,   -6), S(  11,  -17), S(   4,  -17), S(   1,   -9), S(  -2,   13), S(  -7,    9),
        S(  -5,   -4), S(  -7,   16), S(  17,  -25), S(  18,  -17), S(  13,  -17), S(   3,  -13), S( -13,   12), S( -14,   -4),
        S( -11,   -6), S(  11,    7), S(   3,    3), S(   7,   -1), S(  -3,    0), S(  -8,   -2), S( -17,   12), S( -23,   -6),
        S(  -4,   -7), S(  23,    8), S(  24,   57), S(   5,    8), S(  -2,    0), S(  -5,    0), S(  -9,   11), S( -18,   -3),
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
    },
    {
        S( -58, -119), S( -92,   17), S(-114,   47), S(  -3,   11), S( -22,   15), S( -62,    7), S(-102,    7), S( -89,  -67),
        S(   0,   -3), S( -11,   22), S(  22,   11), S(  35,   15), S(  26,   18), S(  23,   -5), S( -20,   16), S(  -8,  -10),
        S(  14,   -5), S(  10,   13), S(  36,   11), S(  27,   16), S(  20,   16), S(  24,    7), S(   9,    9), S(  12,  -12),
        S(  29,    6), S(  29,   12), S(  34,   16), S(  29,   25), S(  33,   22), S(  19,   16), S(  19,    5), S(  11,    6),
        S(  20,    7), S(  27,    7), S(  24,   16), S(  18,   30), S(  18,   22), S(  18,   16), S(  17,    3), S(   8,    3),
        S(   4,   -6), S(  18,   -1), S(  15,    0), S(  14,   15), S(  11,   10), S(  -1,   -1), S(   3,   -7), S(  -7,   -8),
        S(  10,  -11), S(   2,    0), S(   8,  -13), S(  11,   -1), S(   4,   -1), S(   2,  -12), S(  -5,   -6), S( -15,  -21),
        S( -27,  -23), S( -10,  -21), S(  -1,  -14), S(   4,   -9), S(  -1,   -4), S( -11,  -17), S( -16,  -22), S( -29,  -39),
    },
    {
        S( -28,  -35), S( -52,   19), S( -84,   22), S( -66,   21), S( -74,   25), S( -67,   19), S( -53,   20), S( -31,  -13),
        S( -13,   -5), S( -36,    3), S( -10,    9), S( -28,   13), S( -18,   16), S( -13,   11), S( -11,  -12), S(  -9,   -1),
        S(  22,   -9), S(  10,   10), S(  21,    6), S(  24,   12), S(  19,   13), S(  10,    0), S(  17,    3), S(   7,   -4),
        S(   8,   -4), S(  13,   15), S(  15,   18), S(  17,   28), S(  27,   25), S(  17,   14), S(  14,    9), S(   7,  -10),
        S(  19,  -10), S(   7,    6), S(  12,   17), S(  21,   16), S(  21,   18), S(  14,   10), S(   8,    6), S(  14,  -10),
        S(  20,  -10), S(  24,   -5), S(  13,   -7), S(  15,   11), S(  13,    5), S(   8,   -9), S(  28,   -6), S(  14,  -12),
        S(  23,  -18), S(  28,  -31), S(  26,  -14), S(  12,   -5), S(   3,   -6), S(  13,  -16), S(   9,  -28), S(  19,   -9),
        S(  10,  -41), S(  -7,   -2), S( -10,   -9), S(  11,  -16), S(   6,  -13), S(  -3,   -7), S(   6,  -11), S(   5,  -25),
    },
    {
        S(  19,   14), S(  32,   14), S(  27,   14), S(  12,   27), S(  21,   17), S(  15,   21), S(  19,   21), S(  23,   20),
        S(  22,   12), S(  12,   22), S(  19,   20), S(  15,   22), S(  20,   26), S(  11,   25), S(  11,   24), S(  19,   22),
        S( -18,   18), S(   8,   13), S(  15,   10), S(  15,    9), S(  12,   10), S(   7,   16), S(   6,   17), S(  -3,   22),
        S( -18,   12), S(  -7,   16), S(  -3,   12), S(  -8,   11), S(  -3,    9), S(   0,   11), S(  -3,   15), S(  -6,   12),
        S( -23,   -2), S( -10,    5), S( -13,   10), S( -10,    7), S( -12,    4), S( -16,   10), S( -15,   11), S( -13,    2),
        S( -17,  -24), S(   5,  -25), S(  -8,   -8), S(   0,  -17), S(  -1,  -18), S( -14,   -8), S(  -4,  -16), S( -18,  -13),
        S( -50,  -27), S(  -7,  -34), S(   3,  -24), S(   0,  -23), S(  -1,  -23), S(  -7,  -19), S( -12,  -25), S( -19,  -22),
        S( -15,  -35), S( -19,  -19), S(   6,  -23), S(  14,  -29), S(   7,  -28), S(  -1,  -21), S(   0,  -25), S(  -1,  -23),
    },
    {
        S(   9,   29), S(  40,    5), S(  26,   24), S(  14,   32), S(  18,   27), S(  29,   12), S(  16,    8), S( -18,   34),
        S(  36,   -9), S(  31,   -6), S(  11,   22), S( -14,   40), S(   8,   31), S(  15,    2), S(  18,   -9), S(  12,    1),
        S(   9,    9), S(  12,   10), S(  -3,   24), S( -19,   37), S(  -3,   35), S(  14,    2), S(  26,  -23), S(  20,  -12),
        S(  -3,   11), S( -12,   22), S( -11,   22), S( -24,   41), S( -19,   38), S(   6,    9), S(   0,   20), S(   4,   -1),
        S( -13,   24), S(  -8,   17), S( -13,   17), S( -17,   30), S( -20,   42), S(  -7,   23), S(   0,   10), S(  -4,    4),
        S(  -5,  -13), S(   0,  -17), S(  -7,    1), S( -17,   14), S( -10,   14), S(  -4,    6), S(   7,   -7), S(   2,   -7),
        S(  -2,  -58), S(   8,  -82), S(   2,  -49), S(  -3,  -22), S(  -6,  -14), S(   6,  -33), S(   1,  -29), S(   2,  -21),
        S( -15,  -37), S( -20,  -72), S( -14,  -53), S(  -6,  -47), S(  -2,  -36), S(  -9,  -34), S( -12,  -31), S( -19,   -9),
    },
    {
        S(  50, -151), S(  19,   69), S(  -4,   20), S( -25,    7), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  28,   12), S(  -1,  105), S( -41,   63), S( -61,   47), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  34,   50), S(  -2,  113), S( -55,   55), S(-132,   16), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S( -26,   49), S( -47,   98), S( -69,   38), S(-135,    6), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S( -63,   42), S( -57,   75), S( -85,   22), S(-111,  -12), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  -1,   18), S(  -7,   46), S( -39,   -1), S( -60,  -35), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  58,  -10), S(  44,   17), S(  16,  -35), S( -10,  -70), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  57,  -42), S(  57,   -7), S(  21,  -59), S(  17, -112), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
    },
};

constexpr ScorePair MOBILITY[4][28] = {
    {S(  -7,  -22), S( -36,  -54), S( -21,  -18), S( -10,   -1), S(   0,    8), S(   6,   18), S(  14,   22), S(  22,   26), S(  32,   17), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S( -11,  -30), S( -41,  -62), S( -21,  -31), S( -10,  -11), S(  -4,    0), S(   0,   10), S(   2,   16), S(   5,   19), S(   4,   22), S(   8,   22), S(   6,   23), S(  13,   15), S(  18,   14), S(  41,  -10), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S( -24,  -63), S( -49,  -62), S( -18,  -43), S( -10,  -26), S(  -2,  -16), S(   3,   -5), S(   2,    5), S(   4,   10), S(   5,   14), S(   7,   19), S(   9,   26), S(   9,   34), S(  10,   38), S(  13,   38), S(  39,   17), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S( -14,   44), S( -40,    8), S( -59,  -13), S( -42, -120), S( -25, -105), S( -12,  -68), S(  -4,  -50), S(   0,  -32), S(   0,  -14), S(   1,    0), S(   3,    7), S(   4,   17), S(   6,   22), S(   6,   31), S(   7,   35), S(   9,   36), S(   8,   41), S(   8,   40), S(  10,   40), S(  12,   35), S(  16,   32), S(  21,   18), S(  20,   18), S(  27,    6), S(  20,   12), S(  21,   -6), S(  27,  -42), S( -33,    7)}
};

constexpr ScorePair THREAT_BY_PAWN[6] = {S(  -6,  -21), S(  72,   41), S(  65,   70), S(  72,   48), S(  56,   24), S(   0,    0)};
constexpr ScorePair THREAT_BY_KNIGHT[2][6] = {
    {S(   6,   36), S(   6,   82), S(  50,   31), S(  84,   14), S(  42,    7), S(   0,    0)},
    {S(  -8,   10), S(   3,   76), S(  39,   28), S(  71,   44), S(  50,   47), S(   0,    0)}
};
constexpr ScorePair THREAT_BY_BISHOP[2][6] = {
    {S(   3,   33), S(  37,   44), S(   2,   32), S(  58,   36), S(  61,   48), S(   0,    0)},
    {S(  -5,    4), S(  20,   21), S(  -6,    2), S(  55,   75), S(  62,   75), S(   0,    0)}
};
constexpr ScorePair THREAT_BY_ROOK[2][6] = {
    {S(  -2,   49), S(  36,   49), S(  46,   47), S(   6,  -72), S(  69,  -18), S(   0,    0)},
    {S( -10,    9), S(   8,   14), S(  18,    4), S(  20, -102), S(  54,   89), S(   0,    0)}
};
constexpr ScorePair THREAT_BY_QUEEN[2][6] = {
    {S(   8,   22), S(  25,   28), S(  20,   56), S(  17,   10), S(   1,  -54), S( 149,   66)},
    {S(  -5,   17), S(   2,    5), S(  -9,   26), S(  -4,   -6), S( -16,  -44), S( 101,  207)}
};
constexpr ScorePair THREAT_BY_KING[6] = {S(  49,   13), S(  25,   41), S(  98,   31), S(  85,    6), S(   0,    0), S(   0,    0)};
constexpr ScorePair KNIGHT_HIT_QUEEN = S(   7,    0);
constexpr ScorePair BISHOP_HIT_QUEEN = S(  16,   14);
constexpr ScorePair ROOK_HIT_QUEEN = S(  19,   -3);
constexpr ScorePair PUSH_THREAT = S(  13,   18);
constexpr ScorePair RESTRICTED_SQUARES = S(   3,    2);

constexpr ScorePair ISOLATED_PAWN[8] = {S(  -4,    3), S(  -4,  -16), S( -10,  -11), S( -10,  -15), S( -14,  -14), S(  -9,   -8), S(  -6,  -12), S(  -8,    2)};
constexpr ScorePair DOUBLED_PAWN[8] = {S(   1,  -53), S(   5,  -41), S(  -2,  -26), S(  -5,  -15), S( -16,    2), S(  -7,  -18), S(   3,  -39), S(   7,  -45)};
constexpr ScorePair BACKWARDS_PAWN[8] = {S(   0,    0), S(  -8,  -13), S(   0,  -15), S(  -6,  -14), S(   7,  -21), S(  11,   21), S(   0,    0), S(   0,    0)};
constexpr ScorePair PAWN_PHALANX[8] = {S(   0,    0), S(   5,   -6), S(  12,   -2), S(  19,   10), S(  39,   36), S(  73,  138), S( 110,  194), S(   0,    0)};
constexpr ScorePair DEFENDED_PAWN[8] = {S(   0,    0), S(   0,    0), S(  17,    5), S(  11,    9), S(  18,   24), S(  41,   56), S(  72,  120), S(   0,    0)};
constexpr ScorePair CANDIDATE_PASSER[2][8] = {
    {S(   0,    0), S( -21,  -14), S(  -7,  -15), S(  -1,    2), S(  16,   24), S(  42,   82), S(   0,    0), S(   0,    0)},
    {S(   0,    0), S( -14,  -10), S(  -9,    9), S(  -4,   24), S(  10,   36), S(  46,   96), S(   0,    0), S(   0,    0)}
};

constexpr ScorePair PASSED_PAWN[2][2][8] = {
    {
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -33,  -27), S( -11,   26), S(  28,  131), S( 118,  199), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -24,  -39), S(  -2,  -11), S(  31,   56), S(  66,   71), S(   0,    0)}
    },
    {
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -26,  -41), S(  -6,   -9), S(  27,   55), S(  32,   43), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -28,  -50), S(  -4,  -26), S(  17,   31), S(   1,   12), S(   0,    0)}
    }
};
constexpr ScorePair OUR_PASSER_PROXIMITY[8] = {S(  74,  108), S( 110,   69), S(  44,   67), S(  -4,   58), S(  -1,   33), S(   2,   22), S(  15,   11), S(  -1,   21)};
constexpr ScorePair THEIR_PASSER_PROXIMITY[8] = {S( -52,    7), S(   4,   -3), S(  27,   -1), S(  22,   24), S(  12,   59), S(  15,   73), S(  20,   76), S(  20,   61)};
constexpr ScorePair PASSER_DEFENDED_PUSH[8] = {S(   0,    0), S(   0,    0), S(   0,    0), S(   8,    6), S(   9,   20), S(  36,   31), S(  58,  101), S(   0,    0)};

constexpr ScorePair PAWN_STORM[2][4][8] = {
    {
        {S(  29,   28), S( -85,  -72), S(   4,  -34), S(  43,   10), S(  19,   24), S(   3,   26), S(  -3,   29), S(   0,    0)},
        {S(  24,   19), S(  59, -101), S(  78,  -54), S(  35,    0), S(   9,   18), S( -24,   21), S(   2,   19), S(   0,    0)},
        {S(   8,   16), S(  51,  -75), S( 106,  -47), S(  67,   -5), S(   7,   17), S( -17,   20), S(  -5,   17), S(   0,    0)},
        {S(   8,   -1), S( 125,  -89), S( 114,  -51), S(  56,   -3), S(   5,    7), S( -26,    3), S( -26,    5), S(   0,    0)}
    },
    {
        {S(   0,    0), S(   0,    0), S(  74,   41), S(  -5,   28), S(  -3,   34), S(   9,   43), S(  33,   33), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S( 138,   33), S( -25,   28), S( -13,   33), S( -18,   46), S(   6,   30), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S( 128,   13), S(  12,   20), S(  -9,   32), S(  -3,   36), S(  49,   14), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S( 129,    2), S(  12,   16), S( -21,   16), S( -10,   14), S( -19,   -9), S(   0,    0)}
    }
};
constexpr ScorePair PAWN_SHIELD[4][8] = {
    {S(  56,   29), S(   1,   41), S( -13,   33), S(  31,   27), S(  38,   19), S(   3,   14), S( -23,   21), S(   0,    0)},
    {S(  41,   20), S( -30,   25), S(   5,   19), S(  39,   11), S(  38,    2), S(  -6,   -2), S( -40,  -21), S(   0,    0)},
    {S(  24,   16), S(   7,   55), S(   6,   11), S(  36,   -6), S(  33,   -7), S(   7,   -4), S( -59,    1), S(   0,    0)},
    {S(  13,    8), S( -25,   -2), S(   5,   -6), S(  28,  -11), S(  21,  -10), S(  26,   -2), S( -34,    3), S(   0,    0)}
};
constexpr ScorePair SAFE_KNIGHT_CHECK = S( 100,    1);
constexpr ScorePair SAFE_BISHOP_CHECK = S(  68,   17);
constexpr ScorePair SAFE_ROOK_CHECK = S( 106,   10);
constexpr ScorePair SAFE_QUEEN_CHECK = S(  63,   20);
constexpr ScorePair UNSAFE_KNIGHT_CHECK = S(  17,    0);
constexpr ScorePair UNSAFE_BISHOP_CHECK = S(  34,    7);
constexpr ScorePair UNSAFE_ROOK_CHECK = S(  40,    2);
constexpr ScorePair UNSAFE_QUEEN_CHECK = S(  20,    4);
constexpr ScorePair QUEENLESS_ATTACK = S(-111,  346);
constexpr ScorePair KING_ATTACKER_WEIGHT[4] = {S(  57,   -3), S(  24,   -1), S(  23,  -10), S(   6,  -16)};
constexpr ScorePair KING_ATTACKS = S(   7,    0);
constexpr ScorePair WEAK_KING_RING = S(   5,    0);
constexpr ScorePair KING_FLANK_ATTACKS[2] = {S(  14,   -4), S(   4,    0)};
constexpr ScorePair KING_FLANK_DEFENSES[2] = {S(  -8,    0), S(  -6,    3)};
constexpr ScorePair SAFETY_OFFSET = S(  78,  154);

constexpr ScorePair MINOR_BEHIND_PAWN = S(   2,   10);
constexpr ScorePair KNIGHT_OUTPOST = S(  18,   16);
constexpr ScorePair BISHOP_PAWNS[7] = {S(  11,    5), S(   5,   13), S(   3,    9), S(   1,    3), S(  -4,   -3), S(  -6,  -10), S( -10,  -19)};
constexpr ScorePair BISHOP_PAIR = S(  22,   65);
constexpr ScorePair LONG_DIAG_BISHOP = S(  13,   13);
constexpr ScorePair ROOK_OPEN[2] = {S(  31,    0), S(  19,    2)};

constexpr ScorePair TEMPO = S(  29,   20);

constexpr ScorePair COMPLEXITY_PAWNS = S(   0,   10);
constexpr ScorePair COMPLEXITY_PAWNS_BOTH_SIDES = S(   0,  125);
constexpr ScorePair COMPLEXITY_PAWN_ENDGAME = S(   0,  129);
constexpr ScorePair COMPLEXITY_OFFSET = S(   0, -206);

#undef S
// clang-format on

}
