#pragma once

#include "../defs.h"

namespace eval
{

// clang-format off
#define S(mg, eg) ScorePair(mg, eg)

constexpr ScorePair MATERIAL[6] = {S(  68,  133), S( 319,  451), S( 335,  468), S( 430,  801), S( 881, 1861), S(0, 0)};

constexpr ScorePair PSQT[6][64] = {
    {
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  72,   79), S(   8,  101), S(  22,  106), S(  42,   86), S(  63,   59), S(  47,   59), S(  34,   92), S(  79,   76),
        S(   8,    9), S( -10,   24), S(   1,    1), S(   5,  -12), S(  -3,  -21), S(  -3,   -9), S( -16,   17), S(  -4,    8),
        S(   7,    9), S(   4,   18), S(  11,   -7), S(  12,  -18), S(   4,  -18), S(   1,  -10), S(  -3,   12), S(  -8,    9),
        S(  -4,   -4), S(  -7,   15), S(  17,  -25), S(  18,  -18), S(  13,  -18), S(   3,  -14), S( -14,   11), S( -15,   -4),
        S(  -9,   -6), S(  12,    7), S(   2,    4), S(   6,   -1), S(  -4,    0), S(  -8,   -3), S( -17,   11), S( -23,   -6),
        S(   0,   -7), S(  25,    7), S(  25,   62), S(   4,    6), S(  -4,   -2), S(  -5,   -1), S(  -8,   11), S( -18,   -2),
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
    },
    {
        S( -58, -116), S( -78,   13), S(-113,   42), S(   4,    9), S( -17,   14), S( -59,    5), S( -96,    7), S( -93,  -64),
        S(   1,   -5), S(  -7,   19), S(  26,    8), S(  30,   15), S(  25,   18), S(  23,   -4), S( -17,   15), S(  -5,  -11),
        S(  18,   -6), S(   9,   12), S(  33,   10), S(  26,   17), S(  19,   17), S(  19,    8), S(   9,    8), S(   9,  -10),
        S(  31,    7), S(  27,   13), S(  32,   17), S(  27,   25), S(  30,   23), S(  17,   16), S(  19,    6), S(  15,    4),
        S(  20,    7), S(  24,    9), S(  23,   16), S(  15,   29), S(  16,   21), S(  17,   15), S(  18,    1), S(  10,    2),
        S(   5,   -6), S(  18,    0), S(  14,    0), S(  14,   14), S(  10,   10), S(  -2,   -2), S(   5,   -6), S(  -7,   -8),
        S(   8,   -9), S(   3,    2), S(   6,  -12), S(  10,   -2), S(   2,   -1), S(  -1,  -12), S(  -6,   -5), S( -14,  -24),
        S( -24,  -19), S( -11,  -22), S(   0,  -14), S(   4,   -8), S(  -1,   -7), S(  -3,  -21), S( -16,  -24), S( -23,  -35),
    },
    {
        S( -27,  -32), S( -51,   17), S( -91,   24), S( -73,   21), S( -77,   26), S( -68,   19), S( -52,   21), S( -30,  -10),
        S( -13,   -6), S( -36,    3), S( -12,   10), S( -25,   12), S( -18,   14), S( -10,    9), S( -12,  -10), S(  -9,   -1),
        S(  20,   -8), S(   6,   11), S(  19,    6), S(  22,   12), S(  19,   12), S(   9,    1), S(  15,    3), S(   4,   -3),
        S(   5,   -3), S(  12,   13), S(  13,   17), S(  18,   27), S(  27,   24), S(  18,   11), S(  11,   10), S(   7,   -9),
        S(  20,  -11), S(   5,    7), S(  12,   15), S(  21,   14), S(  22,   16), S(  13,   10), S(   9,    5), S(  13,   -8),
        S(  19,  -10), S(  24,   -5), S(  12,   -7), S(  14,   11), S(  10,    5), S(   8,   -9), S(  29,   -6), S(  14,  -13),
        S(  24,  -16), S(  28,  -29), S(  26,  -14), S(   9,   -4), S(   1,   -5), S(  10,  -15), S(  10,  -27), S(  21,  -11),
        S(  11,  -32), S(  19,  -14), S( -12,   -9), S(   8,  -13), S(   3,  -12), S(  -4,   -8), S(  14,  -16), S(   7,  -21),
    },
    {
        S(  21,   14), S(  32,   13), S(  23,   16), S(  11,   26), S(  22,   15), S(  15,   19), S(  21,   18), S(  23,   18),
        S(  24,   11), S(  11,   20), S(  18,   19), S(  12,   23), S(  22,   22), S(  12,   24), S(  10,   22), S(  16,   22),
        S( -15,   16), S(   9,   12), S(  13,    9), S(  13,    8), S(  10,    7), S(   6,   13), S(   7,   15), S(  -3,   20),
        S( -16,   11), S(  -7,   14), S(  -2,   12), S(  -9,   10), S(  -4,    8), S(  -1,   10), S(  -3,   13), S(  -7,   12),
        S( -23,    0), S( -10,    5), S( -15,   10), S( -11,    7), S( -13,    4), S( -15,    9), S( -15,    9), S( -13,    1),
        S( -13,  -25), S(   7,  -25), S(  -8,   -8), S(  -2,  -16), S(  -3,  -17), S( -14,   -9), S(  -5,  -17), S( -18,  -13),
        S( -42,  -31), S(  -1,  -37), S(   3,  -24), S(  -1,  -22), S(  -3,  -22), S(  -6,  -19), S( -12,  -24), S( -19,  -22),
        S( -15,  -36), S( -18,  -20), S(   5,  -23), S(  12,  -29), S(   5,  -27), S(  -2,  -21), S(   0,  -26), S(  -2,  -24),
    },
    {
        S(  14,   25), S(  45,    3), S(  22,   31), S(  16,   33), S(  21,   26), S(  27,   12), S(  18,    9), S( -14,   31),
        S(  34,   -4), S(  26,    5), S(   9,   25), S( -17,   45), S(   6,   34), S(  14,    8), S(  17,   -7), S(  11,    2),
        S(   6,   12), S(  11,   11), S(  -4,   26), S( -20,   40), S(  -1,   33), S(  11,   10), S(  24,  -18), S(  19,  -11),
        S(  -3,   13), S( -12,   23), S( -13,   23), S( -24,   40), S( -20,   39), S(   5,   10), S(  -1,   20), S(   4,   -1),
        S( -13,   22), S(  -9,   18), S( -15,   20), S( -18,   31), S( -20,   42), S(  -8,   23), S(  -1,   11), S(  -4,    4),
        S(  -4,  -16), S(   0,  -15), S(  -8,    2), S( -17,   12), S( -10,   13), S(  -5,    8), S(   7,   -8), S(   3,  -11),
        S(  -3,  -57), S(   8,  -79), S(   2,  -49), S(  -3,  -21), S(  -6,  -14), S(   5,  -32), S(   2,  -30), S(   0,  -20),
        S(  -2,  -55), S( -18,  -69), S( -16,  -52), S(  -9,  -44), S(  -4,  -36), S(  -9,  -35), S( -12,  -31), S( -12,  -20),
    },
    {
        S(  90, -144), S(  19,   64), S(  17,    4), S( -15,   -8), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  31,   20), S(   4,  103), S( -34,   56), S( -50,   29), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  32,   54), S(  -2,  113), S( -49,   53), S(-108,   15), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S( -36,   56), S( -47,   98), S( -69,   37), S(-125,    7), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S( -67,   45), S( -62,   78), S( -84,   19), S(-109,  -12), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  -5,   20), S(  -9,   47), S( -41,   -4), S( -60,  -36), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  55,   -9), S(  43,   17), S(  15,  -39), S( -10,  -71), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  55,  -40), S(  55,   -6), S(  19,  -62), S(  16, -113), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
    },
};

constexpr ScorePair MOBILITY[4][28] = {
    {S(  -5,  -21), S( -35,  -53), S( -21,  -17), S(  -9,   -1), S(   1,    8), S(   7,   17), S(  15,   21), S(  23,   24), S(  32,   18), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S(  -1,  -32), S( -36,  -57), S( -20,  -31), S( -10,  -11), S(  -4,   -1), S(   0,    9), S(   2,   15), S(   5,   18), S(   4,   20), S(   7,   21), S(   6,   21), S(  11,   15), S(  14,   15), S(  32,   -5), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S( -19,  -67), S( -49,  -64), S( -17,  -40), S(  -9,  -24), S(  -2,  -15), S(   3,   -3), S(   2,    6), S(   4,   11), S(   5,   14), S(   7,   20), S(   9,   26), S(   9,   33), S(  10,   37), S(  12,   39), S(  31,   24), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S( -15,   40), S( -30,   -1), S( -22,  -53), S( -39, -106), S( -16, -121), S( -13,  -64), S(  -6,  -46), S(  -1,  -31), S(  -1,  -13), S(  -1,   -1), S(   1,    7), S(   1,   17), S(   3,   23), S(   4,   31), S(   5,   34), S(   6,   36), S(   5,   40), S(   5,   40), S(   6,   42), S(   8,   36), S(  12,   32), S(  15,   21), S(  15,   22), S(  20,   11), S(  11,   19), S(  18,   -3), S(  26,  -32), S( -20,   -1)}
};

constexpr ScorePair THREAT_BY_PAWN[6] = {S(  -6,  -21), S(  74,   39), S(  67,   69), S(  75,   45), S(  58,   20), S(   0,    0)};
constexpr ScorePair THREAT_BY_KNIGHT[2][6] = {
    {S(   7,   35), S(   8,   75), S(  50,   31), S(  85,   13), S(  43,    7), S(   0,    0)},
    {S(  -8,   10), S(   4,   71), S(  39,   28), S(  71,   43), S(  51,   43), S(   0,    0)}
};
constexpr ScorePair THREAT_BY_BISHOP[2][6] = {
    {S(   3,   33), S(  37,   44), S(   6,   36), S(  59,   35), S(  64,   43), S(   0,    0)},
    {S(  -5,    4), S(  19,   21), S(  -1,    5), S(  56,   72), S(  65,   71), S(   0,    0)}
};
constexpr ScorePair THREAT_BY_ROOK[2][6] = {
    {S(  -1,   49), S(  36,   49), S(  45,   47), S(   4,  -72), S(  70,  -21), S(   0,    0)},
    {S(  -9,    9), S(   8,   13), S(  19,    4), S(  21, -102), S(  54,   88), S(   0,    0)}
};
constexpr ScorePair THREAT_BY_QUEEN[2][6] = {
    {S(   9,   21), S(  26,   24), S(  22,   51), S(  18,    9), S(   0,  -51), S( 146,   49)},
    {S(  -5,   16), S(   2,    5), S(  -6,   24), S(  -3,   -6), S( -14,  -46), S(  96,  186)}
};
constexpr ScorePair THREAT_BY_KING[6] = {S(  43,   15), S(  28,   40), S(  98,   32), S(  82,    7), S(   0,    0), S(   0,    0)};
constexpr ScorePair KNIGHT_HIT_QUEEN = S(   7,    0);
constexpr ScorePair BISHOP_HIT_QUEEN = S(  15,   13);
constexpr ScorePair ROOK_HIT_QUEEN = S(  19,   -3);
constexpr ScorePair PUSH_THREAT = S(  13,   16);
constexpr ScorePair RESTRICTED_SQUARES = S(   2,    2);

constexpr ScorePair ISOLATED_PAWN[8] = {S(  -5,    3), S(  -4,  -16), S( -11,  -11), S( -11,  -15), S( -15,  -14), S( -10,   -8), S(  -6,  -12), S( -10,    2)};
constexpr ScorePair DOUBLED_PAWN[8] = {S(  -1,  -51), S(   6,  -39), S(  -3,  -25), S(  -6,  -14), S( -15,    0), S(  -7,  -18), S(   3,  -37), S(   5,  -45)};
constexpr ScorePair BACKWARDS_PAWN[8] = {S(   0,    0), S(  -8,  -12), S(  -1,  -15), S(  -7,  -14), S(   7,  -20), S(  17,   20), S(   0,    0), S(   0,    0)};
constexpr ScorePair PAWN_PHALANX[8] = {S(   0,    0), S(   6,   -5), S(  12,   -2), S(  19,   11), S(  40,   36), S(  81,  136), S( 114,  203), S(   0,    0)};
constexpr ScorePair DEFENDED_PAWN[8] = {S(   0,    0), S(   0,    0), S(  18,    6), S(  11,   10), S(  19,   24), S(  42,   59), S(  90,  112), S(   0,    0)};
constexpr ScorePair CANDIDATE_PASSER[2][8] = {
    {S(   0,    0), S( -26,   -7), S(  -7,  -13), S(  -2,    3), S(  15,   26), S(  43,   81), S(   0,    0), S(   0,    0)},
    {S(   0,    0), S( -15,  -10), S(  -9,    9), S(  -4,   24), S(   9,   37), S(  45,   98), S(   0,    0), S(   0,    0)}
};

constexpr ScorePair PASSED_PAWN[2][2][8] = {
    {
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -33,  -29), S( -11,   25), S(  28,  129), S( 114,  194), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -25,  -41), S(  -2,  -12), S(  29,   58), S(  61,   61), S(   0,    0)}
    },
    {
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -26,  -43), S(  -8,   -9), S(  26,   56), S(  31,   41), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -29,  -51), S(  -4,  -26), S(  16,   33), S(  -1,   10), S(   0,    0)}
    }
};
constexpr ScorePair OUR_PASSER_PROXIMITY[8] = {S(  77,  105), S(  95,   76), S(  42,   69), S(  -4,   60), S(  -1,   35), S(   3,   22), S(  17,   11), S(   0,   20)};
constexpr ScorePair THEIR_PASSER_PROXIMITY[8] = {S( -49,    4), S(   4,   -3), S(  26,    0), S(  21,   26), S(  13,   60), S(  15,   75), S(  21,   78), S(  21,   64)};
constexpr ScorePair PASSER_DEFENDED_PUSH[8] = {S(   0,    0), S(   0,    0), S(   0,    0), S(   9,    6), S(  10,   19), S(  33,   32), S(  56,  108), S(   0,    0)};

constexpr ScorePair PAWN_STORM[2][4][8] = {
    {
        {S(  31,   31), S( -91,  -62), S(  -3,  -29), S(  49,   13), S(  22,   26), S(   3,   28), S(  -3,   30), S(   0,    0)},
        {S(  25,   21), S(  54,  -95), S(  73,  -50), S(  38,    1), S(  11,   18), S( -25,   22), S(   2,   20), S(   0,    0)},
        {S(   8,   19), S(  59,  -69), S( 108,  -44), S(  65,   -1), S(   8,   19), S( -18,   23), S(  -7,   21), S(   0,    0)},
        {S(  11,    2), S( 127,  -79), S( 114,  -44), S(  56,    0), S(   4,   10), S( -25,    6), S( -26,    8), S(   0,    0)}
    },
    {
        {S(   0,    0), S(   0,    0), S(  72,   45), S(  -7,   30), S(  -6,   35), S(   9,   46), S(  27,   37), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S( 133,   33), S( -22,   28), S( -13,   34), S( -19,   45), S(   3,   33), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S( 128,   15), S(  13,   22), S(  -9,   34), S(  -3,   39), S(  50,   19), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S( 125,    6), S(  11,   17), S( -22,   17), S( -12,   15), S( -21,   -2), S(   0,    0)}
    }
};
constexpr ScorePair PAWN_SHIELD[4][8] = {
    {S(  56,   33), S(  -4,   44), S( -13,   37), S(  33,   31), S(  40,   22), S(   4,   15), S( -31,   21), S(   0,    0)},
    {S(  42,   21), S( -34,   25), S(   4,   20), S(  40,   13), S(  39,    4), S(  -4,   -1), S( -38,  -19), S(   0,    0)},
    {S(  25,   17), S(   7,   60), S(   6,   13), S(  37,   -3), S(  31,   -4), S(   4,   -3), S( -66,    3), S(   0,    0)},
    {S(  13,   11), S( -24,    2), S(   2,   -1), S(  25,   -7), S(  22,   -5), S(  23,    2), S( -28,    4), S(   0,    0)}
};
constexpr ScorePair SAFE_KNIGHT_CHECK = S(  98,    1);
constexpr ScorePair SAFE_BISHOP_CHECK = S(  66,   16);
constexpr ScorePair SAFE_ROOK_CHECK = S( 103,   10);
constexpr ScorePair SAFE_QUEEN_CHECK = S(  61,   19);
constexpr ScorePair UNSAFE_KNIGHT_CHECK = S(  16,    0);
constexpr ScorePair UNSAFE_BISHOP_CHECK = S(  33,    6);
constexpr ScorePair UNSAFE_ROOK_CHECK = S(  39,    2);
constexpr ScorePair UNSAFE_QUEEN_CHECK = S(  19,    3);
constexpr ScorePair QUEENLESS_ATTACK = S(-116,  326);
constexpr ScorePair KING_ATTACKER_WEIGHT[4] = {S(  56,   -3), S(  23,   -1), S(  25,   -9), S(   5,  -13)};
constexpr ScorePair KING_ATTACKS = S(   6,    0);
constexpr ScorePair WEAK_KING_RING = S(   5,    0);
constexpr ScorePair KING_FLANK_ATTACKS[2] = {S(  13,   -4), S(   4,    0)};
constexpr ScorePair KING_FLANK_DEFENSES[2] = {S(  -8,    0), S(  -6,    3)};
constexpr ScorePair SAFETY_OFFSET = S(  78,  186);

constexpr ScorePair MINOR_BEHIND_PAWN = S(   3,    9);
constexpr ScorePair KNIGHT_OUTPOST = S(  19,   15);
constexpr ScorePair BISHOP_PAWNS[7] = {S(   9,    8), S(   5,   13), S(   3,    9), S(   0,    2), S(  -4,   -3), S(  -8,  -11), S( -11,  -21)};
constexpr ScorePair BISHOP_PAIR = S(  22,   64);
constexpr ScorePair LONG_DIAG_BISHOP = S(  12,   11);
constexpr ScorePair ROOK_OPEN[2] = {S(  31,    0), S(  18,    3)};

constexpr ScorePair TEMPO = S(  33,   21);

constexpr ScorePair COMPLEXITY_PAWNS = S(   0,   10);
constexpr ScorePair COMPLEXITY_PAWNS_BOTH_SIDES = S(   0,  104);
constexpr ScorePair COMPLEXITY_PAWN_ENDGAME = S(   0,  119);
constexpr ScorePair COMPLEXITY_OFFSET = S(   0, -189);

#undef S
// clang-format on

}
