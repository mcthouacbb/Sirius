#pragma once

#include "../defs.h"

namespace eval
{

#define S(mg, eg) PackedScore(mg, eg)

constexpr PackedScore MATERIAL[6] = {S(  61,  131), S( 277,  429), S( 306,  446), S( 386,  789), S( 745, 1621), S(0, 0)};

constexpr PackedScore PSQT[6][64] = {
    {
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  56,   78), S(  37,   90), S(  19,  102), S(  55,   76), S(  72,   61), S(  57,   76), S(  46,   95), S(  69,   76),
        S(   4,    0), S( -13,   30), S(   7,   -9), S(   7,  -39), S(   0,  -38), S(   1,  -23), S( -20,   14), S(  -6,    2),
        S(  13,    3), S(  -5,   15), S(  11,  -10), S(  10,  -23), S(  -2,  -24), S(  -1,  -16), S(  -8,    8), S(  -9,    5),
        S(   5,   -6), S(  -5,   14), S(  12,  -21), S(  16,  -17), S(   9,  -16), S(   0,  -16), S( -13,    8), S( -11,   -4),
        S(  -1,   -7), S(   8,    9), S(   3,    0), S(   1,   -2), S(  -8,   -2), S(  -8,   -9), S( -21,    8), S( -22,   -6),
        S(   9,   -8), S(  24,   10), S(  30,  122), S(   9,    0), S(  -2,  -11), S(  -5,   -8), S( -14,   12), S( -14,   -2),
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
    },
    {
        S( -67,  -91), S( -67,  -27), S( -28,  -15), S(  -1,   -8), S( -26,    1), S( -57,    5), S( -99,    6), S( -82,  -55),
        S( -16,  -10), S(  13,    3), S(  25,   -3), S(   0,    9), S(   4,   10), S(   6,   10), S(   1,   13), S(  -9,    1),
        S(   3,   -5), S( -11,    6), S(  30,   -5), S(  19,   15), S(   7,   22), S(  16,    9), S(   7,    1), S(  -3,   -1),
        S(  26,    6), S(  23,   17), S(  36,   17), S(  21,   25), S(  23,   26), S(  29,   12), S(  22,    2), S(  13,   10),
        S(  10,   20), S(  14,   16), S(  20,   18), S(  20,   28), S(  22,   21), S(  20,   15), S(  24,   -1), S(  11,    5),
        S(  15,    2), S(  17,    3), S(  18,    1), S(  16,   12), S(   7,   12), S(   5,   -4), S(   8,   -8), S(  -5,   -5),
        S(  10,    0), S(  12,   -5), S(  10,   -7), S(  14,   -2), S(   9,   -2), S(  -1,   -6), S(  -1,   -8), S( -13,   -7),
        S(  -3,  -14), S(  -4,  -10), S(   4,  -11), S(   8,    2), S(   1,   -2), S( -15,  -10), S(  -7,  -14), S( -41,   -4),
    },
    {
        S( -47,  -16), S( -28,    6), S( -11,   -2), S( -72,   10), S( -64,   15), S( -60,    6), S( -31,    6), S( -32,    3),
        S( -22,  -11), S( -44,    4), S( -13,    3), S(  -9,    2), S( -23,   11), S(   2,   -1), S( -13,   -7), S(  -3,   -9),
        S(   9,   11), S(  -2,    8), S(  21,    7), S(   4,   13), S(  17,    6), S(   2,    0), S(  11,    5), S(   6,    0),
        S( -11,    4), S(   2,   13), S(   2,   18), S(  18,   19), S(  23,   24), S(  20,    8), S(   6,   11), S(  -4,    0),
        S(  15,   -7), S(  -3,   13), S(   8,   12), S(  15,   15), S(  21,   12), S(   6,   13), S(   5,    5), S(   5,   -2),
        S(  20,   -9), S(  22,   -2), S(   4,   -2), S(  10,   12), S(   1,    8), S(   5,   -4), S(  19,    0), S(   6,  -10),
        S(  26,  -20), S(  24,  -25), S(  27,  -10), S(   7,   -3), S(  -1,    0), S(  12,  -16), S(   6,  -27), S(  16,  -13),
        S(  29,  -39), S(  21,  -18), S(  -5,   -3), S(  19,   -6), S(   1,   -3), S(   0,   -1), S(  11,   -4), S(   6,  -20),
    },
    {
        S(  18,    9), S( -15,   33), S( -13,   27), S( -20,   22), S( -12,   23), S( -14,   30), S(   8,   17), S(  10,   17),
        S(  26,    1), S(  31,    6), S(  11,   17), S(  -5,   20), S(  24,   13), S(  12,   23), S(   8,   19), S(  12,   11),
        S(  -6,    4), S(  22,    6), S(   4,    8), S(   7,    9), S(   6,    8), S(   2,   17), S(  17,   10), S(  -4,   13),
        S(  -9,   10), S( -15,   20), S(  -5,   16), S(  -7,   11), S(   0,    9), S(   6,   11), S(   7,    9), S(  -7,   13),
        S( -18,    4), S(   0,    8), S( -19,   15), S(  -7,    9), S(  -5,    3), S(  -9,    6), S(  -9,    5), S(  -8,    2),
        S(   4,  -20), S(  23,  -25), S(  -1,  -11), S(  -1,  -13), S(  -4,  -12), S(  -7,  -13), S(  -4,  -16), S( -11,  -12),
        S(  -6,  -28), S(  26,  -36), S(   6,  -22), S(   3,  -20), S(   5,  -22), S(   2,  -19), S(  -6,  -19), S( -11,  -23),
        S(  -5,  -40), S(  -2,  -19), S(   3,  -19), S(   9,  -25), S(   7,  -26), S(   0,  -20), S(   0,  -24), S(  -2,  -22),
    },
    {
        S(  11,   -7), S(  57,  -34), S( -13,   40), S( -13,   25), S(  16,    4), S( -11,   20), S( -23,    8), S( -16,   11),
        S(  36,    5), S(  10,   16), S(  -8,   28), S( -33,   55), S(  -5,   34), S(  15,    3), S(  25,  -20), S(  20,  -10),
        S(   4,   11), S(  -1,    0), S(  -8,   18), S( -15,   16), S(   8,   13), S(  22,    1), S(  20,  -16), S(  30,  -17),
        S(  -6,   16), S( -15,   32), S( -10,   17), S( -16,   27), S(  -3,   25), S(  13,    3), S(  10,    5), S(   7,   -2),
        S(  -5,   14), S(  -3,   13), S( -14,   21), S(  -8,   29), S( -11,   35), S(  -2,   18), S(   5,   13), S(   2,    3),
        S(   2,  -11), S(   5,   -6), S(  -7,    9), S( -13,   16), S(  -9,   14), S(  -4,   14), S(  12,  -11), S(  10,  -18),
        S(   2,  -45), S(  10,  -63), S(   1,  -30), S(   0,  -14), S(  -1,   -5), S(   2,  -17), S(   3,  -23), S(  10,  -39),
        S(   7,  -59), S( -18,  -43), S( -19,  -26), S( -10,  -21), S(  -8,  -21), S( -12,  -16), S( -14,  -20), S( -12,  -19),
    },
    {
        S(  50,  -75), S(  22,    0), S( -45,  -24), S( -69,   -1), S(  10,   -6), S(  10,   -6), S(  10,   -6), S(  10,   -6),
        S( -11,   19), S(  24,   56), S( -12,   28), S( -21,   32), S(  10,   -6), S(  10,   -6), S(  10,   -6), S(  10,   -6),
        S(  31,   15), S(  47,   52), S(  22,   30), S( -34,   52), S(  10,   -6), S(  10,   -6), S(  10,   -6), S(  10,   -6),
        S( -18,   19), S( -15,   54), S( -42,   31), S( -90,   47), S(  10,   -6), S(  10,   -6), S(  10,   -6), S(  10,   -6),
        S( -56,   14), S( -50,   44), S( -50,   11), S( -88,   29), S(  10,   -6), S(  10,   -6), S(  10,   -6), S(  10,   -6),
        S( -14,   -3), S(  -8,   21), S( -33,   -9), S( -53,    7), S(  10,   -6), S(  10,   -6), S(  10,   -6), S(  10,   -6),
        S(  40,  -24), S(  33,   -1), S(   7,  -32), S( -23,  -18), S(  10,   -6), S(  10,   -6), S(  10,   -6), S(  10,   -6),
        S(  39,  -56), S(  39,  -21), S(  14,  -53), S(   2,  -50), S(  10,   -6), S(  10,   -6), S(  10,   -6), S(  10,   -6),
    },
};

constexpr PackedScore MOBILITY[4][28] = {
    {S(  -3,  -28), S( -38,  -52), S( -17,  -21), S(  -9,   -3), S(   2,    7), S(   6,   18), S(  13,   24), S(  21,   29), S(  30,   24), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S( -10,  -45), S( -29,  -57), S( -17,  -29), S( -11,  -11), S(  -3,   -2), S(   2,    7), S(   3,   15), S(   6,   19), S(   6,   21), S(   8,   22), S(   9,   22), S(  13,   16), S(  11,   23), S(  17,    3), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S( -13,  -45), S( -30,  -70), S( -14,  -52), S(  -2,  -32), S(   0,  -17), S(  -1,   -6), S(  -1,    1), S(   2,    7), S(   3,   11), S(   6,   17), S(   4,   27), S(   4,   34), S(   6,   38), S(  10,   39), S(  16,   36), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S(  -2,    5), S( -34,  -73), S( -61, -115), S( -18, -202), S( -24,  -62), S( -15,  -11), S(  -6,  -24), S(  -3,   -4), S(  -3,   13), S(   0,   22), S(   3,   25), S(   6,   28), S(   7,   38), S(  10,   37), S(  10,   43), S(  12,   45), S(  13,   46), S(  15,   47), S(  15,   46), S(  21,   39), S(  26,   29), S(  33,   12), S(  30,   17), S(  36,   -6), S(  36,   -8), S(   6,   -2), S( -16,   -5), S(-120,   17)}
};

constexpr PackedScore THREAT_BY_PAWN[6] = {S(   4,  -19), S(  66,   30), S(  59,   60), S(  81,   23), S(  72,   -2), S(   0,    0)};
constexpr PackedScore THREAT_BY_KNIGHT[2][6] = {
    {S(   4,   27), S(  15,   37), S(  35,   44), S(  73,   14), S(  54,  -29), S(   0,    0)},
    {S(  -8,    8), S(   6,   38), S(  29,   30), S(  64,   34), S(  60,    0), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_BISHOP[2][6] = {
    {S(  -2,   34), S(  39,   31), S( -13,   36), S(  68,   14), S(  69,   44), S(   0,    0)},
    {S(  -4,    5), S(  17,   21), S( -25,  -11), S(  44,   44), S(  47,  109), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_ROOK[2][6] = {
    {S(  -1,   40), S(  16,   56), S(  25,   54), S( -12,  -27), S(  59,   15), S(   0,    0)},
    {S(  -7,    7), S(   2,   15), S(  13,    3), S( -12,  -65), S(  39,   65), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_QUEEN[2][6] = {
    {S(   7,    4), S(  24,   18), S(  10,   41), S(  15,    1), S(   9,  -55), S( 101,   52)},
    {S(  -3,   12), S(   1,    8), S(  -5,   14), S(  -4,    3), S( -16,  -75), S( 117,   53)}
};
constexpr PackedScore THREAT_BY_KING[6] = {S( -13,   43), S(   9,   48), S(  28,   41), S(  84,    8), S(   0,    0), S(   0,    0)};
constexpr PackedScore KNIGHT_HIT_QUEEN = S(  11,    3);
constexpr PackedScore BISHOP_HIT_QUEEN = S(  17,   11);
constexpr PackedScore ROOK_HIT_QUEEN = S(  20,   -2);
constexpr PackedScore PUSH_THREAT = S(  14,   17);

constexpr PackedScore ISOLATED_PAWN[8] = {S(  -8,    6), S(  -3,  -16), S( -13,   -8), S( -10,  -16), S( -12,  -14), S(  -9,   -7), S(  -3,  -14), S( -12,    7)};
constexpr PackedScore DOUBLED_PAWN[8] = {S(  -1,  -60), S(  13,  -37), S(   1,  -27), S(  -2,  -16), S(  -6,  -11), S(  -8,  -19), S(   5,  -37), S(   6,  -71)};
constexpr PackedScore BACKWARDS_PAWN[8] = {S(   0,    0), S(  -9,  -13), S(  -2,  -14), S(  -8,  -12), S(   1,  -19), S(  32,  -13), S(   0,    0), S(   0,    0)};
constexpr PackedScore PAWN_PHALANX[8] = {S(   0,    0), S(   5,   -4), S(  11,   -2), S(  20,    9), S(  38,   41), S( 118,  211), S(   8,  337), S(   0,    0)};
constexpr PackedScore DEFENDED_PAWN[8] = {S(   0,    0), S(   0,    0), S(  18,    6), S(  11,    8), S(  17,   21), S(  32,   64), S( 140,   76), S(   0,    0)};
constexpr PackedScore CANDIDATE_PASSER[2][8] = {
    {S(   0,    0), S( -31,  -17), S( -18,   -8), S(   0,   25), S(  25,   53), S(  66,  113), S(   0,    0), S(   0,    0)},
    {S(   0,    0), S( -17,  -10), S(  -8,   13), S(  -5,   28), S(  18,   40), S(  29,  177), S(   0,    0), S(   0,    0)}
};

constexpr PackedScore PASSED_PAWN[2][2][8] = {
    {
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -36,  -41), S( -16,   21), S(  11,  159), S(  68,  216), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -23,  -52), S(   3,  -19), S(  38,   41), S(  67,   26), S(   0,    0)}
    },
    {
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -29,  -55), S(  -5,  -18), S(  40,   34), S(  69,   -3), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -30,  -55), S(  -6,  -23), S(  17,   19), S( -10,  -12), S(   0,    0)}
    }
};
constexpr PackedScore OUR_PASSER_PROXIMITY[8] = {S(  77,   98), S(  72,  100), S(  46,   72), S(   7,   58), S(   5,   38), S(   7,   25), S(  12,   17), S(  -7,   24)};
constexpr PackedScore THEIR_PASSER_PROXIMITY[8] = {S( -45,   -9), S(  -3,    3), S(  25,    0), S(  20,   31), S(  15,   64), S(  19,   78), S(  25,   80), S(  30,   68)};

constexpr PackedScore PAWN_STORM[2][4][8] = {
    {
        {S(  41,   37), S(-109,  -47), S( -39,  -33), S(  60,    2), S(  27,   22), S(  -1,   31), S( -10,   31), S(   0,    0)},
        {S(  32,    7), S(  46, -123), S(  93,  -81), S(  59,  -19), S(  17,   -2), S( -22,    8), S(   4,    7), S(   0,    0)},
        {S(   7,   21), S( 102,  -99), S( 105,  -51), S(  62,   -1), S(  14,   17), S( -13,   23), S( -15,   27), S(   0,    0)},
        {S(  16,    6), S( 149,  -77), S( 120,  -22), S(  70,    5), S(   9,   16), S( -15,   10), S( -21,   20), S(   0,    0)}
    },
    {
        {S(   0,    0), S(   0,    0), S(  62,   62), S( -21,   33), S( -26,   41), S( -17,   57), S(  -4,   45), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(  99,   19), S(  -4,   18), S( -17,   28), S( -30,   41), S( -40,   33), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S( 110,   16), S(  11,   24), S( -15,   40), S(  15,   44), S(  50,   29), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(  90,   18), S(  17,   25), S( -25,   25), S( -24,   23), S(   0,   19), S(   0,    0)}
    }
};
constexpr PackedScore PAWN_SHIELD[4][8] = {
    {S(  47,   36), S( -19,   51), S( -12,   42), S(  41,   31), S(  44,   17), S( -25,   -1), S( -67,  -16), S(   0,    0)},
    {S(  49,    9), S( -25,   20), S(   8,    7), S(  53,   -1), S(  44,  -15), S(  15,  -20), S( -40,  -32), S(   0,    0)},
    {S(  22,   -2), S(  16,  119), S(  12,   -2), S(  35,  -20), S(  24,  -19), S(  -5,  -24), S( -62,  -38), S(   0,    0)},
    {S(  15,   17), S(   3,   12), S(   2,   11), S(  28,    5), S(  34,    1), S(   8,    5), S( -84,    8), S(   0,    0)}
};
constexpr PackedScore SAFE_KNIGHT_CHECK = S( 109,    6);
constexpr PackedScore SAFE_BISHOP_CHECK = S(  72,   18);
constexpr PackedScore SAFE_ROOK_CHECK = S( 115,   15);
constexpr PackedScore SAFE_QUEEN_CHECK = S(  55,   26);
constexpr PackedScore UNSAFE_KNIGHT_CHECK = S(  16,    2);
constexpr PackedScore UNSAFE_BISHOP_CHECK = S(  38,   10);
constexpr PackedScore UNSAFE_ROOK_CHECK = S(  39,    2);
constexpr PackedScore UNSAFE_QUEEN_CHECK = S(  16,    3);
constexpr PackedScore QUEENLESS_ATTACK = S(-141,  144);
constexpr PackedScore KING_ATTACKER_WEIGHT[4] = {S(  56,   -5), S(  22,    0), S(  29,  -13), S(   4,  -10)};
constexpr PackedScore KING_ATTACKS = S(   7,   -1);
constexpr PackedScore WEAK_KING_RING = S(   7,   -1);
constexpr PackedScore KING_FLANK_ATTACKS[2] = {S(  11,   -4), S(   7,    1)};
constexpr PackedScore KING_FLANK_DEFENSES[2] = {S(  -6,    0), S( -10,    2)};
constexpr PackedScore SAFETY_OFFSET = S(  79,  213);

constexpr PackedScore MINOR_BEHIND_PAWN = S(   6,   12);
constexpr PackedScore KNIGHT_OUTPOST = S(  22,   13);
constexpr PackedScore BISHOP_PAWNS[7] = {S(   3,   20), S(   5,   18), S(   3,   11), S(   1,    4), S(  -2,   -5), S(  -2,  -16), S(  -6,  -27)};
constexpr PackedScore BISHOP_PAIR = S(  19,   59);
constexpr PackedScore LONG_DIAG_BISHOP = S(  15,    8);
constexpr PackedScore ROOK_OPEN[2] = {S(  23,    4), S(  12,    5)};

constexpr PackedScore KNIGHT_CLOSEDNESS[5] = {S(   5,   -5), S(  10,   11), S(  12,   20), S(  12,   32), S(  20,   37)};

constexpr PackedScore TEMPO = S(  32,   34);

constexpr PackedScore COMPLEXITY_PAWNS = S(   0,   10);
constexpr PackedScore COMPLEXITY_PAWNS_BOTH_SIDES = S(   0,   63);
constexpr PackedScore COMPLEXITY_PAWN_ENDGAME = S(   0,   80);
constexpr PackedScore COMPLEXITY_OFFSET = S(   0, -133);

#undef S


}