#pragma once

#include "../defs.h"

namespace eval
{

#define S(mg, eg) PackedScore(mg, eg)

constexpr PackedScore MATERIAL[6] = {S(  67,   98), S( 311,  409), S( 330,  419), S( 426,  746), S( 860, 1403), S(0, 0)};

constexpr PackedScore PSQT[6][64] = {
	{
		S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
		S(  13,  100), S(  28,   97), S(  72,  100), S(  73,   72), S(  80,   59), S(  45,   72), S(  21,   94), S(  14,   86),
		S(  50,   25), S(  63,   44), S(  85,    5), S(  51,   -6), S(  42,   -5), S(  37,    0), S(  10,   37), S(   7,   25),
		S(  21,    4), S(  13,   21), S(  30,   -6), S(  19,   -9), S(   3,   -7), S(   1,   -3), S(  -7,   22), S(  -9,   15),
		S(   7,   -9), S(   2,   17), S(  15,  -10), S(   7,   -6), S(   1,   -6), S(  -6,   -5), S( -18,   17), S( -19,   -1),
		S(  11,  -18), S(  15,    3), S(  -3,   -2), S(  -4,    1), S( -14,    2), S( -19,   -8), S( -29,    8), S( -33,   -6),
		S(  25,  -23), S(  47,   -1), S(  34,   -6), S(  -1,   13), S( -16,    5), S( -16,    0), S( -24,   16), S( -27,    0),
		S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
	},
	{
		S( -75,  -63), S( -63,  -20), S( -11,  -18), S(  18,  -12), S( -30,    5), S( -69,   12), S(-112,   17), S( -91,  -32),
		S(   0,   -7), S(  28,   -3), S(  27,  -10), S(   9,    0), S(  10,    5), S(  -2,    6), S(  -7,   20), S( -14,   12),
		S(  26,   -6), S(  12,   -4), S(  58,  -18), S(  30,   -1), S(  17,    4), S(  13,    3), S(   2,    4), S(  -5,    5),
		S(  39,    3), S(  34,    7), S(  49,    3), S(  34,   12), S(  36,   12), S(  29,    5), S(  17,    3), S(   7,   18),
		S(  10,   16), S(  26,    6), S(  28,    6), S(  24,   19), S(  28,   12), S(  19,   11), S(  22,    0), S(   0,   13),
		S(   0,    0), S(  16,   -6), S(   4,  -12), S(  18,    7), S(   4,    8), S(  -5,   -7), S(  -5,   -6), S( -17,    0),
		S(   3,   11), S(   7,   -1), S(   9,   -9), S(   2,   -4), S(   2,   -6), S( -11,   -6), S( -14,   -1), S( -20,    2),
		S( -15,    6), S( -13,    3), S(  -1,   -7), S(  -5,    2), S( -12,   -3), S( -23,   -9), S( -15,   -2), S( -54,   14),
	},
	{
		S( -41,   -6), S( -37,    5), S( -18,   -1), S( -75,   12), S( -78,   16), S( -62,    6), S( -36,    8), S( -13,   10),
		S( -38,    0), S( -58,   15), S( -17,    1), S( -12,   -2), S( -27,    7), S(  -4,   -2), S(  -8,    0), S( -12,   -2),
		S(  18,   13), S(  22,    2), S(  33,    8), S(   8,    6), S(  15,   -5), S(   4,    5), S(  10,    3), S(   5,    6),
		S(   3,    6), S(   9,    8), S(  14,   11), S(  16,   14), S(  25,   17), S(  13,    6), S(   5,   10), S(  -7,    8),
		S(  21,  -11), S(   7,    6), S(  11,    4), S(  18,   10), S(  17,    9), S(   3,   12), S(  -1,    6), S(   2,    3),
		S(  21,   -9), S(  24,  -12), S(  12,   -4), S(   8,    6), S(   0,    5), S(   5,    2), S(  14,    1), S(   0,   -5),
		S(  27,  -14), S(  33,  -19), S(  27,  -15), S(   5,   -5), S(  -3,   -2), S(  13,  -20), S(   7,  -17), S(  23,   -6),
		S(  37,  -29), S(  24,  -13), S(  -1,    5), S(  16,   -8), S(   1,   -6), S(   5,    4), S(  17,    1), S(  12,   -7),
	},
	{
		S(  18,    7), S( -21,   29), S(  -1,   23), S( -15,   17), S( -36,   31), S( -30,   31), S( -16,   24), S( -17,   24),
		S(  42,   -5), S(  42,    4), S(  27,    8), S(   8,   12), S(  20,   13), S(   1,   24), S(  -3,   21), S(  -8,   18),
		S(  22,   -5), S(  57,   -6), S(  41,   -6), S(  21,    5), S(   4,   10), S(  -1,   19), S(  12,   13), S( -14,   20),
		S(  11,    1), S(  15,    6), S(  21,    1), S(  14,    2), S(   3,   10), S(   6,   13), S(   5,   13), S( -13,   19),
		S(  -6,   -2), S(  20,    0), S(   0,    4), S(   7,    2), S(  -5,    5), S( -10,    8), S( -13,    8), S( -19,    9),
		S(   6,  -24), S(  22,  -26), S(   0,  -15), S(   1,  -15), S( -14,   -6), S( -18,  -10), S( -17,  -10), S( -24,   -7),
		S( -12,  -28), S(  20,  -34), S(   7,  -24), S(  -1,  -22), S(  -8,  -18), S( -10,  -16), S( -20,  -13), S( -25,  -16),
		S( -21,  -22), S( -13,  -11), S(  -5,  -17), S(   1,  -24), S(  -7,  -22), S( -15,  -15), S( -14,  -19), S( -16,  -13),
	},
	{
		S(   5,  -12), S(  56,  -43), S(  -2,   23), S( -12,   26), S(   1,   10), S( -32,   30), S( -52,   24), S( -29,   12),
		S(  48,   -3), S(   0,   12), S(   7,   32), S( -33,   67), S( -23,   47), S(  -9,   18), S( -12,   -4), S(   1,   -4),
		S(  19,   10), S(  27,    2), S(   2,   26), S(  -9,   40), S(  -3,   30), S(   1,   16), S(   3,   -3), S(  15,   -8),
		S(  18,   19), S(   6,   42), S(  11,   24), S( -14,   34), S(  -7,   28), S(   8,    5), S(   5,   12), S(   4,    5),
		S(  15,   11), S(  19,   10), S(   5,   23), S(   7,   22), S(  -5,   17), S(   0,   12), S(   4,   10), S(   0,    7),
		S(  16,  -25), S(  14,  -13), S(   4,    0), S(  -6,   16), S(  -5,    8), S(  -7,    1), S(   3,  -10), S(   2,  -15),
		S(  14,  -60), S(  18,  -74), S(  12,  -47), S(   4,  -14), S(   2,  -13), S(   3,  -26), S(   0,  -36), S(  10,  -45),
		S(   4,  -57), S( -15,  -57), S( -20,  -24), S(  -9,  -22), S(  -9,  -23), S( -13,  -20), S( -15,  -26), S( -16,  -30),
	},
	{
		S(  79,  -64), S(  58,  -12), S(  27,   -6), S(  25,  -12), S(   8,   -3), S(   8,   -3), S(   8,   -3), S(   8,   -3),
		S( -77,   38), S(  24,   36), S(  17,   31), S(  94,   -3), S(   8,   -3), S(   8,   -3), S(   8,   -3), S(   8,   -3),
		S( -73,   29), S(  34,   26), S(  52,   17), S(  34,   13), S(   8,   -3), S(   8,   -3), S(   8,   -3), S(   8,   -3),
		S(-115,   22), S( -47,   21), S( -41,   20), S( -44,    9), S(   8,   -3), S(   8,   -3), S(   8,   -3), S(   8,   -3),
		S(-141,   18), S( -66,   16), S( -45,   11), S( -52,    7), S(   8,   -3), S(   8,   -3), S(   8,   -3), S(   8,   -3),
		S( -76,   10), S( -12,    3), S( -26,    6), S( -14,    0), S(   8,   -3), S(   8,   -3), S(   8,   -3), S(   8,   -3),
		S(   9,   -8), S(  28,   -4), S(  12,    0), S(   6,   -5), S(   8,   -3), S(   8,   -3), S(   8,   -3), S(   8,   -3),
		S(  18,  -37), S(  25,  -13), S(  -3,   -1), S(   5,  -18), S(   8,   -3), S(   8,   -3), S(   8,   -3), S(   8,   -3),
	},
};

constexpr PackedScore MOBILITY[4][28] = {
	{S( -14,  -14), S( -41,  -67), S( -17,  -33), S(  -7,   -6), S(   4,    7), S(   7,   20), S(  16,   27), S(  26,   34), S(  34,   33), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -17,  -29), S( -53,  -96), S( -29,  -41), S( -22,  -18), S(  -9,   -5), S(  -2,    5), S(   3,   16), S(   9,   22), S(  12,   27), S(  16,   29), S(  16,   32), S(  27,   24), S(  20,   30), S(  37,   16), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -38,  -32), S(  13,  -72), S( -27,  -45), S( -16,  -29), S( -10,  -23), S(  -4,   -7), S(   0,   -1), S(  -6,    9), S(  -1,   13), S(   3,   19), S(   7,   24), S(   9,   32), S(  13,   38), S(  20,   40), S(  28,   34), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -44,    3), S( -63,  -75), S(-116,  -57), S(-103, -214), S( -82, -108), S( -35,  -52), S( -25,  -29), S( -17,  -26), S(  -9,  -20), S(  -8,    7), S(  -5,   16), S(  -2,   27), S(   2,   34), S(   5,   37), S(   9,   41), S(  12,   45), S(  14,   48), S(  13,   55), S(  14,   59), S(  15,   63), S(  23,   57), S(  29,   45), S(  33,   47), S(  58,   20), S(  65,   21), S( 108,  -16), S(  88,   -4), S(  43,  -13)}
};

constexpr PackedScore THREAT_BY_PAWN[6] = {S(   8,  -17), S(  67,   33), S(  68,   63), S(  84,   28), S(  77,  -13), S(   0,    0)};
constexpr PackedScore THREAT_BY_KNIGHT[2][6] = {
	{S(   8,   30), S(  32,   29), S(  38,   43), S(  80,    7), S(  46,  -23), S(   0,    0)},
	{S(  -4,   12), S(  14,   46), S(  32,   34), S(  65,   32), S(  56,   -2), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_BISHOP[2][6] = {
	{S(   5,   37), S(  52,   27), S(  -1,   37), S(  75,   10), S(  74,   44), S(   0,    0)},
	{S(   1,   10), S(  24,   25), S( -14,    8), S(  48,   43), S(  53,  131), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_ROOK[2][6] = {
	{S(  -1,   46), S(  30,   56), S(  28,   55), S(  17,  -42), S(  77,    1), S(   0,    0)},
	{S(  -7,   12), S(   6,   20), S(  17,    7), S(  12,  -71), S(  61,   58), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_QUEEN[2][6] = {
	{S(  13,    6), S(  38,    9), S(  19,   46), S(  26,   -8), S(  12,  -69), S( 130,  -18)},
	{S(   0,   15), S(   2,    8), S(  -4,   23), S(  -4,    4), S( -20,  -60), S( 120,   43)}
};
constexpr PackedScore THREAT_BY_KING[6] = {S( -15,   43), S(  34,   44), S(  33,   51), S( 108,    8), S(   0,    0), S(   0,    0)};
constexpr PackedScore PUSH_THREAT = S(  20,   18);

constexpr PackedScore ISOLATED_PAWN[8] = {S(  -6,    7), S(  -2,  -14), S( -11,   -5), S(  -8,  -14), S( -10,  -12), S(  -6,   -4), S(  -2,  -11), S( -11,    9)};
constexpr PackedScore PAWN_PHALANX[8] = {S(   0,    0), S(   3,   -2), S(  14,    5), S(  20,   15), S(  48,   59), S( 122,  193), S(  17,  342), S(   0,    0)};
constexpr PackedScore DEFENDED_PAWN[8] = {S(   0,    0), S(   0,    0), S(  19,   10), S(  14,    8), S(  14,   17), S(  26,   54), S( 158,   50), S(   0,    0)};

constexpr PackedScore PASSED_PAWN[2][2][8] = {
	{
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -27,  -44), S( -14,   19), S( -35,  145), S(   1,  226), S(   0,    0)},
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -15,  -56), S(  17,  -30), S(  20,    8), S(  97,   18), S(   0,    0)}
	},
	{
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -24,  -61), S(   1,  -28), S(  19,   -3), S(  94,  -17), S(   0,    0)},
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -26,  -65), S(   2,  -39), S(  -2,  -28), S(  22,  -55), S(   0,    0)}
	}
};
constexpr PackedScore OUR_PASSER_PROXIMITY[8] = {S(   0,    0), S(  17,   86), S(  -9,   64), S(   0,   37), S(   3,   25), S(   8,   18), S(  19,   19), S(  13,   17)};
constexpr PackedScore THEIR_PASSER_PROXIMITY[8] = {S(   0,    0), S( -74,   23), S(  18,    2), S(   7,   31), S(  12,   51), S(   6,   82), S(  10,   82), S(   8,   72)};

constexpr PackedScore PAWN_STORM[3][8] = {
	{S(  48,  -33), S(  22,  -20), S(  17,   -4), S(   9,   -1), S(   3,    3), S(  -1,    7), S(   0,    9), S(  10,  -13)},
	{S(   0,    0), S(  20,  -26), S(  22,    2), S(   4,    1), S(  -4,    7), S(  -7,   14), S(  -6,   15), S(   9,   -6)},
	{S(   1,   -2), S(  -8,    4), S(   2,    8), S(   2,    8), S(   3,    8), S(   3,   11), S(   4,   10), S(  -7,   -5)}
};
constexpr PackedScore PAWN_SHIELD[3][8] = {
	{S(  17,  -17), S(   1,  -10), S(  -3,  -11), S(  -5,   -9), S(   7,  -10), S(  22,  -23), S(  36,  -18), S(  -5,    4)},
	{S(   0,    0), S(  -6,   -1), S( -11,   -3), S(   2,   -2), S(  15,   -8), S(  37,  -23), S(  56,  -28), S(   9,    5)},
	{S(  -7,   -6), S(  -6,   -3), S(  -1,   -4), S(   2,   -1), S(   4,    1), S(   4,   -3), S(  15,   -6), S(  -6,    8)}
};
constexpr PackedScore SAFE_KNIGHT_CHECK = S(  83,   -3);
constexpr PackedScore SAFE_BISHOP_CHECK = S(  16,   -7);
constexpr PackedScore SAFE_ROOK_CHECK = S(  56,    0);
constexpr PackedScore SAFE_QUEEN_CHECK = S(  31,   15);
constexpr PackedScore KING_ATTACKER_WEIGHT[4] = {S(  16,   -4), S(   9,    0), S(  11,  -19), S(   1,    8)};
constexpr PackedScore KING_ATTACKS[14] = {S( -91,   29), S( -94,   27), S( -96,   24), S( -95,   28), S( -86,   24), S( -71,   21), S( -47,   13), S( -17,    1), S(  30,  -21), S(  62,  -27), S( 101,  -44), S( 130,  -33), S( 158, -107), S( 118,   54)};

constexpr PackedScore KNIGHT_OUTPOST = S(  26,   18);
constexpr PackedScore BISHOP_PAWNS[7] = {S(   7,   25), S(   9,   20), S(   6,   12), S(   1,    4), S(  -4,   -5), S(  -6,  -19), S( -12,  -32)};
constexpr PackedScore BISHOP_PAIR = S(  22,   64);
constexpr PackedScore ROOK_OPEN[2] = {S(  25,    5), S(  16,    4)};

constexpr PackedScore TEMPO = S(  31,   34);

#undef S


}
