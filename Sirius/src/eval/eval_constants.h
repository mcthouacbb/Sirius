#pragma once

#include "../defs.h"

namespace eval
{

// clang-format off
#define S(mg, eg) ScorePair(mg, eg)

constexpr ScorePair MATERIAL[6] = {S(  71,  138), S( 347,  465), S( 367,  486), S( 476,  839), S( 968, 1735), S(0, 0)};

constexpr ScorePair PSQT[6][64] = {
    {
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  78,   81), S(  33,   83), S(  44,  100), S(  73,   78), S(  62,   59), S(  30,   66), S(  25,   99), S(  83,   76),
        S(  13,    5), S(  -4,   18), S(   9,  -13), S(   1,  -11), S(  -3,  -18), S(   3,  -13), S( -18,   18), S(  -3,    7),
        S(  11,    1), S(   2,   26), S(  15,   -6), S(  13,  -17), S(   6,  -19), S(  -2,  -10), S(  -1,   15), S(  -3,    5),
        S(  -2,   -8), S(  -4,   18), S(  13,  -16), S(  16,  -18), S(  11,  -16), S(   4,  -15), S( -14,   16), S( -16,   -5),
        S( -11,   -9), S(  10,   12), S(   0,    6), S(   4,   -2), S(  -6,   -2), S(  -9,   -3), S( -18,   15), S( -23,   -8),
        S(  -1,  -12), S(  22,   11), S(  24,   37), S(   4,    9), S(  -4,    0), S(  -5,    1), S(  -9,   15), S( -19,   -3),
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
    },
    {
        S( -60, -144), S( -89,   31), S( -44,   10), S(  21,    2), S( -54,   38), S( -66,   10), S(-111,   38), S(-120,  -93),
        S(   7,   -7), S(  17,   -8), S(  20,   16), S(  16,   24), S(  36,   14), S(  25,    7), S(  -2,    5), S(  -7,   -1),
        S(  15,    0), S(  17,    9), S(  42,    8), S(  44,   10), S(  18,   23), S(  31,   10), S(   7,    4), S(  14,  -13),
        S(  31,    5), S(  32,   15), S(  37,   21), S(  32,   33), S(  30,   32), S(  27,   14), S(  21,    6), S(  19,    4),
        S(  14,    9), S(  24,    9), S(  25,   19), S(  23,   28), S(  23,   24), S(  21,   17), S(  22,    8), S(   6,   -2),
        S(   4,   -9), S(  16,    1), S(  19,    1), S(  13,   17), S(  11,   14), S(  -1,   -2), S(   7,  -10), S( -12,  -12),
        S(   5,   -7), S(   6,   -6), S(   8,  -10), S(  10,    1), S(   2,    0), S(  -3,  -13), S(  -8,   -5), S( -28,  -15),
        S( -40,  -23), S( -12,  -24), S(  -6,  -15), S(   7,   -4), S(  -4,   -8), S( -14,  -20), S( -22,  -22), S( -65,  -29),
    },
    {
        S( -29,  -16), S( -53,   14), S(-106,   28), S( -87,   22), S( -89,   32), S( -63,   16), S( -49,   34), S( -31,   -5),
        S( -17,   11), S( -44,    9), S( -15,   20), S( -12,   22), S( -15,   15), S(  -3,   -1), S( -14,  -18), S(  -5,   -6),
        S(  20,   -3), S(  14,    7), S(  22,    6), S(  25,   15), S(  11,   23), S(  11,   -2), S(  11,   10), S(  18,   -5),
        S(  17,   -6), S(  10,   14), S(  18,   18), S(  22,   26), S(  29,   30), S(  14,   15), S(  13,   12), S(  -5,   -6),
        S(  17,   -9), S(  17,    2), S(  13,   14), S(  18,   18), S(  23,   16), S(  19,    7), S(   8,   -1), S(   8,  -10),
        S(  22,  -14), S(  22,   -3), S(  14,  -10), S(  11,    9), S(  11,    4), S(   4,  -10), S(  25,   -1), S(  13,  -14),
        S(  24,  -24), S(  26,  -30), S(  23,  -14), S(  12,   -9), S(  -3,   -3), S(  20,  -24), S(   6,  -28), S(  23,  -19),
        S(  13,  -47), S(   9,  -18), S( -12,   -8), S(   7,  -14), S(   5,  -11), S(  -8,   -5), S(   5,  -21), S(   6,  -23),
    },
    {
        S(  22,   13), S(  19,   11), S(   8,   23), S(   6,   33), S(  26,   11), S(  25,   12), S(  32,   11), S(  14,   18),
        S(  12,   20), S(  18,   16), S(  30,   18), S(  16,   28), S(  28,   24), S(  16,   27), S(   5,   26), S(  16,   21),
        S(  -9,   16), S(   5,   22), S(   3,   23), S(   5,   18), S(  20,    7), S(  20,    9), S(  14,   11), S(  12,   17),
        S( -16,   17), S( -16,   28), S(  10,   14), S(  -1,   13), S(   2,   12), S(   3,    9), S(   1,   14), S(  -8,   15),
        S( -18,   -4), S( -17,   15), S( -17,   19), S( -10,    7), S(  -4,   -5), S(  -7,    8), S( -17,    8), S( -15,    1),
        S( -27,  -16), S(   2,  -23), S(  -6,   -9), S(  -9,  -10), S(  -7,  -13), S( -11,  -10), S(  -9,  -17), S( -18,  -17),
        S( -64,  -23), S( -10,  -33), S(   3,  -25), S(   1,  -26), S(   3,  -29), S(  -1,  -23), S( -15,  -29), S( -22,  -25),
        S( -20,  -37), S( -29,  -17), S(   6,  -25), S(  12,  -31), S(   5,  -30), S(  -4,  -24), S(  -3,  -28), S(  -2,  -27),
    },
    {
        S(   5,   17), S(  47,   11), S(   3,   36), S(  16,   23), S(  20,   32), S(  45,  -13), S(  33,   -3), S( -23,   44),
        S(  35,    9), S(  25,   -8), S(  19,   16), S( -19,   39), S(   0,   30), S(  12,   18), S(  20,  -22), S(  16,   -6),
        S(   4,   16), S(  27,    4), S(   1,   26), S( -15,   31), S(   2,   22), S(  16,   10), S(  20,  -13), S(  21,  -16),
        S(   6,    6), S( -11,   38), S( -11,   25), S( -13,   19), S( -22,   43), S(   7,   -2), S(   3,    6), S(  11,   -8),
        S( -18,   33), S(  -3,    7), S( -11,   25), S( -14,   25), S( -18,   40), S(  -8,   22), S(  -1,    8), S(   0,    2),
        S( -13,   13), S(   4,  -16), S(  -3,   -1), S( -13,    3), S(  -9,   13), S( -11,   19), S(   6,    3), S(   3,  -21),
        S(  -1,  -47), S(  -1,  -63), S(  -4,  -53), S(  -5,  -22), S( -10,   -7), S(   3,  -27), S( -11,   -3), S( -10,    2),
        S(  -8,  -28), S( -29,  -93), S( -26,  -47), S( -24,  -34), S(  -9,  -31), S( -17,  -30), S( -10,  -38), S( -13,  -23),
    },
    {
        S( -25,  -98), S( -14,  109), S( -18,   36), S( -25,   66), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  37,    9), S(  17,  111), S( -20,   67), S( -32,   70), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  12,   48), S(  41,  100), S( -14,   33), S( -85,   17), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S( -25,   43), S( -29,   90), S( -45,   21), S(-115,   -3), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S( -64,   43), S( -61,   76), S( -72,    9), S( -90,  -16), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  -3,   13), S(  -1,   44), S( -46,  -11), S( -60,  -28), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  58,  -18), S(  47,   11), S(  13,  -42), S( -15,  -63), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  53,  -50), S(  54,  -10), S(  14,  -68), S(   7, -102), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
    },
};

constexpr ScorePair MOBILITY[4][28] = {
    {S(  -6,  -28), S( -38,  -61), S( -24,  -17), S( -10,    3), S(   1,   12), S(   8,   23), S(  17,   26), S(  24,   29), S(  35,   19), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S(  -5,  -38), S( -47,  -60), S( -30,  -29), S( -15,  -11), S(  -8,    3), S(  -1,   12), S(   2,   20), S(   4,   24), S(   5,   28), S(   9,   28), S(   7,   30), S(  24,    9), S(  19,   18), S(  47,  -31), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S( -27,  -72), S( -63,  -69), S( -21,  -47), S( -12,  -27), S(  -2,  -16), S(   3,   -4), S(   2,    7), S(   5,   14), S(   7,   18), S(  13,   24), S(  10,   34), S(  13,   41), S(  16,   45), S(  15,   48), S(  55,   13), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S(   6,   13), S(  12,  -60), S( -86,   19), S(   0, -241), S( -45,  -80), S( -13,  -73), S( -11,  -45), S(  -4,  -26), S(  -1,  -10), S(  -2,    6), S(  -1,   21), S(   3,   24), S(   3,   36), S(   7,   37), S(   8,   40), S(   9,   45), S(  11,   47), S(  10,   47), S(  14,   49), S(  17,   40), S(  16,   41), S(  26,   25), S(  22,   29), S(  31,   13), S(  23,   12), S(  -5,   19), S( -13,   -2), S( -21,   -4)}
};

constexpr ScorePair THREAT_BY_PAWN[6] = {S(  -4,  -34), S(  80,   46), S(  67,   81), S(  81,   57), S(  76,    2), S(   0,    0)};
constexpr ScorePair THREAT_BY_KNIGHT[2][6] = {
    {S(   4,   38), S(   3,   62), S(  43,   41), S(  76,   18), S(  53,    4), S(   0,    0)},
    {S(  -8,   12), S(  12,   41), S(  42,   30), S(  75,   45), S(  57,   25), S(   0,    0)}
};
constexpr ScorePair THREAT_BY_BISHOP[2][6] = {
    {S(   1,   34), S(  53,   27), S( -10,   36), S(  56,   41), S(  70,   52), S(   0,    0)},
    {S(  -4,    3), S(  23,   21), S( -15,    4), S(  61,   69), S(  64,   92), S(   0,    0)}
};
constexpr ScorePair THREAT_BY_ROOK[2][6] = {
    {S(  -2,   50), S(  35,   55), S(  51,   47), S(   3,  -62), S(  70,    3), S(   0,    0)},
    {S( -11,   11), S(   7,   20), S(  22,    5), S(  11, -101), S(  56,   93), S(   0,    0)}
};
constexpr ScorePair THREAT_BY_QUEEN[2][6] = {
    {S(   6,   28), S(  21,   39), S(  22,   56), S(  13,   16), S(   6,  -57), S( 152,   64)},
    {S(  -5,   20), S(   0,   16), S(  -8,   30), S(  -3,   -5), S( -12,  -59), S( 148,   94)}
};
constexpr ScorePair THREAT_BY_KING[6] = {S(  57,   11), S(  28,   43), S( 122,   25), S(  83,    7), S(   0,    0), S(   0,    0)};
constexpr ScorePair KNIGHT_HIT_QUEEN = S(   7,    1);
constexpr ScorePair BISHOP_HIT_QUEEN = S(  17,   10);
constexpr ScorePair ROOK_HIT_QUEEN = S(  20,   -6);
constexpr ScorePair PUSH_THREAT = S(  15,   19);
constexpr ScorePair RESTRICTED_SQUARES = S(   3,    2);

constexpr ScorePair ISOLATED_PAWN[8] = {S(  -4,    5), S(  -6,  -15), S(  -9,   -9), S( -10,  -15), S( -13,  -13), S(  -7,   -6), S(  -4,  -13), S( -11,    6)};
constexpr ScorePair DOUBLED_PAWN[8] = {S(  -5,  -55), S(   9,  -53), S(  -5,  -28), S(  -7,  -13), S(  -9,   -9), S(  -6,  -25), S(   3,  -43), S(   5,  -52)};
constexpr ScorePair BACKWARDS_PAWN[8] = {S(   0,    0), S(  -8,  -14), S(   2,  -16), S(  -4,  -16), S(   5,   -5), S(  35,   11), S(   0,    0), S(   0,    0)};
constexpr ScorePair PAWN_PHALANX[8] = {S(   0,    0), S(   6,   -3), S(  14,   -2), S(  19,   14), S(  37,   45), S(  33,  145), S( 104,  178), S(   0,    0)};
constexpr ScorePair DEFENDED_PAWN[8] = {S(   0,    0), S(   0,    0), S(  19,    6), S(  11,   10), S(  17,   26), S(  38,   63), S( 113,  126), S(   0,    0)};
constexpr ScorePair CANDIDATE_PASSER[2][8] = {
    {S(   0,    0), S( -42,    4), S( -19,   -2), S( -11,    8), S(  11,   28), S(  49,   97), S(   0,    0), S(   0,    0)},
    {S(   0,    0), S(  -5,  -18), S(  -3,    1), S(  -3,   26), S(  13,   43), S(  34,  121), S(   0,    0), S(   0,    0)}
};

constexpr ScorePair PASSED_PAWN[2][2][8] = {
    {
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -37,  -32), S( -20,   24), S(  33,  139), S( 137,  201), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -29,  -45), S(  -7,  -16), S(  36,   58), S( 100,   74), S(   0,    0)}
    },
    {
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -27,  -51), S( -14,  -10), S(  42,   51), S(  48,   48), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -29,  -63), S(  -7,  -30), S(  23,   33), S(   8,   29), S(   0,    0)}
    }
};
constexpr ScorePair OUR_PASSER_PROXIMITY[8] = {S( 107,   88), S( 106,   63), S(  52,   69), S(   1,   60), S(  -1,   37), S(   4,   22), S(  18,   14), S(   3,   24)};
constexpr ScorePair THEIR_PASSER_PROXIMITY[8] = {S( -57,   13), S(   4,    3), S(  24,    7), S(  25,   24), S(  18,   57), S(  17,   75), S(  34,   70), S(  30,   60)};
constexpr ScorePair PASSER_DEFENDED_PUSH[8] = {S(   0,    0), S(   0,    0), S(   0,    0), S(   5,    9), S(  17,   17), S(  38,   36), S(  41,  110), S(   0,    0)};

constexpr ScorePair PAWN_STORM[2][4][8] = {
    {
        {S(  30,   37), S(-117, -180), S( -29,  -69), S(  38,    7), S(  19,   30), S(   2,   36), S(  -5,   40), S(   0,    0)},
        {S(  14,   10), S(  17, -230), S(  58, -102), S(  36,  -18), S(   4,    4), S( -29,   13), S(   5,   12), S(   0,    0)},
        {S(   0,   12), S(  17, -156), S( 115,  -97), S(  64,   -9), S(  10,   15), S( -20,   19), S(  -1,   16), S(   0,    0)},
        {S(   8,  -10), S(  83, -174), S( 122, -105), S(  66,  -14), S(  14,   -1), S( -24,    0), S( -26,    0), S(   0,    0)}
    },
    {
        {S(   0,    0), S(   0,    0), S(  91,   58), S(   4,   38), S(  -5,   50), S(  21,   59), S(   7,   48), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S( 145,   43), S( -19,   21), S( -15,   35), S( -11,   44), S(  38,   20), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S( 161,   -1), S(  -1,   33), S( -22,   47), S(  -3,   47), S(  41,   -2), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S( 130,   -4), S(  12,   22), S( -21,   24), S(  -8,   21), S( -45,  -54), S(   0,    0)}
    }
};
constexpr ScorePair PAWN_SHIELD[4][8] = {
    {S(  56,   37), S(  -3,   53), S( -24,   43), S(  21,   33), S(  38,   14), S(  19,   18), S(  -8,   38), S(   0,    0)},
    {S(  37,   14), S( -32,   17), S(   4,   15), S(  43,   -3), S(  34,   -8), S(  -7,  -24), S( -42,  -56), S(   0,    0)},
    {S(  23,   14), S(  -5,   46), S(   6,    5), S(  34,   -6), S(  38,   -8), S(  31,  -23), S( -33,   13), S(   0,    0)},
    {S(  13,    3), S( -24,   -8), S(   0,  -22), S(  30,  -32), S(  17,  -26), S(  22,   -8), S(  28,    9), S(   0,    0)}
};
constexpr ScorePair SAFE_KNIGHT_CHECK = S(  96,    2);
constexpr ScorePair SAFE_BISHOP_CHECK = S(  67,   28);
constexpr ScorePair SAFE_ROOK_CHECK = S( 111,   14);
constexpr ScorePair SAFE_QUEEN_CHECK = S(  64,   23);
constexpr ScorePair UNSAFE_KNIGHT_CHECK = S(  16,    1);
constexpr ScorePair UNSAFE_BISHOP_CHECK = S(  40,   11);
constexpr ScorePair UNSAFE_ROOK_CHECK = S(  47,    2);
constexpr ScorePair UNSAFE_QUEEN_CHECK = S(  18,    8);
constexpr ScorePair QUEENLESS_ATTACK = S(-155,  227);
constexpr ScorePair KING_ATTACKER_WEIGHT[4] = {S(  67,   -2), S(  26,    0), S(  26,  -14), S(   4,  -17)};
constexpr ScorePair KING_ATTACKS = S(   7,    0);
constexpr ScorePair WEAK_KING_RING = S(   4,    0);
constexpr ScorePair KING_FLANK_ATTACKS[2] = {S(  14,   -5), S(   4,    0)};
constexpr ScorePair KING_FLANK_DEFENSES[2] = {S(  -8,    0), S(  -6,    4)};
constexpr ScorePair SAFETY_OFFSET = S(  72,  101);

constexpr ScorePair MINOR_BEHIND_PAWN = S(   3,   13);
constexpr ScorePair KNIGHT_OUTPOST = S(  20,   15);
constexpr ScorePair BISHOP_PAWNS[7] = {S(  10,    5), S(   4,   18), S(   3,   11), S(   0,    5), S(  -3,   -2), S(  -6,   -8), S(  -8,  -24)};
constexpr ScorePair BISHOP_PAIR = S(  24,   71);
constexpr ScorePair LONG_DIAG_BISHOP = S(  13,   14);
constexpr ScorePair ROOK_OPEN[2] = {S(  35,   -3), S(  22,    1)};

constexpr ScorePair TEMPO = S(  26,   17);

constexpr ScorePair COMPLEXITY_PAWNS = S(   0,   11);
constexpr ScorePair COMPLEXITY_PAWNS_BOTH_SIDES = S(   0,  175);
constexpr ScorePair COMPLEXITY_PAWN_ENDGAME = S(   0,  153);
constexpr ScorePair COMPLEXITY_OFFSET = S(   0, -270);

#undef S
// clang-format on

}
