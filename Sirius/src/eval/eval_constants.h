#pragma once

#include "../defs.h"

namespace eval
{

#define S(mg, eg) PackedScore(mg, eg)

constexpr PackedScore MATERIAL[6] = {S(  60,  129), S( 288,  444), S( 313,  451), S( 387,  812), S( 791, 1502), S(0, 0)};

constexpr PackedScore PSQT[6][64] = {
	{
		S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
		S(  65,   84), S(  31,   90), S(  34,   95), S(  57,   74), S(  65,   67), S(  31,   96), S(  31,  102), S(  63,   90),
		S(  26,   26), S(  31,   43), S(  31,   13), S(  57,  -21), S(  42,  -14), S(  25,    6), S(   4,   34), S(  10,   31),
		S(  18,   18), S(  10,   13), S(  12,   -5), S(  19,  -17), S(   7,  -17), S(   1,   -3), S(  -4,   12), S( -10,   21),
		S(   7,    4), S(   7,   10), S(   6,  -18), S(  14,  -13), S(   8,  -13), S(  -4,   -7), S( -12,    9), S( -16,    7),
		S(   0,    1), S(  10,   -3), S(   1,  -22), S(  -1,    1), S(  -7,    0), S( -15,   -7), S( -22,    3), S( -28,    5),
		S(  14,    4), S(  33,   -2), S(  14,   -8), S(   8,   10), S(  -6,    3), S(  -8,   -2), S( -13,   11), S( -18,   12),
		S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
	},
	{
		S( -69,  -85), S( -79,  -19), S( -29,  -14), S(  17,  -13), S( -33,    6), S( -69,   10), S(-113,   18), S( -84,  -40),
		S(  -6,   -9), S(  21,    1), S(  33,   -4), S(  12,    5), S(  17,    6), S(   1,   14), S(  -4,   19), S( -11,   11),
		S(  20,   -9), S(  14,   -3), S(  59,  -18), S(  40,    1), S(  24,    8), S(  13,    5), S(   3,    6), S(  -7,    7),
		S(  37,    3), S(  38,    7), S(  49,    6), S(  37,   13), S(  33,   17), S(  30,    9), S(  19,    5), S(   7,   18),
		S(  13,   15), S(  21,   11), S(  33,    7), S(  22,   21), S(  26,   14), S(  20,   14), S(  21,    4), S(   1,   13),
		S(   2,    0), S(  16,   -3), S(   8,   -9), S(  17,    8), S(   7,    8), S(  -1,   -4), S(  -1,   -4), S( -15,    0),
		S(   2,    7), S(   5,   -5), S(   5,   -7), S(   4,   -1), S(   5,   -2), S(  -8,   -5), S( -13,   -2), S( -20,    0),
		S( -13,   -3), S( -12,    1), S(  -4,   -8), S(  -3,    4), S( -10,    1), S( -23,   -5), S( -16,   -1), S( -50,   11),
	},
	{
		S( -40,   -3), S( -37,    7), S( -15,    1), S( -75,   12), S( -71,   18), S( -53,    4), S( -27,    8), S( -16,   16),
		S( -25,   -4), S( -37,   11), S(  -9,   -1), S(  -3,   -1), S( -21,    8), S(   0,   -2), S(  -2,    0), S(  -3,   -5),
		S(  19,   12), S(  14,   -1), S(  41,    5), S(  10,    4), S(  15,   -1), S(   6,    4), S(   6,    6), S(   6,    3),
		S(  -4,    5), S(   7,    8), S(   7,   11), S(  18,   13), S(  17,   19), S(  12,    5), S(   4,   10), S(  -8,    8),
		S(  13,   -5), S(   2,    7), S(   4,    6), S(   9,   10), S(  15,    8), S(  -4,   12), S(  -2,    6), S(  -1,    3),
		S(  22,  -11), S(  22,  -10), S(  13,   -3), S(   3,    7), S(  -4,    2), S(   6,    3), S(  10,    2), S(   0,   -6),
		S(  23,  -19), S(  31,  -24), S(  21,  -14), S(   4,   -5), S(  -4,    0), S(   9,  -19), S(   6,  -17), S(  14,   -7),
		S(  36,  -31), S(  19,  -19), S(  -4,    0), S(  14,   -3), S(   0,   -2), S(   1,    8), S(  13,   -2), S(  13,   -7),
	},
	{
		S(   9,   10), S( -24,   36), S(  -3,   23), S( -12,   15), S( -28,   25), S( -22,   28), S( -12,   22), S(  -7,   19),
		S(  25,    1), S(  32,    5), S(  22,    9), S(   5,   12), S(  15,   15), S(   0,   27), S(  -2,   22), S(   0,   14),
		S(   8,    4), S(  43,    1), S(  35,   -1), S(  25,    4), S(   3,   14), S(  -1,   24), S(  12,   19), S(  -9,   22),
		S(   2,   10), S(   6,   15), S(  17,    9), S(  11,    4), S(   2,   14), S(   6,   18), S(   5,   18), S( -10,   21),
		S(  -8,   -2), S(  13,    3), S(  -2,    6), S(   5,    2), S(  -6,    6), S(  -9,    9), S( -12,   10), S( -15,    8),
		S(   9,  -28), S(  19,  -28), S(   2,  -17), S(   1,  -17), S( -11,  -10), S( -16,  -10), S( -14,  -11), S( -20,   -9),
		S(  -5,  -31), S(  21,  -38), S(   6,  -26), S(   3,  -25), S(  -5,  -20), S(  -5,  -18), S( -16,  -14), S( -19,  -19),
		S(  -9,  -35), S(  -7,  -17), S(  -1,  -21), S(   6,  -28), S(  -2,  -24), S(  -9,  -17), S(  -9,  -21), S(  -9,  -17),
	},
	{
		S(   6,  -26), S(  38,  -42), S(   1,    9), S(  -4,   -1), S(  14,  -20), S( -16,    1), S( -39,   -2), S( -16,  -13),
		S(  35,    4), S(  -5,   12), S(  -1,   21), S( -38,   54), S( -26,   34), S(  -8,    9), S(  -6,  -12), S(   7,  -13),
		S(  14,    4), S(  14,    7), S(   8,   15), S(  -5,   27), S(   3,   18), S(   8,   15), S(   6,   -5), S(  19,   -8),
		S(  10,   20), S(   9,   41), S(   8,   14), S( -13,   35), S(  -8,   34), S(   6,    8), S(   4,   18), S(   2,   11),
		S(  11,   10), S(  15,   18), S(   1,   27), S(  -1,   29), S(  -6,   31), S(  -6,   24), S(   1,   19), S(  -2,    9),
		S(  13,  -22), S(  12,   -4), S(   3,    9), S(  -9,   23), S(  -8,   14), S(  -8,   19), S(   2,   -2), S(   2,  -11),
		S(  12,  -57), S(  17,  -67), S(   8,  -39), S(   3,   -3), S(   1,    3), S(   3,  -17), S(   1,  -19), S(   9,  -35),
		S(   5,  -52), S( -14,  -50), S( -18,  -22), S(  -8,  -16), S(  -8,   -9), S( -13,   -3), S( -16,  -12), S( -16,  -10),
	},
	{
		S(  -1,  -65), S(   2,   -1), S( -33,   -5), S( -24,   -9), S(   8,   -6), S(   8,   -6), S(   8,   -6), S(   8,   -6),
		S( -57,   32), S(   1,   58), S(  -7,   45), S(  30,   18), S(   8,   -6), S(   8,   -6), S(   8,   -6), S(   8,   -6),
		S( -24,   24), S(  25,   52), S(  32,   41), S(   2,   42), S(   8,   -6), S(   8,   -6), S(   8,   -6), S(   8,   -6),
		S( -64,   24), S( -21,   45), S( -17,   37), S( -46,   33), S(   8,   -6), S(   8,   -6), S(   8,   -6), S(   8,   -6),
		S( -81,   12), S( -34,   30), S( -22,   18), S( -46,   17), S(   8,   -6), S(   8,   -6), S(   8,   -6), S(   8,   -6),
		S( -38,   -5), S(   7,    7), S(  -9,   -2), S( -15,   -4), S(   8,   -6), S(   8,   -6), S(   8,   -6), S(   8,   -6),
		S(  24,  -28), S(  35,   -9), S(  14,  -17), S(  -3,  -19), S(   8,   -6), S(   8,   -6), S(   8,   -6), S(   8,   -6),
		S(  19,  -63), S(  24,  -28), S(   3,  -32), S(  14,  -52), S(   8,   -6), S(   8,   -6), S(   8,   -6), S(   8,   -6),
	},
};

constexpr PackedScore MOBILITY[4][28] = {
	{S( -11,  -20), S( -39,  -65), S( -14,  -32), S(  -6,   -6), S(   4,    7), S(   7,   18), S(  14,   25), S(  22,   32), S(  31,   33), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -21,  -31), S( -52,  -97), S( -30,  -38), S( -23,  -16), S( -11,   -3), S(  -4,    6), S(   1,   17), S(   6,   22), S(   8,   27), S(  13,   29), S(  15,   30), S(  27,   22), S(  29,   25), S(  47,    6), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -27,  -42), S(  13,  -72), S( -24,  -52), S( -13,  -31), S(  -6,  -24), S(  -2,   -6), S(   0,    0), S(  -5,   10), S(  -1,   13), S(   2,   19), S(   6,   25), S(   7,   34), S(  10,   40), S(  17,   42), S(  23,   40), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -34,    7), S( -53,  -77), S( -97,  -80), S( -78, -254), S( -74,  -94), S( -29,  -38), S( -21,   -9), S( -14,   -5), S(  -5,   -4), S(  -5,   20), S(  -3,   27), S(   0,   36), S(   3,   40), S(   6,   43), S(   9,   45), S(  12,   47), S(  13,   48), S(  13,   54), S(  14,   54), S(  16,   54), S(  24,   46), S(  32,   30), S(  35,   27), S(  52,    7), S(  59,   -2), S(  65,  -12), S(  46,   -6), S(  19,  -29)}
};

constexpr PackedScore THREAT_BY_PAWN[6] = {S(   8,  -18), S(  64,   31), S(  63,   63), S(  80,   29), S(  75,   -8), S(   0,    0)};
constexpr PackedScore THREAT_BY_KNIGHT[2][6] = {
	{S(   8,   29), S(  28,   32), S(  38,   43), S(  74,   13), S(  47,  -21), S(   0,    0)},
	{S(  -4,   10), S(  14,   32), S(  30,   31), S(  64,   33), S(  57,    1), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_BISHOP[2][6] = {
	{S(   2,   38), S(  43,   36), S(  -7,   34), S(  71,   16), S(  68,   65), S(   0,    0)},
	{S(   0,    7), S(  22,   24), S( -21,  -18), S(  45,   46), S(  48,  123), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_ROOK[2][6] = {
	{S(   1,   43), S(  19,   64), S(  28,   58), S(  14,  -50), S(  75,   12), S(   0,    0)},
	{S(  -8,    7), S(   2,   16), S(  14,    3), S(  13,  -92), S(  64,   47), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_QUEEN[2][6] = {
	{S(   7,   10), S(  24,   22), S(   9,   51), S(  14,    9), S(  11,  -55), S(  98,   30)},
	{S(  -1,    9), S(   0,    7), S(  -7,   19), S(  -6,    4), S( -19,  -68), S( 110,   65)}
};
constexpr PackedScore THREAT_BY_KING[6] = {S( -32,   48), S(   1,   50), S(  23,   41), S(  85,   17), S(   0,    0), S(   0,    0)};
constexpr PackedScore PUSH_THREAT = S(  16,   21);

constexpr PackedScore ISOLATED_PAWN[8] = {S(  -5,   -2), S(  -4,  -12), S( -10,  -11), S( -10,  -16), S( -10,  -14), S(  -6,   -7), S(  -2,  -11), S(  -7,   -2)};
constexpr PackedScore PAWN_PHALANX[8] = {S(   0,    0), S(   6,   -3), S(  13,    3), S(  20,   16), S(  47,   61), S( 110,  226), S( -35,  356), S(   0,    0)};
constexpr PackedScore DEFENDED_PAWN[8] = {S(   0,    0), S(   0,    0), S(  21,   10), S(  13,    9), S(  13,   18), S(  20,   58), S( 130,   81), S(   0,    0)};

constexpr PackedScore PASSED_PAWN[2][2][8] = {
	{
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -32,  -36), S( -14,   25), S( -21,  152), S(  28,  242), S(   0,    0)},
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -20,  -49), S(  11,  -24), S(  15,   15), S(  61,   37), S(   0,    0)}
	},
	{
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -27,  -56), S(   0,  -26), S(  16,    1), S(  67,   -2), S(   0,    0)},
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -28,  -62), S(   1,  -37), S(  -7,  -19), S(  -2,  -18), S(   0,    0)}
	}
};
constexpr PackedScore OUR_PASSER_PROXIMITY[8] = {S(   0,    0), S(  46,   82), S(   2,   68), S(   0,   42), S(   3,   31), S(   9,   24), S(  19,   22), S(  11,   22)};
constexpr PackedScore THEIR_PASSER_PROXIMITY[8] = {S(   0,    0), S( -40,    6), S(  21,   -2), S(  13,   26), S(  17,   45), S(  10,   79), S(  13,   79), S(  13,   68)};

constexpr PackedScore PAWN_STORM[2][4][8] = {
	{
		{S(  15,   13), S(-132,  -51), S(   0,   -9), S(   5,  -12), S(   0,    1), S(  -5,    9), S(  -3,    9), S(   0,    0)},
		{S(  11,    1), S(  -8, -105), S(  54,  -42), S(  10,  -10), S(   2,   -4), S( -10,    7), S(  -7,   11), S(   0,    0)},
		{S(  -3,    5), S(  61, -101), S(  71,  -45), S(  18,  -17), S(   3,   -1), S(  -8,    8), S(  -9,   12), S(   0,    0)},
		{S(   8,   -7), S( 104,  -86), S(  39,  -21), S(  14,   -2), S(  -2,    4), S(  -9,    0), S(  -3,    1), S(   0,    0)}
	},
	{
		{S(   0,    0), S(  -3,  -26), S( -31,  118), S(  16,  -52), S(  -3,    8), S(  -1,    6), S(  -5,   10), S(   0,    0)},
		{S(   0,    0), S(  -3,  -83), S(   1,   66), S(  55,  -37), S(   3,    3), S(  -7,    6), S(  -8,   10), S(   0,    0)},
		{S(   0,    0), S(  -8,   13), S( -59, -109), S(  21,  -29), S(   2,    4), S(  -2,    7), S(  -9,   11), S(   0,    0)},
		{S(   0,    0), S( -13,  -55), S(  65,   -8), S(  23,   -3), S(   0,    9), S(   0,   -9), S(   0,    7), S(   0,    0)}
	}
};
constexpr PackedScore PAWN_SHIELD[4][8] = {
	{S(  15,    3), S(  -7,   26), S( -14,   15), S(  -2,    8), S(   3,   -1), S( -31,  -26), S( -78,  -34), S(   0,    0)},
	{S(  19,    2), S( -15,   12), S( -10,    2), S(  12,   -2), S(  10,   -9), S(  -2,  -16), S( -41,  -32), S(   0,    0)},
	{S(   8,   14), S( -14,    8), S(   5,   -9), S(   3,   -1), S(   2,    1), S(  10,  -12), S(  -6,  -38), S(   0,    0)},
	{S(  14,   -3), S(   5,   -2), S(  -3,    0), S(   0,   -6), S(   8,   -9), S(  29,  -21), S( -12,  -22), S(   0,    0)}
};
constexpr PackedScore SAFE_KNIGHT_CHECK = S(  82,   -2);
constexpr PackedScore SAFE_BISHOP_CHECK = S(  22,   12);
constexpr PackedScore SAFE_ROOK_CHECK = S(  59,    6);
constexpr PackedScore SAFE_QUEEN_CHECK = S(  23,   21);
constexpr PackedScore UNSAFE_KNIGHT_CHECK = S(   7,    1);
constexpr PackedScore UNSAFE_BISHOP_CHECK = S(  11,   13);
constexpr PackedScore UNSAFE_ROOK_CHECK = S(  20,    0);
constexpr PackedScore UNSAFE_QUEEN_CHECK = S(   5,   14);
constexpr PackedScore KING_ATTACKER_WEIGHT[4] = {S(  18,    3), S(  17,    4), S(  18,  -13), S(   5,    2)};
constexpr PackedScore KING_ATTACKS[14] = {S( -53,   32), S( -61,   25), S( -67,   20), S( -71,   22), S( -66,   17), S( -58,   12), S( -40,    5), S( -18,   -7), S(  20,  -23), S(  42,  -22), S(  74,  -37), S(  88,  -18), S( 131,  -98), S(  80,   64)};

constexpr PackedScore MINOR_BEHIND_PAWN = S(   8,   14);
constexpr PackedScore KNIGHT_OUTPOST = S(  26,   19);
constexpr PackedScore BISHOP_PAWNS[7] = {S(   4,   24), S(   7,   22), S(   5,   13), S(   1,    4), S(  -2,   -5), S(  -3,  -20), S(  -8,  -34)};
constexpr PackedScore BISHOP_PAIR = S(  20,   62);
constexpr PackedScore ROOK_OPEN[2] = {S(  26,    3), S(  15,    3)};

constexpr PackedScore TEMPO = S(  32,   35);

constexpr PackedScore COMPLEXITY_PAWNS = S(   0,    8);
constexpr PackedScore COMPLEXITY_PASSERS = S(   0,    1);
constexpr PackedScore COMPLEXITY_PAWNS_BOTH_SIDES = S(   0,   70);
constexpr PackedScore COMPLEXITY_PAWN_ENDGAME = S(   0,   62);
constexpr PackedScore COMPLEXITY_OFFSET = S(   0, -132);

#undef S


}