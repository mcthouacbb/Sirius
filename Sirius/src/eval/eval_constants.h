#pragma once

#include "../defs.h"

namespace eval
{

#define S(mg, eg) PackedScore(mg, eg)

constexpr PackedScore MATERIAL[6] = {S(  61,  131), S( 288,  431), S( 308,  442), S( 387,  786), S( 736, 1626), S(0, 0)};

constexpr PackedScore PSQT[6][64] = {
	{
		S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
		S(  56,   74), S(  25,   92), S(  20,  104), S(  55,   75), S(  69,   65), S(  48,   81), S(  34,  100), S(  59,   82), 
		S(  17,    5), S(  -7,   37), S(   7,    0), S(  17,  -23), S(  10,  -20), S(   8,   -9), S( -16,   28), S(  -1,   13), 
		S(  14,    4), S(  -5,   12), S(  14,  -21), S(  11,  -24), S(  -1,  -23), S(  -1,  -14), S(  -9,   10), S( -10,    8), 
		S(   6,   -3), S(  -5,   14), S(  14,  -27), S(  16,  -18), S(   9,  -16), S(  -1,  -12), S( -15,   11), S( -13,   -2), 
		S(  -2,   -6), S(   7,    8), S(   4,   -5), S(   1,   -3), S(  -8,   -3), S( -10,   -8), S( -23,   10), S( -24,   -3), 
		S(   9,   -7), S(  24,    9), S(  31,  111), S(   9,    0), S(  -2,   -9), S(  -6,   -7), S( -16,   14), S( -15,    0), 
		S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
	},
	{
		S( -63,  -96), S( -75,  -26), S( -30,  -17), S(  -2,   -8), S( -32,    3), S( -59,    5), S( -99,    5), S( -80,  -53), 
		S( -16,  -13), S(  13,    3), S(  19,    1), S(  -2,    9), S(   3,   12), S(   2,   12), S(   1,   12), S(  -7,   -2), 
		S(   4,   -7), S( -11,    8), S(  29,   -1), S(  21,   16), S(  10,   24), S(  14,   15), S(   7,    4), S(  -5,    0), 
		S(  27,    5), S(  24,   16), S(  36,   19), S(  23,   26), S(  23,   27), S(  31,   13), S(  22,    3), S(  13,    8), 
		S(   9,   16), S(  14,   17), S(  20,   20), S(  19,   29), S(  22,   21), S(  19,   18), S(  24,    0), S(  10,    1), 
		S(  14,   -2), S(  15,    4), S(  16,    3), S(  15,   16), S(   5,   16), S(   3,    0), S(   6,   -7), S(  -6,   -8), 
		S(   9,   -2), S(  10,   -5), S(   7,   -4), S(  12,    0), S(   6,    0), S(  -4,   -4), S(  -3,   -8), S( -14,  -10), 
		S(  -4,  -19), S(  -6,  -11), S(   3,  -11), S(   7,    0), S(   1,   -3), S( -15,  -10), S(  -9,  -16), S( -41,  -10), 
	},
	{
		S( -44,  -15), S( -28,    5), S(  -7,   -4), S( -72,   11), S( -67,   18), S( -56,    4), S( -31,    8), S( -32,    5), 
		S( -21,   -8), S( -47,    4), S( -11,    2), S( -10,    4), S( -23,   12), S(   1,   -1), S( -14,   -6), S(  -1,   -8), 
		S(  11,   13), S(  -2,    9), S(  20,    7), S(   3,   13), S(  15,    7), S(   0,   -1), S(  10,    6), S(   7,    0), 
		S( -11,    6), S(   2,   13), S(   1,   17), S(  17,   19), S(  22,   23), S(  19,    9), S(   5,   12), S(  -4,    1), 
		S(  16,   -5), S(  -5,   14), S(   7,   13), S(  15,   15), S(  22,   12), S(   5,   13), S(   4,    6), S(   5,   -2), 
		S(  19,   -8), S(  22,   -2), S(   3,   -2), S(  10,   12), S(   0,    8), S(   5,   -3), S(  19,    1), S(   6,   -9), 
		S(  26,  -19), S(  24,  -25), S(  27,   -8), S(   7,   -3), S(  -1,    0), S(  11,  -16), S(   6,  -27), S(  16,  -12), 
		S(  27,  -39), S(  20,  -16), S(  -5,   -3), S(  20,   -6), S(   1,   -3), S(   1,    1), S(  11,   -3), S(   7,  -18), 
	},
	{
		S(  13,   12), S( -21,   36), S( -16,   29), S( -26,   26), S( -15,   24), S( -16,   30), S(   4,   19), S(   6,   19), 
		S(  24,    4), S(  30,    8), S(  12,   17), S(  -6,   20), S(  25,   13), S(  11,   24), S(   7,   20), S(   9,   13), 
		S(  -7,    7), S(  26,    5), S(   5,    9), S(   8,   10), S(   7,    9), S(   4,   17), S(  17,   12), S(  -4,   14), 
		S(  -9,   10), S( -14,   20), S(  -5,   17), S(  -6,   11), S(   0,   10), S(   7,   12), S(   6,   11), S(  -6,   13), 
		S( -18,    3), S(   1,    8), S( -18,   13), S(  -6,    9), S(  -5,    2), S(  -8,    5), S(  -8,    4), S(  -9,    3), 
		S(   5,  -21), S(  24,  -24), S(   0,  -13), S(   0,  -14), S(  -3,  -13), S(  -7,  -13), S(  -4,  -15), S( -11,  -13), 
		S(  -6,  -28), S(  26,  -37), S(   6,  -23), S(   3,  -20), S(   4,  -23), S(   2,  -19), S(  -6,  -19), S( -11,  -23), 
		S(  -6,  -40), S(  -2,  -20), S(   2,  -19), S(   8,  -25), S(   6,  -26), S(  -1,  -20), S(   0,  -24), S(  -2,  -22), 
	},
	{
		S(  10,   -6), S(  56,  -37), S( -17,   45), S( -25,   36), S(  14,    7), S( -12,   21), S( -26,    9), S( -19,   14), 
		S(  35,   11), S(  -1,   25), S( -19,   37), S( -48,   69), S( -19,   45), S(   3,   11), S(   8,   -6), S(  14,   -2), 
		S(   3,   18), S(  -5,    9), S( -18,   31), S( -27,   27), S(   0,   19), S(   9,   15), S(  13,  -10), S(  24,  -10), 
		S(  -1,   14), S( -15,   34), S(  -9,   16), S( -26,   36), S( -14,   35), S(  10,    5), S(  10,    5), S(  11,   -5), 
		S(   1,   10), S(   0,   12), S( -11,   17), S(  -5,   26), S(  -8,   33), S(   0,   16), S(   7,   13), S(   9,   -2), 
		S(   9,  -18), S(  10,  -10), S(   0,    2), S(  -8,   12), S(  -2,    9), S(   2,    9), S(  18,  -15), S(  17,  -23), 
		S(  10,  -48), S(  18,  -67), S(   9,  -36), S(   9,  -20), S(   7,  -11), S(  11,  -24), S(  13,  -29), S(  18,  -46), 
		S(  17,  -63), S(  -7,  -49), S( -10,  -30), S(   0,  -28), S(   3,  -28), S(  -2,  -22), S(  -4,  -25), S(  -3,  -24), 
	},
	{
		S(  45,  -66), S(  27,    5), S( -51,  -13), S( -62,    1), S(   9,   -6), S(   9,   -6), S(   9,   -6), S(   9,   -6), 
		S( -17,   31), S(  35,   59), S(  -5,   33), S(  -1,   28), S(   9,   -6), S(   9,   -6), S(   9,   -6), S(   9,   -6), 
		S(  35,   21), S(  57,   55), S(  34,   32), S( -22,   50), S(   9,   -6), S(   9,   -6), S(   9,   -6), S(   9,   -6), 
		S( -17,   22), S( -14,   56), S( -37,   32), S( -85,   46), S(   9,   -6), S(   9,   -6), S(   9,   -6), S(   9,   -6), 
		S( -56,   13), S( -53,   44), S( -51,   12), S( -87,   27), S(   9,   -6), S(   9,   -6), S(   9,   -6), S(   9,   -6), 
		S( -17,   -5), S( -11,   19), S( -32,  -11), S( -52,    3), S(   9,   -6), S(   9,   -6), S(   9,   -6), S(   9,   -6), 
		S(  37,  -26), S(  30,   -2), S(   5,  -31), S( -24,  -20), S(   9,   -6), S(   9,   -6), S(   9,   -6), S(   9,   -6), 
		S(  37,  -59), S(  37,  -23), S(  12,  -51), S(   1,  -50), S(   9,   -6), S(   9,   -6), S(   9,   -6), S(   9,   -6), 
	},
};

constexpr PackedScore MOBILITY[4][28] = {
	{S(  -8,  -22), S( -39,  -42), S( -18,  -16), S(  -9,    0), S(   1,    7), S(   6,   17), S(  14,   20), S(  22,   24), S(  33,   17), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -15,  -39), S( -31,  -60), S( -19,  -31), S( -12,  -14), S(  -4,   -4), S(   1,    6), S(   3,   15), S(   7,   18), S(   7,   21), S(  10,   21), S(  12,   22), S(  17,   16), S(  15,   23), S(  19,    4), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -15,  -45), S( -30,  -65), S( -15,  -51), S(  -3,  -30), S(  -1,  -17), S(  -2,   -7), S(  -1,    1), S(   2,    7), S(   3,   11), S(   7,   17), S(   5,   26), S(   6,   33), S(   9,   37), S(  13,   38), S(  22,   35), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S(  -8,   14), S( -39,  -60), S( -63, -108), S( -13, -201), S( -16,  -70), S(  -9,  -20), S(  -1,  -31), S(   2,  -11), S(   2,    7), S(   4,   17), S(   6,   20), S(   9,   23), S(   8,   35), S(  12,   34), S(  11,   40), S(  12,   43), S(  12,   46), S(  14,   48), S(  12,   47), S(  19,   39), S(  22,   32), S(  29,   15), S(  23,   24), S(  33,   -1), S(  28,    3), S(   8,   -3), S( -19,   -3), S(-116,   17)}
};

constexpr PackedScore THREAT_BY_PAWN[6] = {S(   4,  -18), S(  66,   27), S(  59,   57), S(  80,   23), S(  71,   -1), S(   0,    0)};
constexpr PackedScore THREAT_BY_KNIGHT[2][6] = {
	{S(   6,   28), S(  18,   17), S(  40,   41), S(  70,   13), S(  57,  -30), S(   0,    0)},
	{S(  -8,    9), S(   9,   18), S(  28,   29), S(  65,   33), S(  58,   -4), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_BISHOP[2][6] = {
	{S(  -2,   34), S(  40,   28), S( -11,   15), S(  60,   12), S(  69,   50), S(   0,    0)},
	{S(  -4,    6), S(  17,   22), S( -24,  -24), S(  44,   43), S(  45,  119), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_ROOK[2][6] = {
	{S(   0,   41), S(  17,   54), S(  27,   49), S(   5,  -45), S(  75,    8), S(   0,    0)},
	{S(  -8,    7), S(   1,   17), S(  12,    4), S(   1,  -79), S(  62,   46), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_QUEEN[2][6] = {
	{S(   6,    8), S(  23,   15), S(  10,   40), S(  12,   18), S(  10,  -54), S(  97,   46)},
	{S(  -3,   12), S(  -1,    7), S(  -8,   17), S(  -5,    4), S( -18,  -71), S( 115,   44)}
};
constexpr PackedScore THREAT_BY_KING[6] = {S( -25,   45), S(   9,   47), S(  25,   39), S(  87,    5), S(   0,    0), S(   0,    0)};
constexpr PackedScore PUSH_THREAT = S(  14,   17);
constexpr PackedScore LOW_MOB_THREAT = S(  15,   93);

constexpr PackedScore ISOLATED_PAWN[8] = {S(  -9,    6), S(  -3,  -15), S( -12,   -8), S( -10,  -16), S( -12,  -15), S(  -8,   -8), S(  -4,  -13), S( -12,    7)};
constexpr PackedScore DOUBLED_PAWN[8] = {S(   1,  -61), S(  14,  -37), S(   1,  -27), S(  -1,  -17), S(  -4,  -11), S(  -7,  -18), S(   6,  -38), S(   8,  -72)};
constexpr PackedScore BACKWARDS_PAWN[8] = {S(   0,    0), S(  -7,  -13), S(  -2,  -13), S(  -8,  -11), S(   1,  -17), S(  27,    1), S(   0,    0), S(   0,    0)};
constexpr PackedScore PAWN_PHALANX[8] = {S(   0,    0), S(   5,   -4), S(  11,   -2), S(  20,    7), S(  40,   40), S( 113,  213), S(  -1,  355), S(   0,    0)};
constexpr PackedScore DEFENDED_PAWN[8] = {S(   0,    0), S(   0,    0), S(  19,    6), S(  11,    7), S(  17,   20), S(  30,   62), S( 143,   70), S(   0,    0)};
constexpr PackedScore CANDIDATE_PASSER[2][8] = {
	{S(   0,    0), S( -33,  -17), S( -19,   -7), S(   0,   26), S(  27,   53), S(  60,   88), S(   0,    0), S(   0,    0)},
	{S(   0,    0), S( -19,   -7), S(  -9,   14), S(  -4,   28), S(  19,   41), S(  30,  152), S(   0,    0), S(   0,    0)}
};

constexpr PackedScore PASSED_PAWN[2][2][8] = {
	{
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -40,  -40), S( -15,   24), S(   4,  150), S(  56,  225), S(   0,    0)},
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -26,  -53), S(   7,  -23), S(  31,   20), S(  59,   31), S(   0,    0)}
	},
	{
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -32,  -56), S(   1,  -24), S(  38,    9), S(  60,   -3), S(   0,    0)},
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -32,  -62), S(   0,  -35), S(  12,  -10), S( -24,  -10), S(   0,    0)}
	}
};
constexpr PackedScore OUR_PASSER_PROXIMITY[8] = {S(   0,    0), S(  58,   81), S(  10,   68), S(   2,   44), S(   4,   32), S(  11,   23), S(  18,   21), S(  15,   19)};
constexpr PackedScore THEIR_PASSER_PROXIMITY[8] = {S(   0,    0), S( -57,    8), S(  17,    1), S(  16,   26), S(  21,   45), S(  19,   77), S(  21,   78), S(  24,   67)};

constexpr PackedScore PAWN_STORM[2][4][8] = {
	{
		{S(  44,   35), S(-127,  -47), S( -20,   11), S(  31,   11), S(  17,   23), S(  -2,   30), S(  -8,   29), S(   0,    0)},
		{S(  33,    9), S(  46, -125), S(  83,  -46), S(  37,   -4), S(  10,    4), S( -26,   11), S(   2,    8), S(   0,    0)},
		{S(  13,   21), S( 107,  -98), S( 102,  -22), S(  53,    6), S(  11,   19), S( -11,   24), S( -12,   25), S(   0,    0)},
		{S(  20,    5), S( 164,  -79), S( 101,  -19), S(  43,   11), S(   1,   18), S( -17,   11), S( -20,   18), S(   0,    0)}
	},
	{
		{S(   0,    0), S(   0,    0), S(  34,   40), S( -24,   26), S(  -4,   29), S(  20,   31), S(  -7,   29), S(   0,    0)},
		{S(   0,    0), S(   0,    0), S(  91,   -1), S(   3,    8), S( -11,   18), S(  -3,   17), S(   2,    8), S(   0,    0)},
		{S(   0,    0), S(   0,    0), S(  85,    7), S(  -1,   14), S(   0,   25), S(  26,   25), S(   3,   22), S(   0,    0)},
		{S(   0,    0), S(   0,    0), S(  37,    0), S(  20,   18), S( -27,   15), S(  -4,    9), S(   0,   12), S(   0,    0)}
	}
};
constexpr PackedScore PAWN_SHIELD[4][8] = {
	{S(  47,   32), S( -15,   48), S( -12,   40), S(  30,   33), S(  35,   27), S( -25,   -3), S( -73,  -19), S(   0,    0)},
	{S(  49,    6), S( -21,   17), S(   7,    7), S(  49,    1), S(  36,   -7), S(   0,  -16), S( -51,  -27), S(   0,    0)},
	{S(  21,    0), S(  19,  112), S(   8,   -2), S(  29,  -21), S(  26,  -20), S(  -2,  -23), S( -65,  -29), S(   0,    0)},
	{S(  18,   14), S(   9,   10), S(  -3,   11), S(  21,    7), S(  28,    4), S(  10,    5), S( -89,   10), S(   0,    0)}
};
constexpr PackedScore SAFE_KNIGHT_CHECK = S( 111,    5);
constexpr PackedScore SAFE_BISHOP_CHECK = S(  61,   17);
constexpr PackedScore SAFE_ROOK_CHECK = S( 103,   17);
constexpr PackedScore SAFE_QUEEN_CHECK = S(  53,   25);
constexpr PackedScore UNSAFE_KNIGHT_CHECK = S(  16,    2);
constexpr PackedScore UNSAFE_BISHOP_CHECK = S(  39,   10);
constexpr PackedScore UNSAFE_ROOK_CHECK = S(  40,    3);
constexpr PackedScore UNSAFE_QUEEN_CHECK = S(  16,    3);
constexpr PackedScore QUEENLESS_ATTACK = S(-141,  157);
constexpr PackedScore KING_ATTACKER_WEIGHT[4] = {S(  56,   -5), S(  23,    0), S(  28,  -13), S(   4,  -10)};
constexpr PackedScore KING_ATTACKS = S(   7,    0);
constexpr PackedScore WEAK_KING_RING = S(   7,    0);
constexpr PackedScore KING_FLANK_ATTACKS[2] = {S(  11,   -4), S(   7,    1)};
constexpr PackedScore KING_FLANK_DEFENSES[2] = {S(  -6,    0), S( -10,    2)};
constexpr PackedScore SAFETY_OFFSET = S(  73,  200);

constexpr PackedScore MINOR_BEHIND_PAWN = S(   5,   12);
constexpr PackedScore KNIGHT_OUTPOST = S(  23,   16);
constexpr PackedScore BISHOP_PAWNS[7] = {S(   5,   20), S(   6,   19), S(   4,   12), S(   1,    4), S(  -2,   -5), S(  -2,  -18), S(  -6,  -31)};
constexpr PackedScore BISHOP_PAIR = S(  19,   60);
constexpr PackedScore LONG_DIAG_BISHOP = S(  15,    9);
constexpr PackedScore ROOK_OPEN[2] = {S(  25,    3), S(  13,    4)};

constexpr PackedScore TEMPO = S(  32,   34);

constexpr PackedScore COMPLEXITY_PAWNS = S(   0,    9);
constexpr PackedScore COMPLEXITY_PASSERS = S(   0,   -1);
constexpr PackedScore COMPLEXITY_PAWNS_BOTH_SIDES = S(   0,   66);
constexpr PackedScore COMPLEXITY_PAWN_ENDGAME = S(   0,   79);
constexpr PackedScore COMPLEXITY_OFFSET = S(   0, -128);

#undef S


}