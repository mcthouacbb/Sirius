#pragma once

#include "../defs.h"

namespace eval
{

// clang-format off
#define S(mg, eg) ScorePair(mg, eg)

constexpr ScorePair MATERIAL[6] = {S(  64,  133), S( 319,  445), S( 334,  465), S( 430,  803), S( 918, 1647), S(0, 0)};

constexpr ScorePair PSQT[6][64] = {
    {
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  79,   82), S(  21,   86), S(  31,   95), S(  62,   70), S(  56,   62), S(  39,   65), S(  30,   94), S(  83,   72),
        S(  11,    8), S( -10,   26), S(  10,   10), S(  13,   -6), S(   0,  -18), S(  -1,   -6), S( -13,   21), S(   4,    8),
        S(   3,    9), S(   6,   14), S(  10,   -9), S(  10,  -15), S(   3,  -15), S(   1,  -10), S(   0,   10), S( -10,   12),
        S( -10,   -2), S(  -6,   14), S(  15,  -21), S(  18,  -17), S(  11,  -16), S(   1,  -11), S( -13,   12), S( -16,   -3),
        S( -15,   -3), S(  13,    5), S(   4,    1), S(  11,   -3), S(  -2,    0), S(  -7,   -2), S( -15,   12), S( -24,   -4),
        S(  -7,   -8), S(  25,    8), S(  23,   36), S(   5,   13), S(  -4,    5), S(  -3,    1), S(  -7,   13), S( -18,   -3),
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
    },
    {
        S( -78, -100), S(-131,   41), S(-132,   56), S(   8,    2), S( -18,    4), S( -71,   17), S(-142,   23), S( -92,  -71),
        S(  -2,  -11), S( -22,   25), S(  27,   10), S(  55,    7), S(  26,   22), S(  16,   -1), S( -17,   12), S(  -8,  -19),
        S(  38,  -14), S(   6,   10), S(  50,    0), S(  28,   19), S(  20,   19), S(  19,   17), S(  14,   10), S(  15,  -12),
        S(  31,    2), S(  32,   10), S(  37,   17), S(  35,   25), S(  31,   25), S(  23,   16), S(  22,    3), S(  13,    1),
        S(  23,   10), S(  28,    9), S(  30,   12), S(  20,   31), S(  21,   21), S(  18,   17), S(  17,    6), S(   7,    2),
        S(   7,   -9), S(  22,   -4), S(  17,    0), S(  17,   15), S(  12,   15), S(  -2,    2), S(  10,  -13), S(  -6,   -8),
        S(   6,   -5), S(   6,    0), S(   7,  -12), S(  11,    2), S(   3,    2), S(   0,   -6), S(  -4,   -8), S( -13,  -39),
        S( -14,  -31), S( -11,  -18), S(   7,  -18), S(  -2,   -4), S(   1,   -8), S(  10,  -32), S( -15,  -23), S( -37,  -24),
    },
    {
        S( -33,  -41), S( -76,   23), S( -70,   14), S( -48,   17), S( -62,   27), S( -78,   19), S( -56,   20), S( -41,  -16),
        S( -14,  -14), S( -41,    2), S(  -5,   13), S( -36,   22), S( -10,   11), S( -21,   10), S( -10,  -16), S(  -6,   -5),
        S(  21,   -5), S(   3,   25), S(  25,    8), S(  22,   15), S(  19,   13), S(   2,   10), S(  16,    6), S(   2,   -1),
        S(   7,    0), S(  13,   12), S(  15,   16), S(  18,   29), S(  19,   35), S(  19,   10), S(  18,   10), S(   2,   -7),
        S(  12,  -12), S(   7,    8), S(  12,   17), S(  25,   13), S(  24,   15), S(  14,    9), S(   9,    0), S(  19,  -11),
        S(  22,  -12), S(  25,   -6), S(  16,  -10), S(  14,   13), S(  13,    5), S(   4,  -11), S(  28,   -4), S(  14,  -16),
        S(  24,  -17), S(  29,  -31), S(  26,  -18), S(  13,   -5), S(   0,   -4), S(  18,  -19), S(   9,  -27), S(  26,   -6),
        S(   4,  -24), S(  15,  -19), S( -11,   -9), S(  12,  -19), S(   7,  -10), S(  -5,   -3), S(   4,  -10), S(   4,   -9),
    },
    {
        S(  18,   14), S(  31,   15), S(  22,   17), S(   7,   20), S(  28,   17), S(   1,   27), S(  22,   26), S(  20,   26),
        S(  25,   13), S(   6,   23), S(  26,   17), S(  10,   25), S(  30,   24), S(  17,   28), S(  15,   25), S(  19,   22),
        S( -24,   21), S(  12,   10), S(   3,   18), S(  10,    8), S(  15,   12), S(   3,   18), S(   7,   15), S(  -7,   26),
        S( -18,   15), S(  -2,   11), S(   2,    6), S(  -5,   10), S( -10,   15), S(   0,   11), S(  -1,   14), S(  -8,   11),
        S( -22,  -10), S(  -9,    0), S( -14,    4), S(  -4,    3), S(  -8,    3), S(  -9,    7), S( -13,    8), S( -12,    1),
        S( -21,  -24), S(   4,  -26), S(   0,  -16), S(  -1,  -19), S(  -3,  -21), S( -11,  -15), S(  -8,  -18), S( -17,  -13),
        S( -64,  -22), S( -13,  -33), S(   7,  -30), S(   2,  -28), S(  -1,  -28), S(  -4,  -21), S( -14,  -25), S( -21,  -21),
        S( -18,  -35), S( -24,  -17), S(   7,  -24), S(  14,  -30), S(   7,  -27), S(   1,  -24), S(   0,  -27), S(   0,  -24),
    },
    {
        S(   7,   31), S(  20,   44), S(  29,   19), S(  14,   28), S(  24,   27), S(  44,  -12), S(  21,  -13), S( -17,   28),
        S(  38,   -8), S(  19,    9), S(  15,   21), S( -31,   52), S(   3,   38), S(  10,    7), S(  12,   -1), S(  12,    3),
        S(   9,    6), S(  11,   12), S(  -3,   19), S(  -9,   27), S(  15,    5), S(   9,   13), S(  24,  -11), S(  22,  -13),
        S(   1,    7), S( -15,   19), S( -11,   15), S( -15,   23), S( -19,   36), S(   3,   18), S(  -3,   27), S(  -1,    9),
        S( -16,   20), S(  -5,   14), S( -12,   11), S( -14,   26), S( -18,   40), S(  -6,   21), S(  -4,   13), S(  -6,    4),
        S(  -5,  -15), S(   2,  -21), S(  -4,   -7), S( -16,   10), S(  -9,   12), S(  -6,   14), S(   8,   -8), S(   1,   -3),
        S(   8,  -77), S(   0,  -69), S(   3,  -56), S(  -7,  -14), S( -12,   -1), S(   6,  -33), S(  -6,  -18), S(   6,  -28),
        S(   7,  -48), S( -23,  -66), S( -12,  -57), S(  -8,  -41), S(  -3,  -34), S(  -8,  -38), S( -17,  -20), S( -11,  -15),
    },
    {
        S( -52, -136), S(  18,   62), S(  23,   41), S( -29,   59), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  -1,    0), S(  18,   82), S( -25,   63), S( -55,   67), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  36,   42), S( -13,   98), S( -45,   54), S(-155,   30), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S( -53,   39), S( -41,   78), S( -76,   43), S(-132,   20), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S( -69,   27), S( -48,   59), S( -88,   29), S(-121,    9), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  11,    6), S(  -1,   31), S( -36,    4), S( -51,  -18), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  62,  -21), S(  50,    5), S(  21,  -29), S(  -7,  -48), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  65,  -56), S(  65,  -21), S(  23,  -53), S(  21,  -90), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
    },
};

constexpr ScorePair MOBILITY[4][28] = {
    {S(  -4,  -25), S( -34,  -56), S( -22,  -13), S( -10,    2), S(   0,   10), S(   6,   20), S(  15,   24), S(  22,   27), S(  31,   17), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S(  -5,  -29), S( -44,  -55), S( -23,  -31), S( -12,  -10), S(  -6,    0), S(  -1,   10), S(   1,   18), S(   5,   20), S(   4,   22), S(   9,   22), S(   8,   23), S(  16,   13), S(  15,   13), S(  40,  -18), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S( -31,  -63), S( -64,  -54), S( -19,  -42), S( -12,  -25), S(  -2,  -18), S(   4,   -5), S(   2,    7), S(   5,   12), S(   6,   14), S(   9,   20), S(  10,   29), S(   9,   38), S(  13,   40), S(  18,   39), S(  44,   14), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S(  -7,   34), S( -48,    7), S( -59,  -28), S( -81,  -12), S( -16, -145), S(  -4,  -94), S(  -3,  -47), S(   2,  -36), S(   3,  -26), S(   1,   -3), S(   1,    9), S(   6,    7), S(   3,   23), S(   4,   33), S(   7,   32), S(   6,   38), S(   8,   39), S(   8,   40), S(  11,   37), S(   9,   38), S(  16,   40), S(  19,   21), S(  15,   29), S(  32,    1), S(  30,    3), S(  36,   -7), S( -17,   -8), S(   2,   -7)}
};

constexpr ScorePair THREAT_BY_PAWN[6] = {S( -11,  -25), S(  71,   43), S(  70,   66), S(  79,   47), S(  63,   17), S(   0,    0)};
constexpr ScorePair THREAT_BY_KNIGHT[2][6] = {
    {S(   7,   35), S(  11,   55), S(  50,   31), S(  93,   12), S(  41,   12), S(   0,    0)},
    {S(  -8,   10), S(  19,   34), S(  37,   35), S(  66,   45), S(  43,   51), S(   0,    0)}
};
constexpr ScorePair THREAT_BY_BISHOP[2][6] = {
    {S(   1,   35), S(  40,   39), S(  -2,   43), S(  50,   44), S(  60,   58), S(   0,    0)},
    {S(  -6,    4), S(  21,   20), S(  -7,   13), S(  59,   74), S(  60,   72), S(   0,    0)}
};
constexpr ScorePair THREAT_BY_ROOK[2][6] = {
    {S(  -2,   48), S(  30,   59), S(  44,   48), S(   9,  -80), S(  67,   -9), S(   0,    0)},
    {S( -11,    9), S(   8,   15), S(  18,    3), S(  23, -113), S(  57,   90), S(   0,    0)}
};
constexpr ScorePair THREAT_BY_QUEEN[2][6] = {
    {S(   6,   27), S(  26,   28), S(  19,   54), S(  17,    3), S(  -5,  -48), S( 179,  108)},
    {S(  -6,   20), S(   1,    7), S( -12,   33), S(  -2,   -9), S( -14,  -52), S( 101,  203)}
};
constexpr ScorePair THREAT_BY_KING[6] = {S(  48,   11), S(  19,   39), S( 113,   21), S(  87,    6), S(   0,    0), S(   0,    0)};
constexpr ScorePair KNIGHT_HIT_QUEEN = S(   6,    3);
constexpr ScorePair BISHOP_HIT_QUEEN = S(  18,   12);
constexpr ScorePair ROOK_HIT_QUEEN = S(  24,  -12);
constexpr ScorePair PUSH_THREAT = S(  14,   17);
constexpr ScorePair RESTRICTED_SQUARES = S(   2,    3);

constexpr ScorePair ISOLATED_PAWN[8] = {S(  -2,    1), S(  -4,  -15), S(  -8,  -12), S(  -9,  -15), S( -13,  -15), S( -10,   -7), S(  -9,   -9), S(  -7,    0)};
constexpr ScorePair DOUBLED_PAWN[8] = {S(  -1,  -48), S(   4,  -42), S(  -1,  -22), S(  -9,  -10), S( -18,    1), S(  -3,  -22), S(   8,  -48), S(  10,  -48)};
constexpr ScorePair BACKWARDS_PAWN[8] = {S(   0,    0), S(  -6,  -15), S(   0,  -16), S(  -6,  -13), S(   2,  -11), S(   7,   22), S(   0,    0), S(   0,    0)};
constexpr ScorePair PAWN_PHALANX[8] = {S(   0,    0), S(   3,   -5), S(  11,   -2), S(  18,   11), S(  37,   35), S(  76,  134), S(  -5,  154), S(   0,    0)};
constexpr ScorePair DEFENDED_PAWN[8] = {S(   0,    0), S(   0,    0), S(  16,    6), S(  10,   10), S(  16,   24), S(  42,   56), S(  64,  131), S(   0,    0)};
constexpr ScorePair CANDIDATE_PASSER[2][8] = {
    {S(   0,    0), S( -12,  -12), S(  -9,  -16), S(  -1,    0), S(  12,   29), S(  42,   76), S(   0,    0), S(   0,    0)},
    {S(   0,    0), S( -12,  -12), S(  -4,    7), S(  -4,   23), S(  12,   35), S(  24,  153), S(   0,    0), S(   0,    0)}
};

constexpr ScorePair PASSED_PAWN[2][2][8] = {
    {
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -32,  -28), S( -14,   30), S(  32,  128), S( 142,  196), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -22,  -40), S(  -2,   -9), S(  32,   51), S(  83,   76), S(   0,    0)}
    },
    {
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -22,  -45), S(  -7,  -11), S(  28,   51), S(  22,   54), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -24,  -58), S( -10,  -21), S(  15,   32), S(   1,   22), S(   0,    0)}
    }
};
constexpr ScorePair OUR_PASSER_PROXIMITY[8] = {S(  89,  103), S( 136,   63), S(  55,   63), S(  -4,   58), S(  -4,   33), S(   1,   20), S(  14,   12), S(   0,   17)};
constexpr ScorePair THEIR_PASSER_PROXIMITY[8] = {S( -52,    8), S(   3,   -3), S(  28,    0), S(  22,   24), S(  15,   55), S(  14,   75), S(  22,   75), S(  19,   61)};
constexpr ScorePair PASSER_DEFENDED_PUSH[8] = {S(   0,    0), S(   0,    0), S(   0,    0), S(   7,    8), S(  10,   18), S(  29,   34), S(  61,   93), S(   0,    0)};

constexpr ScorePair PAWN_STORM[2][4][8] = {
    {
        {S(  33,   22), S( -93, -200), S( -14,  -69), S(  39,    1), S(  23,   18), S(   9,   18), S(  -1,   27), S(   0,    0)},
        {S(  22,   11), S(  21, -251), S(  69, -132), S(  28,  -16), S(   7,    8), S( -23,   10), S(   3,    7), S(   0,    0)},
        {S(   7,    5), S(  61, -178), S(  99, -111), S(  60,  -23), S(   8,    7), S( -17,   11), S(  -2,    4), S(   0,    0)},
        {S(   8,  -12), S( 103, -252), S( 108, -110), S(  54,  -20), S(   7,   -2), S( -28,   -6), S( -24,   -8), S(   0,    0)}
    },
    {
        {S(   0,    0), S(   0,    0), S(  75,   45), S(  -1,   27), S(   4,   35), S(  -1,   47), S(  42,   34), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S( 156,   34), S( -32,   23), S( -22,   32), S( -14,   40), S(   0,   28), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S( 131,    1), S(   6,   19), S(   0,   29), S(  -6,   35), S(  57,    9), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S( 159,  -12), S(  10,   15), S( -11,   17), S(  -2,    8), S(  -4,  -36), S(   0,    0)}
    }
};
constexpr ScorePair PAWN_SHIELD[4][8] = {
    {S(  57,   20), S(  10,   36), S( -16,   28), S(  31,   15), S(  40,    3), S(   1,    5), S(   1,   12), S(   0,    0)},
    {S(  37,   10), S( -30,   19), S(   4,    9), S(  42,   -6), S(  34,  -21), S(  -4,  -21), S( -55,  -72), S(   0,    0)},
    {S(  25,    5), S(   7,   38), S(   4,   -7), S(  33,  -30), S(  26,  -31), S(  10,  -13), S( -47,  -25), S(   0,    0)},
    {S(  13,    0), S( -22,  -16), S(   7,  -29), S(  27,  -36), S(  17,  -29), S(  22,  -15), S( -26,   -7), S(   0,    0)}
};
constexpr ScorePair SAFE_KNIGHT_CHECK = S( 104,   -2);
constexpr ScorePair SAFE_BISHOP_CHECK = S(  71,   29);
constexpr ScorePair SAFE_ROOK_CHECK = S( 115,   10);
constexpr ScorePair SAFE_QUEEN_CHECK = S(  70,   27);
constexpr ScorePair UNSAFE_KNIGHT_CHECK = S(  19,   -1);
constexpr ScorePair UNSAFE_BISHOP_CHECK = S(  39,   10);
constexpr ScorePair UNSAFE_ROOK_CHECK = S(  43,    0);
constexpr ScorePair UNSAFE_QUEEN_CHECK = S(  21,   17);
constexpr ScorePair QUEENLESS_ATTACK = S( -99,  320);
constexpr ScorePair KING_ATTACKER_WEIGHT[4] = {S(  56,   -6), S(  23,   -1), S(  23,  -17), S(   7,  -71)};
constexpr ScorePair KING_ATTACKS = S(   7,   -1);
constexpr ScorePair WEAK_KING_RING = S(   4,    1);
constexpr ScorePair KING_FLANK_ATTACKS[2] = {S(  13,   -6), S(   3,    0)};
constexpr ScorePair KING_FLANK_DEFENSES[2] = {S(  -8,    0), S(  -7,    5)};
constexpr ScorePair SAFETY_OFFSET = S(  79,   -2);

constexpr ScorePair MINOR_BEHIND_PAWN = S(   1,   10);
constexpr ScorePair KNIGHT_OUTPOST = S(  16,   18);
constexpr ScorePair BISHOP_PAWNS[7] = {S(  11,    3), S(   5,   13), S(   3,    9), S(   0,    5), S(  -3,   -1), S(  -7,   -8), S(  -9,  -21)};
constexpr ScorePair BISHOP_PAIR = S(  22,   66);
constexpr ScorePair LONG_DIAG_BISHOP = S(  11,   13);
constexpr ScorePair ROOK_OPEN[2] = {S(  32,    0), S(  20,    1)};

constexpr ScorePair TEMPO = S(  25,   17);

constexpr ScorePair COMPLEXITY_PAWNS = S(   0,   10);
constexpr ScorePair COMPLEXITY_PAWNS_BOTH_SIDES = S(   0,  144);
constexpr ScorePair COMPLEXITY_PAWN_ENDGAME = S(   0,  137);
constexpr ScorePair COMPLEXITY_OFFSET = S(   0, -217);

#undef S
// clang-format on

}
