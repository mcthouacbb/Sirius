#pragma once

#include "../defs.h"

namespace eval
{

#define S(mg, eg) PackedScore(mg, eg)

constexpr PackedScore MATERIAL[6] = {S(  61,  130), S( 292,  426), S( 314,  437), S( 397,  778), S( 757, 1578), S(0, 0)};

constexpr PackedScore PSQT[6][64] = {
	{
		S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
		S(  55,   75), S(  31,   89), S(  32,   98), S(  63,   71), S(  71,   63), S(  43,   83), S(  32,  101), S(  57,   82),
		S(  21,    4), S(  -3,   34), S(  18,   -5), S(  24,  -27), S(  13,  -22), S(   7,   -9), S( -18,   29), S(   0,   13),
		S(  16,    5), S(  -3,   12), S(  17,  -23), S(  15,  -27), S(   1,  -25), S(  -1,  -13), S(  -9,   11), S( -10,    9),
		S(   6,   -2), S(  -6,   16), S(  14,  -25), S(  18,  -19), S(  11,  -18), S(  -1,  -11), S( -15,   12), S( -13,   -1),
		S(  -1,   -5), S(   8,    8), S(   5,   -3), S(   2,   -3), S(  -6,   -4), S( -10,   -7), S( -23,   11), S( -24,   -2),
		S(  10,   -6), S(  24,    9), S(  33,  121), S(   9,   -1), S(  -3,   -8), S(  -5,   -7), S( -15,   14), S( -15,    1),
		S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
	},
	{
		S( -77,  -93), S( -78,  -24), S( -30,  -16), S(   0,   -9), S( -34,    3), S( -61,    5), S(-106,    8), S( -94,  -49),
		S( -17,  -12), S(  19,    2), S(  29,   -2), S(   4,    6), S(   6,   11), S(   3,   11), S(  -2,   15), S( -11,    2),
		S(   7,   -5), S(   3,    3), S(  48,  -10), S(  33,   10), S(  18,   18), S(  17,   13), S(   5,    5), S(  -7,    2),
		S(  28,    4), S(  27,   13), S(  43,   14), S(  27,   22), S(  26,   25), S(  32,   13), S(  20,    6), S(  10,   11),
		S(  11,   15), S(  15,   16), S(  24,   17), S(  19,   28), S(  25,   19), S(  20,   18), S(  22,    3), S(   8,    5),
		S(  16,   -3), S(  21,    0), S(  20,   -1), S(  17,   14), S(   9,   14), S(   4,    0), S(   5,   -5), S(  -7,   -5),
		S(   8,   -1), S(  15,   -6), S(  10,   -4), S(  12,    1), S(   7,    0), S(  -3,   -3), S(  -4,   -6), S( -16,   -7),
		S(  -7,  -15), S(  -9,   -8), S(  -1,  -10), S(   4,    2), S(  -2,   -1), S( -18,   -7), S( -13,  -13), S( -46,   -4),
	},
	{
		S( -49,  -13), S( -34,    7), S(  -9,   -3), S( -74,   12), S( -66,   17), S( -52,    4), S( -27,    6), S( -33,    6),
		S( -20,   -8), S( -46,    6), S(  -9,    2), S(  -2,   -1), S( -19,    9), S(   3,   -1), S( -13,   -6), S(  -3,   -6),
		S(  14,   12), S(   8,    5), S(  29,    3), S(  11,    9), S(  20,    3), S(   0,   -2), S(   9,    6), S(   5,    2),
		S( -10,    6), S(   7,    9), S(   7,   14), S(  20,   17), S(  22,   21), S(  18,    8), S(   5,   11), S(  -7,    5),
		S(  18,   -8), S(   3,    9), S(  10,   10), S(  13,   15), S(  22,   12), S(   2,   15), S(   2,    6), S(   2,    0),
		S(  22,  -11), S(  27,   -6), S(   8,   -6), S(  11,   10), S(   2,    7), S(   3,   -2), S(  17,    2), S(   3,   -7),
		S(  29,  -21), S(  23,  -24), S(  28,   -9), S(   7,   -3), S(   0,   -1), S(  12,  -16), S(   4,  -25), S(  14,  -11),
		S(  28,  -39), S(  18,  -15), S(  -8,   -1), S(  18,   -5), S(   2,   -3), S(   0,    1), S(  13,   -4), S(   5,  -17),
	},
	{
		S(  16,    8), S( -23,   33), S(  -5,   22), S(  -9,   16), S( -26,   26), S( -21,   30), S(  -7,   21), S(  -3,   19),
		S(  26,    3), S(  28,    8), S(  14,   16), S(   6,   14), S(  16,   17), S(   2,   28), S(  -2,   24), S(   0,   17),
		S(  -4,    6), S(  29,    3), S(  13,    5), S(  21,    3), S(   2,   10), S(  -2,   19), S(   9,   14), S( -11,   18),
		S(   1,    5), S(   0,   13), S(   9,    8), S(  10,    0), S(   3,    8), S(   6,   12), S(   4,   13), S(  -8,   14),
		S( -10,    0), S(  13,    2), S( -10,    9), S(   7,    1), S(  -3,    2), S(  -8,    5), S( -10,    6), S( -11,    5),
		S(   8,  -23), S(  25,  -26), S(   1,  -15), S(   5,  -17), S(  -7,  -11), S( -12,  -10), S( -10,  -11), S( -16,  -10),
		S(  -8,  -26), S(  23,  -35), S(   5,  -22), S(   5,  -21), S(  -1,  -18), S(  -3,  -16), S( -12,  -15), S( -16,  -19),
		S(  -7,  -38), S(  -3,  -18), S(   1,  -17), S(  10,  -24), S(   2,  -22), S(  -5,  -15), S(  -5,  -19), S(  -7,  -18),
	},
	{
		S(  -3,   -4), S(  27,  -22), S( -31,   42), S( -24,   34), S(   3,    5), S( -31,   30), S( -43,   16), S( -33,   17),
		S(  38,    7), S(  -7,   22), S( -14,   35), S( -38,   69), S( -25,   48), S(  -4,   14), S(  -2,   -6), S(   6,   -6),
		S(   7,   19), S(  10,   12), S(  -4,   33), S( -13,   32), S(   1,   22), S(   6,   13), S(   5,   -7), S(  17,  -13),
		S(   7,   19), S(   4,   32), S(   6,   19), S( -12,   39), S(  -9,   35), S(   9,    8), S(   9,    5), S(   7,   -3),
		S(  11,    8), S(  15,   11), S(   0,   17), S(   4,   27), S(  -5,   34), S(   0,   16), S(   6,   12), S(   6,   -5),
		S(  16,  -22), S(  17,  -12), S(   7,    0), S(  -3,   12), S(  -1,    7), S(   1,    6), S(  13,  -18), S(  14,  -28),
		S(  10,  -51), S(  15,  -69), S(  11,  -38), S(  10,  -21), S(   7,  -12), S(   9,  -27), S(   8,  -33), S(  13,  -49),
		S(  14,  -58), S( -10,  -51), S( -13,  -32), S(   1,  -29), S(   1,  -28), S(  -4,  -22), S(  -7,  -24), S(  -8,  -24),
	},
	{
		S( -25,  -54), S( -31,   10), S( -88,   -4), S(-100,   16), S(   7,   -5), S(   7,   -5), S(   7,   -5), S(   7,   -5),
		S( -54,   31), S(   0,   58), S( -24,   37), S( -15,   34), S(   7,   -5), S(   7,   -5), S(   7,   -5), S(   7,   -5),
		S(  32,   15), S(  64,   45), S(  52,   28), S(   0,   49), S(   7,   -5), S(   7,   -5), S(   7,   -5), S(   7,   -5),
		S( -11,   14), S(  17,   40), S(   1,   23), S( -42,   39), S(   7,   -5), S(   7,   -5), S(   7,   -5), S(   7,   -5),
		S( -36,    4), S(  -9,   26), S(  -3,    4), S( -40,   23), S(   7,   -5), S(   7,   -5), S(   7,   -5), S(   7,   -5),
		S(  -1,  -12), S(  21,    6), S(   1,  -14), S( -20,    4), S(   7,   -5), S(   7,   -5), S(   7,   -5), S(   7,   -5),
		S(  31,  -26), S(  33,   -5), S(   9,  -24), S( -18,  -10), S(   7,   -5), S(   7,   -5), S(   7,   -5), S(   7,   -5),
		S(  21,  -53), S(  25,  -17), S(  -4,  -36), S( -10,  -33), S(   7,   -5), S(   7,   -5), S(   7,   -5), S(   7,   -5),
	},
};

constexpr PackedScore MOBILITY[4][28] = {
	{S( -15,  -25), S( -38,  -45), S( -16,  -15), S(  -8,    1), S(   2,    9), S(   7,   18), S(  15,   21), S(  24,   25), S(  35,   18), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -23,  -42), S( -34,  -58), S( -21,  -29), S( -14,  -11), S(  -5,   -2), S(   1,    8), S(   3,   16), S(   7,   19), S(   8,   22), S(  11,   22), S(  12,   22), S(  18,   16), S(  18,   22), S(  24,    2), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -27,  -42), S( -33,  -69), S( -18,  -48), S(  -5,  -28), S(  -3,  -13), S(  -4,   -3), S(  -4,    4), S(   0,   10), S(   2,   12), S(   7,   17), S(   6,   26), S(   8,   32), S(  12,   35), S(  18,   34), S(  28,   31), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -25,    9), S( -60,  -75), S( -81, -127), S( -20, -214), S( -23,  -71), S( -15,  -16), S(  -6,  -27), S(  -4,   -5), S(  -4,   13), S(  -1,   23), S(   1,   27), S(   4,   30), S(   5,   41), S(   8,   40), S(   9,   46), S(  10,   48), S(  11,   50), S(  12,   54), S(  12,   52), S(  18,   46), S(  23,   37), S(  33,   18), S(  30,   25), S(  38,    5), S(  41,    1), S(  20,   -1), S(  19,  -17), S( -77,    5)}
};

constexpr PackedScore THREAT_BY_PAWN[6] = {S(   5,  -19), S(  66,   27), S(  61,   58), S(  77,   26), S(  73,   -3), S(   0,    0)};
constexpr PackedScore THREAT_BY_KNIGHT[2][6] = {
	{S(   7,   28), S(  18,   38), S(  41,   43), S(  73,   14), S(  57,  -32), S(   0,    0)},
	{S(  -7,    8), S(   7,   38), S(  28,   29), S(  64,   32), S(  58,   -6), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_BISHOP[2][6] = {
	{S(  -2,   35), S(  40,   32), S( -10,   33), S(  69,   13), S(  69,   53), S(   0,    0)},
	{S(  -3,    5), S(  18,   22), S( -24,  -13), S(  44,   43), S(  45,  119), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_ROOK[2][6] = {
	{S(   0,   41), S(  17,   58), S(  27,   54), S(   9,  -40), S(  75,   10), S(   0,    0)},
	{S(  -7,    7), S(   2,   15), S(  13,    2), S(   7,  -80), S(  64,   41), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_QUEEN[2][6] = {
	{S(   6,    8), S(  24,   19), S(   9,   47), S(  17,   18), S(  10,  -53), S(  97,   53)},
	{S(  -2,   12), S(   0,    4), S(  -7,   15), S(  -5,    2), S( -17,  -73), S( 124,   44)}
};
constexpr PackedScore THREAT_BY_KING[6] = {S( -25,   46), S(   7,   49), S(  30,   40), S(  85,    8), S(   0,    0), S(   0,    0)};
constexpr PackedScore PUSH_THREAT = S(  14,   18);

constexpr PackedScore ISOLATED_PAWN[8] = {S(  -9,    6), S(  -3,  -15), S( -12,   -8), S( -10,  -16), S( -12,  -15), S(  -8,   -7), S(  -3,  -13), S( -12,    6)};
constexpr PackedScore DOUBLED_PAWN[8] = {S(   1,  -61), S(  15,  -37), S(   1,  -28), S(   0,  -19), S(  -4,  -13), S(  -5,  -20), S(   9,  -40), S(   9,  -74)};
constexpr PackedScore BACKWARDS_PAWN[8] = {S(   0,    0), S(  -8,  -13), S(  -2,  -13), S(  -9,  -11), S(  -1,  -15), S(  29,   -2), S(   0,    0), S(   0,    0)};
constexpr PackedScore PAWN_PHALANX[8] = {S(   0,    0), S(   5,   -3), S(  11,   -2), S(  20,    7), S(  42,   40), S( 114,  213), S( -11,  355), S(   0,    0)};
constexpr PackedScore DEFENDED_PAWN[8] = {S(   0,    0), S(   0,    0), S(  19,    7), S(  11,    7), S(  17,   20), S(  31,   60), S( 137,   73), S(   0,    0)};
constexpr PackedScore CANDIDATE_PASSER[2][8] = {
	{S(   0,    0), S( -35,  -17), S( -19,   -8), S(   0,   27), S(  28,   52), S(  62,   87), S(   0,    0), S(   0,    0)},
	{S(   0,    0), S( -20,   -7), S( -10,   14), S(  -4,   29), S(  19,   41), S(  31,  151), S(   0,    0), S(   0,    0)}
};

constexpr PackedScore PASSED_PAWN[2][2][8] = {
	{
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -40,  -40), S( -16,   24), S(   2,  151), S(  55,  224), S(   0,    0)},
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -28,  -53), S(   6,  -23), S(  32,   20), S(  61,   29), S(   0,    0)}
	},
	{
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -32,  -56), S(   0,  -24), S(  39,    9), S(  66,   -2), S(   0,    0)},
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -33,  -61), S(   0,  -35), S(  13,  -10), S( -20,   -8), S(   0,    0)}
	}
};
constexpr PackedScore OUR_PASSER_PROXIMITY[8] = {S(   0,    0), S(  50,   83), S(  15,   67), S(   3,   43), S(   4,   32), S(  10,   23), S(  18,   20), S(  13,   19)};
constexpr PackedScore THEIR_PASSER_PROXIMITY[8] = {S(   0,    0), S( -64,    8), S(  17,    0), S(  17,   26), S(  22,   46), S(  18,   78), S(  21,   78), S(  23,   69)};

constexpr PackedScore PAWN_STORM[2][4][8] = {
	{
		{S(  30,   40), S(-117,  -57), S( -35,   13), S(  25,   11), S(  12,   24), S(  -8,   32), S( -16,   32), S(   0,    0)},
		{S(  24,   15), S(  47, -136), S(  83,  -45), S(  39,   -4), S(  13,    4), S( -26,   13), S(  -5,   13), S(   0,    0)},
		{S(   5,   27), S( 110, -102), S( 102,  -19), S(  53,    8), S(  11,   22), S( -16,   28), S( -25,   33), S(   0,    0)},
		{S(  10,   11), S( 158,  -76), S(  97,  -14), S(  40,   16), S(  -3,   23), S( -24,   16), S( -32,   27), S(   0,    0)}
	},
	{
		{S(   0,    0), S(   0,    0), S(  11,   46), S( -32,   25), S(  -9,   30), S(  14,   32), S( -15,   31), S(   0,    0)},
		{S(   0,    0), S(   0,    0), S(  89,    4), S(   2,    8), S(  -7,   19), S(  -4,   19), S(  -5,   13), S(   0,    0)},
		{S(   0,    0), S(   0,    0), S(  81,   10), S(  -2,   15), S(   1,   28), S(  20,   29), S(  -9,   29), S(   0,    0)},
		{S(   0,    0), S(   0,    0), S(  35,    6), S(  18,   22), S( -28,   20), S( -10,   15), S(  -8,   19), S(   0,    0)}
	}
};
constexpr PackedScore PAWN_SHIELD[4][8] = {
	{S(  36,   33), S( -20,   50), S( -25,   42), S(  11,   37), S(  21,   29), S( -29,   -5), S( -83,  -23), S(   0,    0)},
	{S(  46,   10), S( -25,   21), S(  -4,   12), S(  29,    7), S(  27,   -4), S(  -1,  -17), S( -38,  -35), S(   0,    0)},
	{S(  11,    1), S(   8,  130), S(  -5,    2), S(   8,  -19), S(   9,  -21), S(  -2,  -28), S( -51,  -38), S(   0,    0)},
	{S(  14,   19), S(   4,   15), S( -13,   18), S(   7,   14), S(  17,   11), S(  12,    9), S( -77,   10), S(   0,    0)}
};
constexpr PackedScore SAFE_KNIGHT_CHECK = S( 108,    7);
constexpr PackedScore SAFE_BISHOP_CHECK = S(  56,   20);
constexpr PackedScore SAFE_ROOK_CHECK = S( 101,   21);
constexpr PackedScore SAFE_QUEEN_CHECK = S(  50,   26);
constexpr PackedScore UNSAFE_KNIGHT_CHECK = S(  17,    3);
constexpr PackedScore UNSAFE_BISHOP_CHECK = S(  39,   11);
constexpr PackedScore UNSAFE_ROOK_CHECK = S(  42,    2);
constexpr PackedScore UNSAFE_QUEEN_CHECK = S(  19,    0);
constexpr PackedScore QUEENLESS_ATTACK = S(-176,  135);
constexpr PackedScore KING_ATTACKER_WEIGHT[4] = {S(  56,   -5), S(  29,   -2), S(  31,  -13), S(  11,  -13)};
constexpr PackedScore KING_ATTACKS = S(  10,   -2);
constexpr PackedScore WEAK_KING_RING = S(  13,   -1);
constexpr PackedScore SAFETY_OFFSET = S(  25,  158);

constexpr PackedScore MINOR_BEHIND_PAWN = S(   6,   12);
constexpr PackedScore KNIGHT_OUTPOST = S(  23,   15);
constexpr PackedScore BISHOP_PAWNS[7] = {S(   5,   19), S(   6,   18), S(   4,   11), S(   2,    4), S(  -2,   -5), S(  -2,  -18), S(  -7,  -29)};
constexpr PackedScore BISHOP_PAIR = S(  20,   59);
constexpr PackedScore LONG_DIAG_BISHOP = S(  16,    8);
constexpr PackedScore ROOK_OPEN[2] = {S(  25,    4), S(  13,    4)};

constexpr PackedScore TEMPO = S(  32,   34);

constexpr PackedScore COMPLEXITY_PAWNS = S(   0,    9);
constexpr PackedScore COMPLEXITY_PASSERS = S(   0,   -1);
constexpr PackedScore COMPLEXITY_PAWNS_BOTH_SIDES = S(   0,   66);
constexpr PackedScore COMPLEXITY_PAWN_ENDGAME = S(   0,   77);
constexpr PackedScore COMPLEXITY_OFFSET = S(   0, -126);

#undef S


}