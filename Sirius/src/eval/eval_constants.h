#pragma once

#include "../defs.h"

namespace eval
{

#define S(mg, eg) PackedScore(mg, eg)

constexpr PackedScore MATERIAL[6] = {S(  52,  132), S( 284,  431), S( 306,  442), S( 384,  786), S( 735, 1611), S(0, 0)};

constexpr PackedScore PSQT[6][64] = {
    {
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  69,   72), S(  40,   89), S(  14,  110), S(  51,   77), S(  65,   67), S(  45,   82), S(  48,   97), S(  73,   79),
        S(  23,    4), S(  -7,   39), S(  -9,    5), S(  -1,  -18), S(  -9,  -15), S(  -6,   -6), S( -16,   28), S(   6,   12),
        S(  21,    4), S(   1,   11), S(  -2,  -12), S(  -7,  -18), S( -20,  -18), S( -17,  -10), S(  -3,    9), S(  -1,    6),
        S(  12,   -4), S(   1,   14), S(   3,  -19), S(   4,  -13), S(  -3,  -12), S( -12,   -9), S(  -8,   10), S(  -5,   -3),
        S(   4,   -6), S(  12,    8), S(   2,   -2), S(  -1,   -1), S( -10,   -1), S( -12,   -6), S( -18,   10), S( -17,   -4),
        S(  14,   -7), S(  28,    9), S(  42,   95), S(  18,   -3), S(   7,  -12), S(   3,   -8), S( -11,   14), S(  -9,    0),
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
    },
    {
        S( -67,  -99), S( -76,  -26), S( -28,  -17), S(  -1,   -9), S( -29,    0), S( -59,    5), S(-101,    4), S( -85,  -57),
        S( -17,  -13), S(  12,    3), S(  21,    1), S(  -3,   10), S(   2,   12), S(   3,   12), S(   0,   12), S(  -8,   -2),
        S(   4,   -8), S( -10,    7), S(  29,   -2), S(  20,   16), S(   8,   24), S(  14,   14), S(   7,    3), S(  -5,   -1),
        S(  26,    5), S(  23,   15), S(  36,   19), S(  22,   26), S(  23,   27), S(  31,   13), S(  22,    2), S(  13,    8),
        S(  10,   16), S(  14,   16), S(  21,   20), S(  20,   28), S(  22,   21), S(  19,   17), S(  24,   -1), S(  11,    1),
        S(  15,   -3), S(  16,    4), S(  16,    4), S(  15,   16), S(   5,   16), S(   2,    0), S(   7,   -7), S(  -5,   -9),
        S(  10,   -2), S(  11,   -6), S(   9,   -5), S(  12,    0), S(   7,   -1), S(  -3,   -5), S(  -2,   -9), S( -13,  -10),
        S(  -3,  -18), S(  -5,  -12), S(   5,  -12), S(   8,    0), S(   0,   -3), S( -15,  -10), S(  -9,  -16), S( -41,  -10),
    },
    {
        S( -45,  -15), S( -27,    4), S(  -5,   -5), S( -72,   11), S( -68,   19), S( -54,    3), S( -32,    8), S( -32,    5),
        S( -21,  -10), S( -42,    3), S( -12,    1), S( -10,    4), S( -23,   12), S(   0,   -1), S( -13,   -7), S(  -2,   -8),
        S(  11,   13), S(  -1,    8), S(  21,    6), S(   4,   12), S(  15,    6), S(   1,   -2), S(  10,    6), S(   7,    0),
        S( -10,    5), S(   2,   12), S(   2,   16), S(  18,   19), S(  22,   22), S(  20,    8), S(   5,   11), S(  -4,    1),
        S(  16,   -6), S(  -4,   14), S(   8,   12), S(  15,   14), S(  22,   12), S(   6,   13), S(   5,    5), S(   5,   -3),
        S(  19,   -9), S(  22,   -2), S(   4,   -3), S(  10,   12), S(   0,    8), S(   5,   -4), S(  19,    0), S(   6,  -10),
        S(  26,  -20), S(  25,  -26), S(  27,   -9), S(   7,   -4), S(   0,   -1), S(  12,  -17), S(   7,  -28), S(  16,  -13),
        S(  27,  -38), S(  20,  -16), S(  -5,   -3), S(  20,   -7), S(   2,   -3), S(   1,    1), S(  11,   -4), S(   6,  -19),
    },
    {
        S(  13,   12), S( -22,   36), S( -13,   28), S( -26,   27), S( -13,   23), S( -13,   29), S(   6,   19), S(   7,   18),
        S(  25,    3), S(  30,    8), S(  13,   16), S(  -5,   21), S(  25,   12), S(  11,   24), S(   8,   19), S(   9,   12),
        S(  -7,    7), S(  26,    5), S(   5,    9), S(   8,   11), S(   7,    8), S(   4,   16), S(  17,   11), S(  -4,   14),
        S(  -8,   10), S( -14,   19), S(  -4,   16), S(  -6,   11), S(   0,    9), S(   7,   12), S(   5,   11), S(  -6,   12),
        S( -18,    4), S(   2,    8), S( -18,   14), S(  -6,    9), S(  -5,    3), S(  -9,    6), S(  -7,    3), S(  -8,    3),
        S(   5,  -21), S(  24,  -24), S(   0,  -13), S(   0,  -14), S(  -3,  -13), S(  -7,  -14), S(  -4,  -16), S( -11,  -13),
        S(  -6,  -28), S(  26,  -36), S(   6,  -22), S(   2,  -20), S(   4,  -22), S(   2,  -20), S(  -7,  -19), S( -11,  -24),
        S(  -6,  -39), S(  -2,  -20), S(   2,  -19), S(   8,  -25), S(   6,  -26), S(  -1,  -20), S(  -1,  -24), S(  -3,  -22),
    },
    {
        S(  10,   -5), S(  61,  -43), S( -21,   47), S( -24,   35), S(  13,    8), S( -14,   23), S( -28,   11), S( -15,   10),
        S(  36,   11), S(   3,   22), S( -20,   41), S( -50,   72), S( -20,   46), S(   1,   13), S(   8,   -5), S(  13,   -3),
        S(   3,   18), S(  -7,   12), S( -18,   31), S( -28,   28), S(  -1,   20), S(   9,   14), S(  12,   -9), S(  23,   -9),
        S(  -1,   15), S( -14,   34), S( -10,   17), S( -27,   38), S( -14,   36), S(   8,    7), S(   9,    5), S(  10,   -4),
        S(   0,   11), S(   0,   14), S( -11,   18), S(  -6,   27), S(  -8,   34), S(   0,   17), S(   8,   12), S(   8,   -3),
        S(   8,  -15), S(  10,   -9), S(   0,    3), S(  -7,   13), S(  -2,   10), S(   3,    8), S(  18,  -15), S(  18,  -24),
        S(  10,  -50), S(  19,  -68), S(  11,  -39), S(  10,  -22), S(   8,  -12), S(  12,  -25), S(  14,  -31), S(  18,  -45),
        S(  16,  -61), S(  -6,  -51), S(  -9,  -33), S(   1,  -30), S(   4,  -32), S(   0,  -26), S(  -3,  -28), S(  -2,  -25),
    },
    {
        S(  45,  -63), S(  30,    6), S( -51,  -14), S( -60,   -5), S(   9,   -6), S(   9,   -6), S(   9,   -6), S(   9,   -6),
        S( -17,   34), S(  34,   62), S(  -6,   32), S(  -1,   23), S(   9,   -6), S(   9,   -6), S(   9,   -6), S(   9,   -6),
        S(  34,   25), S(  56,   59), S(  34,   30), S( -21,   45), S(   9,   -6), S(   9,   -6), S(   9,   -6), S(   9,   -6),
        S( -18,   25), S( -13,   58), S( -37,   31), S( -84,   42), S(   9,   -6), S(   9,   -6), S(   9,   -6), S(   9,   -6),
        S( -56,   16), S( -52,   47), S( -50,   10), S( -85,   22), S(   9,   -6), S(   9,   -6), S(   9,   -6), S(   9,   -6),
        S( -16,   -2), S( -10,   22), S( -32,  -12), S( -51,   -2), S(   9,   -6), S(   9,   -6), S(   9,   -6), S(   9,   -6),
        S(  37,  -23), S(  30,    1), S(   5,  -32), S( -25,  -24), S(   9,   -6), S(   9,   -6), S(   9,   -6), S(   9,   -6),
        S(  37,  -56), S(  37,  -19), S(  12,  -53), S(   0,  -54), S(   9,   -6), S(   9,   -6), S(   9,   -6), S(   9,   -6),
    },
};

constexpr PackedScore MOBILITY[4][28] = {
    {S(  -7,  -29), S( -39,  -45), S( -17,  -16), S(  -9,    1), S(   1,    9), S(   6,   18), S(  14,   21), S(  23,   25), S(  33,   18), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S( -14,  -45), S( -31,  -61), S( -18,  -32), S( -12,  -13), S(  -5,   -3), S(   0,    8), S(   2,   16), S(   6,   20), S(   6,   23), S(   9,   23), S(  11,   23), S(  16,   17), S(  14,   24), S(  18,    5), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S( -17,  -43), S( -29,  -70), S( -15,  -52), S(  -4,  -31), S(  -1,  -17), S(  -2,   -6), S(  -2,    2), S(   1,    8), S(   3,   12), S(   6,   18), S(   4,   28), S(   6,   34), S(   9,   39), S(  12,   39), S(  21,   36), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S(  -8,   12), S( -41,  -73), S( -64, -128), S(  -9, -220), S( -14,  -77), S(  -6,  -24), S(   2,  -35), S(   3,  -14), S(   3,    6), S(   4,   17), S(   5,   22), S(   8,   27), S(   7,   39), S(  10,   39), S(  10,   46), S(  11,   48), S(  11,   50), S(  13,   52), S(  12,   51), S(  18,   43), S(  22,   35), S(  30,   17), S(  25,   25), S(  35,    1), S(  28,    6), S(   6,    4), S( -18,    0), S(-116,   21)}
};

constexpr PackedScore THREAT_BY_PAWN[6] = {S(   5,  -18), S(  66,   28), S(  59,   59), S(  80,   24), S(  71,    0), S(   0,    0)};
constexpr PackedScore THREAT_BY_KNIGHT[2][6] = {
    {S(   7,   28), S(  19,   36), S(  40,   43), S(  75,   14), S(  58,  -32), S(   0,    0)},
    {S(  -7,    8), S(   8,   35), S(  28,   29), S(  65,   33), S(  58,   -4), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_BISHOP[2][6] = {
    {S(  -2,   35), S(  41,   31), S( -10,   33), S(  67,   14), S(  69,   49), S(   0,    0)},
    {S(  -4,    5), S(  17,   22), S( -24,  -12), S(  44,   44), S(  45,  116), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_ROOK[2][6] = {
    {S(  -1,   41), S(  17,   59), S(  27,   54), S(   6,  -35), S(  75,    8), S(   0,    0)},
    {S(  -8,    7), S(   1,   16), S(  12,    3), S(   3,  -75), S(  62,   45), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_QUEEN[2][6] = {
    {S(   7,    6), S(  23,   20), S(   9,   49), S(  18,   16), S(  11,  -54), S(  96,   45)},
    {S(  -2,   10), S(   0,    6), S(  -7,   15), S(  -5,    4), S( -17,  -75), S( 111,   48)}
};
constexpr PackedScore THREAT_BY_KING[6] = {S( -25,   45), S(   8,   48), S(  27,   41), S(  86,    6), S(   0,    0), S(   0,    0)};
constexpr PackedScore PUSH_THREAT = S(  14,   17);

constexpr PackedScore ISOLATED_PAWN[8] = {S( -10,    6), S(  -3,  -15), S( -11,   -8), S(  -8,  -17), S( -10,  -16), S(  -7,   -8), S(  -4,  -13), S( -13,    7)};
constexpr PackedScore DOUBLED_PAWN[8] = {S(   1,  -61), S(  15,  -38), S(  12,  -30), S(  19,  -23), S(  14,  -16), S(   3,  -21), S(   7,  -38), S(   8,  -72)};
constexpr PackedScore BACKWARDS_PAWN[8] = {S(   0,    0), S(  -7,  -13), S(  -1,  -14), S(  -8,  -12), S(   2,  -18), S(  27,    0), S(   0,    0), S(   0,    0)};
constexpr PackedScore PAWN_PHALANX[8] = {S(   0,    0), S(   6,   -4), S(  12,   -2), S(  18,    8), S(  38,   40), S( 115,  212), S( -10,  357), S(   0,    0)};
constexpr PackedScore DEFENDED_PAWN[8] = {S(   0,    0), S(   0,    0), S(  19,    6), S(  11,    7), S(  13,   21), S(  29,   61), S( 148,   68), S(   0,    0)};
constexpr PackedScore CANDIDATE_PASSER[2][8] = {
    {S(   0,    0), S( -35,  -15), S( -20,   -7), S(   0,   25), S(  28,   52), S(  60,   89), S(   0,    0), S(   0,    0)},
    {S(   0,    0), S( -20,   -7), S( -11,   14), S(  -4,   28), S(  20,   41), S(  29,  153), S(   0,    0), S(   0,    0)}
};

constexpr PackedScore PASSED_PAWN[2][2][8] = {
    {
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -39,  -40), S( -13,   23), S(   7,  149), S(  50,  226), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -26,  -53), S(   8,  -23), S(  32,   20), S(  53,   32), S(   0,    0)}
    },
    {
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -31,  -57), S(   2,  -24), S(  39,    8), S(  55,   -1), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -32,  -61), S(   0,  -34), S(  11,  -10), S( -31,   -9), S(   0,    0)}
    }
};
constexpr PackedScore OUR_PASSER_PROXIMITY[8] = {S(   0,    0), S(  61,   80), S(  13,   67), S(   3,   44), S(   4,   32), S(  10,   24), S(  17,   21), S(  14,   19)};
constexpr PackedScore THEIR_PASSER_PROXIMITY[8] = {S(   0,    0), S( -54,    7), S(  18,    0), S(  16,   26), S(  22,   45), S(  18,   78), S(  20,   78), S(  22,   68)};

constexpr PackedScore PAWN_STORM[2][4][8] = {
    {
        {S(  45,   37), S(-129,  -46), S( -22,   13), S(  30,   12), S(  17,   24), S(  -2,   31), S(  -7,   30), S(   0,    0)},
        {S(  34,    9), S(  40, -125), S(  85,  -45), S(  37,   -4), S(  10,    4), S( -27,   12), S(   3,    8), S(   0,    0)},
        {S(  13,   22), S( 111, -101), S( 104,  -24), S(  55,    5), S(  13,   19), S( -13,   24), S( -14,   26), S(   0,    0)},
        {S(  20,    5), S( 167,  -84), S( 101,  -21), S(  43,    9), S(   1,   16), S( -20,   10), S( -22,   20), S(   0,    0)}
    },
    {
        {S(   0,    0), S(   0,    0), S(  33,   43), S( -24,   28), S(  -3,   31), S(  19,   32), S(  -7,   30), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(  92,    0), S(   2,    9), S( -11,   19), S(  -4,   17), S(   3,    8), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(  85,    6), S(   5,   12), S(   3,   25), S(  20,   26), S(   2,   23), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(  33,    0), S(  23,   16), S( -25,   14), S(  -8,    9), S(  -1,   13), S(   0,    0)}
    }
};
constexpr PackedScore PAWN_SHIELD[4][8] = {
    {S(  47,   33), S( -16,   51), S( -12,   42), S(  31,   35), S(  36,   28), S( -23,   -1), S( -69,  -20), S(   0,    0)},
    {S(  49,    7), S( -22,   18), S(   7,    8), S(  50,    1), S(  38,   -7), S(   0,  -14), S( -44,  -31), S(   0,    0)},
    {S(  21,    2), S(  21,  102), S(   6,    2), S(  29,  -14), S(  27,  -13), S(  -5,  -20), S( -67,  -22), S(   0,    0)},
    {S(  18,   11), S(  10,    7), S(  -3,    9), S(  20,    6), S(  31,    4), S(   9,    4), S( -91,    8), S(   0,    0)}
};
constexpr PackedScore SAFE_KNIGHT_CHECK = S( 111,    5);
constexpr PackedScore SAFE_BISHOP_CHECK = S(  61,   17);
constexpr PackedScore SAFE_ROOK_CHECK = S( 103,   17);
constexpr PackedScore SAFE_QUEEN_CHECK = S(  53,   24);
constexpr PackedScore UNSAFE_KNIGHT_CHECK = S(  17,    2);
constexpr PackedScore UNSAFE_BISHOP_CHECK = S(  38,   10);
constexpr PackedScore UNSAFE_ROOK_CHECK = S(  39,    3);
constexpr PackedScore UNSAFE_QUEEN_CHECK = S(  16,    3);
constexpr PackedScore QUEENLESS_ATTACK = S(-140,  143);
constexpr PackedScore KING_ATTACKER_WEIGHT[4] = {S(  55,   -5), S(  23,    0), S(  28,  -13), S(   4,  -11)};
constexpr PackedScore KING_ATTACKS = S(   6,    0);
constexpr PackedScore WEAK_KING_RING = S(   7,    0);
constexpr PackedScore KING_FLANK_ATTACKS[2] = {S(  12,   -4), S(   7,    1)};
constexpr PackedScore KING_FLANK_DEFENSES[2] = {S(  -6,    0), S( -10,    2)};
constexpr PackedScore SAFETY_OFFSET = S(  73,  206);

constexpr PackedScore MINOR_BEHIND_PAWN = S(   6,   12);
constexpr PackedScore KNIGHT_OUTPOST = S(  23,   16);
constexpr PackedScore BISHOP_PAWNS[7] = {S(   4,   20), S(   5,   19), S(   3,   12), S(   1,    5), S(  -3,   -5), S(  -3,  -18), S(  -8,  -31)};
constexpr PackedScore BISHOP_PAIR = S(  19,   60);
constexpr PackedScore LONG_DIAG_BISHOP = S(  15,    9);
constexpr PackedScore ROOK_OPEN[2] = {S(  25,    2), S(  14,    4)};

constexpr PackedScore SPACE = S(  63,    0);

constexpr PackedScore TEMPO = S(  32,   34);

constexpr PackedScore COMPLEXITY_PAWNS = S(   0,    9);
constexpr PackedScore COMPLEXITY_PASSERS = S(   0,   -1);
constexpr PackedScore COMPLEXITY_PAWNS_BOTH_SIDES = S(   0,   66);
constexpr PackedScore COMPLEXITY_PAWN_ENDGAME = S(   0,   79);
constexpr PackedScore COMPLEXITY_OFFSET = S(   0, -128);

#undef S


}