#pragma once

#include "../defs.h"

namespace eval
{

// clang-format off
#define S(mg, eg) ScorePair(mg, eg)

constexpr ScorePair MATERIAL[6] = {S(  69,  127), S( 350,  419), S( 372,  425), S( 466,  776), S( 973, 1598), S(0, 0)};

constexpr ScorePair PSQT[6][64] = {
    {
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  94,   75), S(  23,   55), S(  55,   79), S(  53,   86), S(  54,   68), S(  23,   74), S(  35,   82), S(  90,   69),
        S(   2,   17), S( -24,   24), S(  16,   19), S(  12,  -12), S( -10,  -14), S(  -2,   -3), S( -22,   13), S(  -5,   14),
        S(   2,   10), S(   5,   12), S(   9,  -14), S(   4,  -14), S(  -4,  -13), S(  -4,   -7), S(  -1,   10), S( -11,   10),
        S(  -7,   -3), S(  -5,   17), S(  18,  -28), S(  21,  -18), S(  11,  -14), S(   2,   -9), S( -11,   12), S( -14,   -5),
        S( -13,   -5), S(   9,    6), S(   4,  -10), S(   8,    4), S(  -4,    4), S(  -7,    2), S( -14,   11), S( -22,   -4),
        S(  -5,   -6), S(  23,   11), S(  29,   23), S(   7,    9), S(  -2,    4), S(  -3,    4), S(  -5,   13), S( -15,   -3),
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
    },
    {
        S( -77,  -97), S(-128,   49), S( -89,   14), S(  18,   -3), S( -47,   22), S( -81,   17), S( -83,    5), S(-116,  -57),
        S( -12,    5), S(  -4,    3), S(  30,    6), S(  38,   13), S(  44,   10), S(  31,   -5), S( -10,    5), S(   0,  -16),
        S(  19,  -16), S(  -1,   20), S(  46,    8), S(  23,   24), S(  23,   12), S(  29,    7), S(  10,    7), S(   0,   -6),
        S(  19,    6), S(  26,   12), S(  26,   20), S(  26,   28), S(  34,   22), S(  19,   19), S(  16,    9), S(   6,   10),
        S(  18,    7), S(  21,    8), S(  26,   15), S(  16,   30), S(  19,   22), S(  14,   21), S(  10,   10), S(  11,    4),
        S(   3,  -12), S(  17,   -4), S(  14,    2), S(  18,   13), S(  11,   13), S(   0,    0), S(  -3,   -1), S(  -5,   -9),
        S(   8,   -6), S(   8,    0), S(  10,  -17), S(  11,   -3), S(   1,    3), S(   2,  -13), S(   5,  -19), S( -19,  -36),
        S( -15,  -36), S( -11,  -15), S(   8,  -21), S(   7,  -12), S(   4,   -7), S(  -6,  -19), S( -15,  -13), S( -11,  -28),
    },
    {
        S( -35,  -34), S( -27,   12), S( -60,   11), S( -30,    8), S( -82,   29), S( -73,   18), S( -35,    8), S( -42,  -21),
        S(  -9,   -4), S( -38,   15), S( -16,   15), S( -48,   23), S(   6,    4), S(  -6,    5), S( -15,  -17), S( -21,   -6),
        S(  14,   -7), S(  13,    2), S(  15,   18), S(  21,   16), S(   3,   18), S(  21,   -5), S(  19,   -4), S(  10,  -10),
        S(  -3,    3), S(   7,   20), S(  11,   12), S(   6,   36), S(  16,   37), S(  10,   13), S(  13,   12), S(   2,    0),
        S(   8,    1), S(   9,    3), S(   9,   16), S(  20,   12), S(  19,   19), S(   7,   18), S(   4,    4), S(   4,   -8),
        S(  19,   -8), S(  23,   -6), S(  10,   -4), S(  12,   15), S(  12,    6), S(  -4,    1), S(  18,    6), S(  13,  -12),
        S(  21,  -20), S(  23,  -27), S(  27,  -12), S(  10,   -4), S(  -1,   -3), S(  12,  -16), S(   3,  -18), S(  14,    0),
        S(  13,  -40), S(  30,  -33), S( -12,   -7), S(   5,  -11), S(   6,   -9), S(  -5,   -4), S(  32,  -33), S(   1,  -15),
    },
    {
        S(  34,   -3), S(  24,   10), S(  -6,   32), S(  -6,   38), S(  13,   21), S(  19,   14), S(  24,   23), S(  20,   18),
        S(  30,   11), S(   9,   26), S(  24,   22), S(  12,   32), S(  25,   29), S(  23,   24), S(   9,   31), S(  25,   20),
        S( -13,   19), S(  16,    8), S(   2,   27), S(  22,    8), S(   5,   19), S(  -6,   26), S(   9,   17), S(  -6,   30),
        S( -20,   11), S(  -7,   21), S(   0,   16), S( -10,   18), S(  -7,   14), S(  -5,   15), S( -13,   22), S(  -8,   15),
        S( -27,   -1), S( -11,    3), S( -25,   17), S( -11,    8), S(  -4,   -1), S(  -8,    4), S( -20,    7), S(  -8,   -2),
        S( -22,  -23), S(   5,  -29), S(  -7,  -10), S(   4,  -26), S(   0,  -18), S( -10,  -18), S(  -8,  -18), S( -13,  -17),
        S( -58,  -32), S( -11,  -31), S(   6,  -32), S(   2,  -27), S(   1,  -28), S(  -1,  -28), S( -11,  -26), S( -13,  -26),
        S( -12,  -41), S( -20,  -23), S(  12,  -32), S(  18,  -37), S(   8,  -32), S(   1,  -26), S(   3,  -31), S(   2,  -29),
    },
    {
        S(   0,   33), S(  35,    7), S(  61,  -18), S(   3,   38), S(  21,   26), S(  33,   10), S(  13,   10), S( -19,   33),
        S(  27,   -7), S(  17,   18), S(   7,   17), S( -28,   56), S(  24,   16), S(  14,    4), S(  16,    4), S(  10,   -3),
        S(   0,   19), S(  19,    3), S(   4,   16), S( -26,   48), S(  -5,   42), S(  15,    2), S(  15,  -10), S(  21,  -11),
        S(   0,    3), S( -18,   24), S( -21,   37), S( -19,   45), S( -26,   54), S(  -4,   22), S(   3,   14), S(   3,    2),
        S( -11,   22), S( -15,   26), S(  -3,   -5), S( -16,   35), S( -22,   44), S(  -5,   16), S(  -6,   19), S(  -2,   13),
        S(  -9,  -11), S(   1,  -13), S(  -9,   -1), S( -18,   11), S( -10,   13), S(  -4,   13), S(   5,   -3), S(  -4,    8),
        S(  -5,  -55), S(   7,  -76), S(   0,  -47), S(  -2,  -25), S(  -6,  -14), S(   8,  -35), S(   3,  -27), S(  -5,   -4),
        S(  12,  -72), S( -16,  -73), S( -11,  -60), S(  -4,  -53), S(   0,  -39), S(  -9,  -27), S(  -3,  -40), S(   0,  -37),
    },
    {
        S(-124, -102), S( -16,  106), S(  22,   57), S( -88,   75), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S( -37,   30), S(   7,  105), S(  -9,   74), S( -36,   70), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  54,   14), S( 162,    5), S(  -5,   39), S(-130,    8), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S( -27,   26), S(  -3,   62), S( -65,   39), S(-141,    8), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S( -48,   15), S( -38,   48), S( -84,   28), S(-108,    2), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  -2,    2), S(  -2,   22), S( -30,    3), S( -62,  -16), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  61,  -29), S(  43,    3), S(  16,  -26), S( -16,  -48), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  52,  -43), S(  54,  -18), S(  15,  -48), S(  10,  -89), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
    },
};

constexpr ScorePair MOBILITY[4][28] = {
    {S(  -7,  -26), S( -34,  -53), S( -23,  -13), S( -10,    0), S(   0,   11), S(   6,   20), S(  13,   23), S(  22,   26), S(  36,    7), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S( -12,  -23), S( -43,  -50), S( -25,  -22), S( -16,   -4), S(  -9,    5), S(  -4,   14), S(  -3,   22), S(   2,   22), S(   1,   24), S(   7,   20), S(   6,   24), S(  20,    0), S(  15,   19), S(  63,  -51), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S( -32,  -59), S( -57,  -55), S( -14,  -45), S(  -8,  -26), S(  -2,  -16), S(   4,   -5), S(   5,    4), S(   7,    9), S(   7,   12), S(  11,   18), S(  11,   26), S(   9,   35), S(  11,   40), S(  12,   42), S(  49,   10), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S( -10,   42), S(   1,  -31), S( -15,  -59), S( -53,  -76), S( -40,  -67), S(  -6,  -82), S(  -5,  -44), S(  -2,  -24), S(  -2,  -12), S(  -3,    8), S(  -3,   19), S(  -2,   25), S(   0,   29), S(   0,   40), S(   3,   39), S(   1,   45), S(   4,   44), S(   4,   47), S(   5,   47), S(  12,   33), S(   7,   43), S(  26,   13), S(   9,   31), S(  24,    0), S(  45,  -28), S(  41,  -54), S( -11,  -12), S( -28,   -5)}
};

constexpr ScorePair THREAT_BY_PAWN[6] = {S(   3,  -11), S(  75,   35), S(  62,   71), S(  64,   54), S(  59,   15), S(   0,    0)};
constexpr ScorePair THREAT_BY_KNIGHT[2][6] = {
    {S(   5,   38), S(   9,   65), S(  55,   24), S(  89,    1), S(  46,    0), S(   0,    0)},
    {S(  -8,   11), S(  20,   48), S(  38,   29), S(  68,   44), S(  53,   43), S(   0,    0)}
};
constexpr ScorePair THREAT_BY_BISHOP[2][6] = {
    {S(   3,   33), S(  37,   38), S(  -4,   46), S(  59,   31), S(  52,   59), S(   0,    0)},
    {S(  -6,    5), S(  22,   16), S(  -8,    3), S(  61,   63), S(  42,   94), S(   0,    0)}
};
constexpr ScorePair THREAT_BY_ROOK[2][6] = {
    {S(  -1,   46), S(  38,   48), S(  47,   40), S(   3,  -75), S(  62,   -6), S(   0,    0)},
    {S(  -9,    6), S(   9,   14), S(  16,    4), S(  25, -113), S(  56,   87), S(   0,    0)}
};
constexpr ScorePair THREAT_BY_QUEEN[2][6] = {
    {S(   8,   24), S(  26,   32), S(  24,   58), S(  17,   10), S(  -3,  -40), S( 150,  100)},
    {S(  -5,   17), S(   2,    7), S( -10,   33), S(   2,  -14), S(  -8,  -50), S( 111,  173)}
};
constexpr ScorePair THREAT_BY_KING[6] = {S(  60,    2), S(  25,   36), S(  84,   31), S(  83,    6), S(   0,    0), S(   0,    0)};
constexpr ScorePair KNIGHT_HIT_QUEEN = S(   7,    0);
constexpr ScorePair BISHOP_HIT_QUEEN = S(  18,    5);
constexpr ScorePair ROOK_HIT_QUEEN = S(  21,   -5);
constexpr ScorePair PUSH_THREAT = S(  13,   17);
constexpr ScorePair RESTRICTED_SQUARES = S(   3,    2);

constexpr ScorePair ISOLATED_PAWN[8] = {S(  -2,    0), S(  -2,  -16), S(  -9,  -12), S(  -8,  -15), S( -15,  -14), S( -10,   -9), S(  -4,  -11), S(  -6,    0)};
constexpr ScorePair DOUBLED_PAWN[8] = {S(  -4,  -51), S(   9,  -42), S(   0,  -23), S(  -6,  -13), S(  -7,   -4), S(  -4,  -13), S(  10,  -42), S(   8,  -48)};
constexpr ScorePair BACKWARDS_PAWN[8] = {S(   0,    0), S(  -8,  -13), S(   0,  -13), S(  -4,  -16), S(   0,  -16), S(  31,   -9), S(   0,    0), S(   0,    0)};
constexpr ScorePair PAWN_PHALANX[8] = {S(   0,    0), S(   7,   -8), S(  13,   -2), S(  20,    7), S(  43,   34), S(  70,  134), S(  61,  202), S(   0,    0)};
constexpr ScorePair DEFENDED_PAWN[8] = {S(   0,    0), S(   0,    0), S(  20,    3), S(  12,    8), S(  20,   23), S(  49,   52), S(  78,   98), S(   0,    0)};
constexpr ScorePair CANDIDATE_PASSER[2][8] = {
    {S(   0,    0), S(   3,  -22), S( -11,  -19), S(  -8,    7), S(  21,   16), S(  60,   70), S(   0,    0), S(   0,    0)},
    {S(   0,    0), S( -21,  -10), S(  -7,    9), S(  -5,   27), S(  13,   28), S(  30,  108), S(   0,    0), S(   0,    0)}
};

constexpr ScorePair PASSED_PAWN[2][2][8] = {
    {
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -39,  -21), S(  -6,   24), S(  28,  131), S( 122,  200), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -28,  -36), S(   2,  -15), S(  39,   43), S( 111,   46), S(   0,    0)}
    },
    {
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -28,  -42), S(  -5,   -9), S(  31,   55), S(  53,   33), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -30,  -49), S(   0,  -29), S(   7,   34), S(  -3,   19), S(   0,    0)}
    }
};
constexpr ScorePair OUR_PASSER_PROXIMITY[8] = {S( 165,   82), S( 180,   38), S(  56,   63), S(   3,   53), S(  -4,   34), S(  -2,   22), S(  12,   10), S( -11,   25)};
constexpr ScorePair THEIR_PASSER_PROXIMITY[8] = {S( -29,   -9), S(  13,   -6), S(  27,    1), S(  24,   22), S(  19,   51), S(  17,   69), S(  23,   71), S(   9,   62)};
constexpr ScorePair PASSER_DEFENDED_PUSH[8] = {S(   0,    0), S(   0,    0), S(   0,    0), S(   9,   10), S(   6,   29), S(  45,   29), S(  30,  118), S(   0,    0)};

constexpr ScorePair PAWN_STORM[2][4][8] = {
    {
        {S(  18,   32), S(  -1, -1259), S(  12, -152), S(  29,    0), S(  16,   27), S(  -4,   31), S(  -3,   35), S(   0,    0)},
        {S(  23,   10), S(  13, -150), S(  56, -127), S(  19,  -10), S(  12,    5), S( -16,   16), S(   7,   10), S(   0,    0)},
        {S(   1,    8), S(  55, -230), S(  70, -101), S(  62,  -23), S(  12,    7), S( -14,   11), S(  -4,    2), S(   0,    0)},
        {S(   2,   -9), S(  76, -255), S(  95, -116), S(  64,  -23), S(   9,   -8), S( -25,   -9), S( -26,   -2), S(   0,    0)}
    },
    {
        {S(   0,    0), S(   0,    0), S(  48,   51), S( -19,   35), S(  -6,   47), S(  23,   47), S(  71,  -10), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S( 129,   22), S( -31,   24), S( -15,   29), S(  -7,   40), S(  17,   32), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S( 116,    0), S(  13,    8), S(  -4,   31), S( -13,   29), S(  61,   20), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S( 136,  -16), S(  24,   15), S( -22,   21), S(   0,    8), S( -28,   -3), S(   0,    0)}
    }
};
constexpr ScorePair PAWN_SHIELD[4][8] = {
    {S(  56,    3), S(  10,   24), S( -12,   14), S(  31,    5), S(  23,    2), S( -51,   48), S( -82,   80), S(   0,    0)},
    {S(  40,   16), S( -30,   28), S(   0,   17), S(  46,    2), S(  36,  -18), S( -16,  -26), S( -10, -109), S(   0,    0)},
    {S(  22,   19), S(   2,   34), S(  -6,  -15), S(  34,  -34), S(  28,  -30), S(  10,    8), S( -34,  -38), S(   0,    0)},
    {S(  12,    6), S( -26,   -9), S(  -1,  -23), S(  28,  -37), S(  13,  -23), S(  37,  -27), S( -46,    7), S(   0,    0)}
};
constexpr ScorePair SAFE_KNIGHT_CHECK = S(  92,   -4);
constexpr ScorePair SAFE_BISHOP_CHECK = S(  71,   20);
constexpr ScorePair SAFE_ROOK_CHECK = S( 112,    0);
constexpr ScorePair SAFE_QUEEN_CHECK = S(  66,   24);
constexpr ScorePair UNSAFE_KNIGHT_CHECK = S(  18,    0);
constexpr ScorePair UNSAFE_BISHOP_CHECK = S(  38,    8);
constexpr ScorePair UNSAFE_ROOK_CHECK = S(  41,   -1);
constexpr ScorePair UNSAFE_QUEEN_CHECK = S(  20,   14);
constexpr ScorePair QUEENLESS_ATTACK = S( -58,  308);
constexpr ScorePair KING_ATTACKER_WEIGHT[4] = {S(  54,  -10), S(  20,    3), S(  24,  -18), S(   6,  -75)};
constexpr ScorePair KING_ATTACKS = S(   6,    0);
constexpr ScorePair WEAK_KING_RING = S(   4,    2);
constexpr ScorePair KING_FLANK_ATTACKS[2] = {S(  13,   -8), S(   3,    1)};
constexpr ScorePair KING_FLANK_DEFENSES[2] = {S(  -7,    0), S(  -5,    4)};
constexpr ScorePair SAFETY_OFFSET = S(  70,    9);

constexpr ScorePair MINOR_BEHIND_PAWN = S(  -1,   14);
constexpr ScorePair KNIGHT_OUTPOST = S(  18,   16);
constexpr ScorePair BISHOP_PAWNS[7] = {S(  18,   -8), S(   7,   13), S(   3,   11), S(   0,    6), S(  -4,    1), S(  -9,   -6), S( -10,  -19)};
constexpr ScorePair BISHOP_PAIR = S(  17,   72);
constexpr ScorePair LONG_DIAG_BISHOP = S(  14,    8);
constexpr ScorePair ROOK_OPEN[2] = {S(  31,   -3), S(  19,    1)};

constexpr ScorePair TEMPO = S(  23,   15);

constexpr ScorePair COMPLEXITY_PAWNS = S(   0,   11);
constexpr ScorePair COMPLEXITY_PAWNS_BOTH_SIDES = S(   0,  186);
constexpr ScorePair COMPLEXITY_PAWN_ENDGAME = S(   0,  204);
constexpr ScorePair COMPLEXITY_OFFSET = S(   0, -270);

#undef S
// clang-format on

}
