#pragma once

#include "../defs.h"

namespace eval
{

#define S(mg, eg) PackedScore(mg, eg)
/*
constexpr PackedScore MATERIAL[6] = {S(  57,  103), S( 278,  438), S( 303,  446), S( 369,  796), S( 817, 1420), S(0, 0)};

constexpr PackedScore PSQT[6][64] = {
	{
		S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
		S(  39,   87), S(  48,   90), S(  90,   91), S(  88,   65), S(  96,   51), S(  54,   72), S(  37,   90), S(  20,   85),
		S(  46,   20), S(  60,   42), S(  77,    5), S(  49,  -13), S(  38,  -11), S(  32,   -2), S(   4,   38), S(   0,   25),
		S(  18,    2), S(  10,   22), S(  27,   -7), S(  16,  -10), S(   3,   -9), S(  -2,   -3), S( -10,   23), S( -13,   15),
		S(   9,  -13), S(   1,   16), S(  13,  -10), S(   8,   -7), S(   1,   -7), S(  -6,   -6), S( -19,   19), S( -18,   -1),
		S(  14,  -21), S(  13,    5), S(  -3,   -2), S(  -4,    1), S( -12,    1), S( -18,   -7), S( -27,   12), S( -29,   -6),
		S(  28,  -25), S(  44,    3), S(  29,   -2), S(   2,   12), S( -14,    6), S( -12,    1), S( -20,   21), S( -21,    1),
		S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
	},
	{
		S( -58,  -86), S( -70,  -18), S( -12,  -20), S(  16,  -13), S( -29,    4), S( -61,    7), S(-106,   15), S( -82,  -40),
		S(   1,  -11), S(  27,   -4), S(  31,   -8), S(  10,    2), S(  12,    5), S(  -3,   11), S(  -6,   19), S( -13,   10),
		S(  23,   -8), S(  14,   -2), S(  58,  -18), S(  35,    0), S(  18,    5), S(  10,    4), S(   2,    6), S(  -6,    6),
		S(  36,    4), S(  35,    9), S(  45,    5), S(  34,   14), S(  30,   15), S(  27,    8), S(  16,    6), S(   7,   17),
		S(  10,   15), S(  21,    9), S(  26,    8), S(  21,   21), S(  23,   15), S(  17,   13), S(  20,    3), S(   1,   13),
		S(   0,    0), S(  14,   -4), S(   4,  -10), S(  15,    8), S(   4,   10), S(  -4,   -5), S(  -4,   -4), S( -14,    0),
		S(   3,   13), S(   6,    0), S(   4,   -6), S(   2,   -2), S(   2,   -2), S(  -9,   -4), S( -12,    2), S( -18,    3),
		S( -11,   -2), S( -12,    2), S(  -2,   -6), S(  -4,    4), S( -10,    0), S( -22,   -6), S( -14,   -3), S( -51,   15),
	},
	{
		S( -36,   -7), S( -36,    5), S( -11,   -4), S( -73,    9), S( -68,   13), S( -52,    1), S( -28,    4), S( -14,   11),
		S( -27,   -7), S( -40,   10), S( -11,   -2), S(  -5,   -4), S( -24,    5), S(  -2,   -5), S(  -6,   -2), S(  -9,   -5),
		S(  23,   10), S(  16,    0), S(  44,    5), S(   8,    3), S(  13,   -3), S(   5,    3), S(   8,    4), S(   4,    5),
		S(  -1,    5), S(  11,    7), S(   9,   10), S(  19,   13), S(  17,   17), S(  12,    5), S(   3,   11), S(  -8,    7),
		S(  18,   -8), S(   4,    6), S(   9,    4), S(  10,   11), S(  16,   10), S(  -3,   12), S(  -1,    6), S(   0,    2),
		S(  16,   -9), S(  19,   -9), S(  10,   -3), S(   4,    7), S(  -5,    5), S(   4,    4), S(   7,    3), S(  -1,   -5),
		S(  23,  -13), S(  29,  -17), S(  18,  -12), S(   2,   -3), S(  -5,   -1), S(   7,  -17), S(   5,  -15), S(  15,   -4),
		S(  33,  -27), S(  21,  -20), S(  -5,    4), S(  11,   -5), S(  -2,   -4), S(   2,    5), S(  12,   -2), S(  10,   -7),
	},
	{
		S(   9,   11), S( -18,   34), S(  -8,   28), S( -10,   15), S( -27,   25), S( -28,   32), S( -14,   23), S( -13,   23),
		S(  24,    2), S(  29,    8), S(  18,   13), S(   4,   13), S(  17,   13), S(  -1,   27), S(  -4,   24), S(  -3,   16),
		S(  14,    0), S(  42,    1), S(  27,    3), S(  21,    7), S(   1,   13), S(  -3,   25), S(  10,   18), S( -11,   22),
		S(   6,    8), S(   7,   14), S(  16,   10), S(  10,    5), S(   2,   13), S(   5,   18), S(   4,   19), S(  -8,   20),
		S(  -4,   -3), S(  15,    1), S(   0,    5), S(   7,    1), S(  -4,    5), S(  -8,    9), S( -11,   10), S( -14,    9),
		S(   8,  -27), S(  19,  -27), S(   3,  -17), S(   2,  -16), S( -10,   -8), S( -15,  -10), S( -13,  -10), S( -18,  -10),
		S(  -9,  -31), S(  18,  -36), S(   6,  -26), S(   2,  -23), S(  -4,  -19), S(  -5,  -17), S( -14,  -13), S( -17,  -19),
		S( -16,  -29), S( -10,  -15), S(  -1,  -21), S(   4,  -27), S(  -2,  -24), S(  -9,  -17), S(  -8,  -20), S(  -9,  -16),
	},
	{
		S(   3,  -20), S(  36,  -40), S(  -6,   16), S(  -6,    3), S(   8,  -13), S( -17,    3), S( -46,    8), S( -24,   -1),
		S(  39,   -1), S(  -1,    7), S(  -1,   21), S( -31,   44), S( -28,   36), S(  -9,    7), S(  -9,  -10), S(   1,   -7),
		S(  17,   -1), S(  21,   -6), S(   7,   15), S(  -3,   20), S(   1,   19), S(   4,   15), S(   5,   -8), S(  14,   -5),
		S(  15,   15), S(  12,   35), S(  10,   11), S(  -7,   28), S(  -6,   27), S(   5,    7), S(   5,   12), S(   3,    9),
		S(  15,    9), S(  20,   14), S(   7,   21), S(   3,   25), S(  -4,   26), S(  -2,   19), S(   3,   17), S(  -1,   10),
		S(  14,  -19), S(  14,   -5), S(   4,    7), S(  -6,   21), S(  -7,   14), S(  -7,   17), S(   2,   -1), S(   3,  -10),
		S(  13,  -51), S(  18,  -67), S(   9,  -38), S(   4,   -3), S(   1,    2), S(   3,  -14), S(   2,  -19), S(   8,  -32),
		S(   3,  -46), S( -14,  -45), S( -18,  -18), S(  -7,  -16), S(  -7,  -10), S( -11,   -5), S( -14,  -12), S( -14,   -8),
	},
	{
		S(   9,  -61), S( -11,    6), S(  -5,   -6), S(  16,   -7), S(   2,   -4), S(   2,   -4), S(   2,   -4), S(   2,   -4),
		S( -81,   48), S( -13,   58), S(  12,   42), S(  79,    7), S(   2,   -4), S(   2,   -4), S(   2,   -4), S(   2,   -4),
		S( -55,   34), S(  18,   41), S(  54,   29), S(  62,   19), S(   2,   -4), S(   2,   -4), S(   2,   -4), S(   2,   -4),
		S( -70,   21), S( -14,   25), S(   3,   25), S(   4,   12), S(   2,   -4), S(   2,   -4), S(   2,   -4), S(   2,   -4),
		S( -89,   14), S( -28,   16), S(  -4,   10), S( -15,    7), S(   2,   -4), S(   2,   -4), S(   2,   -4), S(   2,   -4),
		S( -49,    4), S(   6,   -1), S(  -3,    1), S(   1,   -3), S(   2,   -4), S(   2,   -4), S(   2,   -4), S(   2,   -4),
		S(  14,  -18), S(  29,  -12), S(  10,   -7), S(  -3,  -11), S(   2,   -4), S(   2,   -4), S(   2,   -4), S(   2,   -4),
		S(  11,  -51), S(  15,  -26), S( -16,  -11), S( -10,  -29), S(   2,   -4), S(   2,   -4), S(   2,   -4), S(   2,   -4),
	},
};
*/

constexpr PackedScore MATERIAL[7] = {
    S(0, 0), S(63, 119), S(267, 337), S(301, 360), S(381, 631), S(769, 1197), S(0, 0)
};

constexpr PackedScore PSQT[7][64] = {
    // none
    {},
    // pawn
    {
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  73,  163), S(  95,  155), S(  73,  156), S( 102,  107), S(  86,  103), S(  69,  114), S(   3,  159), S( -22,  173),
        S(  -5,  104), S(   9,  112), S(  41,   78), S(  47,   57), S(  50,   49), S(  71,   34), S(  51,   81), S(   9,   79),
        S( -20,   36), S(   4,   25), S(   8,    5), S(  10,   -3), S(  31,  -12), S(  22,   -9), S(  26,   10), S(   3,   10),
        S( -30,   11), S(  -3,    8), S(  -4,   -9), S(  12,  -12), S(  12,  -14), S(   4,  -12), S(  13,   -1), S(  -9,   -8),
        S( -32,    5), S(  -7,    7), S(  -7,  -10), S(  -6,    2), S(   8,   -6), S(  -3,   -8), S(  27,   -3), S(  -2,  -12),
        S( -31,   10), S(  -7,   11), S( -11,   -3), S( -21,    3), S(  -1,    8), S(  13,   -3), S(  36,   -4), S( -10,  -11),
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
    },
    // knight
    {
        S(-142,  -75), S(-110,  -15), S( -46,   -1), S( -14,   -9), S(  17,   -6), S( -39,  -29), S( -92,   -8), S( -87,  -97),
        S( -11,  -22), S(   6,   -1), S(  31,    7), S(  48,    6), S(  32,   -1), S(  93,  -16), S(   5,   -5), S(  28,  -37),
        S(   4,   -6), S(  37,    9), S(  54,   25), S(  66,   26), S( 102,   11), S( 103,    6), S(  60,   -1), S(  29,  -16),
        S(   0,    5), S(  13,   26), S(  37,   37), S(  57,   39), S(  40,   40), S(  64,   34), S(  23,   25), S(  33,   -2),
        S( -13,    6), S(   2,   15), S(  16,   39), S(  17,   39), S(  26,   42), S(  21,   32), S(  20,   18), S(  -3,   -2),
        S( -32,   -9), S( -10,    9), S(   4,   19), S(   7,   32), S(  18,   31), S(   8,   15), S(  11,    4), S( -16,   -7),
        S( -45,  -18), S( -33,   -2), S( -17,    6), S(  -5,   10), S(  -4,    9), S(  -2,    4), S( -15,  -11), S( -18,   -8),
        S( -87,  -25), S( -34,  -38), S( -47,   -9), S( -33,   -6), S( -29,   -5), S( -16,  -15), S( -32,  -31), S( -58,  -37),
    },
    // bishop
    {
        S( -26,   -9), S( -44,    2), S( -33,   -1), S( -74,   13), S( -63,    6), S( -45,   -3), S( -16,  -10), S( -53,  -12),
        S(  -9,  -22), S(  14,   -3), S(   8,    1), S(  -9,    4), S(  19,   -5), S(  19,   -7), S(  11,    1), S(   0,  -24),
        S(   0,    7), S(  23,    1), S(  24,   12), S(  47,    1), S(  33,    6), S(  64,    7), S(  41,    0), S(  29,    0),
        S(  -8,    2), S(   6,   18), S(  27,   13), S(  37,   26), S(  34,   19), S(  30,   16), S(   6,   15), S(  -8,    2),
        S( -14,   -2), S(  -2,   15), S(   4,   23), S(  24,   19), S(  21,   19), S(   7,   18), S(  -1,   13), S(  -6,  -12),
        S(  -4,   -2), S(   3,    8), S(   3,   16), S(   6,   15), S(   7,   19), S(   2,   16), S(   4,   -1), S(   8,  -12),
        S(  -2,   -8), S(  -1,   -7), S(  10,   -9), S( -11,    6), S(  -4,    8), S(   9,   -4), S(  15,   -2), S(   2,  -27),
        S( -23,  -24), S(  -4,   -7), S( -19,  -26), S( -28,   -5), S( -23,   -8), S( -24,   -8), S(   0,  -22), S( -13,  -37),
    },
    // rook
    {
        S(  29,    9), S(  21,   16), S(  28,   25), S(  33,   21), S(  51,   12), S(  67,    2), S(  50,    4), S(  69,   -1),
        S(  11,    9), S(  10,   21), S(  29,   25), S(  49,   16), S(  35,   16), S(  63,    2), S(  50,   -2), S(  80,  -15),
        S(  -9,    9), S(  11,   12), S(  13,   14), S(  16,   12), S(  44,   -1), S(  45,   -7), S(  82,  -16), S(  60,  -20),
        S( -25,   11), S( -12,   10), S(  -9,   19), S(  -1,   15), S(   5,    0), S(   5,   -5), S(  13,   -9), S(  16,  -15),
        S( -43,    4), S( -41,    9), S( -31,   11), S( -19,   10), S( -19,    6), S( -34,    4), S( -11,   -9), S( -19,  -14),
        S( -50,    0), S( -41,    0), S( -33,   -1), S( -33,    4), S( -28,    0), S( -30,   -8), S(   3,  -28), S( -18,  -27),
        S( -53,   -5), S( -41,   -1), S( -26,   -1), S( -30,    1), S( -25,   -7), S( -24,  -11), S(  -7,  -20), S( -36,  -15),
        S( -34,  -10), S( -33,    0), S( -24,    7), S( -18,    6), S( -14,   -2), S( -24,   -7), S( -10,  -11), S( -33,  -18),
    },
    // queen
    {
        S( -36,    2), S( -28,   15), S(   2,   32), S(  35,   18), S(  35,   15), S(  40,    8), S(  58,  -35), S(   5,   -4),
        S(   1,  -33), S( -21,    9), S( -14,   43), S( -21,   60), S( -16,   78), S(  21,   37), S(   1,   21), S(  44,   -3),
        S(   1,  -22), S(  -1,   -5), S(  -3,   37), S(  13,   38), S(  18,   52), S(  59,   32), S(  60,   -4), S(  57,  -17),
        S( -15,  -12), S( -11,   11), S(  -7,   25), S(  -8,   49), S(  -6,   61), S(   7,   47), S(   6,   33), S(  13,   12),
        S( -13,  -15), S( -15,   14), S( -17,   23), S(  -8,   42), S(  -9,   41), S( -10,   32), S(   1,   12), S(   4,   -1),
        S( -16,  -26), S(  -9,  -10), S( -14,   13), S( -15,   11), S( -12,   15), S(  -5,    6), S(   7,  -16), S(   1,  -28),
        S( -18,  -31), S( -13,  -27), S(  -2,  -30), S(  -3,  -20), S(  -5,  -17), S(   4,  -43), S(  10,  -71), S(  21, -101),
        S( -20,  -38), S( -30,  -30), S( -23,  -26), S(  -8,  -35), S( -16,  -31), S( -29,  -32), S(  -7,  -62), S( -14,  -62),
    },
    // king
    {
        S(  64, -103), S(  40,  -53), S(  73,  -44), S( -68,    6), S( -12,  -14), S(  38,  -11), S(  87,  -19), S( 194, -126),
        S( -53,  -11), S( -14,   18), S( -57,   31), S(  50,   12), S(  -3,   33), S(   3,   45), S(  42,   34), S(  21,    4),
        S( -74,    5), S(  28,   23), S( -39,   42), S( -58,   53), S( -17,   52), S(  58,   44), S(  38,   43), S(   2,   14),
        S( -42,   -5), S( -52,   29), S( -68,   46), S(-112,   59), S( -99,   58), S( -62,   53), S( -62,   44), S( -85,   19),
        S( -36,  -17), S( -45,   14), S( -75,   37), S(-102,   52), S( -99,   51), S( -63,   38), S( -67,   27), S( -90,   10),
        S(   8,  -27), S(  23,   -4), S( -33,   17), S( -45,   29), S( -39,   28), S( -37,   20), S(   9,    0), S(  -8,  -12),
        S(  95,  -49), S(  55,  -22), S(  41,   -9), S(   7,    1), S(   6,    5), S(  24,   -5), S(  71,  -23), S(  80,  -41),
        S(  91,  -83), S( 114,  -64), S(  88,  -45), S( -11,  -27), S(  53,  -52), S(  14,  -29), S(  95,  -55), S(  96,  -83),
    },
};

constexpr PackedScore MOBILITY[4][28] = {
	{S( -11,  -16), S( -38,  -65), S( -16,  -31), S(  -8,   -6), S(   2,    7), S(   5,   19), S(  13,   27), S(  21,   34), S(  29,   34), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -19,  -30), S( -50,  -92), S( -29,  -37), S( -23,  -15), S( -12,   -3), S(  -5,    6), S(  -1,   17), S(   4,   21), S(   6,   27), S(  11,   28), S(  13,   30), S(  25,   21), S(  28,   22), S(  44,    5), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -28,  -42), S(  14,  -77), S( -24,  -43), S( -15,  -27), S(  -9,  -21), S(  -4,   -6), S(  -1,   -1), S(  -6,   10), S(  -1,   13), S(   2,   19), S(   6,   25), S(   7,   34), S(   9,   39), S(  16,   42), S(  22,   39), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -37,   13), S( -49,  -82), S( -86,  -89), S( -59, -274), S( -68, -107), S( -29,  -39), S( -21,  -14), S( -15,   -8), S(  -8,   -5), S(  -7,   18), S(  -5,   27), S(  -2,   36), S(   0,   42), S(   3,   45), S(   6,   49), S(   8,   50), S(  10,   53), S(  10,   57), S(  10,   59), S(  12,   60), S(  19,   53), S(  27,   36), S(  34,   30), S(  47,   13), S(  59,    0), S(  49,    9), S(  46,   -5), S(  25,  -27)}
};

constexpr PackedScore THREAT_BY_PAWN[6] = {S(   7,  -14), S(  61,   34), S(  61,   65), S(  73,   33), S(  70,   -6), S(   0,    0)};
constexpr PackedScore THREAT_BY_KNIGHT[2][6] = {
	{S(   6,   31), S(  29,   33), S(  35,   44), S(  72,   10), S(  42,  -22), S(   0,    0)},
	{S(  -4,   11), S(  14,   47), S(  29,   34), S(  60,   34), S(  51,    2), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_BISHOP[2][6] = {
	{S(   4,   36), S(  46,   29), S(  -4,   29), S(  70,   13), S(  65,   56), S(   0,    0)},
	{S(   1,    9), S(  21,   25), S( -17,    0), S(  41,   46), S(  44,  133), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_ROOK[2][6] = {
	{S(  -1,   44), S(  26,   58), S(  26,   56), S(  17,  -53), S(  72,    6), S(   0,    0)},
	{S(  -5,    8), S(   6,   19), S(  17,    6), S(  13,  -88), S(  57,   55), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_QUEEN[2][6] = {
	{S(   9,   10), S(  32,   17), S(  16,   49), S(  18,    4), S(  11,  -61), S( 106,   -1)},
	{S(  -1,   13), S(   2,    9), S(  -4,   22), S(  -5,    5), S( -17,  -68), S(  99,   64)}
};
constexpr PackedScore THREAT_BY_KING[6] = {S( -11,   45), S(  26,   46), S(  24,   45), S(  90,   16), S(   0,    0), S(   0,    0)};
constexpr PackedScore PUSH_THREAT = S(  18,   19);

constexpr PackedScore ISOLATED_PAWN[8] = {S(  -7,   11), S(  -1,  -15), S( -10,   -6), S(  -8,  -13), S( -10,  -11), S(  -6,   -4), S(   0,  -13), S( -11,   11)};
constexpr PackedScore PAWN_PHALANX[8] = {S(   0,    0), S(   4,   -4), S(  13,    4), S(  17,   16), S(  44,   59), S( 107,  211), S( -32,  376), S(   0,    0)};
constexpr PackedScore DEFENDED_PAWN[8] = {S(   0,    0), S(   0,    0), S(  19,   10), S(  12,    8), S(  13,   19), S(  21,   57), S( 160,   51), S(   0,    0)};

constexpr PackedScore PASSED_PAWN[2][2][8] = {
	{
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -29,  -39), S( -17,   26), S( -35,  160), S(  24,  247), S(   0,    0)},
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -18,  -54), S(  12,  -27), S(  13,   13), S(  71,   26), S(   0,    0)}
	},
	{
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -28,  -57), S(  -3,  -24), S(  12,    4), S(  69,   -8), S(   0,    0)},
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -29,  -64), S(  -2,  -38), S(  -7,  -24), S(  -6,  -48), S(   0,    0)}
	}
};
constexpr PackedScore OUR_PASSER_PROXIMITY[8] = {S(   0,    0), S(  21,   91), S(  -7,   69), S(   1,   40), S(   5,   28), S(   9,   19), S(  16,   18), S(  10,   16)};
constexpr PackedScore THEIR_PASSER_PROXIMITY[8] = {S(   0,    0), S( -52,   16), S(  21,   -3), S(  10,   27), S(  14,   47), S(   9,   81), S(  16,   80), S(  16,   69)};

constexpr PackedScore PAWN_STORM[3][8] = {
	{S(  52,  -29), S(  26,  -16), S(  17,    1), S(   9,    3), S(   1,    5), S(  -4,    8), S(  -4,    8), S(   6,  -15)},
	{S(   0,    0), S(  17,  -23), S(  21,    8), S(   5,    3), S(  -5,    6), S(  -9,   12), S(  -9,   11), S(   4,  -10)},
	{S(  12,    2), S(   0,    9), S(   6,   12), S(   5,   11), S(   4,    9), S(   3,   10), S(   3,    8), S(  -8,   -7)}
};
constexpr PackedScore PAWN_SHIELD[3][8] = {
	{S(  13,  -16), S(   0,   -9), S(  -4,  -10), S(  -6,   -7), S(   5,   -8), S(  22,  -26), S(  40,  -20), S(  -9,    9)},
	{S(   0,    0), S(  -8,    1), S( -11,    0), S(  -1,    1), S(  11,   -2), S(  33,  -25), S(  66,  -43), S(   6,    8)},
	{S(  -5,   -4), S(  -4,   -2), S(   0,   -2), S(   1,    2), S(   3,    4), S(   4,   -1), S(  18,   -7), S(  -6,   11)}
};
constexpr PackedScore SAFE_KNIGHT_CHECK = S(  78,   -2);
constexpr PackedScore SAFE_BISHOP_CHECK = S(  22,   12);
constexpr PackedScore SAFE_ROOK_CHECK = S(  57,    5);
constexpr PackedScore SAFE_QUEEN_CHECK = S(  20,   23);
constexpr PackedScore UNSAFE_KNIGHT_CHECK = S(   5,    2);
constexpr PackedScore UNSAFE_BISHOP_CHECK = S(  11,   12);
constexpr PackedScore UNSAFE_ROOK_CHECK = S(  19,    0);
constexpr PackedScore UNSAFE_QUEEN_CHECK = S(   4,   13);
constexpr PackedScore KING_ATTACKER_WEIGHT[4] = {S(  17,    2), S(  13,    4), S(  16,  -13), S(   4,    1)};
constexpr PackedScore KING_ATTACKS[14] = {S( -50,   30), S( -57,   22), S( -64,   17), S( -67,   20), S( -64,   16), S( -55,   11), S( -38,    4), S( -17,   -6), S(  21,  -24), S(  44,  -24), S(  73,  -33), S(  84,   -3), S( 117,  -80), S(  86,   44)};

constexpr PackedScore KNIGHT_OUTPOST = S(  25,   19);
constexpr PackedScore BISHOP_PAWNS[7] = {S(   5,   25), S(   6,   22), S(   4,   14), S(   1,    5), S(  -3,   -5), S(  -5,  -20), S( -10,  -35)};
constexpr PackedScore BISHOP_PAIR = S(  18,   62);
constexpr PackedScore ROOK_OPEN[2] = {S(  23,    5), S(  13,    8)};

constexpr PackedScore TEMPO = S(  29,   35);

constexpr PackedScore COMPLEXITY_PAWNS = S(   1,    8);
constexpr PackedScore COMPLEXITY_PASSERS = S(  -1,    1);
constexpr PackedScore COMPLEXITY_PAWNS_BOTH_SIDES = S(   0,   73);
constexpr PackedScore COMPLEXITY_OFFSET = S(   0, -128);

#undef S


}