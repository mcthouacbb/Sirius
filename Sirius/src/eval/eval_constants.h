#pragma once

#include "../defs.h"

namespace eval
{

#define S(mg, eg) PackedScore(mg, eg)

constexpr PackedScore MATERIAL[6] = {S(  49,   78), S( 278,  341), S( 282,  356), S( 386,  626), S( 816, 1187), S(0, 0)};

constexpr PackedScore PSQT[6][64] = {
	{
		S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
		S(  36,  103), S(  49,   99), S(  30,  100), S(  66,   50), S(  45,   53), S(  32,   59), S( -31,  109), S( -35,  105),
		S(  13,   48), S(   7,   63), S(  31,   18), S(  39,  -17), S(  45,  -20), S(  76,   -7), S(  37,   44), S(  22,   33),
		S(  -7,   25), S(  -1,   27), S(   4,    4), S(   3,   -9), S(  23,   -9), S(  25,  -10), S(   9,   19), S(   9,    2),
		S( -15,    4), S( -10,   18), S(  -4,   -4), S(   4,   -8), S(   6,   -6), S(  11,   -9), S(   2,   10), S(  -4,  -12),
		S( -24,   -4), S( -16,    7), S( -12,   -6), S(  -9,   -3), S(   0,   -1), S(  -4,   -6), S(   5,    1), S( -10,  -18),
		S( -13,    1), S(  -5,   14), S(  -2,    1), S(  -3,   -2), S(   5,    9), S(  29,   -5), S(  22,    4), S(  -3,  -16),
		S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
	},
	{
		S(-110,  -31), S(-104,   -7), S( -66,    6), S( -18,   -9), S(  14,   -6), S( -38,  -25), S( -82,   -5), S( -77,  -50),
		S( -20,   -1), S(  -8,    6), S(   4,    2), S(  26,   -1), S(  25,   -9), S(  54,  -21), S(  13,   -4), S(  20,  -20),
		S(  -2,   -4), S(  17,    1), S(  25,    9), S(  45,    8), S(  61,   -2), S(  91,  -21), S(  35,  -10), S(  43,  -19),
		S(   5,   10), S(  13,    9), S(  32,   16), S(  52,   15), S(  49,   13), S(  53,    9), S(  32,    5), S(  41,   -3),
		S(  -5,   15), S(   6,    4), S(  14,   19), S(  24,   20), S(  23,   24), S(  24,    9), S(  24,    1), S(   7,   11),
		S( -22,    1), S( -10,    1), S(  -3,    5), S(   0,   17), S(  12,   15), S(   1,    0), S(  10,   -3), S(  -6,    3),
		S( -26,    4), S( -23,    8), S( -14,    0), S(   1,    2), S(  -1,    1), S(  -2,   -3), S(  -2,   -3), S(  -6,   17),
		S( -58,   14), S( -18,   -4), S( -33,   -2), S( -21,    0), S( -17,    4), S(  -9,   -8), S( -15,    3), S( -32,   12),
	},
	{
		S( -19,    5), S( -48,   10), S( -39,    3), S( -75,   11), S( -60,    7), S( -56,    0), S( -25,    1), S( -48,   -2),
		S( -16,   -7), S( -17,   -2), S( -15,   -3), S( -17,   -1), S(  -4,   -9), S(  -4,   -9), S( -27,    2), S( -12,   -6),
		S(   2,    7), S(  11,   -1), S(   2,    1), S(  15,   -7), S(  12,   -4), S(  38,    0), S(  31,   -3), S(  27,    7),
		S( -10,    5), S(  -1,    9), S(   5,    2), S(  18,   10), S(   7,    3), S(  12,    6), S(   0,    7), S(   1,    2),
		S(  -2,    4), S(  -9,    7), S(   2,    5), S(   9,    6), S(  10,    2), S(   1,    1), S(  -4,    4), S(   9,   -5),
		S(   2,    4), S(  13,    2), S(   4,    1), S(  10,    3), S(  10,    7), S(   7,    0), S(  11,   -4), S(  17,   -3),
		S(  24,    6), S(   9,  -11), S(  20,  -13), S(   3,   -3), S(   9,   -1), S(  16,   -9), S(  28,  -10), S(  22,   -7),
		S(  12,   -4), S(  26,    4), S(  10,   -3), S(  -2,   -1), S(   5,   -5), S(   2,    7), S(  18,  -10), S(  28,  -16),
	},
	{
		S( -15,   19), S( -16,   21), S( -18,   28), S( -22,   25), S(  -7,   17), S(  15,   12), S(  12,   15), S(  28,    9),
		S( -12,   12), S(  -5,   18), S(   9,   18), S(  26,    6), S(  14,    7), S(  31,    1), S(  38,   -2), S(  39,   -5),
		S( -18,   10), S(  14,    5), S(   8,    7), S(  13,    0), S(  36,   -9), S(  54,  -18), S(  75,  -17), S(  38,  -16),
		S( -18,   13), S(  -2,    6), S(  -3,   11), S(   1,    5), S(   8,   -7), S(  19,  -13), S(  20,   -9), S(  13,  -12),
		S( -27,    8), S( -27,    9), S( -19,    7), S( -11,    4), S( -10,    1), S( -14,   -2), S(   7,  -11), S(  -8,  -11),
		S( -31,    6), S( -26,    1), S( -22,   -1), S( -17,    0), S(  -9,   -5), S(  -3,  -13), S(  21,  -28), S(   3,  -24),
		S( -31,   -1), S( -25,    0), S( -15,   -2), S( -13,   -4), S(  -7,  -11), S(  -2,  -16), S(   7,  -22), S( -22,  -13),
		S( -14,    4), S( -13,    0), S(  -9,    4), S(  -1,   -3), S(   5,  -10), S(   2,   -5), S(  -1,   -9), S( -13,   -6),
	},
	{
		S( -22,   -1), S( -35,   12), S( -21,   34), S(   4,   26), S(  -6,   29), S(   4,   17), S(  65,  -41), S(  11,   -3),
		S( -12,  -13), S( -25,    0), S( -24,   35), S( -34,   54), S( -30,   68), S(   3,   29), S(  -4,    9), S(  36,    8),
		S(   1,  -12), S(  -3,   -4), S(  -9,   24), S(   0,   31), S(  11,   37), S(  25,    8), S(  50,  -13), S(  41,   -4),
		S( -10,   -1), S(  -6,   10), S(  -8,   17), S( -11,   33), S( -17,   34), S(   9,   22), S(  11,   32), S(  21,   10),
		S(  -4,   -5), S( -13,   19), S( -10,   22), S( -13,   26), S(  -7,   29), S(  -3,   23), S(   4,   15), S(  15,    8),
		S(  -6,  -18), S(  -3,    0), S( -12,    9), S(  -8,   14), S(  -6,   19), S(   0,    6), S(   8,  -11), S(  12,  -21),
		S(   0,  -26), S(  -6,  -28), S(   3,  -23), S(   5,  -16), S(   3,  -15), S(   9,  -39), S(  14,  -68), S(  27,  -83),
		S(  -9,  -33), S(  -4,  -28), S(  -1,  -24), S(   4,  -12), S(   3,  -31), S( -10,  -34), S(  -1,  -50), S(   5,  -50),
	},
	{
		S(  47,  -58), S(  65,  -32), S( 120,  -38), S(  48,  -14), S(  61,  -34), S(   9,   -5), S(  35,    7), S( 108,  -73),
		S(-113,   29), S(   5,   26), S(  24,   13), S( 151,  -20), S(  95,  -12), S(  41,   27), S(  19,   42), S( -66,   45),
		S(-125,   27), S(  30,   20), S(  31,   10), S(  50,    0), S(  89,   -5), S(  96,   11), S(  -3,   41), S( -65,   33),
		S( -75,    6), S( -41,   16), S( -13,   12), S(  -5,    2), S( -17,   -3), S( -33,   18), S( -79,   31), S(-151,   31),
		S( -80,   -3), S( -43,    8), S( -38,   11), S( -33,    6), S( -46,    6), S( -53,   13), S( -85,   21), S(-149,   22),
		S( -37,   -5), S(   2,    4), S( -28,   10), S( -14,    5), S( -19,    6), S( -39,   15), S( -26,   12), S( -63,   12),
		S(  48,  -19), S(  28,   -1), S(  21,   -1), S(   7,   -6), S(  -1,    0), S(   6,    4), S(  26,    0), S(  31,  -12),
		S(  36,  -45), S(  64,  -32), S(  44,  -21), S( -12,  -18), S(  28,  -32), S( -12,   -4), S(  46,  -23), S(  47,  -49),
	},
};

constexpr PackedScore MOBILITY[4][28] = {
	{S(-121, -100), S( -32,  -53), S( -10,  -25), S(  -1,   -3), S(   8,    7), S(  10,   17), S(  17,   21), S(  26,   23), S(  34,   21), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -28, -159), S( -47,  -84), S( -18,  -39), S(  -9,  -17), S(   4,   -5), S(  11,    4), S(  18,   14), S(  24,   20), S(  28,   26), S(  33,   29), S(  35,   34), S(  46,   29), S(  50,   34), S(  60,   25), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -52,  -97), S( -38,  -85), S( -22,  -33), S( -14,  -18), S(  -9,  -10), S(  -6,   -3), S(  -4,    2), S(  -1,    7), S(   1,    8), S(   6,   10), S(  10,   13), S(  13,   16), S(  18,   17), S(  21,   19), S(  20,   18), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S(   0,    0), S(   0,    0), S(-120,  -26), S( -35, -208), S( -46,  -97), S( -13,  -87), S(  -9,  -62), S(  -6,  -43), S(  -2,  -27), S(  -1,   -4), S(   3,    1), S(   7,    6), S(  10,   13), S(  15,   11), S(  17,   14), S(  19,   19), S(  20,   20), S(  21,   25), S(  23,   27), S(  25,   26), S(  32,   25), S(  43,    8), S(  57,    2), S(  71,  -13), S(  78,  -15), S( 186,  -77), S(  65,  -25), S(  27,  -26)}
};

constexpr PackedScore THREATS[6][6] = {
	{S(  19,   -9), S(  42,    6), S(  43,   35), S(  62,  -16), S(  44,  -45), S(   0,    0)},
	{S(  -6,    6), S(   0,    0), S(  21,   20), S(  46,  -14), S(  19,  -46), S(   0,    0)},
	{S(   3,   14), S(  21,   20), S(   0,    0), S(  30,   -1), S(  35,   56), S(   0,    0)},
	{S(  -8,   11), S(   3,   13), S(  11,   10), S(   0,    0), S(  42,  -10), S(   0,    0)},
	{S(  -2,    7), S(   1,    7), S(  -2,   22), S(   2,   -6), S(   0,    0), S(   0,    0)},
	{S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)}
};

constexpr PackedScore PASSED_PAWN[8] = {S(   0,    0), S(  -3,    4), S(  -7,   13), S(  -8,   36), S(  11,   61), S(   6,  119), S(  47,  109), S(   0,    0)};
constexpr PackedScore ISOLATED_PAWN[8] = {S(   0,    4), S(  -3,  -11), S( -11,   -5), S(  -7,  -12), S( -11,  -13), S(  -7,   -3), S(  -1,  -11), S(  -7,    9)};
constexpr PackedScore PAWN_PHALANX[8] = {S(   0,    0), S(   5,   -2), S(  13,    6), S(  23,   17), S(  49,   56), S( 129,  185), S(-129,  409), S(   0,    0)};
constexpr PackedScore DEFENDED_PAWN[8] = {S(   0,    0), S(   0,    0), S(  18,   11), S(  12,    8), S(  12,   15), S(  26,   36), S( 155,   29), S(   0,    0)};

constexpr PackedScore PAWN_STORM[3][8] = {
	{S(  23,  -36), S(  21,  -20), S(  19,   -5), S(  10,    1), S(   5,    3), S(   1,    7), S(   2,    6), S(  11,  -12)},
	{S(   0,    0), S( -48,  -33), S(  30,    0), S(   1,    4), S(  -5,   11), S(  -7,   15), S(  -9,   16), S(   7,   -4)},
	{S(  -3,   -1), S(  -2,    6), S(   6,    9), S(   3,   10), S(   5,    9), S(   5,    9), S(   3,    8), S(  -9,   -3)}
};
constexpr PackedScore PAWN_SHIELD[3][8] = {
	{S(   0,   16), S(  10,   10), S(   7,   13), S(   2,   10), S( -11,   10), S( -13,   18), S( -21,   19), S( -12,    2)},
	{S(   0,    0), S(  18,    1), S(  12,    6), S(  -5,    1), S( -18,    3), S( -28,   15), S( -52,   25), S( -20,   -3)},
	{S(   2,   11), S(   2,    8), S(   0,    7), S(  -1,    1), S(  -6,   -2), S(  -4,   -6), S( -14,  -11), S(   6,   -7)}
};
constexpr PackedScore SAFE_KNIGHT_CHECK = S(  80,   -5);
constexpr PackedScore SAFE_BISHOP_CHECK = S(  19,   -7);
constexpr PackedScore SAFE_ROOK_CHECK = S(  58,   -6);
constexpr PackedScore SAFE_QUEEN_CHECK = S(  34,   12);

constexpr PackedScore BISHOP_PAIR = S(  21,   59);
constexpr PackedScore ROOK_OPEN[2] = {S(  27,    9), S(  15,    8)};

#undef S


}
