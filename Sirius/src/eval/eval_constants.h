#pragma once

#include "../defs.h"

namespace eval
{

#define S(mg, eg) PackedScore(mg, eg)

constexpr PackedScore MATERIAL[6] = {S(  61,  132), S( 298,  431), S( 317,  440), S( 393,  786), S( 739, 1599), S(0, 0)};

constexpr PackedScore PSQT[6][64] = {
    {
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  57,   74), S(  26,   93), S(  28,   98), S(  57,   73), S(  70,   64), S(  46,   82), S(  34,  100), S(  58,   82),
        S(  19,    4), S(  -6,   36), S(   9,   -1), S(  18,  -24), S(  11,  -21), S(   8,  -10), S( -16,   27), S(   1,   12),
        S(  13,    5), S(  -4,   11), S(  15,  -21), S(  11,  -25), S(   0,  -24), S(   0,  -15), S(  -9,   10), S(  -9,    7),
        S(   6,   -3), S(  -5,   14), S(  14,  -27), S(  16,  -18), S(   9,  -17), S(  -1,  -13), S( -15,   11), S( -12,   -2),
        S(  -2,   -6), S(   8,    7), S(   4,   -5), S(   1,   -3), S(  -8,   -3), S(  -9,   -9), S( -23,   10), S( -24,   -4),
        S(   8,   -7), S(  25,    9), S(  32,  130), S(  10,   -1), S(  -2,  -10), S(  -5,   -7), S( -15,   13), S( -15,    0),
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
    },
    {
        S( -56, -100), S( -65,  -27), S( -21,  -16), S(   8,  -10), S( -22,    2), S( -52,    5), S( -90,    4), S( -76,  -57),
        S( -11,  -13), S(  18,    3), S(  28,    0), S(   1,   10), S(   9,   12), S(   9,   12), S(   5,   13), S(  -4,    0),
        S(   5,   -5), S(  -6,    7), S(  35,   -4), S(  27,   14), S(  14,   22), S(  18,   14), S(  10,    4), S(  -2,    2),
        S(  29,    3), S(  26,   14), S(  39,   17), S(  25,   24), S(  26,   26), S(  34,   12), S(  25,    3), S(  17,    9),
        S(   2,   17), S(   7,   17), S(  14,   20), S(  13,   28), S(  16,   21), S(  19,   17), S(  26,    1), S(  13,    2),
        S(   6,   -2), S(   8,    4), S(   8,    3), S(   8,   15), S(  -1,   15), S(   2,   -1), S(   7,   -6), S(  -3,   -7),
        S(   0,   -2), S(   2,   -5), S(   0,   -4), S(   4,    0), S(   0,    0), S(  -3,   -4), S(  -2,   -7), S( -12,   -8),
        S( -13,  -17), S( -14,  -10), S(  -5,  -11), S(  -2,    1), S(  -7,   -2), S( -17,   -9), S(  -9,  -15), S( -39,   -8),
    },
    {
        S( -37,  -18), S( -21,    4), S(   1,   -5), S( -64,    8), S( -60,   17), S( -48,    2), S( -28,    6), S( -27,    4),
        S( -20,   -9), S( -39,    3), S(  -8,    0), S(  -7,    2), S( -18,   11), S(   3,   -2), S( -10,   -7), S(   0,   -9),
        S(  12,   12), S(   2,    7), S(  24,    6), S(   7,   11), S(  17,    5), S(   3,   -2), S(  12,    5), S(   9,   -1),
        S(  -9,    5), S(   3,   12), S(   3,   17), S(  18,   19), S(  24,   23), S(  21,    8), S(   7,   10), S(  -2,    1),
        S(  11,   -4), S( -10,   16), S(   2,   15), S(  10,   17), S(  17,   14), S(   4,   13), S(   5,    5), S(   6,   -3),
        S(  13,   -7), S(  17,   -1), S(  -2,    0), S(   5,   14), S(  -4,   10), S(   5,   -4), S(  19,    0), S(   8,  -10),
        S(  20,  -17), S(  18,  -23), S(  21,   -6), S(   1,   -1), S(  -6,    2), S(  11,  -17), S(   6,  -27), S(  17,  -12),
        S(  21,  -37), S(  14,  -14), S( -11,    0), S(  12,   -3), S(  -4,   -1), S(  -1,    1), S(  11,   -3), S(   9,  -19),
    },
    {
        S(  18,   10), S( -19,   36), S(  -8,   27), S( -20,   24), S( -12,   23), S(  -9,   28), S(   7,   19), S(   8,   18),
        S(  27,    2), S(  34,    7), S(  14,   16), S(  -2,   19), S(  26,   12), S(  11,   24), S(   8,   19), S(  10,   12),
        S(  -7,    7), S(  28,    4), S(   8,    7), S(   9,    9), S(   7,    8), S(   4,   17), S(  18,   11), S(  -4,   14),
        S(  -8,    9), S( -13,   19), S(  -4,   15), S(  -5,    9), S(   0,    9), S(   7,   11), S(   6,   10), S(  -5,   12),
        S( -22,    5), S(  -2,    9), S( -21,   15), S(  -9,    9), S(  -8,    3), S(  -9,    5), S(  -7,    3), S(  -8,    3),
        S(   0,  -20), S(  20,  -24), S(  -4,  -12), S(  -3,  -13), S(  -7,  -12), S(  -7,  -14), S(  -4,  -16), S( -11,  -13),
        S( -11,  -26), S(  22,  -36), S(   2,  -21), S(  -1,  -19), S(   1,  -21), S(   2,  -20), S(  -6,  -19), S( -10,  -23),
        S( -12,  -36), S(  -7,  -18), S(  -2,  -18), S(   5,  -23), S(   3,  -24), S(  -1,  -20), S(   0,  -24), S(  -2,  -23),
    },
    {
        S(  12,  -12), S(  57,  -41), S( -14,   35), S( -25,   32), S(  15,    0), S(  -7,   10), S( -24,    1), S( -15,    4),
        S(  41,   -3), S(   5,   13), S( -19,   32), S( -47,   64), S( -18,   38), S(   2,    4), S(   9,  -15), S(  15,  -15),
        S(   3,   16), S(  -6,    8), S( -16,   30), S( -27,   25), S(  -1,   15), S(  10,    6), S(  14,  -20), S(  25,  -21),
        S(  -3,   19), S( -16,   38), S( -11,   23), S( -29,   42), S( -15,   35), S(   9,    0), S(  11,   -5), S(  12,  -15),
        S(  -2,   26), S(  -3,   30), S( -15,   36), S(  -8,   42), S( -10,   42), S(  -1,   12), S(   8,    4), S(  10,  -14),
        S(   7,   -4), S(   7,    7), S(  -3,   19), S( -10,   26), S(  -4,   18), S(   3,    3), S(  19,  -24), S(  20,  -37),
        S(   8,  -39), S(  16,  -56), S(   7,  -24), S(   7,   -8), S(   6,   -3), S(  12,  -32), S(  14,  -38), S(  20,  -56),
        S(  13,  -54), S( -10,  -39), S( -13,  -19), S(  -3,  -16), S(   1,  -21), S(  -1,  -30), S(  -3,  -35), S(  -3,  -32),
    },
    {
        S(  49,  -75), S(  24,   -1), S( -41,  -13), S( -51,    9), S(   9,   -6), S(   9,   -6), S(   9,   -6), S(   9,   -6),
        S( -16,   23), S(  27,   54), S(  -8,   38), S(   3,   37), S(   9,   -6), S(   9,   -6), S(   9,   -6), S(   9,   -6),
        S(  29,   16), S(  50,   49), S(  35,   34), S( -16,   58), S(   9,   -6), S(   9,   -6), S(   9,   -6), S(   9,   -6),
        S( -21,   16), S( -22,   50), S( -39,   35), S( -80,   54), S(   9,   -6), S(   9,   -6), S(   9,   -6), S(   9,   -6),
        S( -58,    7), S( -58,   37), S( -52,   15), S( -86,   36), S(   9,   -6), S(   9,   -6), S(   9,   -6), S(   9,   -6),
        S( -16,  -12), S( -14,   12), S( -33,   -8), S( -53,   12), S(   9,   -6), S(   9,   -6), S(   9,   -6), S(   9,   -6),
        S(  40,  -35), S(  28,   -9), S(   3,  -27), S( -25,  -10), S(   9,   -6), S(   9,   -6), S(   9,   -6), S(   9,   -6),
        S(  41,  -69), S(  37,  -29), S(  11,  -47), S(   0,  -38), S(   9,   -6), S(   9,   -6), S(   9,   -6), S(   9,   -6),
    },
};

constexpr PackedScore MOBILITY[4][28] = {
    {S( -10,  -29), S( -40,  -45), S( -17,  -15), S(  -9,    1), S(   2,    9), S(   7,   18), S(  14,   21), S(  23,   26), S(  33,   18), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S( -17,  -45), S( -31,  -61), S( -19,  -32), S( -13,  -13), S(  -4,   -3), S(   1,    7), S(   3,   16), S(   6,   19), S(   7,   22), S(  10,   22), S(  12,   22), S(  18,   16), S(  17,   23), S(  21,    4), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S( -17,  -45), S( -29,  -70), S( -14,  -52), S(  -2,  -31), S(   0,  -16), S(  -1,   -5), S(  -2,    3), S(   1,    9), S(   3,   12), S(   6,   18), S(   5,   28), S(   6,   35), S(   9,   39), S(  14,   39), S(  22,   36), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S( -10,    7), S( -42,  -77), S( -67, -125), S( -13, -209), S( -17,  -71), S( -10,  -16), S(  -2,  -30), S(   1,   -9), S(   1,    9), S(   3,   18), S(   5,   22), S(   8,   26), S(   8,   37), S(  11,   36), S(  11,   43), S(  11,   46), S(  11,   49), S(  13,   51), S(  12,   49), S(  18,   42), S(  22,   34), S(  29,   17), S(  25,   24), S(  33,    2), S(  33,   -2), S(  14,   -6), S( -16,   -4), S(-105,   11)}
};

constexpr PackedScore THREAT_BY_PAWN[6] = {S(   4,  -18), S(  67,   27), S(  60,   59), S(  80,   25), S(  72,   -1), S(   0,    0)};
constexpr PackedScore THREAT_BY_KNIGHT[2][6] = {
    {S(   6,   29), S(  18,   36), S(  40,   43), S(  75,   13), S(  57,  -29), S(   0,    0)},
    {S(  -8,    9), S(   8,   34), S(  28,   30), S(  65,   32), S(  58,   -3), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_BISHOP[2][6] = {
    {S(  -2,   34), S(  41,   31), S( -12,   36), S(  68,   13), S(  69,   51), S(   0,    0)},
    {S(  -4,    5), S(  18,   21), S( -25,  -11), S(  44,   43), S(  45,  117), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_ROOK[2][6] = {
    {S(   0,   41), S(  17,   59), S(  27,   55), S(   7,  -38), S(  75,    9), S(   0,    0)},
    {S(  -8,    7), S(   1,   16), S(  13,    3), S(   5,  -77), S(  63,   44), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_QUEEN[2][6] = {
    {S(   6,    8), S(  23,   18), S(   9,   49), S(  18,   17), S(   9,  -51), S(  99,   43)},
    {S(  -3,   12), S(   0,    5), S(  -7,   16), S(  -5,    4), S( -19,  -70), S( 108,   57)}
};
constexpr PackedScore THREAT_BY_KING[6] = {S( -26,   46), S(   9,   48), S(  29,   39), S(  88,    5), S(   0,    0), S(   0,    0)};
constexpr PackedScore PUSH_THREAT = S(  14,   17);

constexpr PackedScore ISOLATED_PAWN[8] = {S(  -9,    6), S(  -3,  -15), S( -12,   -8), S( -10,  -16), S( -12,  -15), S(  -8,   -7), S(  -4,  -13), S( -12,    7)};
constexpr PackedScore DOUBLED_PAWN[8] = {S(   0,  -61), S(  14,  -37), S(   1,  -28), S(  -1,  -18), S(  -4,  -12), S(  -7,  -19), S(   5,  -38), S(   9,  -73)};
constexpr PackedScore BACKWARDS_PAWN[8] = {S(   0,    0), S(  -7,  -14), S(  -2,  -14), S(  -8,  -11), S(   2,  -18), S(  26,    0), S(   0,    0), S(   0,    0)};
constexpr PackedScore PAWN_PHALANX[8] = {S(   0,    0), S(   5,   -4), S(  11,   -2), S(  20,    8), S(  40,   40), S( 112,  215), S(  -9,  363), S(   0,    0)};
constexpr PackedScore DEFENDED_PAWN[8] = {S(   0,    0), S(   0,    0), S(  19,    6), S(  11,    7), S(  17,   20), S(  30,   61), S( 140,   72), S(   0,    0)};
constexpr PackedScore CANDIDATE_PASSER[2][8] = {
    {S(   0,    0), S( -35,  -16), S( -19,   -7), S(   0,   26), S(  28,   53), S(  60,   88), S(   0,    0), S(   0,    0)},
    {S(   0,    0), S( -19,   -8), S(  -9,   14), S(  -5,   28), S(  19,   41), S(  28,  156), S(   0,    0), S(   0,    0)}
};

constexpr PackedScore PASSED_PAWN[2][2][8] = {
    {
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -40,  -40), S( -16,   24), S(   3,  152), S(  57,  226), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -27,  -53), S(   6,  -23), S(  31,   20), S(  61,   31), S(   0,    0)}
    },
    {
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -32,  -56), S(   1,  -24), S(  39,    8), S(  62,   -2), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -32,  -62), S(   0,  -34), S(  12,  -10), S( -22,  -10), S(   0,    0)}
    }
};
constexpr PackedScore OUR_PASSER_PROXIMITY[8] = {S(   0,    0), S(  58,   81), S(  10,   68), S(   4,   44), S(   5,   32), S(  11,   24), S(  17,   21), S(  14,   20)};
constexpr PackedScore THEIR_PASSER_PROXIMITY[8] = {S(   0,    0), S( -54,    7), S(  17,    1), S(  16,   26), S(  20,   46), S(  19,   77), S(  22,   78), S(  25,   68)};

constexpr PackedScore PAWN_STORM[2][4][8] = {
    {
        {S(  40,   34), S(-153,  -51), S( -38,   12), S(  24,   10), S(  10,   22), S(  -8,   28), S( -16,   28), S(   0,    0)},
        {S(  32,    9), S(  36, -127), S(  76,  -45), S(  33,   -4), S(   7,    3), S( -33,   11), S(  -3,    8), S(   0,    0)},
        {S(   9,   21), S(  91,  -94), S(  97,  -19), S(  48,    7), S(   6,   20), S( -16,   24), S( -19,   26), S(   0,    0)},
        {S(  19,    8), S( 159,  -72), S( 101,  -14), S(  42,   14), S(   1,   20), S( -17,   13), S( -17,   21), S(   0,    0)}
    },
    {
        {S(   0,    0), S(   0,    0), S(  23,   42), S( -30,   23), S( -13,   28), S(  13,   30), S( -13,   28), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(  81,    3), S(  -1,    8), S( -18,   18), S(  -8,   17), S(  -2,    8), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(  80,    9), S(  -9,   14), S(  -6,   25), S(  22,   25), S(  -3,   23), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(  33,    3), S(  17,   21), S( -26,   18), S(  -4,   12), S(   0,   15), S(   0,    0)}
    }
};
constexpr PackedScore PAWN_SHIELD[4][8] = {
    {S(  40,   30), S( -29,   48), S( -25,   39), S(  21,   32), S(  26,   25), S( -28,   -7), S( -68,  -27), S(   0,    0)},
    {S(  44,    7), S( -28,   18), S(   0,    7), S(  43,    1), S(  33,   -8), S(  -2,  -18), S( -42,  -32), S(   0,    0)},
    {S(  14,   -4), S(  13,  127), S(   0,   -6), S(  20,  -25), S(  19,  -24), S(  -6,  -29), S( -56,  -40), S(   0,    0)},
    {S(  17,   17), S(  12,   13), S(  -1,   14), S(  22,   10), S(  31,    8), S(  13,    8), S( -87,   11), S(   0,    0)}
};
constexpr PackedScore SAFE_KNIGHT_CHECK = S( 113,    7);
constexpr PackedScore SAFE_BISHOP_CHECK = S(  60,   18);
constexpr PackedScore SAFE_ROOK_CHECK = S( 106,   19);
constexpr PackedScore SAFE_QUEEN_CHECK = S(  53,   25);
constexpr PackedScore UNSAFE_KNIGHT_CHECK = S(  17,    2);
constexpr PackedScore UNSAFE_BISHOP_CHECK = S(  39,   11);
constexpr PackedScore UNSAFE_ROOK_CHECK = S(  39,    3);
constexpr PackedScore UNSAFE_QUEEN_CHECK = S(  16,    3);
constexpr PackedScore QUEENLESS_ATTACK = S(-153,  135);
constexpr PackedScore KING_ATTACKER_WEIGHT[4] = {S(  54,   -5), S(  20,    0), S(  31,  -13), S(   5,   -9)};
constexpr PackedScore KING_ATTACKS = S(   7,    0);
constexpr PackedScore WEAK_KING_RING = S(   7,    0);
constexpr PackedScore KING_FLANK_ATTACKS[2] = {S(  11,   -4), S(   7,    1)};
constexpr PackedScore KING_FLANK_DEFENSES[2] = {S(  -6,    0), S( -10,    2)};
constexpr PackedScore LOST_PIECE[4] = {S(  38,    0), S(  28,   -4), S(  18,   -3), S(  15,  -26)};
constexpr PackedScore SAFETY_OFFSET = S(  46,  214);

constexpr PackedScore MINOR_BEHIND_PAWN = S(   6,   12);
constexpr PackedScore KNIGHT_OUTPOST = S(  22,   16);
constexpr PackedScore BISHOP_PAWNS[7] = {S(   5,   21), S(   6,   20), S(   4,   12), S(   1,    5), S(  -2,   -5), S(  -2,  -18), S(  -6,  -31)};
constexpr PackedScore BISHOP_PAIR = S(  19,   60);
constexpr PackedScore LONG_DIAG_BISHOP = S(  15,    9);
constexpr PackedScore ROOK_OPEN[2] = {S(  25,    3), S(  12,    4)};

constexpr PackedScore TEMPO = S(  32,   34);

constexpr PackedScore COMPLEXITY_PAWNS = S(   0,    9);
constexpr PackedScore COMPLEXITY_PASSERS = S(   0,   -1);
constexpr PackedScore COMPLEXITY_PAWNS_BOTH_SIDES = S(   0,   66);
constexpr PackedScore COMPLEXITY_PAWN_ENDGAME = S(   0,   79);
constexpr PackedScore COMPLEXITY_OFFSET = S(   0, -127);

#undef S


}