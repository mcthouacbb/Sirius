#pragma once

#include "../defs.h"

namespace eval
{

// clang-format off
#define S(mg, eg) ScorePair(mg, eg)

constexpr ScorePair MATERIAL[6] = {S(  67,  131), S( 304,  420), S( 326,  432), S( 407,  766), S( 948, 1562), S(0, 0)};

constexpr ScorePair PSQT[6][64] = {
    {
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  76,   78), S(  23,   96), S(  40,   80), S(  55,   90), S(  69,   67), S(  19,   73), S(  35,   86), S(  77,   67),
        S(   1,   15), S( -12,   24), S(   0,   16), S(   1,    4), S(  -1,   -9), S(  -2,    0), S( -11,   15), S(  -5,    9),
        S(  -3,   12), S(   7,   14), S(   9,   -7), S(  14,  -18), S(   9,  -19), S(  -2,   -7), S(   3,    8), S(  -8,    7),
        S( -13,    1), S(  -6,   16), S(  16,  -24), S(  18,  -14), S(  14,  -14), S(   6,  -11), S( -10,   12), S( -15,   -6),
        S( -14,    1), S(  19,    6), S(  -1,    1), S(   6,    4), S(  -1,    1), S(  -3,   -2), S(  -8,    6), S( -18,   -9),
        S( -11,    1), S(  17,   14), S(  20,   32), S(   1,   11), S(  -2,    2), S(  -5,    3), S(  -1,    8), S( -20,   -2),
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
    },
    {
        S( -77,  -75), S(-100,   24), S( -94,   42), S(  -2,    9), S( -23,   24), S( -77,   21), S( -90,    8), S(-101,  -32),
        S(  -4,   -3), S(   8,    6), S(  25,    9), S(  26,   22), S(  36,   16), S(  19,   -2), S(  -3,    1), S( -17,  -10),
        S(   9,   -7), S(   1,   12), S(  40,   15), S(  22,   21), S(  21,   17), S(  18,   11), S(   7,    5), S( -14,   -6),
        S(  30,   -4), S(  22,   11), S(  28,   18), S(  23,   26), S(  25,   26), S(  17,   15), S(  19,    2), S(  14,    3),
        S(  22,    4), S(  16,   12), S(  25,   14), S(  17,   24), S(  17,   21), S(  17,   17), S(  13,    8), S(  11,   -3),
        S(   3,  -11), S(  24,   -8), S(  16,    0), S(  19,   10), S(  15,    8), S(   4,   -5), S(   9,  -12), S(  -2,  -17),
        S(   0,   -1), S(   7,    5), S(  14,  -18), S(  10,   -1), S(   6,   -3), S(   7,  -19), S(   1,   -8), S( -12,  -30),
        S( -12,  -39), S(  -9,  -23), S(   2,  -15), S(  13,  -12), S(   5,   -6), S(  -8,  -14), S( -10,  -28), S( -10,  -43),
    },
    {
        S( -20,  -28), S( -63,   22), S( -83,   12), S( -37,   17), S( -53,   22), S( -66,   16), S( -43,   17), S( -36,   -3),
        S( -14,   -3), S( -24,    2), S(  -1,   10), S( -29,   13), S(  -8,   13), S( -18,   11), S( -14,  -14), S( -18,   -3),
        S(  14,   -5), S(   8,   13), S(  13,   15), S(  27,   10), S(  16,   11), S(  12,    0), S(  10,    5), S(  17,  -18),
        S(   6,   -5), S(  14,   13), S(  10,   15), S(  12,   27), S(  18,   26), S(  16,    6), S(  13,   10), S(   3,   -8),
        S(  16,   -7), S(   9,    6), S(  10,   15), S(  15,   15), S(  16,   18), S(  13,   10), S(   7,   -1), S(  22,  -21),
        S(  10,   -2), S(  22,   -4), S(   7,   -7), S(   6,   14), S(  12,    1), S(   1,   -9), S(  21,   -5), S(  12,  -12),
        S(  17,   -9), S(  17,  -26), S(  18,   -8), S(   8,   -8), S(  -1,   -5), S(  11,  -17), S(   7,  -23), S(  25,  -15),
        S(   7,  -30), S(  -3,  -12), S( -16,  -12), S(  10,  -11), S(  10,  -15), S( -10,   -3), S(  15,  -16), S(   7,  -18),
    },
    {
        S(  39,    1), S(  20,   16), S(  15,   17), S(  11,   24), S(  25,   18), S(  27,   13), S(  26,   20), S(  35,   17),
        S(  18,   12), S(   4,   21), S(  20,   14), S(  19,   22), S(  36,   19), S(  11,   28), S(  10,   25), S(  21,   20),
        S(  -8,   14), S(  14,    6), S(  14,   12), S(  24,    2), S(  12,   11), S(   2,   21), S(   9,   16), S(   1,   25),
        S( -18,   15), S( -14,   25), S(  -8,   18), S( -13,   19), S(  -3,    8), S(  -2,   15), S(  -2,   20), S( -10,   18),
        S( -27,   -4), S( -17,   12), S( -18,   12), S(  -9,    7), S( -20,   10), S( -11,    9), S( -21,   14), S(  -9,    2),
        S( -27,  -16), S(  -2,  -24), S( -15,   -5), S(  -9,  -11), S(  -4,  -11), S( -12,  -13), S(  -2,  -23), S( -16,  -11),
        S( -57,  -27), S( -14,  -29), S(   4,  -29), S(   2,  -24), S(   4,  -29), S(  -5,  -20), S(  -8,  -29), S( -16,  -21),
        S( -12,  -40), S( -31,  -10), S(   8,  -26), S(  19,  -32), S(   8,  -29), S(  -1,  -23), S(   1,  -26), S(   1,  -26),
    },
    {
        S( -11,   44), S(  29,   11), S(  25,   25), S(  21,   17), S(  35,   13), S(  22,   19), S(  34,  -12), S( -31,   42),
        S(  29,  -11), S(  12,   17), S(  30,    4), S( -31,   49), S(   1,   49), S(  15,   -2), S(   7,  -15), S(  13,  -11),
        S(   6,   13), S(  20,    7), S(   4,   16), S( -12,   27), S(   6,   26), S(   7,    8), S(  12,   -7), S(  14,  -21),
        S(   4,    0), S( -17,   30), S( -17,   34), S( -32,   51), S( -32,   64), S(  -6,   24), S(  -5,   27), S(  -3,   10),
        S( -11,   26), S(  -9,   17), S( -13,   14), S( -17,   29), S( -28,   57), S( -11,   34), S(  -6,   19), S(  -3,    8),
        S(  -2,  -17), S(   4,   -4), S(  -9,    1), S( -15,   11), S(  -7,    0), S( -10,   28), S(  13,  -29), S(   6,  -12),
        S(  -3,  -48), S(  15,  -86), S(   8,  -55), S(  -7,   -5), S(  -6,  -12), S(  15,  -58), S(  10,  -44), S(   7,  -22),
        S(  -3,  -61), S( -17,  -74), S( -24,  -29), S(   1,  -51), S(   5,  -50), S(  -2,  -37), S(  -5,  -37), S(   1,  -37),
    },
    {
        S(-124, -124), S(  54,   69), S(  50,   31), S(  81,    1), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S( -14,   -4), S(  21,   86), S(  -7,   63), S(  -4,   33), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S( -18,   43), S(   3,   95), S( -40,   51), S(-147,    9), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S( -35,   37), S( -35,   85), S( -70,   44), S(-141,    2), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S( -48,   28), S( -45,   63), S( -75,   29), S(-114,  -13), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(   3,    9), S( -10,   39), S( -44,    7), S( -61,  -35), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  52,  -14), S(  37,   15), S(   9,  -24), S( -17,  -67), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  56,  -42), S(  57,  -16), S(  17,  -50), S(  21, -110), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
    },
};

constexpr ScorePair MOBILITY[4][28] = {
    {S(  -6,  -28), S( -24,  -60), S( -15,  -19), S(  -6,   -1), S(   1,    9), S(   4,   21), S(  10,   24), S(  15,   29), S(  23,   19), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S(  -6,  -26), S( -30,  -62), S( -14,  -35), S(  -6,  -13), S(  -1,   -3), S(   1,    9), S(   1,   18), S(   3,   20), S(   2,   24), S(   6,   22), S(   6,   20), S(   7,   15), S(   7,   20), S(  25,  -13), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S( -53,  -50), S( -41,  -91), S( -14,  -51), S( -10,  -26), S(  -5,  -13), S(   0,    2), S(   0,   10), S(   3,   13), S(   4,   19), S(   7,   24), S(   9,   30), S(  10,   38), S(  12,   42), S(  17,   38), S(  49,   14), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S(  -9,   63), S( -24,   30), S( -50,  -19), S( -28, -172), S( -16, -172), S(  -9,  -75), S(  -7,  -23), S(  -4,  -22), S(  -4,   -1), S(  -3,   10), S(  -2,   22), S(  -1,   28), S(   0,   33), S(   0,   40), S(   1,   48), S(   1,   49), S(   0,   53), S(  -2,   63), S(   1,   54), S(   4,   54), S(  -1,   52), S(   8,   36), S(   8,   31), S(  15,   -1), S(  21,  -16), S(  46,  -40), S(  25,  -65), S(  19,  -58)}
};

constexpr ScorePair THREAT_BY_PAWN[6] = {S(  -4,  -30), S(  56,   37), S(  53,   68), S(  58,   45), S(  38,   48), S(   0,    0)};
constexpr ScorePair THREAT_BY_KNIGHT[2][6] = {
    {S(  10,   34), S(  14,   52), S(  36,   27), S(  69,    6), S(  31,   36), S(   0,    0)},
    {S(  -5,    9), S(  12,   58), S(  34,   24), S(  56,   43), S(  42,   57), S(   0,    0)}
};
constexpr ScorePair THREAT_BY_BISHOP[2][6] = {
    {S(   9,   30), S(  22,   48), S(  -2,   34), S(  34,   42), S(  35,   82), S(   0,    0)},
    {S(  -4,    5), S(  11,   27), S( -15,   15), S(  42,   69), S(  29,  125), S(   0,    0)}
};
constexpr ScorePair THREAT_BY_ROOK[2][6] = {
    {S(   0,   46), S(  23,   56), S(  32,   48), S( -21,  -78), S(  54,    5), S(   0,    0)},
    {S( -10,    8), S(   3,   18), S(  11,    8), S(  -5, -108), S(  41,   97), S(   0,    0)}
};
constexpr ScorePair THREAT_BY_QUEEN[2][6] = {
    {S(   6,   27), S(  19,   32), S(  18,   56), S(  23,    8), S(   2,  -44), S( 168,  162)},
    {S(  -3,   18), S(   0,    6), S( -11,   32), S(  -4,   -3), S( -15,  -25), S(  66,  309)}
};
constexpr ScorePair THREAT_BY_KING[6] = {S(  62,   11), S(  25,   32), S(  87,   25), S(  84,    1), S(   0,    0), S(   0,    0)};
constexpr ScorePair KNIGHT_HIT_QUEEN = S(   7,    6);
constexpr ScorePair BISHOP_HIT_QUEEN = S(   9,   33);
constexpr ScorePair ROOK_HIT_QUEEN = S(  19,    0);
constexpr ScorePair PUSH_THREAT = S(  13,   16);
constexpr ScorePair RESTRICTED_SQUARES = S(   2,    2);

constexpr ScorePair ISOLATED_PAWN[8] = {S(  -1,    1), S(  -9,  -14), S(  -9,  -12), S( -12,  -12), S( -17,  -11), S(  -8,  -10), S( -10,   -8), S(  -9,    1)};
constexpr ScorePair DOUBLED_PAWN[8] = {S(   0,  -52), S(   7,  -47), S(  -3,  -28), S(  -7,  -17), S( -10,  -10), S(  -8,  -15), S(  -4,  -45), S(  10,  -51)};
constexpr ScorePair BACKWARDS_PAWN[8] = {S(   0,    0), S(  -5,  -15), S(  -2,  -13), S(  -3,  -15), S(  -1,  -17), S(  -5,   -6), S(   0,    0), S(   0,    0)};
constexpr ScorePair PAWN_PHALANX[8] = {S(   0,    0), S(   3,   -6), S(   6,   -1), S(  12,   11), S(  35,   38), S( 101,  135), S(  90,  191), S(   0,    0)};
constexpr ScorePair DEFENDED_PAWN[8] = {S(   0,    0), S(   0,    0), S(  11,    6), S(   9,    7), S(  18,   21), S(  45,   48), S(  64,  102), S(   0,    0)};
constexpr ScorePair CANDIDATE_PASSER[2][8] = {
    {S(   0,    0), S( -37,   11), S(  -9,  -22), S(  -7,    4), S(  -8,   40), S(   1,  113), S(   0,    0), S(   0,    0)},
    {S(   0,    0), S( -16,  -14), S(  -3,    7), S(  -4,   25), S(   5,   37), S(  28,  109), S(   0,    0), S(   0,    0)}
};

constexpr ScorePair PASSED_PAWN[2][2][8] = {
    {
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -34,  -25), S( -11,   28), S(  24,  125), S(  95,  190), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -21,  -38), S(  -6,  -11), S(  22,   45), S(  91,   56), S(   0,    0)}
    },
    {
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -17,  -47), S(  -5,  -11), S(  26,   48), S(  46,   29), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -20,  -53), S(  -7,  -31), S(  13,   16), S( -10,    9), S(   0,    0)}
    }
};
constexpr ScorePair OUR_PASSER_PROXIMITY[8] = {S(  79,  114), S( 153,   57), S(  51,   62), S(  -5,   55), S(  -6,   34), S(  -5,   24), S(   9,   15), S( -10,   23)};
constexpr ScorePair THEIR_PASSER_PROXIMITY[8] = {S( -47,    2), S(   6,   -6), S(  26,   -1), S(  19,   25), S(  15,   57), S(  11,   76), S(  19,   79), S(  18,   65)};
constexpr ScorePair PASSER_DEFENDED_PUSH[8] = {S(   0,    0), S(   0,    0), S(   0,    0), S(   8,    7), S(  16,   18), S(  49,   24), S(  26,  103), S(   0,    0)};

constexpr ScorePair PAWN_STORM[2][4][8] = {
    {
        {S(  32,   17), S( -24, -159), S(  38,  -74), S(  48,  -12), S(  28,   15), S(   2,   19), S(   5,   19), S(   0,    0)},
        {S(  31,   12), S(  64, -128), S(  84,  -98), S(  18,   -7), S(  17,   10), S( -30,   24), S(   2,   17), S(   0,    0)},
        {S(   7,    8), S( 102, -145), S( 107,  -89), S(  52,  -20), S(   3,   10), S( -17,   13), S(  -5,    9), S(   0,    0)},
        {S(  15,  -12), S( 141, -183), S(  93,  -86), S(  34,  -14), S(   7,   -9), S( -34,   -7), S( -32,   -4), S(   0,    0)}
    },
    {
        {S(   0,    0), S(   0,    0), S(  52,   39), S( -31,   23), S(  -2,   30), S(   3,   34), S(  38,   21), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S( 139,    9), S( -42,   30), S(  -3,   31), S( -19,   54), S(  60,   37), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S( 123,    3), S(  21,   14), S(  -6,   27), S(  -2,   36), S(  64,   15), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S( 109,  -20), S(  15,   14), S( -13,   13), S(   4,    3), S( -31,  -14), S(   0,    0)}
    }
};
constexpr ScorePair PAWN_SHIELD[4][8] = {
    {S(  60,   13), S(   7,   28), S(  -8,   21), S(  35,   11), S(  45,    4), S(  -4,   12), S( -60,   23), S(   0,    0)},
    {S(  40,   24), S( -26,   29), S(  16,   19), S(  43,    9), S(  37,   -5), S( -19,   -9), S( -36,  -30), S(   0,    0)},
    {S(  30,   16), S(   5,   38), S(   2,    0), S(  34,  -20), S(  25,  -19), S( -21,   -1), S( -84,  -34), S(   0,    0)},
    {S(  22,   -3), S( -22,  -12), S(  -9,  -16), S(  10,  -25), S(  -3,  -21), S(  26,  -15), S( -26,  -16), S(   0,    0)}
};
constexpr ScorePair SAFE_KNIGHT_CHECK = S(  80,   -3);
constexpr ScorePair SAFE_BISHOP_CHECK = S(  46,   21);
constexpr ScorePair SAFE_ROOK_CHECK = S(  97,    8);
constexpr ScorePair SAFE_QUEEN_CHECK = S(  55,   35);
constexpr ScorePair UNSAFE_KNIGHT_CHECK = S(  12,    1);
constexpr ScorePair UNSAFE_BISHOP_CHECK = S(  28,   10);
constexpr ScorePair UNSAFE_ROOK_CHECK = S(  40,    1);
constexpr ScorePair UNSAFE_QUEEN_CHECK = S(  18,   16);
constexpr ScorePair QUEENLESS_ATTACK = S( -71,  341);
constexpr ScorePair KING_ATTACKER_WEIGHT[4] = {S(  55,   -8), S(  21,   -3), S(  24,  -14), S(  -6,  -18)};
constexpr ScorePair KING_ATTACKS = S(   4,    1);
constexpr ScorePair WEAK_KING_RING = S(   4,    1);
constexpr ScorePair KING_FLANK_ATTACKS[2] = {S(  12,   -6), S(   5,    0)};
constexpr ScorePair KING_FLANK_DEFENSES[2] = {S(  -8,    1), S(  -5,    2)};
constexpr ScorePair SAFETY_OFFSET = S(  64,   36);

constexpr ScorePair MINOR_BEHIND_PAWN = S(   2,   11);
constexpr ScorePair KNIGHT_OUTPOST = S(  18,   15);
constexpr ScorePair BISHOP_PAWNS[7] = {S(   5,   11), S(   3,   22), S(   3,   13), S(   2,    4), S(   0,   -4), S(  -3,  -19), S(  -6,  -33)};
constexpr ScorePair BISHOP_PAIR = S(  17,   67);
constexpr ScorePair LONG_DIAG_BISHOP = S(   9,   12);
constexpr ScorePair ROOK_OPEN[2] = {S(  28,   -4), S(  19,    2)};

constexpr ScorePair TEMPO = S(  20,   15);

constexpr ScorePair COMPLEXITY_PAWNS = S(   0,   12);
constexpr ScorePair COMPLEXITY_PAWNS_BOTH_SIDES = S(   0,  121);
constexpr ScorePair COMPLEXITY_PAWN_ENDGAME = S(   0,  137);
constexpr ScorePair COMPLEXITY_OFFSET = S(   0, -217);

#undef S
// clang-format on

}
