#pragma once

#include "../defs.h"

namespace eval
{

#define S(mg, eg) PackedScore(mg, eg)

constexpr PackedScore MATERIAL[6] = {S(  61,  131), S( 285,  431), S( 306,  443), S( 386,  787), S( 747, 1620), S(0, 0)};

constexpr PackedScore PSQT[6][64] = {
    {
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  57,   77), S(  38,   89), S(  20,  102), S(  54,   75), S(  73,   60), S(  56,   74), S(  46,   93), S(  69,   75),
        S(   6,    0), S( -13,   30), S(   9,   -9), S(   8,  -38), S(   1,  -38), S(   2,  -23), S( -19,   15), S(  -6,    2),
        S(  14,    3), S(  -4,   15), S(  12,  -10), S(  11,  -23), S(  -2,  -24), S(  -1,  -17), S(  -8,    8), S(  -8,    5),
        S(   6,   -6), S(  -5,   15), S(  13,  -22), S(  16,  -17), S(   9,  -16), S(   0,  -15), S( -13,    9), S( -11,   -4),
        S(  -1,   -7), S(   8,    9), S(   4,    0), S(   1,   -2), S(  -8,   -2), S(  -8,  -10), S( -21,    8), S( -22,   -5),
        S(   9,   -8), S(  25,   10), S(  31,  123), S(   9,    0), S(  -1,  -11), S(  -4,   -8), S( -14,   12), S( -14,   -2),
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
    },
    {
        S( -68,  -97), S( -79,  -23), S( -29,  -17), S(  -3,   -8), S( -29,    0), S( -58,    4), S( -98,    2), S( -84,  -58),
        S( -18,  -14), S(  12,    2), S(  22,   -1), S(  -2,    8), S(   3,   11), S(   5,   10), S(   0,   12), S( -10,   -2),
        S(   2,   -8), S( -10,    7), S(  29,   -3), S(  19,   16), S(   7,   22), S(  15,   12), S(   7,    2), S(  -5,   -2),
        S(  26,    4), S(  22,   16), S(  37,   18), S(  21,   25), S(  22,   27), S(  28,   14), S(  21,    2), S(  12,    8),
        S(  10,   16), S(  14,   17), S(  20,   19), S(  19,   28), S(  21,   21), S(  20,   17), S(  23,    0), S(  10,    2),
        S(  15,   -1), S(  16,    4), S(  18,    3), S(  16,   15), S(   7,   15), S(   5,   -1), S(   8,   -7), S(  -5,   -8),
        S(  10,   -1), S(  11,   -5), S(   9,   -5), S(  13,   -1), S(   8,   -1), S(  -1,   -4), S(  -1,   -8), S( -13,   -8),
        S(  -3,  -16), S(  -4,  -11), S(   4,  -10), S(   8,    1), S(   1,   -3), S( -14,  -10), S(  -8,  -16), S( -41,   -7),
    },
    {
        S( -46,  -13), S( -28,    7), S(  -8,   -3), S( -72,   12), S( -63,   15), S( -57,    5), S( -30,    7), S( -31,    6),
        S( -22,  -10), S( -44,    5), S( -13,    3), S( -10,    3), S( -22,   10), S(   1,   -1), S( -13,   -5), S(  -3,   -7),
        S(  10,   12), S(  -2,    8), S(  20,    6), S(   4,   12), S(  16,    5), S(   1,    0), S(  10,    5), S(   6,    1),
        S( -11,    6), S(   2,   13), S(   2,   17), S(  17,   19), S(  23,   23), S(  19,    8), S(   6,   12), S(  -4,    1),
        S(  16,   -6), S(  -4,   13), S(   7,   12), S(  15,   15), S(  21,   12), S(   6,   14), S(   4,    5), S(   5,   -1),
        S(  19,   -9), S(  22,   -2), S(   4,   -1), S(  10,   12), S(   1,    8), S(   5,   -3), S(  20,    1), S(   6,   -9),
        S(  25,  -18), S(  24,  -24), S(  27,   -9), S(   7,   -3), S(  -1,    0), S(  12,  -16), S(   6,  -26), S(  16,  -12),
        S(  28,  -36), S(  21,  -15), S(  -5,   -2), S(  19,   -5), S(   1,   -2), S(   0,    1), S(  11,   -3), S(   6,  -18),
    },
    {
        S(  18,    9), S( -15,   33), S( -10,   26), S( -20,   22), S( -10,   22), S( -13,   29), S(   7,   18), S(  11,   17),
        S(  27,    2), S(  32,    7), S(  11,   18), S(  -5,   20), S(  24,   13), S(  12,   23), S(   8,   19), S(  12,   11),
        S(  -5,    4), S(  22,    7), S(   4,    8), S(   6,    9), S(   6,    8), S(   2,   17), S(  17,   10), S(  -4,   13),
        S( -10,   10), S( -16,   20), S(  -6,   16), S(  -8,   11), S(  -2,    9), S(   5,   11), S(   6,    9), S(  -7,   12),
        S( -19,    4), S(  -1,    9), S( -20,   14), S(  -8,    9), S(  -6,    3), S( -10,    6), S( -10,    5), S(  -8,    2),
        S(   4,  -20), S(  22,  -24), S(  -1,  -11), S(  -2,  -13), S(  -5,  -12), S(  -8,  -14), S(  -4,  -16), S( -11,  -12),
        S(  -6,  -28), S(  25,  -36), S(   6,  -22), S(   2,  -20), S(   4,  -22), S(   2,  -19), S(  -7,  -18), S( -11,  -22),
        S(  -5,  -39), S(  -2,  -19), S(   2,  -19), S(   8,  -25), S(   6,  -25), S(  -1,  -20), S(  -1,  -24), S(  -2,  -22),
    },
    {
        S(  12,   -8), S(  53,  -30), S( -15,   41), S( -12,   22), S(  18,    1), S( -11,   20), S( -22,    7), S( -16,   11),
        S(  36,    6), S(  16,   10), S(  -8,   27), S( -32,   54), S(  -4,   33), S(  15,    1), S(  26,  -23), S(  19,   -8),
        S(   5,   10), S(  -1,    2), S(  -7,   18), S( -16,   16), S(   8,   12), S(  21,    3), S(  21,  -16), S(  30,  -17),
        S(  -6,   16), S( -16,   32), S( -10,   15), S( -17,   25), S(  -4,   23), S(  12,    2), S(  10,    5), S(   7,   -2),
        S(  -5,   14), S(  -3,   12), S( -15,   20), S(  -9,   27), S( -12,   33), S(  -3,   18), S(   5,   12), S(   2,    3),
        S(   2,  -12), S(   5,   -6), S(  -7,    8), S( -14,   16), S(  -9,   14), S(  -4,   12), S(  11,  -11), S(  10,  -19),
        S(   2,  -44), S(  10,  -62), S(   1,  -30), S(   0,  -14), S(  -2,   -4), S(   1,  -17), S(   3,  -23), S(   9,  -38),
        S(   8,  -58), S( -17,  -41), S( -20,  -22), S( -11,  -20), S(  -8,  -20), S( -12,  -14), S( -14,  -18), S( -13,  -18),
    },
    {
        S(  48,  -72), S(  28,   -2), S( -40,  -23), S( -66,    1), S(   9,   -5), S(   9,   -5), S(   9,   -5), S(   9,   -5),
        S(  -8,   19), S(  27,   57), S(  -6,   28), S( -13,   32), S(   9,   -5), S(   9,   -5), S(   9,   -5), S(   9,   -5),
        S(  31,   16), S(  49,   53), S(  26,   30), S( -29,   53), S(   9,   -5), S(   9,   -5), S(   9,   -5), S(   9,   -5),
        S( -16,   20), S( -13,   54), S( -40,   32), S( -87,   49), S(   9,   -5), S(   9,   -5), S(   9,   -5), S(   9,   -5),
        S( -55,   14), S( -51,   45), S( -49,   11), S( -85,   30), S(   9,   -5), S(   9,   -5), S(   9,   -5), S(   9,   -5),
        S( -13,   -2), S(  -8,   22), S( -31,   -9), S( -51,    8), S(   9,   -5), S(   9,   -5), S(   9,   -5), S(   9,   -5),
        S(  38,  -23), S(  31,    0), S(   6,  -31), S( -24,  -17), S(   9,   -5), S(   9,   -5), S(   9,   -5), S(   9,   -5),
        S(  36,  -55), S(  37,  -20), S(  12,  -52), S(   0,  -48), S(   9,   -5), S(   9,   -5), S(   9,   -5), S(   9,   -5),
    },
};

constexpr PackedScore MOBILITY[4][28] = {
    {S(  -3,  -30), S( -37,  -46), S( -16,  -15), S(  -8,    1), S(   2,    9), S(   6,   19), S(  13,   22), S(  21,   26), S(  30,   20), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S( -10,  -47), S( -30,  -61), S( -18,  -32), S( -11,  -14), S(  -3,   -4), S(   2,    6), S(   3,   15), S(   6,   19), S(   6,   22), S(   8,   23), S(  10,   23), S(  14,   18), S(  13,   25), S(  19,    4), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S( -13,  -42), S( -29,  -70), S( -14,  -52), S(  -2,  -31), S(   0,  -16), S(  -1,   -6), S(  -1,    2), S(   2,    8), S(   3,   11), S(   6,   18), S(   4,   27), S(   5,   34), S(   7,   39), S(  10,   40), S(  18,   37), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S(  -3,    7), S( -37,  -74), S( -65, -119), S( -19, -202), S( -24,  -63), S( -15,  -14), S(  -6,  -26), S(  -3,   -6), S(  -3,   11), S(   0,   20), S(   3,   24), S(   6,   26), S(   7,   37), S(  10,   36), S(  11,   42), S(  12,   43), S(  13,   46), S(  16,   46), S(  16,   46), S(  21,   40), S(  26,   31), S(  34,   13), S(  29,   21), S(  38,   -5), S(  37,   -5), S(   5,    5), S( -10,  -11), S(-115,   21)}
};

constexpr PackedScore THREAT_BY_PAWN[6] = {S(   4,  -20), S(  65,   28), S(  59,   59), S(  81,   24), S(  72,   -2), S(   0,    0)};
constexpr PackedScore THREAT_BY_KNIGHT[2][6] = {
    {S(   4,   29), S(  15,   38), S(  37,   44), S(  73,   16), S(  60,  -30), S(   0,    0)},
    {S(  -8,    9), S(   6,   36), S(  28,   29), S(  64,   33), S(  60,   -1), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_BISHOP[2][6] = {
    {S(  -2,   34), S(  39,   32), S( -14,   35), S(  67,   16), S(  69,   44), S(   0,    0)},
    {S(  -4,    5), S(  17,   22), S( -25,  -13), S(  44,   44), S(  46,  110), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_ROOK[2][6] = {
    {S(  -1,   41), S(  15,   60), S(  25,   55), S( -11,  -23), S(  59,   19), S(   0,    0)},
    {S(  -7,    7), S(   2,   15), S(  13,    3), S( -13,  -63), S(  39,   65), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_QUEEN[2][6] = {
    {S(   6,    8), S(  24,   22), S(  10,   48), S(  18,   15), S(  10,  -53), S(  98,   47)},
    {S(  -3,   11), S(   1,    8), S(  -5,   14), S(  -4,    4), S( -16,  -74), S( 112,   52)}
};
constexpr PackedScore THREAT_BY_KING[6] = {S( -20,   43), S(   9,   48), S(  27,   41), S(  83,    8), S(   0,    0), S(   0,    0)};
constexpr PackedScore KNIGHT_HIT_QUEEN = S(  11,    2);
constexpr PackedScore BISHOP_HIT_QUEEN = S(  17,   11);
constexpr PackedScore ROOK_HIT_QUEEN = S(  20,   -3);
constexpr PackedScore PUSH_THREAT = S(  14,   18);

constexpr PackedScore ISOLATED_PAWN[8] = {S(  -8,    6), S(  -3,  -16), S( -12,   -8), S( -10,  -16), S( -12,  -14), S(  -8,   -7), S(  -4,  -14), S( -12,    7)};
constexpr PackedScore DOUBLED_PAWN[8] = {S(  -1,  -60), S(  13,  -37), S(   0,  -27), S(  -2,  -17), S(  -5,  -12), S(  -8,  -19), S(   5,  -37), S(   6,  -70)};
constexpr PackedScore BACKWARDS_PAWN[8] = {S(   0,    0), S(  -9,  -13), S(  -2,  -14), S(  -8,  -12), S(   1,  -18), S(  32,  -10), S(   0,    0), S(   0,    0)};
constexpr PackedScore PAWN_PHALANX[8] = {S(   0,    0), S(   5,   -4), S(  11,   -2), S(  20,    8), S(  39,   41), S( 115,  214), S(   9,  341), S(   0,    0)};
constexpr PackedScore DEFENDED_PAWN[8] = {S(   0,    0), S(   0,    0), S(  18,    6), S(  11,    8), S(  17,   21), S(  32,   64), S( 140,   74), S(   0,    0)};
constexpr PackedScore CANDIDATE_PASSER[2][8] = {
    {S(   0,    0), S( -32,  -15), S( -18,   -8), S(   0,   25), S(  25,   52), S(  67,  111), S(   0,    0), S(   0,    0)},
    {S(   0,    0), S( -17,  -10), S(  -8,   13), S(  -5,   28), S(  18,   41), S(  28,  180), S(   0,    0), S(   0,    0)}
};

constexpr PackedScore PASSED_PAWN[2][2][8] = {
    {
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -36,  -41), S( -17,   22), S(  10,  158), S(  68,  218), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -23,  -52), S(   2,  -19), S(  37,   41), S(  67,   27), S(   0,    0)}
    },
    {
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -29,  -55), S(  -5,  -18), S(  39,   34), S(  70,   -2), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -30,  -56), S(  -6,  -23), S(  17,   19), S(  -9,  -12), S(   0,    0)}
    }
};
constexpr PackedScore OUR_PASSER_PROXIMITY[8] = {S(  79,   97), S(  69,  100), S(  44,   72), S(   7,   58), S(   5,   38), S(   7,   25), S(  12,   18), S(  -8,   25)};
constexpr PackedScore THEIR_PASSER_PROXIMITY[8] = {S( -49,  -10), S(  -3,    2), S(  25,    0), S(  20,   31), S(  14,   64), S(  19,   78), S(  25,   79), S(  30,   68)};

constexpr PackedScore PAWN_STORM[2][4][8] = {
    {
        {S(  43,   36), S(-134,  -45), S( -56,  -31), S(  58,    2), S(  27,   22), S(   0,   31), S(  -9,   31), S(   0,    0)},
        {S(  34,    7), S(  41, -121), S(  90,  -79), S(  57,  -20), S(  15,   -2), S( -23,    8), S(   4,    6), S(   0,    0)},
        {S(   9,   20), S(  99,  -99), S( 102,  -49), S(  61,   -1), S(  15,   17), S( -13,   23), S( -14,   26), S(   0,    0)},
        {S(  18,    5), S( 145,  -76), S( 119,  -22), S(  69,    5), S(   9,   16), S( -15,   10), S( -21,   20), S(   0,    0)}
    },
    {
        {S(   0,    0), S(   0,    0), S(  60,   62), S( -23,   33), S( -25,   40), S( -16,   57), S(   0,   45), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(  97,   17), S(  -6,   19), S( -18,   27), S( -30,   42), S( -40,   33), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S( 105,   17), S(   7,   24), S( -16,   40), S(  15,   43), S(  50,   29), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(  86,   18), S(  15,   25), S( -26,   25), S( -22,   22), S(  -4,   17), S(   0,    0)}
    }
};
constexpr PackedScore PAWN_SHIELD[4][8] = {
    {S(  45,   36), S( -20,   51), S( -11,   42), S(  41,   31), S(  44,   17), S( -28,   -1), S( -69,  -15), S(   0,    0)},
    {S(  47,    9), S( -25,   19), S(   8,    7), S(  53,   -1), S(  43,  -15), S(  14,  -19), S( -41,  -32), S(   0,    0)},
    {S(  22,   -2), S(  17,  119), S(  12,   -2), S(  35,  -22), S(  24,  -19), S(  -6,  -25), S( -58,  -38), S(   0,    0)},
    {S(  15,   17), S(   3,   12), S(   2,   10), S(  29,    5), S(  34,    1), S(   9,    5), S( -81,    7), S(   0,    0)}
};
constexpr PackedScore SAFE_KNIGHT_CHECK = S( 111,    5);
constexpr PackedScore SAFE_BISHOP_CHECK = S(  62,   17);
constexpr PackedScore SAFE_ROOK_CHECK = S( 105,   16);
constexpr PackedScore SAFE_QUEEN_CHECK = S(  52,   25);
constexpr PackedScore UNSAFE_KNIGHT_CHECK = S(  16,    2);
constexpr PackedScore UNSAFE_BISHOP_CHECK = S(  39,   10);
constexpr PackedScore UNSAFE_ROOK_CHECK = S(  39,    2);
constexpr PackedScore UNSAFE_QUEEN_CHECK = S(  15,    4);
constexpr PackedScore QUEENLESS_ATTACK = S(-141,  148);
constexpr PackedScore KING_ATTACKER_WEIGHT[4] = {S(  55,   -5), S(  21,    0), S(  28,  -13), S(   4,  -10)};
constexpr PackedScore KING_ATTACKS = S(   7,   -1);
constexpr PackedScore WEAK_KING_RING = S(   7,   -1);
constexpr PackedScore KING_FLANK_ATTACKS[2] = {S(  12,   -4), S(   7,    1)};
constexpr PackedScore KING_FLANK_DEFENSES[2] = {S(  -6,    0), S( -10,    2)};
constexpr PackedScore SAFETY_OFFSET = S(  77,  212);

constexpr PackedScore MINOR_BEHIND_PAWN = S(   6,   12);
constexpr PackedScore KNIGHT_OUTPOST = S(  22,   16);
constexpr PackedScore BISHOP_PAWNS[7] = {S(   3,   21), S(   5,   19), S(   3,   12), S(   1,    4), S(  -2,   -5), S(  -2,  -18), S(  -6,  -30)};
constexpr PackedScore BISHOP_PAIR = S(  19,   60);
constexpr PackedScore LONG_DIAG_BISHOP = S(  15,    8);
constexpr PackedScore ROOK_OPEN[2] = {S(  24,    4), S(  12,    6)};

constexpr PackedScore TEMPO = S(  32,   34);

constexpr PackedScore COMPLEXITY_PAWNS = S(   0,   10);
constexpr PackedScore COMPLEXITY_PAWNS_BOTH_SIDES = S(   0,   63);
constexpr PackedScore COMPLEXITY_PAWN_ENDGAME = S(   0,   80);
constexpr PackedScore COMPLEXITY_OFFSET = S(   0, -133);

#undef S


}