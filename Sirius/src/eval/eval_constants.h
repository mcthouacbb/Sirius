#pragma once

#include "../defs.h"

namespace eval
{

#define S(mg, eg) PackedScore(mg, eg)

constexpr PackedScore MATERIAL[6] = {S(  59,  135), S( 287,  447), S( 310,  448), S( 391,  814), S( 805, 1495), S(0, 0)};

constexpr PackedScore PSQT[6][64] = {
	{
		S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
		S(  67,   75), S(  37,   88), S(  35,   93), S(  56,   75), S(  68,   66), S(  35,   94), S(  32,  107), S(  66,   83),
		S(  24,   14), S(  28,   42), S(  29,    7), S(  53,  -26), S(  38,  -18), S(  24,    1), S(   0,   36), S(   7,   20),
		S(  19,    9), S(   8,   14), S(  11,   -8), S(  17,  -23), S(   6,  -22), S(  -1,   -8), S(  -6,   15), S( -11,   12),
		S(   9,    0), S(   6,   16), S(   8,  -15), S(  13,  -15), S(   8,  -14), S(  -3,   -8), S( -14,   14), S( -15,    1),
		S(   4,   -3), S(  10,   12), S(  13,   -4), S(  -2,    1), S(  -8,    0), S( -15,   -5), S( -24,   12), S( -27,    0),
		S(  17,   -3), S(  31,    7), S(  17,   -8), S(   7,    8), S(  -6,    1), S(  -8,   -4), S( -16,   17), S( -17,    4),
		S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
	},
	{
		S( -70,  -85), S( -76,  -21), S( -30,  -12), S(  15,  -13), S( -39,    9), S( -68,   10), S(-103,   14), S( -81,  -43),
		S(  -8,   -9), S(  22,    2), S(  32,   -7), S(   7,    2), S(   8,    8), S(   2,   11), S(  -5,   21), S( -11,   11),
		S(  13,   -8), S(  12,   -3), S(  56,  -20), S(  37,    1), S(  20,    9), S(  12,    6), S(   3,    5), S(  -7,    5),
		S(  33,    3), S(  34,    7), S(  46,    5), S(  34,   14), S(  30,   18), S(  30,    7), S(  19,    4), S(   7,   16),
		S(  11,   17), S(  20,   11), S(  30,    8), S(  19,   23), S(  25,   15), S(  20,   13), S(  21,    1), S(   2,   12),
		S(   4,    0), S(  18,   -3), S(   9,   -9), S(  16,    9), S(   6,    8), S(  -2,   -4), S(  -1,   -5), S( -14,   -1),
		S(   4,    7), S(   5,   -5), S(   5,   -7), S(   4,   -2), S(   4,   -2), S(  -7,   -5), S( -12,   -3), S( -18,   -1),
		S( -10,   -6), S( -11,    0), S(  -2,   -9), S(  -1,    4), S(  -9,    1), S( -22,   -7), S( -15,   -3), S( -50,    9),
	},
	{
		S( -42,    1), S( -39,    9), S( -15,    3), S( -79,   15), S( -72,   20), S( -57,    8), S( -29,   11), S( -16,   16),
		S( -22,   -5), S( -40,   13), S( -14,    1), S(  -8,   -1), S( -23,   10), S(   1,   -3), S(  -1,   -1), S(  -5,   -4),
		S(  16,   11), S(  13,    0), S(  37,    5), S(   9,    3), S(  16,   -2), S(   8,    3), S(   6,    7), S(   5,    3),
		S(  -5,    5), S(   6,    8), S(   7,    9), S(  18,   11), S(  19,   16), S(  12,    5), S(   5,    8), S(  -9,    7),
		S(  13,   -5), S(   5,    6), S(   7,    4), S(   9,    9), S(  14,    7), S(  -2,   10), S(  -2,    5), S(   0,    2),
		S(  23,  -11), S(  24,  -10), S(  15,   -4), S(   4,    7), S(  -2,    3), S(   7,    2), S(  11,    1), S(   0,   -7),
		S(  23,  -20), S(  32,  -25), S(  21,  -14), S(   7,   -6), S(  -3,    0), S(  11,  -19), S(   6,  -19), S(  14,   -8),
		S(  35,  -29), S(  18,  -15), S(  -2,   -1), S(  14,   -3), S(   2,   -2), S(   1,    6), S(  13,   -2), S(  10,   -9),
	},
	{
		S(  15,    9), S( -19,   35), S(  -3,   24), S(   0,   15), S( -17,   25), S( -17,   30), S(  -6,   23), S(   0,   20),
		S(  28,    3), S(  34,    8), S(  16,   15), S(   6,   14), S(  15,   18), S(   0,   30), S(  -3,   25), S(  -1,   17),
		S(  10,    2), S(  37,    3), S(  23,    3), S(  21,    3), S(  -1,   13), S(  -4,   22), S(   8,   18), S( -12,   20),
		S(   5,    6), S(   7,   12), S(  12,    8), S(   9,    2), S(   1,   12), S(   5,   15), S(   3,   16), S( -10,   16),
		S(  -7,   -2), S(  14,    1), S(  -7,    6), S(   5,    0), S(  -7,    4), S( -11,    8), S( -12,    7), S( -16,    6),
		S(   8,  -26), S(  21,  -29), S(  -2,  -17), S(   0,  -17), S( -12,  -10), S( -16,  -10), S( -15,  -12), S( -21,   -9),
		S(  -5,  -30), S(  22,  -38), S(   2,  -24), S(   2,  -24), S(  -5,  -20), S(  -6,  -18), S( -16,  -14), S( -19,  -20),
		S( -10,  -35), S(  -7,  -16), S(  -3,  -22), S(   4,  -28), S(  -3,  -25), S( -10,  -17), S( -10,  -21), S( -11,  -17),
	},
	{
		S(   5,   -9), S(  46,  -41), S(  -9,   25), S(  -1,    7), S(  16,  -10), S( -11,    4), S( -34,    5), S( -14,    0),
		S(  42,    2), S(  -1,   14), S( -19,   30), S( -39,   54), S( -26,   34), S(  -9,    7), S(  -5,  -12), S(   7,  -11),
		S(  21,    6), S(  15,    5), S(   9,   18), S( -16,   24), S(  -2,   14), S(   7,    6), S(   8,  -16), S(  19,  -16),
		S(  12,   16), S(   4,   35), S(   5,   11), S( -11,   31), S(  -9,   30), S(   4,    4), S(   3,   10), S(   2,    2),
		S(  10,   13), S(  15,   14), S(  -2,   20), S(   3,   26), S(  -6,   31), S(  -7,   21), S(   1,   12), S(  -2,    3),
		S(  16,  -17), S(  14,   -5), S(   2,    6), S( -10,   21), S(  -9,   15), S(  -8,   16), S(   3,   -7), S(   2,  -16),
		S(  14,  -49), S(  17,  -57), S(   7,  -35), S(   3,   -3), S(   1,    0), S(   3,  -16), S(   2,  -21), S(   9,  -37),
		S(   6,  -47), S(  -8,  -44), S( -18,  -19), S(  -9,  -16), S(  -8,  -14), S( -12,  -12), S( -16,  -15), S( -15,  -12),
	},
	{
		S(  -5,  -62), S(  -2,    0), S( -35,   -4), S( -22,   -9), S(   6,   -5), S(   6,   -5), S(   6,   -5), S(   6,   -5),
		S( -58,   32), S(  -3,   58), S( -17,   48), S(  31,   18), S(   6,   -5), S(   6,   -5), S(   6,   -5), S(   6,   -5),
		S(  -8,   23), S(  27,   53), S(  36,   42), S(   4,   44), S(   6,   -5), S(   6,   -5), S(   6,   -5), S(   6,   -5),
		S( -44,   20), S( -18,   47), S( -10,   38), S( -36,   33), S(   6,   -5), S(   6,   -5), S(   6,   -5), S(   6,   -5),
		S( -64,    9), S( -34,   32), S( -18,   19), S( -39,   17), S(   6,   -5), S(   6,   -5), S(   6,   -5), S(   6,   -5),
		S( -21,  -10), S(   2,    9), S( -10,   -1), S( -16,   -3), S(   6,   -5), S(   6,   -5), S(   6,   -5), S(   6,   -5),
		S(  29,  -31), S(  28,   -6), S(  11,  -15), S(  -6,  -19), S(   6,   -5), S(   6,   -5), S(   6,   -5), S(   6,   -5),
		S(  17,  -62), S(  18,  -25), S(  -1,  -30), S(  10,  -50), S(   6,   -5), S(   6,   -5), S(   6,   -5), S(   6,   -5),
	},
};

constexpr PackedScore MOBILITY[4][28] = {
	{S( -10,  -26), S( -40,  -62), S( -14,  -31), S(  -7,   -5), S(   4,    8), S(   6,   19), S(  14,   25), S(  23,   32), S(  32,   32), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -21,  -40), S( -45,  -97), S( -24,  -39), S( -17,  -17), S(  -7,   -5), S(   0,    4), S(   4,   14), S(   8,   20), S(   9,   25), S(  12,   28), S(  13,   31), S(  22,   26), S(  20,   29), S(  33,   15), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -33,  -34), S(  14,  -67), S( -25,  -53), S( -13,  -33), S(  -6,  -25), S(  -2,   -7), S(   1,   -1), S(  -4,    9), S(   0,   12), S(   3,   18), S(   6,   24), S(   7,   33), S(  10,   38), S(  17,   40), S(  26,   36), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -39,   14), S( -55,  -73), S(-103,  -72), S( -79, -244), S( -75,  -94), S( -30,  -35), S( -22,   -8), S( -13,   -6), S(  -5,   -4), S(  -4,   22), S(  -2,   29), S(   1,   39), S(   4,   42), S(   7,   45), S(  11,   47), S(  13,   49), S(  15,   50), S(  15,   54), S(  16,   53), S(  18,   53), S(  26,   44), S(  35,   26), S(  39,   24), S(  56,    2), S(  61,   -5), S(  64,  -15), S(  46,  -15), S(  16,  -38)}
};

constexpr PackedScore THREAT_BY_PAWN[6] = {S(   9,  -15), S(  64,   31), S(  62,   63), S(  79,   28), S(  75,   -5), S(   0,    0)};
constexpr PackedScore THREAT_BY_KNIGHT[2][6] = {
	{S(   9,   30), S(  27,   30), S(  42,   45), S(  74,   15), S(  57,  -26), S(   0,    0)},
	{S(  -5,   10), S(  13,   28), S(  30,   31), S(  64,   35), S(  57,    3), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_BISHOP[2][6] = {
	{S(   2,   36), S(  42,   35), S(  -8,   27), S(  70,   16), S(  69,   61), S(   0,    0)},
	{S(   2,    8), S(  22,   23), S( -21,  -22), S(  46,   46), S(  48,  124), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_ROOK[2][6] = {
	{S(   0,   44), S(  18,   64), S(  28,   58), S(   8,  -28), S(  75,   15), S(   0,    0)},
	{S(  -8,    9), S(   2,   16), S(  15,    4), S(   6,  -72), S(  66,   49), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_QUEEN[2][6] = {
	{S(   6,   11), S(  24,   20), S(  10,   50), S(  18,   15), S(   9,  -49), S(  95,   47)},
	{S(  -1,   11), S(   0,    6), S(  -7,   21), S(  -6,    7), S( -18,  -70), S( 111,   74)}
};
constexpr PackedScore THREAT_BY_KING[6] = {S( -28,   49), S(   3,   53), S(  29,   44), S(  75,    8), S(   0,    0), S(   0,    0)};
constexpr PackedScore PUSH_THREAT = S(  16,   19);

constexpr PackedScore ISOLATED_PAWN[8] = {S(  -7,    5), S(  -4,  -16), S( -12,   -9), S( -11,  -17), S( -11,  -17), S(  -7,   -8), S(  -1,  -15), S(  -9,    7)};
constexpr PackedScore DOUBLED_PAWN[8] = {S(  -4,  -62), S(   7,  -37), S(   0,  -30), S(  -4,  -21), S(  -7,  -15), S( -15,  -19), S(   5,  -42), S(   2,  -75)};
constexpr PackedScore BACKWARDS_PAWN[8] = {S(   0,    0), S(  -5,  -13), S(  -1,  -15), S( -10,  -12), S(   1,  -21), S(  21,   -9), S(   0,    0), S(   0,    0)};
constexpr PackedScore PAWN_PHALANX[8] = {S(   0,    0), S(   5,   -5), S(  12,   -1), S(  19,   14), S(  48,   63), S( 116,  224), S( -22,  354), S(   0,    0)};
constexpr PackedScore DEFENDED_PAWN[8] = {S(   0,    0), S(   0,    0), S(  20,    6), S(  11,    7), S(  15,   20), S(  20,   65), S( 131,   79), S(   0,    0)};

constexpr PackedScore PASSED_PAWN[2][2][8] = {
	{
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -32,  -40), S( -13,   25), S( -16,  154), S(  36,  239), S(   0,    0)},
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -21,  -52), S(  11,  -23), S(  18,   17), S(  62,   33), S(   0,    0)}
	},
	{
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -30,  -56), S(   0,  -25), S(  17,    4), S(  65,   -2), S(   0,    0)},
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -29,  -61), S(   2,  -35), S(  -4,  -18), S(  -5,  -20), S(   0,    0)}
	}
};
constexpr PackedScore OUR_PASSER_PROXIMITY[8] = {S(   0,    0), S(  47,   83), S(   2,   68), S(   1,   42), S(   5,   30), S(  10,   23), S(  19,   21), S(  14,   20)};
constexpr PackedScore THEIR_PASSER_PROXIMITY[8] = {S(   0,    0), S( -36,    5), S(  23,   -1), S(  14,   26), S(  17,   46), S(  11,   79), S(  14,   79), S(  16,   68)};

constexpr PackedScore PAWN_STORM[2][4][8] = {
	{
		{S(  16,   14), S(-135,  -49), S(  -4,   -9), S(   5,  -13), S(   0,   -1), S(  -5,    9), S(  -3,    8), S(   0,    0)},
		{S(  11,    3), S( -14, -100), S(  53,  -42), S(   8,  -11), S(   2,   -5), S( -10,    7), S(  -7,    9), S(   0,    0)},
		{S(  -4,    6), S(  58,  -98), S(  67,  -45), S(  19,  -18), S(   3,   -1), S(  -7,    7), S(  -8,   12), S(   0,    0)},
		{S(   8,   -8), S( 106,  -86), S(  39,  -22), S(  13,   -2), S(  -2,    3), S(  -9,    0), S(  -3,    0), S(   0,    0)}
	},
	{
		{S(   0,    0), S(  -3,  -27), S( -24,  120), S(  11,  -43), S(  -2,    7), S(  -2,    5), S(  -5,    9), S(   0,    0)},
		{S(   0,    0), S(   7,  -89), S(   0,   82), S(  56,  -41), S(   3,    2), S(  -7,    5), S(  -8,    8), S(   0,    0)},
		{S(   0,    0), S(  -6,   18), S( -48, -120), S(  22,  -27), S(   2,    4), S(  -2,    5), S(  -9,   11), S(   0,    0)},
		{S(   0,    0), S( -11,  -56), S(  55,    5), S(  21,   -2), S(   0,    8), S(   0,  -10), S(   0,    4), S(   0,    0)}
	}
};
constexpr PackedScore PAWN_SHIELD[4][8] = {
	{S(  16,    1), S(  -8,   25), S( -15,   17), S(  -3,    8), S(   4,    1), S( -32,  -27), S( -77,  -38), S(   0,    0)},
	{S(  19,   -1), S( -15,   12), S( -10,    8), S(  12,   -3), S(   9,  -11), S(  -3,  -19), S( -47,  -35), S(   0,    0)},
	{S(   4,    8), S( -15,    7), S(  15,    5), S(   2,   -1), S(  -1,   -1), S(   5,  -19), S( -16,  -40), S(   0,    0)},
	{S(  13,   -4), S(   6,   -3), S(  -3,   -1), S(   0,   -6), S(   8,   -9), S(  29,  -20), S( -17,  -19), S(   0,    0)}
};
constexpr PackedScore SAFE_KNIGHT_CHECK = S( 101,   -5);
constexpr PackedScore SAFE_BISHOP_CHECK = S(  17,   24);
constexpr PackedScore SAFE_ROOK_CHECK = S(  75,    8);
constexpr PackedScore SAFE_QUEEN_CHECK = S(  30,   31);
constexpr PackedScore UNSAFE_KNIGHT_CHECK = S(   8,    1);
constexpr PackedScore UNSAFE_BISHOP_CHECK = S(  14,   10);
constexpr PackedScore UNSAFE_ROOK_CHECK = S(  22,   -2);
constexpr PackedScore UNSAFE_QUEEN_CHECK = S(   6,   11);
constexpr PackedScore KING_ATTACKER_WEIGHT[4] = {S(  15,   -4), S(  12,   -2), S(  12,  -15), S(   0,    5)};
constexpr PackedScore KING_ATTACKS[14] = {S( -54,    6), S( -58,    3), S( -60,    0), S( -60,    4), S( -57,    3), S( -47,    1), S( -30,   -1), S( -10,   -8), S(  21,  -19), S(  46,  -14), S(  63,  -18), S(  72,   23), S(  97,  -14), S(  89,   29)};

constexpr PackedScore MINOR_BEHIND_PAWN = S(   8,   14);
constexpr PackedScore KNIGHT_OUTPOST = S(  26,   17);
constexpr PackedScore BISHOP_PAWNS[7] = {S(  20,   13), S(  12,   20), S(   5,   16), S(   0,    8), S(  -6,   -2), S( -10,  -19), S( -19,  -38)};
constexpr PackedScore BISHOP_OPP_PAWNS[7] = {S(  29,  -15), S(  11,    3), S(   3,   10), S(  -1,   12), S(  -7,   11), S( -13,    5), S( -22,   -4)};
constexpr PackedScore BISHOP_PAIR = S(  24,   59);
constexpr PackedScore ROOK_OPEN[2] = {S(  26,    3), S(  15,    3)};

constexpr PackedScore TEMPO = S(  32,   36);

constexpr PackedScore COMPLEXITY_PAWNS = S(   0,    8);
constexpr PackedScore COMPLEXITY_PASSERS = S(   0,    1);
constexpr PackedScore COMPLEXITY_PAWNS_BOTH_SIDES = S(   0,   68);
constexpr PackedScore COMPLEXITY_PAWN_ENDGAME = S(   0,   65);
constexpr PackedScore COMPLEXITY_OFFSET = S(   0, -132);

#undef S


}