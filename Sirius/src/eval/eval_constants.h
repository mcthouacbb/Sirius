#pragma once

#include "../defs.h"

namespace eval
{

#define S(mg, eg) PackedScore(mg, eg)

constexpr PackedScore MATERIAL[6] = {S(  56,  122), S( 266,  456), S( 289,  463), S( 360,  830), S( 733, 1560), S(0, 0)};

constexpr PackedScore PSQT[6][64] = {
	{
		S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
		S(  52,   89), S(  25,   95), S(  41,   74), S(  58,   85), S(  63,   80), S(  35,  105), S(  23,  117), S(  48,  107),
		S(  37,   21), S(  24,   44), S(  29,   12), S(  48,  -16), S(  34,   -8), S(  22,   13), S(  -1,   43), S(  13,   35),
		S(  17,   19), S(   0,   16), S(  14,  -12), S(  17,  -12), S(   6,  -12), S(   0,    3), S(  -7,   19), S(  -8,   27),
		S(   5,    9), S(  -3,   14), S(  11,  -26), S(  13,   -9), S(   7,   -8), S(  -4,   -1), S( -13,   16), S( -14,   12),
		S(   0,    4), S(   9,    0), S(  -4,  -22), S(  -1,    6), S(  -7,    5), S( -13,   -1), S( -22,   10), S( -25,   10),
		S(   9,    9), S(  27,    2), S(  29, -137), S(   7,   15), S(  -4,    6), S(  -8,    5), S( -15,   18), S( -15,   17),
		S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
	},
	{
		S( -64,  -86), S( -75,  -15), S( -24,  -17), S(   6,  -10), S( -38,   10), S( -62,   11), S(-100,   14), S( -80,  -43),
		S( -12,   -8), S(  17,    0), S(  31,   -6), S(   8,    6), S(   8,   13), S(   2,   11), S(  -5,   18), S( -11,    8),
		S(  11,   -7), S(   9,   -1), S(  51,  -16), S(  30,    6), S(  16,   12), S(  15,    7), S(   4,    4), S(  -7,    3),
		S(  31,    4), S(  29,   10), S(  46,    7), S(  31,   18), S(  31,   20), S(  27,    8), S(  17,    3), S(   7,   15),
		S(   9,   18), S(  18,   13), S(  25,   11), S(  19,   23), S(  22,   14), S(  18,   13), S(  19,    2), S(   2,   10),
		S(   4,   -4), S(  17,   -4), S(   8,  -10), S(  16,    8), S(   6,    8), S(   0,   -7), S(   0,   -7), S( -12,   -3),
		S(   5,    3), S(   7,   -6), S(   8,   -9), S(   5,   -3), S(   5,   -4), S(  -6,   -7), S( -10,   -5), S( -16,   -3),
		S(  -7,   -6), S(  -8,   -4), S(  -1,  -11), S(  -1,    2), S(  -6,   -3), S( -18,   -8), S( -12,   -5), S( -45,   10),
	},
	{
		S( -36,   -3), S( -32,    7), S( -19,    2), S( -65,   13), S( -64,   19), S( -52,    6), S( -28,    9), S( -14,   14),
		S( -22,   -5), S( -32,   12), S( -12,    1), S(  -5,    1), S( -20,    8), S(  -1,   -3), S(  -1,   -2), S(  -2,   -8),
		S(  17,   12), S(   8,    0), S(  38,    6), S(   6,    7), S(  13,   -1), S(   6,    3), S(   6,    2), S(   6,    1),
		S(  -5,    6), S(   6,   10), S(   5,   13), S(  16,   16), S(  17,   20), S(  11,    5), S(   3,    9), S(  -7,    6),
		S(  14,   -5), S(   1,    9), S(   6,    7), S(   9,   11), S(  14,    9), S(  -3,   12), S(  -1,    4), S(   0,    1),
		S(  20,  -11), S(  21,  -10), S(  12,   -3), S(   5,    7), S(  -2,    3), S(   6,    2), S(  10,    2), S(   2,   -6),
		S(  23,  -20), S(  28,  -25), S(  22,  -17), S(   5,   -7), S(  -2,   -2), S(   9,  -19), S(   7,  -19), S(  15,   -8),
		S(  35,  -31), S(  22,  -21), S(  -2,   -1), S(  16,   -5), S(   2,   -4), S(   4,    6), S(  12,   -1), S(  12,   -8),
	},
	{
		S(  13,   10), S( -28,   41), S(  -1,   26), S(  -4,   15), S( -19,   24), S( -20,   32), S(  -4,   21), S(  -1,   19),
		S(  25,    0), S(  27,    6), S(  19,   12), S(   7,   12), S(  16,   14), S(   2,   28), S(  -3,   24), S(   0,   16),
		S(   5,    3), S(  35,    3), S(  27,    1), S(  21,    5), S(   3,   14), S(  -1,   24), S(  11,   18), S( -10,   23),
		S(   2,   10), S(   2,   16), S(  12,   12), S(  11,    4), S(   3,   13), S(   5,   18), S(   4,   18), S( -11,   22),
		S(  -7,    1), S(  11,    5), S(  -5,   11), S(   6,    2), S(  -5,    6), S(  -9,    9), S( -11,    9), S( -13,    9),
		S(   8,  -28), S(  20,  -28), S(   0,  -14), S(   2,  -16), S( -10,   -9), S( -13,  -11), S( -12,  -11), S( -18,   -8),
		S(  -5,  -32), S(  18,  -38), S(   4,  -23), S(   3,  -24), S(  -3,  -20), S(  -5,  -18), S( -13,  -15), S( -17,  -19),
		S(  -8,  -37), S(  -5,  -18), S(  -1,  -19), S(   6,  -27), S(  -1,  -24), S(  -8,  -17), S(  -8,  -21), S(  -8,  -18),
	},
	{
		S(   1,   -5), S(  33,  -34), S( -30,   46), S( -30,   39), S( -11,   13), S( -32,   29), S( -49,   23), S( -25,   10),
		S(  27,   15), S( -12,   21), S( -23,   54), S( -42,   72), S( -26,   43), S(  -8,   13), S(  -4,  -12), S(   5,  -10),
		S(   1,   26), S(   4,   20), S(  -5,   35), S( -11,   35), S(   2,   18), S(   8,    7), S(   7,  -12), S(  17,  -12),
		S(   9,   26), S(   7,   40), S(   5,   25), S( -10,   37), S(  -5,   30), S(   8,    2), S(  10,    1), S(   6,    1),
		S(  11,   11), S(  16,   15), S(   1,   26), S(   4,   26), S(  -1,   26), S(   1,   11), S(   6,    9), S(   5,   -4),
		S(  13,  -20), S(  16,  -11), S(   7,    1), S(  -2,   10), S(   0,    2), S(   0,    5), S(  10,  -21), S(   8,  -25),
		S(  15,  -63), S(  22,  -80), S(  16,  -52), S(  11,  -22), S(   8,  -15), S(  10,  -31), S(   8,  -33), S(  14,  -48),
		S(  16,  -72), S(   0,  -66), S(  -8,  -34), S(   2,  -33), S(   1,  -31), S(  -5,  -19), S(  -7,  -25), S(  -7,  -21),
	},
	{
		S(  34,  -83), S(  13,   -2), S( -40,  -22), S( -78,   28), S(   5,   -5), S(   5,   -5), S(   5,   -5), S(   5,   -5),
		S( -28,   24), S(  25,   53), S(   1,   28), S(   6,   42), S(   5,   -5), S(   5,   -5), S(   5,   -5), S(   5,   -5),
		S(  15,   12), S(  55,   44), S(  37,   23), S( -26,   71), S(   5,   -5), S(   5,   -5), S(   5,   -5), S(   5,   -5),
		S( -31,   14), S(   2,   41), S( -18,   23), S( -69,   62), S(   5,   -5), S(   5,   -5), S(   5,   -5), S(   5,   -5),
		S( -53,    4), S( -19,   25), S( -20,    1), S( -65,   45), S(   5,   -5), S(   5,   -5), S(   5,   -5), S(   5,   -5),
		S( -12,  -15), S(  13,    3), S( -10,  -20), S( -34,   23), S(   5,   -5), S(   5,   -5), S(   5,   -5), S(   5,   -5),
		S(  32,  -35), S(  35,  -11), S(   8,  -34), S( -21,    7), S(   5,   -5), S(   5,   -5), S(   5,   -5), S(   5,   -5),
		S(  23,  -67), S(  24,  -28), S(  -5,  -46), S( -11,  -22), S(   5,   -5), S(   5,   -5), S(   5,   -5), S(   5,   -5),
	},
};

constexpr PackedScore MOBILITY[4][28] = {
	{S(  -9,  -21), S( -37,  -65), S( -13,  -32), S(  -6,   -5), S(   3,    7), S(   6,   18), S(  13,   25), S(  20,   33), S(  29,   32), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -17,  -34), S( -47,  -99), S( -27,  -40), S( -21,  -17), S(  -9,   -4), S(  -3,    6), S(   2,   17), S(   6,   22), S(   8,   28), S(  13,   29), S(  14,   32), S(  25,   23), S(  27,   27), S(  39,    9), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -24,  -43), S(  12,  -72), S( -22,  -55), S( -12,  -33), S(  -5,  -25), S(  -2,   -6), S(   1,   -1), S(  -4,    9), S(   0,   12), S(   3,   19), S(   6,   26), S(   7,   36), S(   9,   42), S(  16,   43), S(  22,   41), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -16,  -23), S( -43,  -91), S( -88,  -80), S( -60, -267), S( -54, -125), S( -18,  -48), S( -12,  -22), S(  -4,  -18), S(   3,  -14), S(   3,   12), S(   4,   21), S(   6,   32), S(   8,   38), S(  11,   42), S(  14,   45), S(  15,   50), S(  16,   54), S(  15,   61), S(  14,   65), S(  14,   67), S(  20,   60), S(  25,   46), S(  24,   47), S(  35,   30), S(  50,    4), S(  23,   24), S(  41,  -15), S( -47,   28)}
};

constexpr PackedScore THREAT_BY_PAWN[6] = {S(   8,  -15), S(  59,   31), S(  58,   64), S(  73,   28), S(  70,  -11), S(   0,    0)};
constexpr PackedScore THREAT_BY_KNIGHT[2][6] = {
	{S(   7,   29), S(  21,   40), S(  36,   45), S(  69,   10), S(  47,  -27), S(   0,    0)},
	{S(  -4,   12), S(  10,   40), S(  27,   32), S(  59,   33), S(  52,    1), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_BISHOP[2][6] = {
	{S(   1,   39), S(  40,   36), S(  -8,   37), S(  65,   14), S(  63,   62), S(   0,    0)},
	{S(   0,    9), S(  20,   25), S( -21,  -14), S(  40,   48), S(  42,  130), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_ROOK[2][6] = {
	{S(   1,   45), S(  16,   67), S(  25,   60), S(  14,  -48), S(  69,   10), S(   0,    0)},
	{S(  -8,    9), S(   1,   17), S(  13,    3), S(  12,  -91), S(  59,   44), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_QUEEN[2][6] = {
	{S(   6,   11), S(  22,   24), S(   8,   55), S(  13,   13), S(  11,  -62), S(  89,   34)},
	{S(  -2,   13), S(   0,    7), S(  -6,   21), S(  -5,    3), S( -16,  -75), S( 102,   68)}
};
constexpr PackedScore THREAT_BY_KING[6] = {S( -34,   50), S(   3,   48), S(  18,   42), S(  89,   11), S(   0,    0), S(   0,    0)};
constexpr PackedScore PUSH_THREAT = S(  14,   20);

constexpr PackedScore ISOLATED_PAWN[8] = {S(  -7,   -1), S(  -3,  -12), S( -10,  -10), S(  -9,  -16), S( -11,  -14), S(  -8,   -6), S(  -3,  -10), S( -11,    1)};
constexpr PackedScore PAWN_PHALANX[8] = {S(   0,    0), S(   6,   -3), S(  11,    4), S(  18,   16), S(  44,   62), S( 114,  226), S( -11,  370), S(   0,    0)};
constexpr PackedScore DEFENDED_PAWN[8] = {S(   0,    0), S(   0,    0), S(  19,   10), S(  12,    9), S(  12,   19), S(  19,   58), S( 125,   74), S(   0,    0)};

constexpr PackedScore PASSED_PAWN[2][2][8] = {
	{
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -32,  -36), S( -14,   27), S( -20,  160), S(  27,  246), S(   0,    0)},
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -20,  -51), S(   9,  -25), S(  14,   15), S(  61,   29), S(   0,    0)}
	},
	{
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -27,  -58), S(  -1,  -27), S(  18,    0), S(  61,   -8), S(   0,    0)},
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -28,  -64), S(  -1,  -36), S(  -5,  -22), S( -12,  -22), S(   0,    0)}
	}
};
constexpr PackedScore OUR_PASSER_PROXIMITY[8] = {S(   0,    0), S(  54,   81), S(   8,   69), S(  -1,   44), S(   0,   33), S(   5,   25), S(  13,   24), S(   6,   24)};
constexpr PackedScore THEIR_PASSER_PROXIMITY[8] = {S(   0,    0), S( -68,   11), S(  15,   -2), S(  15,   25), S(  19,   46), S(  14,   82), S(  17,   83), S(  20,   71)};

constexpr PackedScore PAWN_STORM[2][4][8] = {
	{
		{S(  12,   29), S( -23,  -51), S(   0,   12), S(  10,    2), S(   7,   14), S(   0,   25), S(  -2,   25), S(   0,    0)},
		{S(  14,   -5), S(  36, -128), S(  42,  -59), S(  21,  -22), S(  11,  -13), S(  -2,    0), S(   2,    2), S(   0,    0)},
		{S(   8,   14), S(  46,  -92), S(  46,  -44), S(  25,  -14), S(  12,    5), S(   2,   16), S(  -2,   21), S(   0,    0)},
		{S(   6,    5), S(  57,  -86), S(  35,  -19), S(  17,    6), S(   2,   15), S(  -4,   12), S(  -7,   21), S(   0,    0)}
	},
	{
		{S(   0,    0), S(  -2,  -20), S( -24,  136), S(  31,  -72), S(   0,   25), S(   4,   21), S(  -4,   27), S(   0,    0)},
		{S(   0,    0), S(   9,  -60), S(  10,   42), S(  40,  -60), S(  11,   -8), S(  -1,    1), S(   2,    1), S(   0,    0)},
		{S(   0,    0), S(   3,   28), S( -23, -107), S(  26,  -27), S(   9,   12), S(   6,   14), S(   0,   18), S(   0,    0)},
		{S(   0,    0), S( -29,  -51), S(  41,   -1), S(  22,    5), S(   0,   23), S(   2,    3), S(  -1,   21), S(   0,    0)}
	}
};
constexpr PackedScore PAWN_SHIELD[4][8] = {
	{S(  13,   30), S(  -4,   51), S(  -4,   37), S(   9,   27), S(  15,   12), S(   5,  -24), S(  -5,  -53), S(   0,    0)},
	{S(  14,   -4), S(  -5,   -1), S(   3,  -12), S(  12,  -16), S(  13,  -27), S(  10,  -43), S(   1,  -66), S(   0,    0)},
	{S(   9,   60), S(   2,  -83), S(   3,   29), S(  11,   26), S(  11,   27), S(  13,   16), S(   7,  -36), S(   0,    0)},
	{S(   7,   13), S(   3,   12), S(  -2,   14), S(   3,    6), S(   9,    2), S(  13,  -13), S(  -6,  -18), S(   0,    0)}
};
constexpr PackedScore SAFE_KNIGHT_CHECK = S(  32,   -4);
constexpr PackedScore SAFE_BISHOP_CHECK = S(  18,    6);
constexpr PackedScore SAFE_ROOK_CHECK = S(  26,    6);
constexpr PackedScore SAFE_QUEEN_CHECK = S(  19,   -2);
constexpr PackedScore UNSAFE_KNIGHT_CHECK = S(   3,    4);
constexpr PackedScore UNSAFE_BISHOP_CHECK = S(   9,   10);
constexpr PackedScore UNSAFE_ROOK_CHECK = S(  12,    1);
constexpr PackedScore UNSAFE_QUEEN_CHECK = S(   4,    9);
constexpr PackedScore KING_ATTACKER_WEIGHT[4] = {S(  19,  -10), S(  12,   -3), S(  13,  -18), S(   7,  -12)};
constexpr PackedScore KING_ATTACKS[14] = {S(  -6,   23), S(  -4,   19), S(  -4,   12), S(  -4,   13), S(  -2,    6), S(   1,   -1), S(   8,  -14), S(  11,  -26), S(  19,  -38), S(  22,  -34), S(  26,  -54), S(  23,    2), S(  27,  -43), S(  25,  -17)};
constexpr PackedScore SAFETY_OFFSET = S(  16,  152);

constexpr PackedScore MINOR_BEHIND_PAWN = S(   7,   15);
constexpr PackedScore KNIGHT_OUTPOST = S(  23,   19);
constexpr PackedScore BISHOP_PAWNS[7] = {S(   4,   24), S(   6,   22), S(   4,   13), S(   1,    4), S(  -2,   -6), S(  -3,  -20), S(  -8,  -35)};
constexpr PackedScore BISHOP_PAIR = S(  18,   64);
constexpr PackedScore ROOK_OPEN[2] = {S(  24,    3), S(  13,    4)};

constexpr PackedScore TEMPO = S(  29,   36);

constexpr PackedScore COMPLEXITY_PAWNS = S(   0,    4);
constexpr PackedScore COMPLEXITY_PASSERS = S(   0,    1);
constexpr PackedScore COMPLEXITY_PAWNS_BOTH_SIDES = S(   0,   67);
constexpr PackedScore COMPLEXITY_PAWN_ENDGAME = S(   0,   63);
constexpr PackedScore COMPLEXITY_OFFSET = S(   0,  -90);

#undef S


}