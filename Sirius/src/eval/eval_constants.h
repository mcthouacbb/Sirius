#pragma once

#include "../defs.h"

namespace eval
{

// clang-format off
#define S(mg, eg) ScorePair(mg, eg)

constexpr ScorePair MATERIAL[6] = {S(  69,  164), S( 311,  523), S( 339,  546), S( 453,  947), S( 784, 1642), S(0, 0)};

constexpr ScorePair PSQT[6][64] = {
    {
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  56,   49), S(  17,   81), S(  68,   40), S(  89,   44), S(  96,   44), S(  72,   66), S(  47,   80), S(  81,   45),
        S(   1,   24), S(  -9,   25), S(  24,    2), S(  24,  -22), S(  16,  -27), S(   3,   -1), S( -14,   22), S(  -8,   21),
        S(  -2,   13), S(  -9,   19), S(  17,   -7), S(  18,  -24), S(   8,  -28), S(  -2,   -9), S(  -6,   10), S(  -5,   11),
        S(  -3,    6), S(   0,   17), S(  11,  -10), S(  16,  -12), S(  11,  -14), S(   5,  -12), S(  -6,   12), S(  -9,    5),
        S(  -2,    4), S(  12,   10), S(   5,    6), S(   4,    4), S(  -5,   -1), S(  -7,   -2), S( -20,   10), S( -14,    1),
        S(   9,    4), S(  25,    3), S(  27,  -30), S(  -7,   15), S(  -6,    2), S( -14,    0), S( -12,    9), S( -11,    2),
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
    },
    {
        S(-128,  -56), S( -18,  -12), S( -75,   33), S(   3,    4), S( -25,    5), S( -98,   30), S( -68,  -12), S(-129,  -65),
        S(   6,  -16), S(  -3,    6), S(  42,  -16), S(  29,   22), S(  21,   25), S(  30,   -9), S(  -1,   -3), S(   5,  -14),
        S(  -3,   -7), S(  -7,   13), S(  23,   30), S(  29,   22), S(  23,   26), S(  28,   26), S(   0,   -2), S( -26,  -14),
        S(  23,    9), S(  25,   16), S(  37,   34), S(  18,   48), S(  24,   46), S(  36,   27), S(  25,   -1), S(  13,   -5),
        S(  12,   10), S(  26,   19), S(  16,   36), S(  25,   38), S(  31,   30), S(  23,   24), S(  20,    2), S(   7,  -13),
        S(  15,  -21), S(  19,   -1), S(  21,    2), S(  19,   19), S(  16,   20), S(   8,   -1), S(  12,  -16), S(  -1,  -37),
        S(  13,   -2), S(   7,    2), S(   9,  -15), S(   9,    0), S(   9,    1), S(  -3,  -20), S(  -8,   -9), S( -10,  -25),
        S( -39,  -46), S(   3,  -25), S(   1,  -19), S(  10,   -4), S(   1,   -1), S( -17,  -25), S(  -1,  -36), S( -52,  -70),
    },
    {
        S( -39,   -1), S(  -1,    6), S( -46,   18), S( -90,   29), S( -88,   32), S( -99,   24), S( -39,   17), S( -34,    5),
        S( -17,   12), S( -44,   11), S( -11,   15), S( -31,   19), S( -27,   18), S(  -1,    8), S( -18,    3), S( -37,   19),
        S(   4,   10), S(   0,   21), S(  16,   12), S(  26,   12), S(  26,   12), S(  29,    0), S(  17,   12), S(   5,    0),
        S( -15,   13), S(  11,   16), S(   4,   21), S(  19,   26), S(  38,   20), S(  20,   10), S(  27,    8), S(  -5,    4),
        S(   9,   -7), S(  11,    6), S(   9,   13), S(  19,   15), S(  22,   13), S(  18,    9), S(  22,   -4), S(   2,  -11),
        S(  20,   -8), S(  25,   -8), S(  10,   -9), S(  15,    4), S(   9,    0), S(   5,  -15), S(  21,  -14), S(  11,  -16),
        S(  30,  -51), S(  28,  -34), S(  24,  -23), S(   4,   -7), S(   2,   -7), S(  12,  -21), S(  14,  -41), S(  23,  -34),
        S(  25,  -31), S(  15,  -15), S(  -1,  -14), S(   7,   -5), S(   0,   -5), S(  -4,   -7), S(   8,  -12), S(  20,  -30),
    },
    {
        S(  42,   29), S(  39,   33), S(   2,   45), S(   2,   39), S(   1,   36), S( -10,   42), S(  22,   31), S(  28,   27),
        S(  17,   23), S(   4,   28), S(  19,   20), S(  20,   36), S(  33,   29), S(  19,   26), S(  -1,   32), S(   9,   26),
        S( -21,   29), S(  28,    4), S(  10,   22), S(  29,    8), S(  41,    2), S(  15,   18), S(  32,    4), S(  -7,   20),
        S(  -6,   16), S(  -1,   14), S(   7,   11), S(  27,    8), S(  38,    1), S(  23,    6), S(  13,    7), S(  -3,   11),
        S( -18,    0), S( -11,   13), S( -18,   11), S(  -3,    5), S(  -1,   -2), S( -13,    9), S( -14,    8), S( -15,   -1),
        S( -24,  -26), S(  -1,  -17), S( -17,  -19), S( -10,  -23), S(  -5,  -28), S( -18,  -18), S( -11,  -15), S( -23,  -23),
        S( -53,  -22), S(  -5,  -38), S( -10,  -37), S( -10,  -34), S(  -5,  -39), S( -12,  -33), S( -12,  -38), S( -40,  -27),
        S( -15,  -39), S( -15,  -23), S(  -3,  -22), S(  -1,  -31), S(   2,  -35), S(  -7,  -27), S( -10,  -29), S( -11,  -35),
    },
    {
        S(  49,    9), S(  61,   20), S(  15,   44), S(  12,   41), S(  22,   19), S(  19,   16), S(  34,   -3), S(  -1,   15),
        S(  11,   38), S( -40,   80), S(  -1,   28), S( -41,   78), S( -27,   55), S(   8,    9), S( -35,   39), S(   2,   14),
        S( -39,   74), S( -26,   46), S( -20,   36), S( -24,   20), S(  -7,   19), S(  -9,   10), S(   3,   -8), S(  -7,    3),
        S( -12,   36), S( -18,   50), S( -24,   43), S( -31,   68), S( -23,   56), S(  -2,    6), S(  -1,   27), S(   6,   -9),
        S(  -2,   22), S(   7,    9), S( -11,   24), S( -14,   53), S( -13,   53), S(   2,   10), S(  16,    0), S(   6,  -11),
        S(   1,  -28), S(  16,  -30), S(  -3,    2), S(  -3,   -7), S(  -1,   -9), S(   6,   -1), S(  19,  -24), S(   8,  -34),
        S(  -2,  -50), S(  25,  -86), S(  21,  -88), S(  10,  -34), S(   7,  -27), S(  17,  -66), S(  17,  -53), S(  11,  -52),
        S(   4,  -69), S(  -3,  -74), S(  -8,  -66), S(  11,  -57), S(  12,  -56), S(   3,  -63), S(  -3,  -60), S(  17,  -69),
    },
    {
        S( -63, -174), S( -41,  -51), S(  16,  -30), S(  20,   -9), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S( -41,  -63), S( -18,   26), S(  47,   28), S(  16,   28), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  -1,  -13), S(  63,   26), S(  74,   55), S(  34,   52), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S( -31,   -2), S(  23,   29), S(  33,   64), S( -27,   84), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S( -34,  -21), S(  20,   14), S(  15,   54), S( -20,   86), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S( -16,  -27), S(  -8,   -4), S(   2,   36), S( -19,   66), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  20,  -48), S(   0,  -16), S( -32,   25), S( -48,   45), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  14, -102), S(  14,  -51), S( -17,   -8), S( -20,  -19), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
    },
};

constexpr ScorePair MOBILITY[4][28] = {
    {S(   9,   18), S( -38, -107), S( -21,  -31), S( -11,    4), S(  -1,   13), S(   3,   30), S(  10,   32), S(  19,   32), S(  30,   11), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S(  -7,    6), S( -34, -116), S( -19,  -62), S( -15,  -29), S(  -6,  -14), S(   0,    6), S(   0,   21), S(   0,   28), S(  -3,   36), S(   3,   36), S(   0,   38), S(  19,   20), S(  20,   39), S(  46,   -7), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S(  16,  -14), S( -63,  -89), S( -22,  -95), S( -13,  -45), S( -12,  -20), S( -13,   -2), S( -14,   14), S(  -9,   20), S(  -1,   26), S(   4,   30), S(   3,   41), S(   9,   48), S(  11,   53), S(  27,   41), S(  91,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S(  11,  102), S(  13,  100), S(  -6,   97), S( -42,   -3), S( -24, -133), S( -12,  -91), S(  -6,  -58), S(  -5,  -30), S(  -3,  -18), S(  -3,    2), S(   0,   11), S(   1,   27), S(   3,   27), S(   4,   36), S(   4,   40), S(   4,   44), S(   5,   42), S(   1,   39), S(   1,   39), S(   3,   30), S(  10,   12), S(  16,   -3), S(  17,  -20), S(  25,  -46), S(  21,  -65), S(  -4,  -78), S( -17,  -51), S(  -1,  -43)}
};

constexpr ScorePair THREAT_BY_PAWN[6] = {S(  -1,  -17), S(  44,   65), S(  40,   92), S(  35,   45), S(  29,   49), S( -48,   13)};
constexpr ScorePair THREAT_BY_KNIGHT[2][6] = {
    {S(   4,   34), S(   5,   -7), S(  19,   44), S(  41,   25), S(  25,   53), S(  80,   22)},
    {S(  -2,    7), S(   1,    2), S(  19,   49), S(  35,   49), S(  32,   58), S(  -2,   68)}
};
constexpr ScorePair THREAT_BY_BISHOP[2][6] = {
    {S(   0,   31), S(  22,   46), S( -27,  -18), S(  36,   30), S(  29,   14), S( -21,   35)},
    {S(  -3,    3), S(  17,   53), S( -26,   -6), S(  34,   49), S(  22,   38), S(  -9,   37)}
};
constexpr ScorePair THREAT_BY_ROOK[2][6] = {
    {S(  -1,   37), S(   4,   65), S(  12,   61), S( -15,  -66), S(  34,   14), S(  -4,   39)},
    {S(  -5,    4), S(  -2,   18), S(   2,   11), S( -13,  -45), S(  21,   49), S(  21,   37)}
};
constexpr ScorePair THREAT_BY_QUEEN[2][6] = {
    {S(   4,   29), S(  21,   25), S(  14,   42), S(  -4,    0), S( -12,  -10), S(  40,  129)},
    {S(  -2,    4), S(   2,   -1), S(  -1,    3), S(  -2,   10), S(  -5,    4), S(  20,  152)}
};
constexpr ScorePair THREAT_BY_KING[6] = {S(  29,   45), S(  15,   26), S(  51,   21), S(  21,   21), S( -61,  -24), S(   0,    0)};
constexpr ScorePair KNIGHT_HIT_QUEEN = S(   0,    2);
constexpr ScorePair BISHOP_HIT_QUEEN = S(   1,    8);
constexpr ScorePair ROOK_HIT_QUEEN = S(   3,    1);
constexpr ScorePair PUSH_THREAT = S(  11,   25);
constexpr ScorePair RESTRICTED_SQUARES = S(   3,    3);

constexpr ScorePair ISOLATED_PAWN[8] = {S(  -9,   -1), S(  -6,  -15), S(  -9,  -14), S( -10,  -17), S( -12,  -17), S( -12,  -11), S(  -7,  -12), S(  -8,   -1)};
constexpr ScorePair DOUBLED_PAWN[8] = {S(  -6,  -61), S(   2,  -39), S(  -3,  -31), S(  -4,  -29), S(  -8,  -24), S(   0,  -20), S(   0,  -29), S(  -9,  -61)};
constexpr ScorePair BACKWARDS_PAWN[8] = {S(   0,    0), S(  -4,  -22), S(  -1,  -15), S(  -5,  -12), S(  13,  -27), S(  -5,   13), S(   0,    0), S(   0,    0)};
constexpr ScorePair PAWN_PHALANX[8] = {S(   0,    0), S(   9,  -10), S(  11,   -4), S(  14,    5), S(  26,   40), S(  53,  173), S( 139,  201), S(   0,    0)};
constexpr ScorePair DEFENDED_PAWN[8] = {S(   0,    0), S(   0,    0), S(  19,    3), S(  10,    4), S(  23,   14), S(  44,   66), S( 228,   33), S(   0,    0)};
constexpr ScorePair CANDIDATE_PASSER[2][8] = {
    {S(   0,    0), S( -31,  -22), S( -10,   -2), S( -20,   18), S(  -7,   54), S(  40,   87), S(   0,    0), S(   0,    0)},
    {S(   0,    0), S( -27,   -9), S(  -6,    4), S(  -4,   36), S(  29,   76), S(  76,   77), S(   0,    0), S(   0,    0)}
};

constexpr ScorePair PASSED_PAWN[2][2][8] = {
    {
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -42,  -32), S( -17,   32), S(  16,  172), S(  26,  254), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -32,  -48), S(   0,  -13), S(  45,   54), S( 151,   51), S(   0,    0)}
    },
    {
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -34,  -55), S( -11,  -11), S(  49,   44), S( 121,   28), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -35,  -70), S(   4,  -54), S(  28,   -8), S(  47,   -9), S(   0,    0)}
    }
};
constexpr ScorePair OUR_PASSER_PROXIMITY[8] = {S(  58,  114), S(  68,   83), S(  46,   75), S(   6,   65), S(   7,   44), S(  15,   26), S(  18,   15), S(   6,   10)};
constexpr ScorePair THEIR_PASSER_PROXIMITY[8] = {S( -27,  -28), S(  28,   -9), S(  14,   12), S(  15,   31), S(  16,   56), S(  21,   76), S(  31,   87), S(  38,   90)};
constexpr ScorePair PASSER_DEFENDED_PUSH[8] = {S(   0,    0), S(   0,    0), S(   0,    0), S(   2,    1), S(   6,    4), S(  20,    1), S(  14,   25), S(   0,    0)};

constexpr ScorePair PAWN_STORM[2][4][8] = {
    {
        {S(   2,   34), S( -83, -195), S( -16, -125), S(  35,  -24), S(   0,   12), S( -28,   20), S( -30,   16), S(   0,    0)},
        {S(  19,   26), S(  91, -179), S( 104, -114), S(  79,  -21), S(  12,    6), S( -29,   19), S(  -4,   26), S(   0,    0)},
        {S( -13,   24), S(  59, -128), S(  72,  -71), S(  63,  -10), S(  -2,   18), S( -32,   23), S( -37,   38), S(   0,    0)},
        {S(   4,   26), S( 114,  -70), S( 110,  -30), S(  62,   28), S(   3,   34), S( -34,   28), S( -37,   36), S(   0,    0)}
    },
    {
        {S(   0,    0), S(   0,    0), S(  25,   45), S( -11,   25), S( -41,   33), S( -31,   39), S( -10,   20), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S( 103,   35), S(  22,   21), S( -20,   41), S( -29,   54), S(  -3,   50), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S( 106,   22), S(  16,   33), S( -12,   43), S( -11,   65), S(  24,   54), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S( 118,   26), S(  37,   52), S( -19,   52), S( -13,   51), S( -38,   30), S(   0,    0)}
    }
};
constexpr ScorePair PAWN_SHIELD[4][8] = {
    {S(  22,   15), S( -53,   50), S( -36,   22), S(  -1,    9), S(  16,   -9), S( -21,  -14), S( -52,  -19), S(   0,    0)},
    {S(  36,   29), S( -24,   18), S(   4,   25), S(  29,   18), S(  33,    7), S( -13,   -8), S(  -8,  -13), S(   0,    0)},
    {S(   7,   51), S( -19,   -2), S( -13,   39), S(   0,   35), S(  10,   28), S( -14,   22), S( -18,  -14), S(   0,    0)},
    {S(   9,   48), S( -45,   33), S(  -4,   27), S(  15,   27), S(  22,   22), S(  34,   22), S(  33,   22), S(   0,    0)}
};
constexpr ScorePair SAFE_KNIGHT_CHECK = S( 113,   -7);
constexpr ScorePair SAFE_BISHOP_CHECK = S(  23,   10);
constexpr ScorePair SAFE_ROOK_CHECK = S(  87,    8);
constexpr ScorePair SAFE_QUEEN_CHECK = S(  79,    5);
constexpr ScorePair UNSAFE_KNIGHT_CHECK = S(   3,    1);
constexpr ScorePair UNSAFE_BISHOP_CHECK = S(  10,    9);
constexpr ScorePair UNSAFE_ROOK_CHECK = S(   9,    3);
constexpr ScorePair UNSAFE_QUEEN_CHECK = S(   8,    3);
constexpr ScorePair QUEENLESS_ATTACK = S(-253, -216);
constexpr ScorePair KING_ATTACKER_WEIGHT[4] = {S(  58,    3), S(  16,   -1), S(  44,  -11), S(   6,    3)};
constexpr ScorePair KING_ATTACKS = S(  34,    2);
constexpr ScorePair WEAK_KING_RING = S(  12,   -2);
constexpr ScorePair KING_FLANK_ATTACKS[2] = {S(  15,   -3), S(  -1,   -1)};
constexpr ScorePair KING_FLANK_DEFENSES[2] = {S(  -3,    1), S(  -4,    1)};
constexpr ScorePair SAFETY_OFFSET = S( -21,  371);

constexpr ScorePair MINOR_BEHIND_PAWN = S(   3,   24);
constexpr ScorePair KNIGHT_OUTPOST = S(  26,   24);
constexpr ScorePair BISHOP_PAWNS[7] = {S(   1,   25), S(   2,   24), S(   3,   11), S(   1,    1), S(   0,   -9), S(  -2,  -20), S(  -4,  -31)};
constexpr ScorePair BISHOP_PAIR = S(  10,   82);
constexpr ScorePair LONG_DIAG_BISHOP = S(  11,   11);
constexpr ScorePair ROOK_OPEN[2] = {S(  27,    4), S(  10,    5)};

constexpr ScorePair TEMPO = S(  15,   23);

constexpr ScorePair COMPLEXITY_PAWNS = S(   0,   10);
constexpr ScorePair COMPLEXITY_PAWNS_BOTH_SIDES = S(   0,   95);
constexpr ScorePair COMPLEXITY_PAWN_ENDGAME = S(   0,   96);
constexpr ScorePair COMPLEXITY_OFFSET = S(   0, -181);

#undef S
// clang-format on

}
