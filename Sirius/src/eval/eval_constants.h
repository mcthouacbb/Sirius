#pragma once

#include "../defs.h"

namespace eval
{

// clang-format off
#define S(mg, eg) ScorePair(mg, eg)

constexpr ScorePair MATERIAL[6] = {S(  68,  135), S( 336,  454), S( 356,  471), S( 457,  818), S( 923, 1673), S(0, 0)};

constexpr ScorePair PSQT[6][64] = {
    {
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S( 100,   65), S(  33,   75), S(  51,   54), S(  47,   76), S(  57,   70), S(  50,   61), S(  55,   91), S(  67,   95),
        S(   2,   15), S( -12,   33), S(   9,    1), S(  -9,   12), S(  -6,   -5), S(   6,  -11), S( -23,   25), S(  -5,    8),
        S(  10,    5), S(   6,   18), S(  17,    1), S(  13,  -11), S(   5,  -15), S(   1,   -8), S(   2,   11), S(  -5,    9),
        S(  -5,   -8), S(  -3,   15), S(   8,  -12), S(  16,  -18), S(  10,  -14), S(   2,  -16), S( -12,   13), S( -20,   -4),
        S( -12,   -9), S(  14,    6), S(   0,    9), S(   4,    0), S(  -7,    0), S(  -9,   -3), S( -15,    9), S( -25,   -6),
        S(  -2,  -12), S(  28,    1), S(  24,   36), S(   4,    9), S(  -6,    0), S(  -3,   -1), S(  -6,   10), S( -21,   -1),
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
    },
    {
        S( -68, -123), S( -84,   -2), S(   6,    4), S( -17,    4), S( -45,   27), S( -38,   -9), S( -46,   28), S( -98, -113),
        S(  15,  -17), S(  19,   -3), S(  36,    5), S(  14,   18), S(  36,   22), S(  20,   15), S(  12,    7), S( -41,   34),
        S(  12,    0), S(  15,    6), S(  38,    4), S(  34,   17), S(   1,   34), S(  11,   22), S(  -4,    8), S(   9,  -29),
        S(  22,   18), S(  25,   15), S(  31,   23), S(  29,   24), S(  32,   23), S(  15,   23), S(  16,    7), S(  21,    4),
        S(  19,    0), S(  27,   21), S(  16,   25), S(  17,   32), S(  17,   25), S(  15,   25), S(  26,    7), S(  -1,    1),
        S(   0,   -3), S(  18,    0), S(  16,    1), S(  16,   11), S(   2,   22), S(  -3,    0), S(   3,  -12), S( -12,  -14),
        S(   1,    3), S(  12,    7), S(   1,   -7), S(  12,   -1), S(   2,    1), S(  -8,   -8), S(  -4,   -6), S( -39,  -15),
        S( -30,  -49), S( -12,  -18), S(  -1,  -24), S(  13,   -7), S(  -2,  -11), S( -28,   -4), S( -21,  -20), S( -84,  -28),
    },
    {
        S( -61,    3), S( -30,    3), S( -66,   -1), S( -92,    9), S( -22,   13), S( -64,    1), S( -62,   27), S( -16,  -10),
        S( -32,   32), S( -54,    5), S(  -4,   10), S( -11,   10), S( -33,   25), S(  -8,   12), S( -29,   -6), S(  -4,   -1),
        S(  24,   -5), S(  -7,   21), S(  18,   10), S(  37,    1), S(  22,   12), S(  14,   -4), S(   8,   12), S(  20,  -13),
        S(   5,    8), S(  12,   12), S(  22,   11), S(  24,   27), S(  24,   29), S(  15,    8), S(  13,   13), S(  -1,    2),
        S(  31,  -18), S(   5,    7), S(  11,   13), S(  24,   14), S(  20,   18), S(  14,   10), S(  17,   -3), S(  20,  -19),
        S(  17,   -5), S(  24,   -1), S(  12,   -6), S(  14,    8), S(  13,    1), S(   2,  -10), S(  22,   -6), S(  12,   -7),
        S(  24,  -22), S(  27,  -30), S(  24,  -16), S(  11,   -5), S(  -2,   -5), S(  20,  -18), S(   7,  -32), S(  12,  -23),
        S(  -7,  -27), S(  -3,   -8), S( -13,   -4), S(  12,  -15), S(  10,   -7), S(  -8,   -4), S(  12,  -22), S(  11,  -27),
    },
    {
        S(  22,   15), S(  25,   16), S(   7,   10), S(  13,   28), S(  -1,   27), S(  30,    7), S(  38,    3), S(   2,   31),
        S(   9,   21), S(  19,   13), S(  10,   20), S(  21,   21), S(  36,   20), S(   8,   29), S(   9,   22), S(  21,   15),
        S(   3,   13), S(   2,   10), S(  31,   13), S(  22,   10), S(  23,    3), S(  22,   11), S(  10,   15), S(   2,   26),
        S( -14,    5), S( -10,   15), S(   6,   13), S(  -2,   11), S(  14,    1), S(  -2,   11), S(  -4,   18), S( -16,   24),
        S( -22,   -4), S(  -3,    2), S( -10,   10), S( -16,    5), S(  -7,    3), S(  -4,    5), S( -17,    7), S( -18,    3),
        S( -25,  -17), S(   2,  -19), S( -12,   -1), S( -11,  -14), S(  -5,  -16), S( -20,   -6), S(  -5,  -22), S( -25,   -7),
        S( -66,  -20), S( -14,  -25), S(   1,  -21), S(   2,  -25), S(   7,  -28), S(  -1,  -23), S( -18,  -22), S( -21,  -27),
        S( -18,  -34), S( -26,  -16), S(   7,  -24), S(  15,  -32), S(   5,  -30), S(  -5,  -18), S(  -3,  -27), S(  -4,  -25),
    },
    {
        S(   4,   35), S(  31,   10), S(  12,   14), S(  27,   11), S(  29,   34), S(  49,  -19), S(  35,   11), S(  -7,   11),
        S(  33,   15), S(   6,   14), S(  11,    8), S( -57,   82), S(   8,    5), S(  22,   13), S(  27,  -34), S(  21,  -20),
        S(  -6,   41), S(   4,   26), S(  13,   11), S( -23,   38), S(  -2,   20), S(   8,    1), S(  28,  -24), S(  25,  -17),
        S(   4,   -3), S( -11,   41), S(  -7,    8), S( -15,   18), S( -28,   51), S(  -8,   26), S(   7,   12), S(  19,  -16),
        S( -14,    9), S(  -1,   -2), S( -15,   30), S( -13,   22), S( -28,   47), S(  -7,   24), S(   4,   12), S(  -2,   15),
        S(  -8,   -3), S(  12,  -25), S(   2,   -1), S( -17,   14), S(  -2,    2), S(  -6,    8), S(   7,    0), S(  -1,   -5),
        S(   9,  -68), S(   8,  -73), S(  -4,  -48), S(  -3,  -22), S(  -5,   -7), S(   6,  -25), S( -19,   14), S(  -6,    4),
        S( -25,  -19), S( -26,  -87), S( -17,  -63), S( -24,  -28), S(  -5,  -25), S( -17,  -22), S( -20,  -16), S(  -5,  -30),
    },
    {
        S( -19,  -83), S(  47,   64), S(  13,   39), S( -20,   97), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  14,   20), S( -33,  126), S(   5,   49), S(  -9,   68), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  29,   45), S(  63,   82), S( -10,   47), S( -76,   10), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S( -50,   42), S( -22,   77), S( -55,   36), S(-131,   -1), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S( -33,   21), S( -78,   70), S( -72,   13), S(-100,   -4), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(   4,    1), S(   4,   31), S( -47,   -6), S( -64,  -25), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  61,  -27), S(  41,   10), S(  10,  -33), S( -24,  -50), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  48,  -53), S(  50,  -13), S(  13,  -60), S(   2,  -92), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
    },
};

constexpr ScorePair MOBILITY[4][28] = {
    {S(  -6,  -26), S( -42,  -54), S( -26,  -15), S(  -9,    0), S(   0,   12), S(  10,   20), S(  17,   25), S(  25,   27), S(  38,   13), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S(   8,  -46), S( -38,  -66), S( -29,  -33), S( -16,  -14), S( -10,    3), S(  -3,   13), S(  -1,   21), S(   4,   26), S(   2,   30), S(  11,   26), S(   4,   35), S(  25,   12), S(  11,   26), S(  39,  -36), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S( -25,  -73), S( -59,  -71), S( -24,  -46), S( -12,  -28), S(  -3,  -17), S(   1,   -3), S(   2,    6), S(   6,   11), S(   6,   16), S(   8,   24), S(  10,   31), S(  12,   37), S(  16,   45), S(  15,   46), S(  54,   11), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S( -23,   49), S( -13,   -2), S( -44,   17), S( -34, -144), S( -47,  -90), S( -25,  -53), S(  -6,  -57), S(  -2,  -44), S(   0,  -24), S(  -1,   -8), S(  -1,    7), S(   6,    4), S(   6,   20), S(   6,   21), S(   8,   26), S(  11,   29), S(  16,   19), S(   9,   37), S(  20,   25), S(  14,   25), S(  21,   28), S(  26,    9), S(  12,   29), S(   4,   32), S(  44,    9), S(  23,   11), S( -39,  -22), S(  -3,   24)}
};

constexpr ScorePair THREAT_BY_PAWN[6] = {S(   0,  -25), S(  73,   49), S(  65,   70), S(  63,   78), S(  68,   23), S(   0,    0)};
constexpr ScorePair THREAT_BY_KNIGHT[2][6] = {
    {S(   8,   35), S(  22,   40), S(  58,   32), S(  82,   20), S(  55,    8), S(   0,    0)},
    {S(  -7,   11), S(  21,   21), S(  40,   30), S(  78,   40), S(  54,   20), S(   0,    0)}
};
constexpr ScorePair THREAT_BY_BISHOP[2][6] = {
    {S(   1,   31), S(  52,   34), S( -25,   73), S(  54,   49), S(  71,   53), S(   0,    0)},
    {S(  -5,    5), S(  19,   25), S( -12,    3), S(  62,   65), S(  57,  107), S(   0,    0)}
};
constexpr ScorePair THREAT_BY_ROOK[2][6] = {
    {S(  -3,   49), S(  34,   51), S(  43,   50), S( -14,  -57), S(  83,  -29), S(   0,    0)},
    {S(  -9,    9), S(   9,   19), S(  25,    0), S(   8, -102), S(  57,   96), S(   0,    0)}
};
constexpr ScorePair THREAT_BY_QUEEN[2][6] = {
    {S(   7,   27), S(  28,   31), S(  26,   44), S(  13,    6), S(  24,  -71), S( 110,   78)},
    {S(  -6,   22), S(  -1,   18), S(  -6,   23), S(   2,  -15), S( -14,  -46), S( 153,   76)}
};
constexpr ScorePair THREAT_BY_KING[6] = {S(  71,    4), S(   6,   51), S( 123,   29), S(  75,   10), S(   0,    0), S(   0,    0)};
constexpr ScorePair KNIGHT_HIT_QUEEN = S(   6,    2);
constexpr ScorePair BISHOP_HIT_QUEEN = S(  21,    5);
constexpr ScorePair ROOK_HIT_QUEEN = S(  22,  -10);
constexpr ScorePair PUSH_THREAT = S(  13,   21);
constexpr ScorePair RESTRICTED_SQUARES = S(   2,    3);

constexpr ScorePair ISOLATED_PAWN[8] = {S(  -1,    0), S(  -4,  -18), S(  -4,  -14), S( -11,  -16), S( -11,  -14), S(  -5,  -10), S(  -4,  -13), S(  -8,    1)};
constexpr ScorePair DOUBLED_PAWN[8] = {S(  -6,  -48), S(   5,  -42), S( -14,  -24), S(   1,  -19), S( -10,  -11), S(  -6,  -25), S(   3,  -43), S(   6,  -49)};
constexpr ScorePair BACKWARDS_PAWN[8] = {S(   0,    0), S( -10,  -11), S(   4,  -17), S(  -1,  -16), S(  15,  -11), S(  52,    0), S(   0,    0), S(   0,    0)};
constexpr ScorePair PAWN_PHALANX[8] = {S(   0,    0), S(   5,   -4), S(  15,   -4), S(  18,   11), S(  49,   25), S( 105,  128), S( 105,  111), S(   0,    0)};
constexpr ScorePair DEFENDED_PAWN[8] = {S(   0,    0), S(   0,    0), S(  20,    3), S(  11,    7), S(  19,   20), S(  35,   66), S( 109,  133), S(   0,    0)};
constexpr ScorePair CANDIDATE_PASSER[2][8] = {
    {S(   0,    0), S( -20,  -47), S(  -1,  -27), S(  11,  -32), S(  -3,   44), S(  50,   65), S(   0,    0), S(   0,    0)},
    {S(   0,    0), S(  -6,  -23), S(  -5,    4), S(  -1,   22), S(  12,   40), S(  46,   74), S(   0,    0), S(   0,    0)}
};

constexpr ScorePair PASSED_PAWN[2][2][8] = {
    {
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -39,  -26), S( -22,   22), S(  27,  130), S( 134,  198), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -36,  -35), S(  -4,  -13), S(  43,   52), S( 109,   55), S(   0,    0)}
    },
    {
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -28,  -44), S( -13,   -4), S(  45,   45), S(  39,   39), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -36,  -54), S(   3,  -34), S(  27,   19), S(  11,   11), S(   0,    0)}
    }
};
constexpr ScorePair OUR_PASSER_PROXIMITY[8] = {S(  84,   84), S(  79,   71), S(  41,   72), S(   1,   55), S(   4,   32), S(   5,   21), S(  18,   10), S(   9,   15)};
constexpr ScorePair THEIR_PASSER_PROXIMITY[8] = {S( -46,    5), S(  14,   -6), S(  26,    4), S(  21,   24), S(  15,   54), S(  18,   69), S(  27,   74), S(  26,   55)};
constexpr ScorePair PASSER_DEFENDED_PUSH[8] = {S(   0,    0), S(   0,    0), S(   0,    0), S(  15,    2), S(  11,   21), S(  34,   35), S(  56,   99), S(   0,    0)};

constexpr ScorePair PAWN_STORM[2][4][8] = {
    {
        {S(  25,   36), S(-121, -209), S( -24,  -73), S(  28,    7), S(  24,   24), S(  -9,   36), S(  -5,   38), S(   0,    0)},
        {S(  22,    9), S(  -1, -195), S(  50, -107), S(  38,  -14), S(  17,    6), S( -25,   18), S(  12,   12), S(   0,    0)},
        {S(   2,   12), S(  -3, -141), S( 128, -111), S(  46,   -8), S(  12,   19), S( -16,   18), S(   1,   17), S(   0,    0)},
        {S(   9,   -7), S(  28, -130), S( 128, -126), S(  67,  -17), S(  16,   -1), S( -24,    5), S( -12,  -11), S(   0,    0)}
    },
    {
        {S(   0,    0), S(   0,    0), S(  92,   60), S(  -6,   31), S(  -5,   45), S(  22,   51), S(  -1,   53), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S( 146,   52), S( -32,   26), S(  -7,   34), S( -10,   43), S(   2,   30), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S( 136,   -5), S(   9,   22), S( -33,   44), S(  21,   44), S(  63,  -10), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S( 122,  -31), S(  11,   28), S( -13,   24), S( -10,   22), S( -28,  -51), S(   0,    0)}
    }
};
constexpr ScorePair PAWN_SHIELD[4][8] = {
    {S(  57,   35), S(  -8,   51), S( -26,   40), S(  21,   30), S(  25,   23), S(  10,    6), S( -36,    3), S(   0,    0)},
    {S(  38,   16), S( -23,   15), S(   6,   18), S(  39,    5), S(  40,   -4), S(  -3,   -7), S( -37,  -67), S(   0,    0)},
    {S(  24,   11), S(   0,   40), S(   9,    6), S(  31,   -6), S(  35,   -9), S(  33,   -7), S( -92,  -42), S(   0,    0)},
    {S(  12,    5), S( -19,  -14), S(  10,  -18), S(  29,  -27), S(  25,  -18), S(  27,    5), S( -19,   -3), S(   0,    0)}
};
constexpr ScorePair SAFE_KNIGHT_CHECK = S(  90,    4);
constexpr ScorePair SAFE_BISHOP_CHECK = S(  70,   26);
constexpr ScorePair SAFE_ROOK_CHECK = S( 108,   16);
constexpr ScorePair SAFE_QUEEN_CHECK = S(  63,   26);
constexpr ScorePair UNSAFE_KNIGHT_CHECK = S(  13,    3);
constexpr ScorePair UNSAFE_BISHOP_CHECK = S(  34,   14);
constexpr ScorePair UNSAFE_ROOK_CHECK = S(  43,    4);
constexpr ScorePair UNSAFE_QUEEN_CHECK = S(  19,   10);
constexpr ScorePair QUEENLESS_ATTACK = S(-153,  187);
constexpr ScorePair KING_ATTACKER_WEIGHT[4] = {S(  69,   -1), S(  24,    2), S(  28,  -12), S(   9,  -20)};
constexpr ScorePair KING_ATTACKS = S(   7,   -2);
constexpr ScorePair WEAK_KING_RING = S(   3,    1);
constexpr ScorePair KING_FLANK_ATTACKS[2] = {S(  15,   -5), S(   3,    2)};
constexpr ScorePair KING_FLANK_DEFENSES[2] = {S(  -8,    0), S(  -8,    6)};
constexpr ScorePair SAFETY_OFFSET = S(  68,   97);

constexpr ScorePair MINOR_BEHIND_PAWN = S(   2,   12);
constexpr ScorePair KNIGHT_OUTPOST = S(  21,   14);
constexpr ScorePair BISHOP_PAWNS[7] = {S(  12,    0), S(   4,   17), S(   2,   10), S(   2,    4), S(  -1,   -5), S(  -5,   -7), S(  -8,  -18)};
constexpr ScorePair BISHOP_PAIR = S(  23,   72);
constexpr ScorePair LONG_DIAG_BISHOP = S(  15,   11);
constexpr ScorePair ROOK_OPEN[2] = {S(  35,   -3), S(  20,    0)};

constexpr ScorePair TEMPO = S(  27,   16);

constexpr ScorePair COMPLEXITY_PAWNS = S(   0,   11);
constexpr ScorePair COMPLEXITY_PAWNS_BOTH_SIDES = S(   0,  169);
constexpr ScorePair COMPLEXITY_PAWN_ENDGAME = S(   0,  137);
constexpr ScorePair COMPLEXITY_OFFSET = S(   0, -258);

#undef S
// clang-format on

}
