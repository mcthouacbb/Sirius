#pragma once

#include "../defs.h"

namespace eval
{

// clang-format off
#define S(mg, eg) ScorePair(mg, eg)

constexpr ScorePair MATERIAL[6] = {S(  61,  131), S( 286,  431), S( 306,  443), S( 385,  788), S( 742, 1609), S(0, 0)};

constexpr ScorePair PSQT[6][64] = {
    {
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  39,   63), S(  23,   69), S(  13,   73), S(  43,   50), S(  64,   32), S(  40,   54), S(  32,   71), S(  54,   57),
        S(   4,   -2), S( -11,   28), S(  10,   -6), S(   8,  -33), S(   0,  -33), S(   2,  -22), S( -19,   13), S(  -6,    0),
        S(  13,    3), S(  -4,   15), S(  11,  -10), S(  11,  -23), S(  -1,  -23), S(   0,  -17), S(  -7,    8), S(  -8,    5),
        S(   4,   -6), S(  -5,   15), S(  12,  -20), S(  16,  -16), S(   9,  -16), S(   0,  -15), S( -13,    8), S( -12,   -4),
        S(  -1,   -7), S(   7,    9), S(   4,    1), S(   1,   -1), S(  -7,   -2), S(  -8,   -9), S( -21,    8), S( -22,   -5),
        S(   9,   -8), S(  23,   11), S(  30,  123), S(   9,    0), S(  -1,  -10), S(  -5,   -8), S( -14,   11), S( -14,   -1),
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
    },
    {
        S( -69,  -95), S( -66,  -31), S( -29,  -18), S(  -4,   -7), S( -31,    0), S( -58,    3), S( -98,    1), S( -84,  -58),
        S( -16,  -14), S(  14,    0), S(  24,   -2), S(   0,    9), S(   4,   11), S(   5,   10), S(   0,   11), S( -10,   -2),
        S(   4,   -8), S(  -8,    6), S(  32,   -5), S(  20,   15), S(   8,   23), S(  16,   11), S(   9,    1), S(  -5,   -1),
        S(  26,    4), S(  21,   16), S(  34,   17), S(  20,   25), S(  21,   26), S(  27,   13), S(  20,    2), S(  12,    7),
        S(   9,   17), S(  13,   17), S(  18,   20), S(  18,   27), S(  20,   20), S(  19,   16), S(  22,   -1), S(  10,    2),
        S(  15,    0), S(  16,    5), S(  17,    3), S(  15,   15), S(   6,   15), S(   3,   -1), S(   7,   -8), S(  -6,   -7),
        S(  10,    0), S(  11,   -3), S(   9,   -5), S(  13,    0), S(   8,   -1), S(  -3,   -3), S(  -2,   -7), S( -14,   -6),
        S(  -3,  -14), S(  -5,  -11), S(   4,  -11), S(   8,    1), S(   1,   -3), S( -15,  -10), S(  -8,  -16), S( -40,   -7),
    },
    {
        S( -47,  -15), S( -28,    7), S( -10,   -1), S( -72,   12), S( -64,   17), S( -57,    5), S( -31,    8), S( -33,    6),
        S( -22,  -10), S( -43,    4), S( -12,    3), S(  -8,    3), S( -21,   11), S(   3,   -1), S( -11,   -5), S(  -3,   -7),
        S(  11,   11), S(  -1,    6), S(  23,    5), S(   7,   12), S(  19,    6), S(   2,    0), S(  11,    4), S(   7,    1),
        S( -10,    5), S(   3,   13), S(   3,   17), S(  20,   18), S(  25,   23), S(  21,    7), S(   7,   12), S(  -2,   -1),
        S(  17,   -6), S(  -2,   13), S(   8,   12), S(  15,   15), S(  23,   11), S(   6,   14), S(   5,    5), S(   5,   -2),
        S(  20,   -8), S(  22,   -1), S(   4,   -1), S(  10,   12), S(   1,    9), S(   4,   -3), S(  19,    1), S(   7,   -9),
        S(  26,  -18), S(  24,  -23), S(  27,   -8), S(   6,   -3), S(  -2,    0), S(  11,  -15), S(   5,  -25), S(  16,  -10),
        S(  28,  -36), S(  20,  -16), S(  -5,   -2), S(  18,   -5), S(   0,   -2), S(  -1,    1), S(  10,   -4), S(   6,  -18),
    },
    {
        S(  14,    9), S( -18,   32), S( -15,   26), S( -19,   21), S( -13,   21), S( -14,   28), S(   5,   17), S(   9,   16),
        S(  25,    1), S(  30,    7), S(  13,   16), S(  -3,   19), S(  24,   12), S(  11,   23), S(   9,   18), S(  13,   10),
        S(  -8,    6), S(  21,    8), S(   5,    9), S(   7,   10), S(   5,    8), S(   1,   17), S(  16,   11), S(  -5,   14),
        S( -11,   13), S( -17,   23), S(  -6,   17), S(  -7,   11), S(  -2,   11), S(   4,   13), S(   5,   12), S(  -8,   15),
        S( -19,    7), S(  -1,   12), S( -18,   16), S(  -6,   10), S(  -6,    4), S(  -9,    7), S( -10,    6), S(  -8,    4),
        S(   5,  -21), S(  23,  -24), S(   1,  -11), S(   0,  -13), S(  -4,  -13), S(  -7,  -14), S(  -3,  -16), S( -11,  -12),
        S(  -4,  -30), S(  28,  -37), S(   8,  -23), S(   5,  -21), S(   6,  -23), S(   3,  -21), S(  -5,  -21), S(  -9,  -24),
        S(  -3,  -41), S(   0,  -22), S(   5,  -21), S(  11,  -26), S(   8,  -27), S(   1,  -22), S(   2,  -26), S(   0,  -24),
    },
    {
        S(  10,   -4), S(  57,  -36), S( -10,   35), S( -10,   22), S(  16,    3), S( -15,   24), S( -25,   10), S( -15,   11),
        S(  35,   10), S(  14,   10), S(  -3,   21), S( -30,   52), S(  -2,   28), S(  19,   -2), S(  28,  -23), S(  21,  -11),
        S(   5,   12), S(   0,    1), S(  -5,   16), S( -10,   12), S(  11,   12), S(  23,    2), S(  20,  -17), S(  30,  -14),
        S(  -6,   18), S( -15,   34), S(  -7,   15), S( -14,   24), S(  -3,   26), S(  13,    4), S(  11,    6), S(   7,    2),
        S(  -5,   17), S(  -3,   16), S( -13,   22), S(  -8,   29), S( -11,   35), S(  -3,   19), S(   5,   13), S(   2,    5),
        S(   2,  -10), S(   5,   -3), S(  -7,   10), S( -13,   17), S(  -9,   14), S(  -5,   15), S(  11,  -10), S(  10,  -17),
        S(   3,  -41), S(  10,  -58), S(   2,  -28), S(   0,  -12), S(  -1,   -4), S(   2,  -16), S(   4,  -22), S(  10,  -38),
        S(   9,  -58), S( -15,  -43), S( -18,  -22), S( -10,  -19), S(  -7,  -19), S( -11,  -13), S( -13,  -17), S( -11,  -17),
    },
    {
        S(  57,  -88), S(  29,  -13), S( -41,  -27), S( -57,   -9), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S( -15,   13), S(  24,   46), S(  -3,   20), S( -16,   26), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  34,   11), S(  48,   50), S(  27,   31), S( -30,   53), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S( -14,   17), S( -14,   53), S( -39,   34), S( -82,   49), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S( -52,   12), S( -48,   43), S( -48,   14), S( -83,   32), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S( -10,   -5), S(  -4,   18), S( -28,   -7), S( -48,    9), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  45,  -28), S(  38,   -4), S(  12,  -31), S( -17,  -17), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  44,  -60), S(  44,  -25), S(  19,  -52), S(   8,  -49), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
    },
};

constexpr ScorePair MOBILITY[4][28] = {
    {S(  -2,  -28), S( -39,  -47), S( -17,  -15), S(  -9,    1), S(   1,    9), S(   6,   19), S(  13,   22), S(  20,   26), S(  30,   20), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S( -10,  -44), S( -30,  -60), S( -18,  -31), S( -11,  -13), S(  -3,   -4), S(   2,    7), S(   3,   15), S(   6,   19), S(   7,   22), S(   9,   23), S(  11,   21), S(  14,   17), S(  13,   21), S(  20,    1), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S( -11,  -45), S( -30,  -67), S( -14,  -53), S(  -2,  -31), S(   0,  -17), S(  -1,   -6), S(  -1,    2), S(   2,    8), S(   3,   11), S(   6,   18), S(   3,   28), S(   4,   35), S(   6,   39), S(   9,   40), S(  16,   37), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S(  -2,   14), S( -32,  -71), S( -60, -115), S( -20, -194), S( -24,  -65), S( -16,  -11), S(  -6,  -24), S(  -4,   -5), S(  -3,   12), S(   0,   21), S(   2,   25), S(   6,   27), S(   6,   37), S(   9,   37), S(  10,   43), S(  11,   44), S(  12,   46), S(  14,   47), S(  13,   47), S(  21,   38), S(  24,   31), S(  30,   14), S(  24,   24), S(  34,   -4), S(  33,   -5), S(   4,    1), S(  -8,  -14), S(-105,    0)}
};

constexpr ScorePair THREAT_BY_PAWN[6] = {S(   4,  -18), S(  65,   30), S(  60,   61), S(  80,   25), S(  73,   -3), S(   0,    0)};
constexpr ScorePair THREAT_BY_KNIGHT[2][6] = {
    {S(   3,   28), S(  13,   40), S(  35,   43), S(  72,   13), S(  53,  -30), S(   0,    0)},
    {S(  -7,    9), S(   5,   42), S(  29,   29), S(  64,   35), S(  60,   -2), S(   0,    0)}
};
constexpr ScorePair THREAT_BY_BISHOP[2][6] = {
    {S(  -3,   35), S(  38,   31), S( -15,   35), S(  67,   14), S(  68,   44), S(   0,    0)},
    {S(  -4,    6), S(  17,   22), S( -26,  -12), S(  44,   44), S(  46,  111), S(   0,    0)}
};
constexpr ScorePair THREAT_BY_ROOK[2][6] = {
    {S(  -2,   40), S(  15,   57), S(  25,   52), S( -11,  -36), S(  60,   13), S(   0,    0)},
    {S(  -7,    7), S(   2,   15), S(  14,    2), S( -11,  -70), S(  41,   64), S(   0,    0)}
};
constexpr ScorePair THREAT_BY_QUEEN[2][6] = {
    {S(   6,    5), S(  23,   19), S(  10,   43), S(  13,    1), S(  10,  -57), S(  97,   58)},
    {S(  -3,   13), S(   0,    8), S(  -5,   14), S(  -3,    2), S( -15,  -74), S( 121,   47)}
};
constexpr ScorePair THREAT_BY_KING[6] = {S( -15,   44), S(   8,   48), S(  28,   41), S(  83,    6), S(   0,    0), S(   0,    0)};
constexpr ScorePair KNIGHT_HIT_QUEEN = S(  10,    3);
constexpr ScorePair BISHOP_HIT_QUEEN = S(  16,   10);
constexpr ScorePair ROOK_HIT_QUEEN = S(  18,   -4);
constexpr ScorePair PUSH_THREAT = S(  13,   18);
constexpr ScorePair RESTRICTED_SQUARES = S(   2,    3);

constexpr ScorePair ISOLATED_PAWN[8] = {S(  -8,    5), S(  -4,  -16), S( -12,   -9), S( -10,  -16), S( -12,  -14), S(  -8,   -7), S(  -4,  -14), S( -11,    7)};
constexpr ScorePair DOUBLED_PAWN[8] = {S(  -1,  -60), S(  13,  -36), S(   0,  -28), S(  -2,  -16), S(  -6,  -12), S(  -8,  -20), S(   5,  -37), S(   6,  -70)};
constexpr ScorePair BACKWARDS_PAWN[8] = {S(   0,    0), S(  -8,  -12), S(  -2,  -14), S(  -7,  -12), S(   2,  -20), S(  31,  -11), S(   0,    0), S(   0,    0)};
constexpr ScorePair PAWN_PHALANX[8] = {S(   0,    0), S(   5,   -4), S(  11,   -3), S(  20,    8), S(  39,   33), S( 100,  172), S( -47,  117), S(   0,    0)};
constexpr ScorePair DEFENDED_PAWN[8] = {S(   0,    0), S(   0,    0), S(  18,    6), S(  11,    8), S(  17,   21), S(  32,   68), S( 143,   80), S(   0,    0)};
constexpr ScorePair CANDIDATE_PASSER[2][8] = {
    {S(   0,    0), S( -34,  -12), S( -17,   -8), S(   0,   25), S(  25,   52), S(  67,  110), S(   0,    0), S(   0,    0)},
    {S(   0,    0), S( -17,  -10), S(  -8,   14), S(  -5,   28), S(  17,   44), S(  30,  173), S(   0,    0), S(   0,    0)}
};

constexpr ScorePair PASSED_PAWN[2][2][8] = {
    {
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -33,  -28), S(  -6,   17), S(  27,  114), S(   8,  160), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -27,  -32), S(   2,   -5), S(  37,   49), S(  80,   60), S(   0,    0)}
    },
    {
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -24,  -42), S(   3,  -14), S(  54,   16), S(  35,  -54), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -33,  -37), S(  -4,  -11), S(  19,   23), S(   5,   20), S(   0,    0)}
    }
};
constexpr ScorePair OUR_PASSER_PROXIMITY[8] = {S(  95,   78), S(  73,   80), S(  49,   61), S(   7,   48), S(   3,   29), S(   4,   18), S(  11,   10), S(  -7,   15)};
constexpr ScorePair THEIR_PASSER_PROXIMITY[8] = {S( -47,   -6), S(  -3,   -9), S(  25,  -11), S(  19,   20), S(  14,   53), S(  18,   66), S(  23,   69), S(  27,   59)};
constexpr ScorePair PASSER_SAFE_QUEENING_PATH[8] = {S(   0,    0), S(   0,    0), S(   0,    0), S( -50,   25), S( -30,   39), S(  13,   73), S(  44,   90), S(   0,    0)};
constexpr ScorePair PASSER_DEFENDED_PUSH[8] = {S(   0,    0), S(   0,    0), S(   0,    0), S(  12,    2), S(  10,   13), S(  24,   32), S(   2,  130), S(   0,    0)};

constexpr ScorePair PAWN_STORM[2][4][8] = {
    {
        {S(  41,   34), S(-109,  -56), S( -48,  -24), S(  58,    2), S(  26,   20), S(   0,   29), S( -10,   29), S(   0,    0)},
        {S(  33,    6), S(  45, -134), S(  87,  -74), S(  57,  -19), S(  16,   -3), S( -20,    7), S(   5,    6), S(   0,    0)},
        {S(   8,   19), S(  95, -101), S(  97,  -48), S(  60,   -2), S(  15,   15), S( -13,   22), S( -15,   26), S(   0,    0)},
        {S(  17,    4), S( 151,  -78), S( 113,  -18), S(  68,    6), S(  10,   16), S( -14,    8), S( -20,   19), S(   0,    0)}
    },
    {
        {S(   0,    0), S(   0,    0), S(  62,   63), S( -22,   32), S( -23,   39), S( -15,   55), S( -17,   42), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(  97,   18), S(  -4,   18), S( -15,   27), S( -28,   41), S( -46,   31), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S( 109,   14), S(  10,   23), S( -14,   39), S(  15,   43), S(  46,   30), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(  89,   13), S(  17,   24), S( -24,   25), S( -23,   22), S( -14,   22), S(   0,    0)}
    }
};
constexpr ScorePair PAWN_SHIELD[4][8] = {
    {S(  45,   35), S( -20,   50), S( -13,   40), S(  38,   29), S(  42,   16), S( -15,   -4), S( -63,  -10), S(   0,    0)},
    {S(  48,    9), S( -25,   19), S(   8,    6), S(  52,   -2), S(  42,  -16), S(  28,  -22), S( -37,  -25), S(   0,    0)},
    {S(  21,   -5), S(  15,  121), S(  11,   -4), S(  33,  -24), S(  22,  -22), S(   5,  -28), S( -53,  -42), S(   0,    0)},
    {S(  14,   17), S(   2,   12), S(   1,   10), S(  27,    4), S(  33,    0), S(  17,    6), S( -67,   10), S(   0,    0)}
};
constexpr ScorePair SAFE_KNIGHT_CHECK = S( 109,    8);
constexpr ScorePair SAFE_BISHOP_CHECK = S(  71,   19);
constexpr ScorePair SAFE_ROOK_CHECK = S( 115,   16);
constexpr ScorePair SAFE_QUEEN_CHECK = S(  55,   27);
constexpr ScorePair UNSAFE_KNIGHT_CHECK = S(  16,    2);
constexpr ScorePair UNSAFE_BISHOP_CHECK = S(  38,   10);
constexpr ScorePair UNSAFE_ROOK_CHECK = S(  39,    3);
constexpr ScorePair UNSAFE_QUEEN_CHECK = S(  15,    4);
constexpr ScorePair QUEENLESS_ATTACK = S(-152,  142);
constexpr ScorePair KING_ATTACKER_WEIGHT[4] = {S(  56,   -4), S(  21,    0), S(  29,  -13), S(   4,   -9)};
constexpr ScorePair KING_ATTACKS = S(   7,    0);
constexpr ScorePair WEAK_KING_RING = S(   8,   -1);
constexpr ScorePair KING_FLANK_ATTACKS[2] = {S(  12,   -3), S(   5,   -1)};
constexpr ScorePair KING_FLANK_DEFENSES[2] = {S(  -7,    0), S(  -8,    3)};
constexpr ScorePair SAFETY_OFFSET = S(  79,  196);

constexpr ScorePair MINOR_BEHIND_PAWN = S(   5,   12);
constexpr ScorePair KNIGHT_OUTPOST = S(  23,   16);
constexpr ScorePair BISHOP_PAWNS[7] = {S(   4,   19), S(   5,   18), S(   4,   11), S(   1,    4), S(  -2,   -4), S(  -2,  -17), S(  -6,  -30)};
constexpr ScorePair BISHOP_PAIR = S(  19,   60);
constexpr ScorePair LONG_DIAG_BISHOP = S(  15,    8);
constexpr ScorePair ROOK_OPEN[2] = {S(  24,    3), S(  12,    5)};

constexpr ScorePair TEMPO = S(  32,   34);

constexpr ScorePair COMPLEXITY_PAWNS = S(   0,   10);
constexpr ScorePair COMPLEXITY_PAWNS_BOTH_SIDES = S(   0,   63);
constexpr ScorePair COMPLEXITY_PAWN_ENDGAME = S(   0,   80);
constexpr ScorePair COMPLEXITY_OFFSET = S(   0, -135);

#undef S
// clang-format on

}
