#pragma once

#include "../defs.h"

namespace eval
{

// clang-format off
#define S(mg, eg) ScorePair(mg, eg)

constexpr ScorePair MATERIAL[6] = {S(  77,  138), S( 282,  395), S( 295,  403), S( 357,  749), S( 745, 1559), S(0, 0)};

constexpr ScorePair PSQT[6][64] = {
    {
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  86,   77), S( -73,   79), S( -13,   55), S(  56,   53), S(  66,   37), S(  35,   71), S(   5,   48), S(  15,   94),
        S(  -9,   22), S( -24,   16), S( -31,   29), S(   1,    6), S( -15,   -7), S(  -8,   20), S(  -3,    4), S(   3,   30),
        S( -10,   17), S(   5,    4), S(   4,   -2), S(  -4,   -9), S(  -8,  -11), S( -13,   -4), S(   1,    5), S(  -5,   12),
        S( -12,    5), S(  -6,    3), S(  15,  -45), S(  13,  -12), S(   5,  -22), S(   0,   -9), S( -15,    5), S( -15,   -6),
        S( -15,    0), S(  37,    1), S(  -4,    0), S(  15,    7), S(  -1,    7), S(  -2,    1), S(   1,   -4), S(  -8,   -6),
        S( -12,    7), S(  36,    9), S(  26,   10), S(   2,   21), S(  -3,   11), S( -13,   13), S(   5,   14), S( -16,   -1),
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
    },
    {
        S( -57,  -31), S( -78,   78), S(-139,   52), S(   5,    8), S(  -9,   29), S(-144,   24), S( -33,  -26), S( -65,  -40),
        S( -71,   41), S( -28,    9), S(  18,   13), S(   4,   10), S( -44,   42), S(  58,   -4), S(   9,  -18), S(  33,  -22),
        S( -16,   22), S(  -6,   32), S(   6,   35), S( -16,   46), S(  32,    8), S(  -2,   17), S(  12,   -6), S( -37,   16),
        S(  60,   -5), S(  25,   14), S(  10,   27), S(  23,   21), S(  25,   22), S(  10,   17), S(  35,   -6), S(   6,   -6),
        S(  25,    8), S(   8,   22), S(  32,    9), S(  21,   19), S(  15,   18), S(  21,   19), S(  26,   -1), S(  32,   -3),
        S(  11,  -11), S(  26,  -17), S(  18,    4), S(  22,    9), S(  12,    4), S(  11,   -5), S(  31,  -10), S(   4,  -36),
        S(  17,   -9), S(  30,   -4), S(  33,  -20), S(  15,   -4), S(   9,  -11), S(   5,  -19), S(  -9,   16), S(  -1,  -47),
        S(  14, -128), S(  -5,  -20), S(  17,  -45), S(  -4,    3), S(  12,  -52), S( -13,  -11), S(  -6,  -18), S( -36,  -38),
    },
    {
        S(  13,  -20), S(  23,  -19), S( -74,   12), S( -60,    4), S(-159,   47), S(-129,   17), S( -92,   38), S(  14,  -23),
        S(  45,  -30), S(-106,   16), S(  -1,   17), S( -45,   15), S(  -4,   25), S(  16,    0), S( -31,    0), S(  -8,    0),
        S(  -1,   -9), S(  30,   -3), S( -78,   50), S(  30,   37), S(   1,   20), S( -21,   12), S(  12,   25), S( -12,  -16),
        S(  14,  -18), S(  14,   20), S( -13,   30), S(  -1,   37), S(  20,   34), S(  12,   23), S(  27,   13), S(  -7,    5),
        S( -13,   20), S(   0,   15), S(  19,   17), S(  15,   29), S(  24,   25), S(  26,   20), S(   6,    3), S(  33,  -17),
        S(  29,  -22), S(  32,  -17), S(  24,    0), S(  18,    9), S(  20,   18), S(  12,    1), S(  35,   12), S(  19,  -10),
        S(  51,  -25), S(  32,  -37), S(  30,  -29), S(  18,  -22), S(   4,   -8), S(  34,  -36), S(  15,  -29), S(  39,  -33),
        S(  23,  -67), S(  35,  -63), S(  -7,  -32), S(  19,  -26), S(  -7,  -16), S(  -7,   -4), S(   9,   -6), S(  30,   -4),
    },
    {
        S(   1,   28), S( -39,   37), S(  43,   25), S( -14,   29), S( -45,   30), S( -60,   59), S(  48,   32), S( -24,   47),
        S( -22,   36), S(  24,   15), S(  26,   19), S(  40,   23), S(  30,   25), S(  40,   23), S(  26,   25), S(  13,   28),
        S( -40,   28), S( -38,   28), S( -14,   24), S( -15,   31), S(  33,   19), S( -38,   42), S(  -4,   28), S( -11,   43),
        S(   0,    5), S( -45,   40), S( -51,   35), S( -26,   27), S(   2,   16), S(  -4,   33), S( -14,   29), S(   8,   19),
        S( -18,  -14), S(  20,  -28), S( -39,   16), S(  16,  -18), S(  27,  -12), S(  10,   -5), S( -15,   -4), S(   9,   -9),
        S( -28,  -20), S(   4,  -19), S(  -2,  -12), S(  15,  -40), S(  -2,  -16), S( -18,  -26), S(  18,  -30), S( -16,  -23),
        S( -37,  -44), S( -20,  -39), S(  21,  -37), S(   7,  -29), S(  33,  -45), S(  16,  -33), S(   7,  -46), S(  23,  -55),
        S(   8,  -54), S( -21,  -22), S(  37,  -50), S(  53,  -45), S(  30,  -42), S(  24,  -34), S(  23,  -39), S(  35,  -39),
    },
    {
        S(  33,   23), S(  95,  -30), S(  63,    5), S(  72,    0), S(  43,  -12), S(  -4,   16), S(  -3,   31), S(  -9,   57),
        S(  43,   24), S(  -4,   38), S(  37,    7), S(   8,   28), S(   6,    3), S(  15,    7), S(  26,  -35), S(   9,   11),
        S(  36,  -13), S( -11,   85), S(  41,   -2), S( -10,   34), S(  12,   -7), S(   4,   13), S(  -9,   -7), S(  51,  -49),
        S(  -3,   30), S( -25,   60), S(   6,   51), S( -21,   52), S( -14,   16), S( -14,   38), S( -31,   90), S( -13,  -27),
        S( -25,   65), S( -18,   42), S(  -6,   25), S( -15,   26), S( -23,   42), S( -18,   21), S(  19,   10), S(  -9,    0),
        S( -10,  -25), S(  -7,   -2), S(  10,  -32), S( -18,    5), S(  -6,  -13), S( -12,    6), S(  17,  -23), S( -18,   40),
        S( -20,  -19), S(  -6,  -76), S(   2,  -55), S(  -4,  -48), S( -12,  -18), S(  16,  -46), S( -11,   -7), S(  16,  -61),
        S( -54,   29), S( -71,  -58), S( -40,  -77), S( -22,   -4), S(   2,  -67), S(  -3,  -93), S(  -9,  -59), S( -32,  -30),
    },
    {
        S(-102, -105), S( 165,   35), S(  74,   -9), S(   4,  -34), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S( 127,  -60), S( -33,  103), S( -89,   71), S( 106,   15), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  14,    9), S(  49,   70), S( -14,   49), S(-151,   22), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  33,   20), S( -20,   77), S(-103,   50), S(-161,   19), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  17,    8), S( -51,   61), S(-111,   32), S(-142,    1), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S( -12,   13), S( -36,   42), S( -63,    9), S( -90,  -16), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  33,  -23), S(  38,    6), S(  -5,  -29), S( -24,  -54), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  52,  -27), S(  46,   -4), S(   8,  -50), S(  10, -100), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
    },
};

constexpr ScorePair MOBILITY[4][28] = {
    {S(  -9,  -21), S( -25,  -40), S( -17,  -25), S( -10,   -5), S(  -2,   10), S(   6,   14), S(  14,   22), S(  23,   26), S(  22,   13), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S(  -9,  -11), S( -25,  -52), S( -12,  -30), S(  -3,   -2), S(   4,    7), S(   7,   16), S(   8,   18), S(   7,   21), S(   5,   20), S(   8,   16), S(  17,   10), S(  21,   -3), S( -26,   19), S(   1,  -35), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S( -48,  -26), S( -49,  -48), S( -17,  -41), S( -12,  -37), S(  -3,  -21), S(  -1,   -4), S(  -2,    6), S(  -1,   10), S(   1,   14), S(   1,   21), S(   8,   25), S(   7,   31), S(   9,   36), S(  29,   27), S(  68,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S(  -1,   85), S(   3,  -18), S(  22, -103), S( -78, -118), S( -20, -165), S( -17,  -13), S(  -9,   -4), S(  -4,    1), S(  -6,   -6), S(  -3,   -8), S(  -5,   11), S(  -5,   20), S(  -6,   36), S(  -4,   40), S(  -2,   36), S(   0,   36), S(   0,   39), S(   3,   26), S(   5,   30), S(   3,   48), S(  -5,   46), S(  30,  -17), S(  40,   13), S(  87,  -57), S(  45,    7), S( -11,  -19), S( -29,   13), S(  -6,   28)}
};

constexpr ScorePair THREAT_BY_PAWN[6] = {S( -12,  -56), S(  88,  126), S(  99,  192), S(  80,  321), S(  22,  260), S(   0,    0)};
constexpr ScorePair THREAT_BY_KNIGHT[2][6] = {
    {S(  17,   44), S(  57,   37), S(  84,   86), S( 106,  103), S(  35,  278), S(   0,    0)},
    {S(  -6,   12), S(  23,    3), S(  36,   31), S(  58,   93), S(  30,  165), S(   0,    0)}
};
constexpr ScorePair THREAT_BY_BISHOP[2][6] = {
    {S(  14,   40), S(  66,   77), S(  -7,   32), S(  77,  156), S(  31,  245), S(   0,    0)},
    {S(  -2,    3), S(  17,   28), S( -30,  -35), S(  36,  121), S(  41,  114), S(   0,    0)}
};
constexpr ScorePair THREAT_BY_ROOK[2][6] = {
    {S(   6,   61), S(  56,  102), S(  81,  113), S( -24,  -46), S(  37,  156), S(   0,    0)},
    {S(  -3,    1), S(  20,    5), S(  25,   -7), S( -26, -111), S(  21,  257), S(   0,    0)}
};
constexpr ScorePair THREAT_BY_QUEEN[2][6] = {
    {S(  11,   42), S(  40,  118), S(  92,   98), S(  57,  110), S(  -4,  -48), S(  70,  141)},
    {S(  -5,   23), S(  -1,    9), S( -15,   30), S( -14,   13), S( -21,  -55), S( 121,  105)}
};
constexpr ScorePair THREAT_BY_KING[6] = {S(  50,   23), S(  91,   49), S( 145,  105), S( 143,   43), S(   0,    0), S(   0,    0)};
constexpr ScorePair KNIGHT_HIT_QUEEN = S(   9,    5);
constexpr ScorePair BISHOP_HIT_QUEEN = S(  15,   21);
constexpr ScorePair ROOK_HIT_QUEEN = S(  22,   -2);
constexpr ScorePair PUSH_THREAT = S(  13,   20);
constexpr ScorePair RESTRICTED_SQUARES = S(   2,    2);

constexpr ScorePair ISOLATED_PAWN[8] = {S(  -2,   -4), S( -16,   -8), S( -12,   -6), S( -10,  -10), S( -18,   -8), S(  -4,   -5), S(  -6,   -4), S(  -5,    5)};
constexpr ScorePair DOUBLED_PAWN[8] = {S(   2,  -56), S( -16,  -34), S( -22,  -26), S( -19,  -19), S( -28,  -14), S(   6,  -31), S(   4,  -73), S(  16,  -52)};
constexpr ScorePair BACKWARDS_PAWN[8] = {S(   0,    0), S(  -9,  -16), S( -11,   -3), S(  -1,   -4), S(  15,    4), S(  23,  -68), S(   0,    0), S(   0,    0)};
constexpr ScorePair PAWN_PHALANX[8] = {S(   0,    0), S(   0,  -14), S(   1,   -7), S(  18,   18), S(  50,   29), S( 110,  128), S(  98,  256), S(   0,    0)};
constexpr ScorePair DEFENDED_PAWN[8] = {S(   0,    0), S(   0,    0), S(   8,    6), S(  12,    8), S(  29,   14), S( 100,   24), S(  58,   18), S(   0,    0)};
constexpr ScorePair CANDIDATE_PASSER[2][8] = {
    {S(   0,    0), S( -69,   30), S( -19,   -3), S(  -8,    2), S( -12,   21), S( -13,   23), S(   0,    0), S(   0,    0)},
    {S(   0,    0), S( -35,    4), S(  -7,   -3), S(  -9,   30), S(   8,   24), S(  -6,   91), S(   0,    0), S(   0,    0)}
};

constexpr ScorePair PASSED_PAWN[2][2][8] = {
    {
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -13,  -23), S(  -6,   28), S(   9,  130), S(  37,  285), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -11,  -30), S(   3,  -10), S(  17,   51), S( 108,   62), S(   0,    0)}
    },
    {
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -19,  -34), S(  20,   -8), S(  16,   58), S(  77,   43), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -23,  -42), S(  22,  -36), S(  24,   16), S(  -7,   29), S(   0,    0)}
    }
};
constexpr ScorePair OUR_PASSER_PROXIMITY[8] = {S(  95,  119), S( 174,   40), S(  67,   53), S(  -7,   47), S(  -7,   23), S(   0,    2), S(   7,   -3), S( -18,   10)};
constexpr ScorePair THEIR_PASSER_PROXIMITY[8] = {S( -19,   -9), S(  36,  -18), S(  29,    1), S(  13,   33), S(  -1,   66), S(  17,   79), S(   1,   87), S( -14,   76)};
constexpr ScorePair PASSER_DEFENDED_PUSH[8] = {S(   0,    0), S(   0,    0), S(   0,    0), S(  -3,   14), S(   2,   27), S(  32,   33), S(  86,  101), S(   0,    0)};

constexpr ScorePair PAWN_STORM[2][4][8] = {
    {
        {S(  28,   23), S( -18, -241), S(  78,  -80), S(  68,  -11), S(  -2,   16), S(  -2,   34), S(  -9,   44), S(   0,    0)},
        {S(  35,    7), S( 136, -127), S(  68,  -87), S(  16,  -24), S(  39,    5), S( -32,   19), S(  20,    1), S(   0,    0)},
        {S(  22,    9), S( 105,  -76), S(  56,  -84), S(  75,  -26), S(  -7,   16), S( -31,   13), S(  -2,    7), S(   0,    0)},
        {S(  10,   -7), S( 120, -102), S(  72,  -71), S(  72,  -33), S(   1,    5), S( -33,  -10), S( -49,    0), S(   0,    0)}
    },
    {
        {S(   0,    0), S(   0,    0), S(  88,   36), S( -40,   13), S( -15,   47), S(  -9,   54), S(  82,   -4), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S( 243,  -38), S( -76,   43), S(-104,   49), S( -93,   78), S( -19,   23), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S( 136,   12), S(  24,   21), S( -38,   25), S(  14,   26), S(  10,   44), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S( 114,   46), S( -28,   10), S(   2,    5), S( -19,   16), S(  -5,  -52), S(   0,    0)}
    }
};
constexpr ScorePair PAWN_SHIELD[4][8] = {
    {S(  52,    9), S(  -4,   35), S(  -6,   23), S(  39,   13), S(  36,   -4), S( -41,   36), S( -32,   82), S(   0,    0)},
    {S(  31,   22), S( -36,   21), S(  19,    9), S(  59,    4), S(  38,  -34), S(  -9,  -18), S(-152,  -11), S(   0,    0)},
    {S(  35,   30), S( -12,   13), S( -35,    6), S(  39,  -19), S(  49,   -4), S( -27,   -1), S(   3,  -80), S(   0,    0)},
    {S(  12,    6), S( -44,  -13), S(   6,   -9), S(   1,  -12), S(   0,  -25), S(  16,  -24), S(  36,  -35), S(   0,    0)}
};
constexpr ScorePair SAFE_KNIGHT_CHECK = S(  77,   -1);
constexpr ScorePair SAFE_BISHOP_CHECK = S(  50,   13);
constexpr ScorePair SAFE_ROOK_CHECK = S(  79,   15);
constexpr ScorePair SAFE_QUEEN_CHECK = S(  52,   25);
constexpr ScorePair UNSAFE_KNIGHT_CHECK = S(  22,   -4);
constexpr ScorePair UNSAFE_BISHOP_CHECK = S(  18,   11);
constexpr ScorePair UNSAFE_ROOK_CHECK = S(  41,    2);
constexpr ScorePair UNSAFE_QUEEN_CHECK = S(  14,   16);
constexpr ScorePair QUEENLESS_ATTACK = S( -54,  272);
constexpr ScorePair KING_ATTACKER_WEIGHT[4] = {S(  45,   -4), S(  31,    0), S(  27,   -8), S(  -3,   -3)};
constexpr ScorePair KING_ATTACKS = S(   3,    2);
constexpr ScorePair WEAK_KING_RING = S(   8,    1);
constexpr ScorePair KING_FLANK_ATTACKS[2] = {S(  14,   -7), S(   3,    0)};
constexpr ScorePair KING_FLANK_DEFENSES[2] = {S(  -8,    1), S(  -2,   -1)};
constexpr ScorePair SAFETY_OFFSET = S(  51,  126);

constexpr ScorePair MINOR_BEHIND_PAWN = S(   1,   15);
constexpr ScorePair KNIGHT_OUTPOST = S(  15,   19);
constexpr ScorePair BISHOP_PAWNS[7] = {S( -14,   23), S(   0,   23), S(   4,   14), S(   6,    4), S(   6,   -7), S(   1,  -25), S(  -5,  -34)};
constexpr ScorePair BISHOP_PAIR = S(  25,   55);
constexpr ScorePair LONG_DIAG_BISHOP = S(   4,   10);
constexpr ScorePair ROOK_OPEN[2] = {S(  32,   -8), S(  19,    6)};

constexpr ScorePair TEMPO = S(  42,   40);

constexpr ScorePair COMPLEXITY_PAWNS = S(   0,   15);
constexpr ScorePair COMPLEXITY_PAWNS_BOTH_SIDES = S(   0,  142);
constexpr ScorePair COMPLEXITY_PAWN_ENDGAME = S(   0,  163);
constexpr ScorePair COMPLEXITY_OFFSET = S(   0, -235);

#undef S
// clang-format on

}
