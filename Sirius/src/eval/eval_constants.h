#pragma once

#include "../defs.h"

namespace eval
{

#define S(mg, eg) PackedScore(mg, eg)

constexpr PackedScore MATERIAL[6] = {S(  67,   98), S( 311,  410), S( 330,  423), S( 425,  746), S( 865, 1400), S(0, 0)};

constexpr PackedScore PSQT[6][64] = {
	{
		S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
		S(  -8,   67), S(   4,   68), S(  52,   60), S(  63,   29), S(  64,   18), S(  25,   33), S(   4,   53), S(  -2,   52),
		S(  46,   36), S(  59,   49), S(  84,    7), S(  52,   -9), S(  42,  -11), S(  36,    3), S(   6,   44), S(   4,   34),
		S(  19,    8), S(  13,   21), S(  29,   -5), S(  18,   -7), S(   3,   -6), S(   0,   -1), S(  -8,   21), S( -10,   17),
		S(   7,   -7), S(   2,   15), S(  14,   -9), S(   6,   -5), S(   1,   -5), S(  -7,   -5), S( -18,   15), S( -19,    0),
		S(  11,  -18), S(  16,   -2), S(  -3,   -4), S(  -4,    0), S( -13,    0), S( -19,   -9), S( -28,    4), S( -33,   -6),
		S(  25,  -22), S(  48,   -5), S(  34,   -7), S(   0,   12), S( -15,    4), S( -16,   -1), S( -23,   12), S( -27,    1),
		S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
	},
	{
		S( -72,  -67), S( -59,  -25), S(  -8,  -23), S(  20,  -15), S( -28,    4), S( -68,   10), S(-109,   16), S( -90,  -33),
		S(   1,   -9), S(  28,   -4), S(  28,  -12), S(  11,   -2), S(  12,    2), S(  -1,    5), S(  -7,   19), S( -14,   11),
		S(  27,   -8), S(  13,   -6), S(  59,  -20), S(  31,   -3), S(  17,    3), S(  13,    2), S(   2,    3), S(  -5,    4),
		S(  39,    2), S(  34,    6), S(  49,    2), S(  34,   12), S(  36,   12), S(  29,    5), S(  17,    3), S(   8,   17),
		S(  10,   16), S(  26,    7), S(  28,    7), S(  24,   20), S(  28,   13), S(  19,   12), S(  21,    2), S(   0,   13),
		S(   0,    1), S(  16,   -5), S(   4,  -11), S(  18,    8), S(   4,   10), S(  -5,   -6), S(  -6,   -4), S( -17,    1),
		S(   3,   12), S(   7,    1), S(   8,   -7), S(   1,   -3), S(   2,   -5), S( -11,   -3), S( -14,    1), S( -20,    5),
		S( -16,    7), S( -13,    4), S(  -2,   -4), S(  -5,    4), S( -12,   -1), S( -24,   -6), S( -16,    0), S( -55,   17),
	},
	{
		S( -42,   -5), S( -39,    6), S( -17,   -4), S( -74,    9), S( -76,   13), S( -60,    3), S( -35,    6), S( -13,    7),
		S( -38,    1), S( -59,   14), S( -17,    0), S( -11,   -6), S( -27,    4), S(  -4,   -4), S(  -8,   -2), S( -13,   -3),
		S(  17,   12), S(  22,    1), S(  33,    8), S(   8,    4), S(  15,   -7), S(   4,    2), S(  10,    2), S(   4,    4),
		S(   3,    5), S(   9,    7), S(  14,   10), S(  15,   13), S(  24,   15), S(  12,    4), S(   5,    9), S(  -8,    8),
		S(  20,  -11), S(   7,    5), S(  10,    3), S(  17,   10), S(  16,    9), S(   3,   11), S(  -2,    6), S(   1,    3),
		S(  20,  -10), S(  23,  -12), S(  11,   -4), S(   7,    6), S(  -1,    6), S(   4,    3), S(  12,    2), S(  -1,   -5),
		S(  26,  -14), S(  32,  -20), S(  26,  -15), S(   4,   -5), S(  -4,   -2), S(  11,  -18), S(   5,  -16), S(  21,   -4),
		S(  36,  -28), S(  22,  -11), S(  -2,    5), S(  15,   -7), S(   0,   -5), S(   4,    6), S(  16,    4), S(  11,   -7),
	},
	{
		S(  20,    7), S( -20,   29), S(  -2,   24), S( -14,   18), S( -35,   31), S( -28,   31), S( -14,   23), S( -16,   24),
		S(  43,   -6), S(  43,    3), S(  28,    8), S(   9,   11), S(  21,   12), S(   2,   23), S(  -3,   20), S(  -8,   17),
		S(  23,   -7), S(  58,   -8), S(  42,   -8), S(  22,    3), S(   5,    8), S(   1,   16), S(  13,   11), S( -13,   17),
		S(  13,   -2), S(  16,    3), S(  22,   -1), S(  15,    0), S(   4,    8), S(   7,   11), S(   6,   10), S( -11,   16),
		S(  -5,   -4), S(  21,   -3), S(   0,    3), S(   7,    1), S(  -4,    4), S( -10,    7), S( -12,    7), S( -19,    7),
		S(   5,  -22), S(  21,  -24), S(  -1,  -13), S(   0,  -13), S( -15,   -4), S( -19,   -8), S( -18,   -9), S( -25,   -5),
		S( -14,  -23), S(  19,  -30), S(   6,  -21), S(  -2,  -18), S(  -9,  -15), S( -11,  -12), S( -21,   -9), S( -26,  -11),
		S( -22,  -18), S( -14,   -8), S(  -6,  -14), S(   0,  -21), S(  -9,  -17), S( -16,  -11), S( -16,  -15), S( -17,   -9),
	},
	{
		S(   5,  -14), S(  56,  -45), S(   0,   18), S(  -8,   20), S(   2,    8), S( -30,   26), S( -51,   22), S( -29,   10),
		S(  48,   -3), S(   1,   10), S(   7,   30), S( -32,   65), S( -23,   46), S(  -9,   17), S( -11,   -5), S(   1,   -6),
		S(  19,    9), S(  26,    3), S(   2,   25), S(  -9,   39), S(  -3,   30), S(   1,   15), S(   4,   -5), S(  15,  -10),
		S(  18,   17), S(   6,   42), S(  11,   24), S( -14,   34), S(  -7,   29), S(   8,    4), S(   5,   12), S(   4,    5),
		S(  15,   10), S(  19,   10), S(   4,   23), S(   7,   24), S(  -6,   19), S(  -1,   13), S(   3,   11), S(  -1,    7),
		S(  16,  -25), S(  13,  -11), S(   3,    2), S(  -7,   18), S(  -6,   10), S(  -8,    4), S(   2,   -8), S(   1,  -14),
		S(  14,  -60), S(  17,  -71), S(  11,  -44), S(   3,  -11), S(   1,  -10), S(   2,  -22), S(  -1,  -33), S(   9,  -42),
		S(   3,  -56), S( -16,  -55), S( -21,  -21), S( -10,  -19), S( -10,  -19), S( -14,  -16), S( -17,  -22), S( -17,  -27),
	},
	{
		S(  81,  -64), S(  56,  -11), S(  24,   -3), S(  23,   -8), S(   6,   -2), S(   6,   -2), S(   6,   -2), S(   6,   -2),
		S( -77,   33), S(  33,   31), S(  29,   26), S( 102,   -6), S(   6,   -2), S(   6,   -2), S(   6,   -2), S(   6,   -2),
		S( -72,   24), S(  41,   21), S(  64,   11), S(  45,    8), S(   6,   -2), S(   6,   -2), S(   6,   -2), S(   6,   -2),
		S(-108,   16), S( -41,   15), S( -34,   14), S( -37,    3), S(   6,   -2), S(   6,   -2), S(   6,   -2), S(   6,   -2),
		S(-138,   14), S( -64,   13), S( -41,    7), S( -49,    4), S(   6,   -2), S(   6,   -2), S(   6,   -2), S(   6,   -2),
		S( -76,    8), S( -13,    2), S( -25,    5), S( -14,    0), S(   6,   -2), S(   6,   -2), S(   6,   -2), S(   6,   -2),
		S(   6,   -6), S(  25,   -1), S(  10,    3), S(   3,   -1), S(   6,   -2), S(   6,   -2), S(   6,   -2), S(   6,   -2),
		S(  14,  -32), S(  20,   -7), S(  -8,    7), S(   0,   -9), S(   6,   -2), S(   6,   -2), S(   6,   -2), S(   6,   -2),
	},
};

constexpr PackedScore MOBILITY[4][28] = {
	{S( -15,  -14), S( -41,  -67), S( -17,  -32), S(  -7,   -6), S(   3,    8), S(   7,   21), S(  16,   28), S(  25,   35), S(  33,   34), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -16,  -32), S( -52, -100), S( -28,  -44), S( -21,  -20), S(  -9,   -6), S(  -1,    3), S(   4,   15), S(   9,   21), S(  12,   26), S(  16,   29), S(  16,   33), S(  26,   26), S(  18,   34), S(  32,   23), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -38,  -30), S(  11,  -72), S( -26,  -44), S( -16,  -28), S(  -9,  -22), S(  -3,   -6), S(   1,    0), S(  -5,   11), S(   0,   14), S(   4,   20), S(   9,   24), S(  11,   31), S(  15,   36), S(  23,   36), S(  31,   31), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -47,    6), S( -64,  -77), S(-120,  -50), S( -80, -280), S( -83, -114), S( -38,  -46), S( -28,  -23), S( -20,  -20), S( -12,  -14), S( -10,   13), S(  -8,   22), S(  -5,   33), S(  -1,   39), S(   3,   42), S(   6,   46), S(   9,   50), S(  11,   53), S(  11,   59), S(  12,   62), S(  12,   66), S(  21,   60), S(  27,   48), S(  31,   50), S(  56,   23), S(  63,   23), S( 106,  -14), S( 109,  -18), S(  60,  -18)}
};

constexpr PackedScore THREAT_BY_PAWN[6] = {S(   8,  -18), S(  68,   32), S(  68,   62), S(  92,    6), S(  79,  -20), S(   0,    0)};
constexpr PackedScore THREAT_BY_KNIGHT[2][6] = {
	{S(   8,   29), S(  33,   25), S(  38,   42), S(  80,    6), S(  46,  -24), S(   0,    0)},
	{S(  -4,   12), S(  14,   45), S(  32,   34), S(  65,   32), S(  56,   -2), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_BISHOP[2][6] = {
	{S(   5,   36), S(  52,   26), S(   0,   36), S(  76,    9), S(  74,   44), S(   0,    0)},
	{S(   1,   10), S(  24,   25), S( -15,    9), S(  48,   44), S(  53,  131), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_ROOK[2][6] = {
	{S(  -1,   46), S(  30,   54), S(  29,   53), S(  16,  -39), S(  77,    0), S(   0,    0)},
	{S(  -7,   14), S(   6,   19), S(  17,    7), S(  11,  -68), S(  62,   56), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_QUEEN[2][6] = {
	{S(  13,    6), S(  38,    9), S(  20,   45), S(  26,   -9), S(  13,  -70), S( 141,  -33)},
	{S(   0,   15), S(   2,    8), S(  -4,   23), S(  -4,    4), S( -21,  -60), S( 119,   48)}
};
constexpr PackedScore THREAT_BY_KING[6] = {S( -14,   45), S(  34,   44), S(  34,   50), S( 107,    8), S(   0,    0), S(   0,    0)};
constexpr PackedScore PUSH_THREAT = S(  20,   17);

constexpr PackedScore PASSED_PAWN[8] = {S(   0,    0), S(  -1,    7), S(  -5,   15), S( -24,  -23), S(   1,   11), S(   3,   41), S(  47,   71), S(   0,    0)};
constexpr PackedScore ISOLATED_PAWN[8] = {S(  -6,    4), S(  -2,  -14), S( -10,   -6), S(  -7,  -16), S( -10,  -14), S(  -6,   -5), S(  -2,  -11), S( -10,    5)};
constexpr PackedScore PAWN_PHALANX[8] = {S(   0,    0), S(   3,   -1), S(  13,    7), S(  20,   16), S(  49,   58), S( 131,  172), S(-199,  428), S(   0,    0)};
constexpr PackedScore DEFENDED_PAWN[8] = {S(   0,    0), S(   0,    0), S(  19,   12), S(  13,    9), S(  15,   17), S(  30,   45), S( 186,   27), S(   0,    0)};

constexpr PackedScore OUR_PASSER_PROXIMITY[8] = {S(   0,    0), S(  10,   71), S( -14,   48), S(  -3,   19), S(   1,    7), S(   7,    0), S(  16,    1), S(   9,    1)};
constexpr PackedScore THEIR_PASSER_PROXIMITY[8] = {S(   0,    0), S( -76,  -10), S(  15,  -19), S(   5,   18), S(  11,   37), S(   3,   69), S(   9,   70), S(   6,   61)};
constexpr PackedScore FREE_PASSER[8] = {S(   0,    0), S(   0,    0), S(   0,    0), S(   6,   11), S(   5,   25), S( -11,   86), S(  33,  114), S(   0,    0)};

constexpr PackedScore PAWN_STORM[3][8] = {
	{S(  50,  -39), S(  27,  -20), S(  19,   -6), S(  10,   -2), S(   3,    2), S(  -1,    8), S(  -1,   10), S(  11,  -11)},
	{S(   0,    0), S(  20,  -22), S(  25,   -5), S(   4,   -2), S(  -4,    6), S(  -7,   14), S(  -7,   15), S(   9,   -5)},
	{S(   2,   -5), S(  -8,    4), S(   3,    6), S(   2,    7), S(   3,    7), S(   3,   11), S(   3,   11), S(  -7,   -4)}
};
constexpr PackedScore PAWN_SHIELD[3][8] = {
	{S(  17,  -16), S(   1,   -8), S(  -3,  -10), S(  -5,   -8), S(   7,   -9), S(  22,  -23), S(  36,  -21), S(  -4,    3)},
	{S(   0,    0), S(  -7,    1), S( -11,   -3), S(   1,   -1), S(  15,   -7), S(  36,  -23), S(  57,  -29), S(  10,    3)},
	{S(  -6,   -5), S(  -6,   -3), S(  -1,   -4), S(   2,   -1), S(   5,    0), S(   3,   -2), S(  18,   -4), S(  -4,    6)}
};
constexpr PackedScore SAFE_KNIGHT_CHECK = S(  83,   -3);
constexpr PackedScore SAFE_BISHOP_CHECK = S(  16,   -7);
constexpr PackedScore SAFE_ROOK_CHECK = S(  58,   -2);
constexpr PackedScore SAFE_QUEEN_CHECK = S(  31,   14);
constexpr PackedScore KING_ATTACKER_WEIGHT[4] = {S(  16,   -4), S(   9,    0), S(  11,  -20), S(   1,    8)};
constexpr PackedScore KING_ATTACKS[14] = {S( -92,   31), S( -95,   28), S( -97,   26), S( -95,   30), S( -87,   27), S( -72,   24), S( -48,   16), S( -18,    4), S(  30,  -17), S(  61,  -22), S( 100,  -39), S( 129,  -26), S( 169, -122), S( 127,   31)};

constexpr PackedScore KNIGHT_OUTPOST = S(  26,   19);
constexpr PackedScore BISHOP_PAWNS[7] = {S(   6,   26), S(   9,   21), S(   6,   12), S(   1,    4), S(  -4,   -5), S(  -6,  -19), S( -12,  -33)};
constexpr PackedScore BISHOP_PAIR = S(  22,   64);
constexpr PackedScore ROOK_OPEN[2] = {S(  25,    8), S(  15,    6)};

constexpr PackedScore TEMPO = S(  31,   33);

#undef S


}
