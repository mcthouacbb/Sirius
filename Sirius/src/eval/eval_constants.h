#pragma once

#include "../defs.h"

namespace eval
{

#define S(mg, eg) PackedScore(mg, eg)

constexpr PackedScore MATERIAL[6] = {S(  60,  131), S( 289,  444), S( 310,  453), S( 383,  814), S( 804, 1492), S(0, 0)};

constexpr PackedScore PSQT[6][64] = {
	{
		S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
		S(  64,   83), S(  30,   95), S(  24,  105), S(  52,   81), S(  61,   73), S(  31,  100), S(  29,  112), S(  64,   90),
		S(   8,   13), S(   0,   43), S(  10,    7), S(  29,  -28), S(  17,  -22), S(   5,    0), S( -17,   35), S(  -3,   19),
		S(  16,    8), S(   5,   14), S(   8,   -8), S(  12,  -24), S(   0,  -22), S(  -4,   -8), S(  -9,   15), S( -12,   12),
		S(   9,   -1), S(   4,   17), S(   8,  -15), S(  15,  -14), S(   9,  -13), S(  -3,   -8), S( -15,   16), S( -14,    2),
		S(   3,   -3), S(  11,   13), S(  17,   -3), S(  -2,    2), S(  -7,    1), S( -12,   -3), S( -23,   13), S( -26,    1),
		S(  16,   -3), S(  30,    8), S(  16,   -6), S(   7,    6), S(  -6,    0), S(  -6,   -3), S( -14,   18), S( -16,    4),
		S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
	},
	{
		S( -74,  -93), S( -79,  -24), S( -24,  -18), S(  10,  -12), S( -32,    4), S( -68,   10), S(-101,    8), S( -83,  -54),
		S(  -8,  -14), S(  24,    0), S(  27,   -1), S(   8,    3), S(   8,    9), S(   2,   13), S(  -3,   18), S(  -9,    6),
		S(  15,   -7), S(   7,    0), S(  49,  -11), S(  37,    7), S(  21,   15), S(  11,   13), S(   3,    8), S(  -8,    8),
		S(  33,    1), S(  34,    8), S(  43,   11), S(  33,   17), S(  26,   23), S(  31,   12), S(  20,    4), S(  10,   13),
		S(  10,   15), S(  16,   14), S(  24,   14), S(  17,   26), S(  25,   17), S(  18,   17), S(  21,    2), S(   5,    7),
		S(  10,    0), S(  16,    2), S(  14,   -3), S(  11,   15), S(   3,   13), S(  -1,   -1), S(   0,   -5), S( -13,   -6),
		S(   6,    1), S(  12,   -6), S(   4,   -5), S(   9,   -1), S(   4,   -1), S(  -7,   -3), S(  -7,   -6), S( -17,   -6),
		S( -11,  -14), S( -12,   -5), S(  -7,  -10), S(  -1,    3), S( -10,   -1), S( -22,   -7), S( -15,  -10), S( -46,   -4),
	},
	{
		S( -42,  -15), S( -33,    7), S(  -6,   -1), S( -74,   14), S( -64,   18), S( -50,    3), S( -23,    7), S( -33,   11),
		S( -21,   -7), S( -47,    6), S( -10,    1), S(   0,    0), S( -19,   11), S(   3,    0), S( -15,   -4), S(  -4,   -3),
		S(  17,   11), S(  14,    1), S(  28,    3), S(  14,    6), S(  20,    3), S(  -1,    1), S(  10,    7), S(   7,    4),
		S(  -6,    5), S(  11,    6), S(  10,   12), S(  21,   15), S(  22,   22), S(  18,    7), S(   6,   11), S(  -5,    5),
		S(  15,   -6), S(   3,    9), S(   9,    8), S(  11,   14), S(  21,   11), S(   1,   15), S(   1,    6), S(   0,    0),
		S(  19,  -11), S(  22,   -7), S(   3,   -5), S(   7,   10), S(   0,    6), S(   1,   -3), S(  12,    2), S(   0,   -8),
		S(  29,  -22), S(  19,  -23), S(  26,  -11), S(   5,   -4), S(  -2,   -1), S(  10,  -18), S(   2,  -25), S(  15,  -13),
		S(  26,  -41), S(  16,  -18), S( -11,    2), S(  12,   -4), S(  -2,   -3), S(  -4,    3), S(  12,   -5), S(   8,  -19),
	},
	{
		S(  10,   12), S( -27,   38), S( -23,   29), S( -14,   20), S( -29,   29), S( -26,   35), S(  -8,   24), S(  -5,   23),
		S(  27,    7), S(  29,   13), S(  11,   18), S(   8,   16), S(  16,   20), S(   3,   32), S(   0,   27), S(   2,   20),
		S(   8,    6), S(  33,    6), S(  18,    6), S(  24,    4), S(   3,   13), S(   1,   21), S(  12,   18), S(  -7,   21),
		S(   5,    5), S(   4,   13), S(  11,    9), S(  10,    1), S(   4,    9), S(   7,   14), S(   6,   15), S(  -6,   16),
		S( -10,   -1), S(  11,    3), S( -10,    8), S(   7,    0), S(  -4,    3), S(  -8,    7), S(  -9,    7), S( -12,    7),
		S(   7,  -27), S(  21,  -29), S(  -2,  -18), S(   2,  -19), S( -10,  -12), S( -13,  -13), S( -12,  -13), S( -17,  -12),
		S(  -6,  -31), S(  22,  -39), S(   2,  -26), S(   2,  -24), S(  -4,  -21), S(  -4,  -19), S( -13,  -17), S( -17,  -22),
		S(  -6,  -35), S(  -4,  -17), S(  -1,  -21), S(   9,  -27), S(   1,  -24), S(  -6,  -17), S(  -5,  -21), S(  -7,  -18),
	},
	{
		S(   1,  -10), S(  38,  -35), S( -27,   38), S( -14,   18), S(  11,   -7), S( -24,   16), S( -41,   11), S( -25,    7),
		S(  42,    3), S(   4,   11), S( -17,   31), S( -28,   51), S( -20,   37), S(  -3,    8), S(  -1,   -9), S(   8,   -7),
		S(  18,    6), S(  11,   11), S(   5,   17), S(  -9,   27), S(   5,   15), S(  11,    7), S(   9,   -8), S(  21,  -11),
		S(  11,   13), S(   7,   31), S(   9,    9), S(  -9,   31), S(  -5,   28), S(  10,    3), S(   7,   14), S(   6,    4),
		S(   9,    7), S(  14,    9), S(   1,   13), S(   4,   24), S(  -3,   31), S(  -2,   21), S(   4,   16), S(   0,    7),
		S(  10,  -18), S(  12,   -8), S(   0,    4), S(  -6,   13), S(  -4,   11), S(  -4,   15), S(   5,   -6), S(   5,  -18),
		S(  11,  -49), S(  12,  -62), S(   7,  -40), S(   4,  -11), S(   3,   -5), S(   4,  -18), S(   3,  -22), S(   9,  -37),
		S(   7,  -51), S(  -9,  -54), S( -20,  -23), S(  -4,  -24), S(  -3,  -19), S(  -6,  -17), S( -10,  -19), S( -11,  -16),
	},
	{
		S( -19,  -61), S( -55,   21), S( -71,    6), S( -73,    9), S(   9,   -6), S(   9,   -6), S(   9,   -6), S(   9,   -6),
		S( -70,   36), S( -21,   61), S( -31,   50), S(  14,   21), S(   9,   -6), S(   9,   -6), S(   9,   -6), S(   9,   -6),
		S(  -3,   25), S(  35,   51), S(  38,   42), S(  13,   42), S(   9,   -6), S(   9,   -6), S(   9,   -6), S(   9,   -6),
		S( -39,   21), S( -10,   45), S(  -7,   37), S( -29,   31), S(   9,   -6), S(   9,   -6), S(   9,   -6), S(   9,   -6),
		S( -51,    7), S( -19,   28), S(  -6,   17), S( -29,   15), S(   9,   -6), S(   9,   -6), S(   9,   -6), S(   9,   -6),
		S( -12,  -13), S(  14,    6), S(   1,   -3), S(  -5,   -6), S(   9,   -6), S(   9,   -6), S(   9,   -6), S(   9,   -6),
		S(  28,  -32), S(  29,   -8), S(  12,  -17), S(  -1,  -22), S(   9,   -6), S(   9,   -6), S(   9,   -6), S(   9,   -6),
		S(  17,  -62), S(  24,  -27), S(   3,  -30), S(  10,  -49), S(   9,   -6), S(   9,   -6), S(   9,   -6), S(   9,   -6),
	},
};

constexpr PackedScore MOBILITY[4][28] = {
	{S( -13,  -27), S( -43,  -48), S( -18,  -20), S(  -9,   -1), S(   3,    8), S(   8,   18), S(  16,   22), S(  25,   27), S(  36,   21), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -23,  -42), S( -44,  -60), S( -25,  -32), S( -16,  -13), S(  -6,   -3), S(   1,    7), S(   3,   16), S(   7,   20), S(   9,   23), S(  12,   23), S(  14,   23), S(  20,   16), S(  19,   21), S(  30,   -1), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -23,  -44), S( -50,  -61), S( -19,  -53), S(  -4,  -31), S(  -2,  -13), S(   2,   -7), S(  -3,    3), S(   2,    8), S(   3,   12), S(   7,   17), S(   7,   26), S(  10,   31), S(  14,   35), S(  19,   34), S(  28,   31), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -30,   18), S( -52,  -83), S(-123,  -77), S( -32, -233), S( -39,  -77), S( -24,  -14), S( -10,  -33), S( -10,    0), S(  -8,   16), S(  -7,   29), S(  -4,   35), S(   0,   34), S(   1,   45), S(   4,   45), S(   7,   46), S(   8,   49), S(   9,   51), S(  11,   52), S(  12,   51), S(  17,   45), S(  26,   34), S(  34,   17), S(  38,   18), S(  46,   -1), S(  54,   -6), S(  58,  -15), S(  24,  -10), S(   3,  -40)}
};

constexpr PackedScore THREAT_BY_PAWN[6] = {S(   4,  -21), S(  66,   31), S(  61,   63), S(  78,   28), S(  74,   -7), S(   0,    0)};
constexpr PackedScore THREAT_BY_KNIGHT[2][6] = {
	{S(   7,   29), S(  24,   27), S(  40,   46), S(  73,   16), S(  56,  -25), S(   0,    0)},
	{S(  -7,    8), S(  12,   24), S(  29,   30), S(  64,   34), S(  58,   -1), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_BISHOP[2][6] = {
	{S(  -2,   37), S(  40,   35), S( -10,   29), S(  69,   17), S(  67,   61), S(   0,    0)},
	{S(  -3,    7), S(  18,   23), S( -24,  -21), S(  43,   48), S(  45,  123), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_ROOK[2][6] = {
	{S(   0,   43), S(  18,   61), S(  26,   56), S(   6,  -37), S(  73,   17), S(   0,    0)},
	{S(  -7,    7), S(   2,   14), S(  14,    1), S(   6,  -83), S(  64,   47), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_QUEEN[2][6] = {
	{S(   5,   10), S(  24,   19), S(   8,   50), S(  17,   18), S(  10,  -53), S( 102,   37)},
	{S(  -2,   10), S(   0,    5), S(  -7,   17), S(  -6,    4), S( -16,  -77), S( 115,   62)}
};
constexpr PackedScore THREAT_BY_KING[6] = {S( -28,   50), S(   3,   53), S(  31,   44), S(  75,    9), S(   0,    0), S(   0,    0)};
constexpr PackedScore PUSH_THREAT = S(  15,   20);

constexpr PackedScore ISOLATED_PAWN[8] = {S(  -8,    5), S(  -4,  -16), S( -12,   -8), S( -11,  -16), S( -11,  -15), S(  -7,   -8), S(  -1,  -15), S( -10,    7)};
constexpr PackedScore DOUBLED_PAWN[8] = {S(  -4,  -62), S(  10,  -38), S(  -2,  -30), S(  -4,  -20), S(  -6,  -15), S( -16,  -20), S(   5,  -42), S(   2,  -74)};
constexpr PackedScore BACKWARDS_PAWN[8] = {S(   0,    0), S(  -7,  -14), S(  -2,  -14), S(  -9,  -11), S(   1,  -15), S(  29,   -8), S(   0,    0), S(   0,    0)};
constexpr PackedScore PAWN_PHALANX[8] = {S(   0,    0), S(   4,   -4), S(  11,   -2), S(  21,    7), S(  44,   38), S( 106,  216), S( -24,  341), S(   0,    0)};
constexpr PackedScore DEFENDED_PAWN[8] = {S(   0,    0), S(   0,    0), S(  19,    7), S(  11,    8), S(  17,   21), S(  28,   63), S( 133,   75), S(   0,    0)};
constexpr PackedScore CANDIDATE_PASSER[2][8] = {
	{S(   0,    0), S( -36,  -18), S( -20,   -5), S(   0,   30), S(  30,   57), S(  63,   83), S(   0,    0), S(   0,    0)},
	{S(   0,    0), S( -22,   -5), S(  -9,   14), S(  -5,   31), S(  20,   44), S(  39,  148), S(   0,    0), S(   0,    0)}
};

constexpr PackedScore PASSED_PAWN[2][2][8] = {
	{
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -16,  -78), S(   0,   -2), S(   7,  141), S(  38,  240), S(   0,    0)},
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -26,  -51), S(   7,  -16), S(  28,   29), S(  55,   42), S(   0,    0)}
	},
	{
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -37,  -48), S(  -5,  -15), S(  26,   17), S(  59,    3), S(   0,    0)},
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -38,  -52), S(  -4,  -27), S(   6,   -6), S( -13,  -13), S(   0,    0)}
	}
};
constexpr PackedScore OUR_PASSER_PROXIMITY[8] = {S(   0,    0), S(  43,   77), S(   8,   64), S(   5,   38), S(   8,   25), S(  14,   17), S(  23,   15), S(  18,   13)};
constexpr PackedScore THEIR_PASSER_PROXIMITY[8] = {S(   0,    0), S( -39,    1), S(  26,   -6), S(  16,   26), S(  22,   43), S(  16,   75), S(  18,   76), S(  20,   65)};
constexpr PackedScore PASSED_PATH_ADVANCE = S( -10,   20);

constexpr PackedScore PAWN_STORM[2][4][8] = {
	{
		{S(  16,   13), S(-129,  -49), S(  -9,   -8), S(   4,  -11), S(  -1,    2), S(  -5,    9), S(  -4,    8), S(   0,    0)},
		{S(  13,    3), S( -19,  -99), S(  41,  -42), S(   5,  -10), S(   1,   -4), S( -10,    7), S(  -7,    9), S(   0,    0)},
		{S(  -2,    5), S(  60,  -99), S(  61,  -43), S(  18,  -17), S(   2,    0), S(  -5,    6), S(  -8,   11), S(   0,    0)},
		{S(   9,   -8), S( 109,  -83), S(  31,  -19), S(  13,    0), S(  -2,    5), S(  -7,   -1), S(  -2,    0), S(   0,    0)}
	},
	{
		{S(   0,    0), S(  -3,  -28), S( -27,  119), S(   8,  -47), S(  -3,    9), S(  -2,    5), S(  -5,    9), S(   0,    0)},
		{S(   0,    0), S(   7,  -92), S(   0,   56), S(  52,  -43), S(   1,    3), S(  -7,    6), S(  -7,    8), S(   0,    0)},
		{S(   0,    0), S(  -6,   26), S( -65, -116), S(  19,  -26), S(   2,    5), S(  -1,    5), S(  -8,   11), S(   0,    0)},
		{S(   0,    0), S(  -5,  -44), S(  64,   -5), S(  20,    0), S(   2,    8), S(   1,  -10), S(   0,    6), S(   0,    0)}
	}
};
constexpr PackedScore PAWN_SHIELD[4][8] = {
	{S(  16,    2), S(  -7,   24), S( -14,   15), S(  -2,    7), S(   3,    1), S( -42,  -23), S( -79,  -35), S(   0,    0)},
	{S(  16,    0), S( -12,    9), S( -10,    7), S(  11,   -3), S(   8,  -11), S( -15,  -16), S( -53,  -32), S(   0,    0)},
	{S(   4,    8), S( -16,    7), S(  16,    4), S(   2,   -2), S(  -1,   -1), S(   2,  -16), S( -15,  -40), S(   0,    0)},
	{S(  14,   -4), S(   5,   -4), S(  -3,   -1), S(   1,   -6), S(   8,   -9), S(  28,  -19), S( -13,  -22), S(   0,    0)}
};
constexpr PackedScore SAFE_KNIGHT_CHECK = S(  90,   -2);
constexpr PackedScore SAFE_BISHOP_CHECK = S(  17,   22);
constexpr PackedScore SAFE_ROOK_CHECK = S(  71,   10);
constexpr PackedScore SAFE_QUEEN_CHECK = S(  29,   31);
constexpr PackedScore UNSAFE_KNIGHT_CHECK = S(  10,    0);
constexpr PackedScore UNSAFE_BISHOP_CHECK = S(  15,   11);
constexpr PackedScore UNSAFE_ROOK_CHECK = S(  21,   -1);
constexpr PackedScore UNSAFE_QUEEN_CHECK = S(   6,   10);
constexpr PackedScore KING_ATTACKER_WEIGHT[4] = {S(  17,   -2), S(  13,   -2), S(  15,  -15), S(   4,    4)};
constexpr PackedScore KING_ATTACKS[14] = {S( -38,   11), S( -45,    9), S( -50,    7), S( -53,   10), S( -52,    8), S( -45,    5), S( -30,    2), S( -12,   -7), S(  16,  -20), S(  36,  -14), S(  57,  -27), S(  60,   15), S(  85,  -23), S(  72,   20)};
constexpr PackedScore WEAK_KING_RING[17] = {S( -30,   46), S( -29,   26), S( -24,   23), S( -21,   19), S( -14,   12), S(  -5,    6), S(   6,    1), S(  20,   -3), S(  37,   -7), S(  50,   -9), S(  62,  -11), S(  65,   -8), S(  77,  -11), S(  79,  -12), S(  77,   -8), S(  97,  -12), S( 105,  -13)};

constexpr PackedScore MINOR_BEHIND_PAWN = S(   7,   14);
constexpr PackedScore KNIGHT_OUTPOST = S(  24,   16);
constexpr PackedScore BISHOP_PAWNS[7] = {S(   5,   20), S(   6,   19), S(   4,   11), S(   1,    4), S(  -2,   -5), S(  -2,  -18), S(  -6,  -30)};
constexpr PackedScore BISHOP_PAIR = S(  20,   62);
constexpr PackedScore LONG_DIAG_BISHOP = S(  15,    8);
constexpr PackedScore ROOK_OPEN[2] = {S(  26,    3), S(  14,    4)};

constexpr PackedScore TEMPO = S(  32,   36);

constexpr PackedScore COMPLEXITY_PAWNS = S(   0,    8);
constexpr PackedScore COMPLEXITY_PASSERS = S(   0,    1);
constexpr PackedScore COMPLEXITY_PAWNS_BOTH_SIDES = S(   0,   70);
constexpr PackedScore COMPLEXITY_PAWN_ENDGAME = S(   0,   65);
constexpr PackedScore COMPLEXITY_OFFSET = S(   0, -133);

#undef S


}