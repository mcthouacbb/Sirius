#pragma once

#include "../defs.h"

namespace eval
{

// clang-format off
#define S(mg, eg) ScorePair(mg, eg)

constexpr ScorePair MATERIAL[6] = {S(  74,  172), S( 262,  514), S( 295,  525), S( 289,  982), S( 735, 1796), S(0, 0)};

constexpr ScorePair PSQT[6][64] = {
    {
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  82,   93), S( -15,  115), S(  49,   53), S(  97,   75), S(  98,   65), S(  45,   85), S( -17,  119), S( 107,   66),
        S(  25,   39), S( -17,   47), S(  -9,   12), S(  51,   -4), S(  44,  -11), S(  -1,   10), S( -18,   22), S(  15,   18),
        S(  24,   20), S( -13,   11), S(  32,  -22), S(  40,  -12), S(  25,  -15), S(   7,   -4), S( -18,   15), S(   4,   16),
        S(   8,    4), S( -13,    5), S(  19,  -37), S(  25,  -15), S(  16,  -13), S(  -4,   -1), S( -39,   18), S( -18,    7),
        S(   7,    4), S(   5,    2), S(   5,  -15), S(  -6,    3), S( -19,    0), S( -19,    7), S( -52,   19), S( -33,    5),
        S(  23,   -5), S(  35,   -5), S(  45,  -31), S(   2,    8), S( -10,   -3), S( -12,   10), S( -37,   21), S( -17,    3),
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
    },
    {
        S(  47, -155), S(  24,  -58), S(  43,  -71), S(  19,   13), S( -27,   14), S(  -8,  -45), S(  32,  -64), S(  20, -116),
        S(  59,  -59), S(   1,  -11), S(  41,   19), S(  24,   14), S(   9,   27), S(  27,   11), S( -14,    6), S(  35,  -51),
        S(  29,   -4), S(  19,  -31), S( -22,   58), S( -11,   55), S( -19,   52), S(  -6,   34), S(   4,   -5), S(   5,  -14),
        S(  29,   24), S(  24,   43), S(  10,   57), S(   0,   67), S(  10,   56), S(  -5,   44), S(  11,   18), S(  19,    4),
        S(  14,   19), S(   5,   42), S(   5,   48), S(  -5,   63), S(   0,   45), S(  -3,   43), S(   4,   12), S(   2,  -16),
        S(  -3,    0), S(  -6,   19), S(  -2,   25), S(  -6,   51), S( -14,   38), S( -22,   22), S( -18,    6), S( -29,  -23),
        S(   0,    6), S(  18,   35), S( -18,   16), S( -12,   18), S( -23,   21), S( -34,   -6), S( -18,  -21), S( -36,  -59),
        S( -72,  -73), S( -21,  -15), S( -12,   10), S(   6,   16), S(  -4,   -8), S( -26,  -13), S( -44,  -15), S( -23, -207),
    },
    {
        S(  28, -112), S( 130,  -42), S( -19,   -4), S( -64,    2), S(-110,   24), S( -51,  -18), S( -31,   32), S(  -6,  -21),
        S(  54,  -96), S( -74,   -2), S(   2,   17), S( -53,   12), S( -31,   -8), S(  -9,   17), S( -33,  -11), S( -21,   -4),
        S(  28,   12), S(   1,   26), S( -12,   26), S(  -6,   32), S(   5,   21), S( -18,    4), S(  16,    2), S(  30,  -11),
        S(  -7,   -3), S(  -4,   31), S(  -2,   36), S(  10,   45), S(  20,   40), S(   5,   18), S(   3,   23), S( -15,   -4),
        S(  20,  -24), S( -10,   15), S(   3,   27), S(   3,   35), S(   8,   28), S(   9,   30), S(  -7,    9), S(  -2,  -14),
        S(  32,  -21), S(  24,    4), S(   3,   -1), S(   2,   24), S(   3,   21), S(  -4,   13), S(  19,   12), S(  -1,  -18),
        S(  36,  -28), S(  31,  -22), S(  29,   -6), S(  -6,    8), S( -20,    6), S(  10,  -11), S(   1,  -30), S(  24,  -12),
        S(  22,  -28), S(  31,  -15), S( -18,    3), S(   3,    0), S(  -8,   -1), S( -20,   -4), S(  26,  -14), S(  16,  -15),
    },
    {
        S(  81,    2), S(  51,   30), S(-114,   65), S(-112,   50), S(-103,   59), S( -84,   65), S(  -1,   41), S(  13,   24),
        S( 106,  -13), S(  68,   10), S(  24,   11), S(  28,    7), S(  43,   15), S(  38,   17), S(  23,   19), S(  40,   19),
        S(  15,    2), S(  26,   10), S(  11,   12), S(  -4,    3), S(  16,    8), S(  14,    7), S(  18,    5), S(   2,   25),
        S(  -2,    6), S( -15,   32), S( -12,   20), S( -21,   14), S(  -3,   11), S(  -2,   13), S(   8,   12), S( -17,   25),
        S( -17,   -5), S(   0,   11), S( -29,   15), S( -19,    9), S(  -5,    1), S( -16,   18), S( -11,   12), S( -28,   20),
        S(   0,  -28), S(  26,  -20), S(  -1,  -18), S(   5,  -15), S(  -3,   -9), S( -13,   -4), S(   1,   -9), S( -13,  -11),
        S(   0,  -41), S(  35,  -50), S(  14,  -33), S(   5,  -28), S(  11,  -24), S(  -6,  -15), S(  -4,  -32), S(  -9,  -22),
        S( -23,  -57), S(   1,  -40), S(   0,  -30), S(  15,  -38), S(   8,  -33), S(  -2,  -29), S(   2,  -34), S(  -9,  -36),
    },
    {
        S( 127,  -32), S( 124,  -14), S(  80,    7), S(  38,   25), S( -18,   46), S(  20,    6), S(  16,   -4), S(  53,  -32),
        S(  64,   21), S(  20,   85), S(   8,   44), S( -25,   52), S(  -8,   40), S(  30,   -2), S(  12,    1), S(   8,   -1),
        S(   3,   34), S( -23,   58), S( -12,   45), S( -28,   39), S(   2,   29), S(  25,    3), S(   0,   15), S(  33,  -27),
        S(  -9,    4), S( -33,   38), S( -36,   34), S( -34,   45), S( -15,   41), S(  -4,   16), S(  -3,   25), S(  -6,    4),
        S(  -8,   -7), S(  -6,    4), S( -41,   45), S( -35,   60), S( -23,   56), S( -17,   43), S(  -6,   12), S( -13,   -4),
        S(   6,  -42), S(   0,   -5), S( -12,   22), S( -24,   35), S( -19,   38), S( -11,   29), S(   2,   -7), S(   4,  -34),
        S( -11,  -92), S(  34,  -98), S(   9,  -57), S( -10,  -15), S( -12,   -4), S(  -8,  -19), S(  -4,  -31), S(  -6,  -34),
        S(   3,  -91), S(  -1, -143), S( -12,  -94), S( -18,  -54), S( -22,  -38), S( -30,  -33), S( -29,  -30), S( -29,  -32),
    },
    {
        S(-433,   65), S(-187,  124), S(   1,    4), S(-347,  193), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  28,  -17), S( 118,   13), S(  33,   52), S(-192,  114), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S( 194,  -74), S( 212,  -15), S(  37,   68), S( -38,   89), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  16,  -46), S(  18,   16), S( -48,   65), S(-158,   85), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S( -47,  -48), S( -32,   -3), S( -48,   25), S(-105,   42), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  11,  -62), S(   1,  -27), S( -15,    3), S( -30,    9), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  77,  -74), S(  74,  -47), S(  17,  -16), S( -20,   -6), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  34,  -62), S(  59,  -51), S(  26,  -25), S(   6,  -37), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
    },
};

constexpr ScorePair MOBILITY[4][28] = {
    {S( -12,  -30), S( -58,  -54), S( -36,   -4), S( -19,   10), S(   2,   12), S(  10,   24), S(  25,   20), S(  32,   26), S(  49,    2), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S( -24,  -32), S( -52,  -73), S( -27,  -30), S( -14,   -7), S(  -5,    6), S(   2,   17), S(   3,   27), S(   8,   21), S(   5,   30), S(   8,   21), S(   3,   30), S(  31,   -3), S(   9,   21), S(  45,  -28), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S( -14,  -58), S( -38,  -96), S( -29,  -68), S( -14,  -33), S(  -2,  -17), S(   1,   -4), S(   1,    5), S(   6,   11), S(   7,   19), S(  10,   25), S(   5,   36), S(   4,   43), S(   2,   53), S(   5,   55), S(  43,   35), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S(   1,  -17), S( -18, -108), S( -28, -150), S( -54, -160), S( -65,  -28), S( -43,    5), S( -39,   29), S( -34,   35), S( -31,   43), S( -25,   49), S( -23,   61), S( -19,   66), S( -16,   68), S( -13,   71), S( -13,   75), S( -13,   78), S( -15,   80), S( -13,   78), S(  -7,   64), S( -10,   67), S( -10,   61), S(   7,   35), S(  35,    8), S(  45,   -3), S(  10,   14), S( 148, -153), S( 217, -251), S(  24, -122)}
};

constexpr ScorePair THREAT_BY_PAWN[6] = {S(  -8,  -71), S( 116,  124), S(  89,  211), S(  93,  318), S(  52,  174), S( 126,   52)};
constexpr ScorePair THREAT_BY_KNIGHT[2][6] = {
    {S(  11,   57), S(  41,  130), S(  66,  104), S( 109,  164), S(  43,  258), S( 292,   40)},
    {S( -12,   16), S(   2,  108), S(  43,   47), S(  32,  140), S(  47,  176), S( 110,  129)}
};
constexpr ScorePair THREAT_BY_BISHOP[2][6] = {
    {S(   0,   58), S(  76,   93), S(  -4,  130), S(  95,  208), S(  58,  251), S( 236,   87)},
    {S( -11,    9), S(  26,   37), S( -39,   60), S(  41,  148), S(  51,  187), S( 104,  167)}
};
constexpr ScorePair THREAT_BY_ROOK[2][6] = {
    {S(   1,   70), S(  61,  114), S(  90,  123), S(  20,  -56), S(  81,  107), S( 166,   60)},
    {S( -15,   11), S(   7,   11), S(  20,    4), S( -42,  -81), S(  56,  181), S( 215,   60)}
};
constexpr ScorePair THREAT_BY_QUEEN[2][6] = {
    {S(  15,   40), S(  62,   69), S(  93,   87), S(  44,  157), S(  -1,  -82), S( 324,   98)},
    {S(  -7,   14), S(  -1,   -2), S( -19,   23), S( -18,   11), S( -13, -145), S( 256,  156)}
};
constexpr ScorePair THREAT_BY_KING[6] = {S(  52,   57), S(  53,   77), S( 134,  139), S( 163,  115), S( 572, 1932), S(   0,    0)};
constexpr ScorePair KNIGHT_HIT_QUEEN = S(  10,    6);
constexpr ScorePair BISHOP_HIT_QUEEN = S(  24,   22);
constexpr ScorePair ROOK_HIT_QUEEN = S(  28,    1);
constexpr ScorePair PUSH_THREAT = S(  13,   34);
constexpr ScorePair RESTRICTED_SQUARES = S(   3,    5);

constexpr ScorePair ISOLATED_PAWN[4] = {S( -24,   12), S(   5,   -8), S(  -4,   -8), S(  -9,   -4)};
constexpr ScorePair ISOLATED_EXPOSED = S(  -5,  -12);
constexpr ScorePair DOUBLED_PAWN[4] = {S(  11,  -88), S(  18,  -50), S( -11,  -26), S( -38,  -26)};
constexpr ScorePair BACKWARDS_PAWN[8] = {S(   0,    0), S(   0,   -8), S(   5,   -8), S(   2,   -4), S(  11,   -1), S(  33,    2), S(   0,    0), S(   0,    0)};
constexpr ScorePair BACKWARDS_EXPOSED = S( -20,   -5);
constexpr ScorePair PAWN_PHALANX[8] = {S(   0,    0), S(   7,    3), S(  16,    5), S(  31,    7), S(  39,   42), S(  77,  135), S(  58,  233), S(   0,    0)};
constexpr ScorePair DEFENDED_PAWN[8] = {S(   0,    0), S(   0,    0), S(  26,   11), S(  14,   12), S(  23,   27), S(  34,   65), S( 127,   84), S(   0,    0)};
constexpr ScorePair CANDIDATE_PASSER[2][8] = {
    {S(   0,    0), S( -36,    8), S( -22,   -9), S( -23,   -9), S( -15,   -4), S(  -8,   11), S(   0,    0), S(   0,    0)},
    {S(   0,    0), S( -14,  -18), S(  -5,   17), S( -14,   37), S(  -5,   54), S(  15,   94), S(   0,    0), S(   0,    0)}
};

constexpr ScorePair PASSED_PAWN[2][2][8] = {
    {
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -48,  -51), S( -35,   26), S(  -4,  146), S(  66,  294), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -16,  -68), S(  -5,  -23), S(  28,   40), S( 100,   68), S(   0,    0)}
    },
    {
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -35,  -65), S( -13,  -23), S(  27,   40), S(  54,   16), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -24,  -78), S(  -9,  -35), S(  10,   16), S(  18,  -25), S(   0,    0)}
    }
};
constexpr ScorePair OUR_PASSER_PROXIMITY[8] = {S(  60,  141), S(  83,  104), S(  31,   98), S( -12,   67), S(  -6,   34), S(   5,   14), S(  10,    4), S(   4,   -2)};
constexpr ScorePair THEIR_PASSER_PROXIMITY[8] = {S( -51,   -4), S( -26,   21), S(  10,   18), S(  10,   43), S(   9,   74), S(  32,   82), S(  45,   85), S(  34,   83)};
constexpr ScorePair PASSER_DEFENDED_PUSH[8] = {S(   0,    0), S(   0,    0), S(   0,    0), S(   0,   18), S(   3,   22), S(  35,   40), S(  88,  143), S(   0,    0)};

constexpr ScorePair PAWN_STORM[2][4][8] = {
    {
        {S(  17,   76), S( -94, -145), S(  58, -667), S(  79, -223), S(  22,  -61), S( -22,   38), S( -22,    8), S(   0,    0)},
        {S(  13,   14), S(  99, -579), S( 138, -672), S(  55, -140), S(  14,  -16), S( -42,   36), S(  -6,  -13), S(   0,    0)},
        {S( -20,   50), S(  39, -228), S( 124, -479), S(  62, -141), S(   6,  -43), S( -24,    8), S( -19,    1), S(   0,    0)},
        {S(   2,   36), S( 103, -203), S( 166, -437), S(  66, -118), S(  26,  -52), S( -20,  -21), S( -52,   -6), S(   0,    0)}
    },
    {
        {S(   0,    0), S(   0,    0), S(  61,  102), S( -17,  106), S( -44,  116), S( -30,   80), S(   9,  -22), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S( 153,   75), S(   5,   94), S( -14,  125), S( -18,  146), S( -58,   87), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S( 184,  -29), S(   6,  115), S( -25,  163), S(  -4,  128), S(  46,    5), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S( 158,  141), S(  -3,  206), S( -45,  169), S( -40,  162), S( -55,  -31), S(   0,    0)}
    }
};
constexpr ScorePair PAWN_SHIELD[4][8] = {
    {S(  26,   22), S( -15,   10), S( -25,  -11), S(  27,  -60), S(  34,  -43), S( -40,   78), S( -36,  -21), S(   0,    0)},
    {S(  21,  126), S( -19,  -83), S(  21,  -66), S(  51, -114), S(  25, -113), S(   3,   -8), S(  16, -244), S(   0,    0)},
    {S(   7,  223), S(   4, -217), S(  12,  -76), S(  39, -154), S(  25,  -84), S( -28,   13), S( -53, -300), S(   0,    0)},
    {S( -12,  129), S( -26,  -54), S(   4,  -73), S(  44,  -99), S(  38, -113), S(   4,  -26), S(  22, -155), S(   0,    0)}
};
constexpr ScorePair SAFE_KNIGHT_CHECK = S( 120, -126);
constexpr ScorePair SAFE_BISHOP_CHECK = S( 106, -127);
constexpr ScorePair SAFE_ROOK_CHECK = S( 126,  -51);
constexpr ScorePair SAFE_QUEEN_CHECK = S(  83,   20);
constexpr ScorePair UNSAFE_KNIGHT_CHECK = S(  11,   22);
constexpr ScorePair UNSAFE_BISHOP_CHECK = S(  42,   26);
constexpr ScorePair UNSAFE_ROOK_CHECK = S(  37,  -44);
constexpr ScorePair UNSAFE_QUEEN_CHECK = S(  23,   -7);
constexpr ScorePair QUEENLESS_ATTACK = S( -18,  165);
constexpr ScorePair KING_ATTACKER_WEIGHT[4] = {S(  85, -258), S(  29, -109), S(  35,  -87), S(  13,  -86)};
constexpr ScorePair KING_ATTACKS = S(  16,   19);
constexpr ScorePair WEAK_KING_RING = S(  14,  -24);
constexpr ScorePair KING_FLANK_ATTACKS[2] = {S(  22,  -40), S(   4,  -20)};
constexpr ScorePair KING_FLANK_DEFENSES[2] = {S( -13,    3), S(  -6,  -29)};
constexpr ScorePair SAFETY_OFFSET = S(  50,  -14);

constexpr ScorePair MINOR_BEHIND_PAWN = S(   7,   24);
constexpr ScorePair KNIGHT_OUTPOST = S(  21,   28);
constexpr ScorePair BISHOP_PAWNS[7] = {S(  26,  -10), S(  -3,   34), S(  -4,   22), S(  -6,    9), S(  -6,   -6), S(  -5,  -17), S(  -6,  -30)};
constexpr ScorePair BISHOP_PAIR = S(   7,  103);
constexpr ScorePair LONG_DIAG_BISHOP = S(  14,   11);
constexpr ScorePair ROOK_OPEN[2] = {S(  37,   -7), S(  20,    2)};

constexpr ScorePair TEMPO = S(  58,   41);

constexpr ScorePair COMPLEXITY_PAWNS = S(   0,   10);
constexpr ScorePair COMPLEXITY_PAWNS_BOTH_SIDES = S(   0,  188);
constexpr ScorePair COMPLEXITY_PAWN_ENDGAME = S(   0,  154);
constexpr ScorePair COMPLEXITY_OFFSET = S(   0, -186);

#undef S
// clang-format on

}
