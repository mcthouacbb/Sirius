#pragma once

#include "../defs.h"

namespace eval
{

#define S(mg, eg) PackedScore(mg, eg)

constexpr PackedScore MATERIAL[6] = {S(  61,  131), S( 285,  433), S( 306,  446), S( 386,  790), S( 744, 1616), S(0, 0)};

constexpr PackedScore PSQT[6][64] = {
    {
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  56,   76), S(  36,   91), S(  20,  101), S(  55,   75), S(  73,   61), S(  57,   75), S(  46,   95), S(  67,   80),
        S(   4,   -1), S( -14,   30), S(   9,  -13), S(   9,  -40), S(   1,  -38), S(   2,  -23), S( -19,   15), S(  -7,    4),
        S(  13,    1), S(  -5,   14), S(  12,  -11), S(  11,  -24), S(  -2,  -23), S(  -1,  -16), S(  -8,    8), S(  -9,    7),
        S(   6,   -7), S(  -5,   14), S(  13,  -22), S(  16,  -17), S(   9,  -16), S(   0,  -15), S( -14,    9), S( -12,   -3),
        S(  -1,   -8), S(   8,    8), S(   4,   -1), S(   1,   -2), S(  -8,   -2), S(  -9,   -9), S( -21,    9), S( -23,   -4),
        S(   9,   -9), S(  24,    9), S(  31,  128), S(   9,   -1), S(  -1,  -11), S(  -5,   -8), S( -14,   12), S( -14,    0),
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
    },
    {
        S( -68,  -99), S( -78,  -23), S( -30,  -18), S(  -3,  -11), S( -34,    3), S( -59,    4), S( -88,   -6), S( -84,  -59),
        S( -17,  -15), S(  12,    0), S(  23,   -2), S(  -2,    8), S(   3,   10), S(   5,    9), S(   1,   11), S( -11,   -2),
        S(   2,   -7), S( -10,    7), S(  29,   -2), S(  18,   16), S(   7,   23), S(  15,   12), S(   7,    2), S(  -5,   -2),
        S(  26,    3), S(  22,   16), S(  35,   18), S(  20,   25), S(  21,   27), S(  28,   13), S(  21,    3), S(  13,    7),
        S(   9,   16), S(  14,   17), S(  20,   20), S(  19,   28), S(  21,   21), S(  19,   18), S(  23,   -1), S(  10,    1),
        S(  15,   -1), S(  16,    4), S(  18,    3), S(  16,   16), S(   7,   16), S(   5,   -1), S(   8,   -7), S(  -5,   -8),
        S(  10,   -1), S(  11,   -4), S(  10,   -5), S(  13,    0), S(   8,   -1), S(  -2,   -3), S(  -1,   -8), S( -13,   -8),
        S(  -3,  -16), S(  -5,  -11), S(   4,  -10), S(   8,    2), S(   1,   -2), S( -15,  -10), S(  -8,  -17), S( -41,   -8),
    },
    {
        S( -47,  -14), S( -31,    8), S( -10,   -3), S( -72,   11), S( -62,   13), S( -57,    4), S( -30,    6), S( -32,    5),
        S( -22,  -10), S( -44,    3), S( -13,    2), S(  -9,    1), S( -22,   10), S(   2,   -2), S( -12,   -6), S(  -3,   -8),
        S(   9,   12), S(  -2,    7), S(  21,    5), S(   5,   11), S(  17,    4), S(   1,    0), S(  10,    5), S(   6,    0),
        S( -11,    4), S(   2,   12), S(   2,   16), S(  17,   19), S(  23,   22), S(  19,    8), S(   6,   11), S(  -4,    0),
        S(  16,   -7), S(  -3,   12), S(   7,   12), S(  15,   14), S(  21,   12), S(   6,   13), S(   4,    5), S(   5,   -2),
        S(  19,  -10), S(  22,   -2), S(   4,   -1), S(  10,   12), S(   1,    8), S(   5,   -4), S(  20,    0), S(   6,  -10),
        S(  25,  -19), S(  24,  -24), S(  27,  -10), S(   7,   -4), S(  -1,    0), S(  12,  -17), S(   5,  -27), S(  16,  -12),
        S(  28,  -38), S(  21,  -16), S(  -5,   -3), S(  18,   -5), S(   1,   -3), S(   0,    0), S(  12,   -7), S(   6,  -19),
    },
    {
        S(  18,    8), S( -18,   34), S(  -9,   25), S( -17,   21), S( -10,   21), S( -15,   30), S(   7,   18), S(   9,   17),
        S(  25,    2), S(  28,    8), S(  12,   16), S(  -6,   21), S(  24,   13), S(  12,   23), S(   8,   19), S(  11,   11),
        S(  -6,    4), S(  22,    6), S(   4,    8), S(   6,    9), S(   5,    8), S(   2,   17), S(  17,    9), S(  -5,   13),
        S( -10,   11), S( -15,   20), S(  -5,   16), S(  -7,   11), S(  -1,    9), S(   5,   13), S(   6,   10), S(  -7,   13),
        S( -19,    5), S(   0,   10), S( -19,   15), S(  -7,   10), S(  -5,    3), S(  -9,    7), S(  -9,    6), S(  -8,    3),
        S(   4,  -20), S(  23,  -23), S(   0,  -11), S(  -1,  -12), S(  -5,  -11), S(  -7,  -13), S(  -5,  -14), S( -11,  -11),
        S(  -6,  -26), S(  26,  -35), S(   6,  -22), S(   3,  -19), S(   4,  -21), S(   2,  -18), S(  -7,  -17), S( -11,  -22),
        S(  -5,  -39), S(  -2,  -19), S(   2,  -18), S(   9,  -24), S(   6,  -25), S(  -1,  -19), S(   0,  -23), S(  -2,  -21),
    },
    {
        S(  10,   -4), S(  53,  -28), S(  -6,   34), S( -18,   30), S(  18,    3), S(  -9,   18), S( -24,   10), S( -17,   14),
        S(  36,    6), S(  12,   13), S(  -6,   26), S( -31,   54), S(  -4,   33), S(  17,    2), S(  26,  -20), S(  20,   -9),
        S(   5,   11), S(   0,    1), S(  -6,   16), S( -14,   17), S(  10,   13), S(  23,    0), S(  21,  -17), S(  31,  -17),
        S(  -5,   16), S( -15,   33), S(  -8,   15), S( -15,   27), S(  -3,   26), S(  14,    3), S(  11,    6), S(   8,    0),
        S(  -4,   15), S(  -2,   14), S( -14,   23), S(  -7,   28), S( -11,   36), S(  -2,   19), S(   6,   13), S(   3,    3),
        S(   3,  -11), S(   6,   -4), S(  -6,   11), S( -12,   18), S(  -8,   15), S(  -3,   15), S(  12,  -11), S(  10,  -18),
        S(   3,  -43), S(  11,  -61), S(   2,  -28), S(   1,  -12), S(   0,   -3), S(   3,  -16), S(   4,  -23), S(  10,  -39),
        S(   7,  -56), S( -16,  -42), S( -19,  -22), S( -10,  -20), S(  -7,  -19), S( -11,  -15), S( -13,  -18), S( -12,  -18),
    },
    {
        S(  46,  -73), S(  27,   -5), S( -41,  -21), S( -72,    9), S(   9,   -5), S(   9,   -5), S(   9,   -5), S(   9,   -5),
        S(  -5,   12), S(  28,   51), S( -13,   32), S( -14,   38), S(   9,   -5), S(   9,   -5), S(   9,   -5), S(   9,   -5),
        S(  33,    9), S(  48,   49), S(  25,   33), S( -29,   60), S(   9,   -5), S(   9,   -5), S(   9,   -5), S(   9,   -5),
        S( -17,   14), S( -15,   51), S( -40,   33), S( -88,   56), S(   9,   -5), S(   9,   -5), S(   9,   -5), S(   9,   -5),
        S( -58,   10), S( -51,   41), S( -50,   13), S( -88,   37), S(   9,   -5), S(   9,   -5), S(   9,   -5), S(   9,   -5),
        S( -14,   -7), S(  -9,   18), S( -34,   -7), S( -54,   14), S(   9,   -5), S(   9,   -5), S(   9,   -5), S(   9,   -5),
        S(  38,  -28), S(  31,   -4), S(   5,  -29), S( -24,  -10), S(   9,   -5), S(   9,   -5), S(   9,   -5), S(   9,   -5),
        S(  38,  -61), S(  38,  -25), S(  12,  -52), S(   0,  -42), S(   9,   -5), S(   9,   -5), S(   9,   -5), S(   9,   -5),
    },
};

constexpr PackedScore MOBILITY[4][28] = {
    {S(  -3,  -30), S( -38,  -46), S( -16,  -15), S(  -8,    1), S(   2,    9), S(   6,   18), S(  13,   22), S(  21,   26), S(  30,   19), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S( -11,  -46), S( -30,  -60), S( -18,  -31), S( -11,  -13), S(  -3,   -4), S(   2,    7), S(   3,   15), S(   6,   19), S(   6,   22), S(   8,   23), S(  10,   23), S(  14,   18), S(   9,   27), S(  19,    4), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S( -12,  -46), S( -30,  -70), S( -14,  -53), S(  -3,  -31), S(   0,  -16), S(  -2,   -6), S(  -1,    2), S(   1,    8), S(   3,   11), S(   6,   18), S(   3,   28), S(   4,   35), S(   6,   39), S(   9,   40), S(  16,   37), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S(  -3,    6), S( -35,  -73), S( -62, -112), S( -18, -201), S( -23,  -65), S( -16,  -10), S(  -6,  -23), S(  -4,   -4), S(  -3,   13), S(   0,   22), S(   2,   25), S(   6,   28), S(   6,   39), S(  10,   37), S(  10,   44), S(  12,   45), S(  13,   47), S(  15,   47), S(  14,   48), S(  21,   39), S(  27,   28), S(  31,   15), S(  29,   19), S(  36,   -6), S(  28,    3), S(  15,  -13), S( -28,   11), S( -95,  -15)}
};

constexpr PackedScore THREAT_BY_PAWN[6] = {S(   4,  -20), S(  66,   29), S(  59,   60), S(  80,   25), S(  72,   -2), S(   0,    0)};
constexpr PackedScore THREAT_BY_KNIGHT[2][6] = {
    {S(   4,   28), S(  15,   37), S(  35,   43), S(  73,   13), S(  54,  -28), S(   0,    0)},
    {S(  -8,    9), S(   7,   35), S(  29,   30), S(  64,   33), S(  60,    0), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_BISHOP[2][6] = {
    {S(  -2,   35), S(  39,   32), S( -14,   38), S(  68,   15), S(  69,   44), S(   0,    0)},
    {S(  -4,    5), S(  17,   22), S( -26,  -11), S(  44,   45), S(  47,  109), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_ROOK[2][6] = {
    {S(  -1,   40), S(  16,   57), S(  26,   52), S( -12,  -28), S(  60,   13), S(   0,    0)},
    {S(  -7,    7), S(   2,   15), S(  13,    3), S( -13,  -65), S(  40,   62), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_QUEEN[2][6] = {
    {S(   7,    4), S(  24,   18), S(  10,   41), S(  14,    1), S(  10,  -56), S( 102,   50)},
    {S(  -3,   12), S(   1,    8), S(  -5,   13), S(  -4,    3), S( -17,  -74), S( 116,   57)}
};
constexpr PackedScore THREAT_BY_KING[6] = {S( -12,   41), S(   9,   48), S(  27,   42), S(  81,   10), S(   0,    0), S(   0,    0)};
constexpr PackedScore KNIGHT_HIT_QUEEN = S(  11,    2);
constexpr PackedScore BISHOP_HIT_QUEEN = S(  17,   11);
constexpr PackedScore ROOK_HIT_QUEEN = S(  19,   -2);
constexpr PackedScore PUSH_THREAT = S(  14,   18);

constexpr PackedScore ISOLATED_PAWN[8] = {S(  -8,    5), S(  -3,  -15), S( -12,   -9), S( -10,  -16), S( -12,  -14), S(  -8,   -8), S(  -3,  -14), S( -11,    7)};
constexpr PackedScore DOUBLED_PAWN[8] = {S(  -1,  -60), S(  14,  -37), S(   0,  -27), S(  -2,  -17), S(  -6,  -12), S(  -8,  -19), S(   5,  -37), S(   6,  -69)};
constexpr PackedScore BACKWARDS_PAWN[8] = {S(   0,    0), S(  -9,  -13), S(  -2,  -14), S(  -8,  -12), S(   1,  -18), S(  32,  -11), S(   0,    0), S(   0,    0)};
constexpr PackedScore PAWN_PHALANX[8] = {S(   0,    0), S(   5,   -4), S(  11,   -2), S(  20,    8), S(  38,   41), S( 116,  213), S(   4,  343), S(   0,    0)};
constexpr PackedScore DEFENDED_PAWN[8] = {S(   0,    0), S(   0,    0), S(  18,    6), S(  11,    8), S(  17,   21), S(  32,   64), S( 143,   74), S(   0,    0)};
constexpr PackedScore CANDIDATE_PASSER[2][8] = {
    {S(   0,    0), S( -32,  -15), S( -18,   -7), S(   0,   25), S(  25,   53), S(  64,  116), S(   0,    0), S(   0,    0)},
    {S(   0,    0), S( -17,  -10), S(  -8,   14), S(  -5,   28), S(  18,   41), S(  27,  178), S(   0,    0), S(   0,    0)}
};

constexpr PackedScore PASSED_PAWN[2][2][8] = {
    {
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -36,  -41), S( -16,   21), S(  10,  160), S(  65,  218), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -23,  -53), S(   3,  -20), S(  37,   41), S(  68,   25), S(   0,    0)}
    },
    {
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -29,  -56), S(  -5,  -19), S(  38,   34), S(  69,   -4), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -30,  -57), S(  -6,  -24), S(  16,   18), S(  -9,  -14), S(   0,    0)}
    }
};
constexpr PackedScore OUR_PASSER_PROXIMITY[8] = {S(  79,   93), S(  70,   97), S(  45,   71), S(   6,   59), S(   5,   39), S(   7,   27), S(  12,   19), S(  -7,   26)};
constexpr PackedScore THEIR_PASSER_PROXIMITY[8] = {S( -47,   -8), S(  -5,    5), S(  24,    2), S(  20,   31), S(  15,   63), S(  20,   76), S(  26,   78), S(  31,   66)};

constexpr PackedScore PAWN_STORM[2][4][8] = {
    {
        {S(  41,   35), S(-108,  -50), S( -37,  -36), S(  60,    1), S(  26,   21), S(  -1,   30), S( -10,   30), S(   0,    0)},
        {S(  32,    4), S(  47, -125), S(  94,  -81), S(  59,  -18), S(  16,   -2), S( -22,    7), S(   4,    5), S(   0,    0)},
        {S(   7,   19), S( 101,  -99), S( 105,  -50), S(  62,   -1), S(  14,   16), S( -13,   23), S( -15,   26), S(   0,    0)},
        {S(  16,    6), S( 149,  -74), S( 121,  -20), S(  70,    7), S(   9,   18), S( -15,   12), S( -22,   22), S(   0,    0)}
    },
    {
        {S(   0,    0), S(   0,    0), S(  62,   61), S( -21,   33), S( -25,   40), S( -18,   57), S(  -7,   43), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(  97,   18), S(  -4,   18), S( -17,   27), S( -29,   40), S( -40,   31), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S( 108,   18), S(   9,   24), S( -15,   40), S(  15,   42), S(  50,   27), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(  88,   19), S(  16,   26), S( -25,   26), S( -24,   23), S(  -2,   16), S(   0,    0)}
    }
};
constexpr PackedScore PAWN_SHIELD[4][8] = {
    {S(  46,   34), S( -20,   50), S( -12,   41), S(  40,   30), S(  44,   17), S( -24,   -2), S( -68,  -16), S(   0,    0)},
    {S(  49,    6), S( -24,   18), S(   9,    6), S(  53,   -1), S(  42,  -14), S(  12,  -15), S( -42,  -26), S(   0,    0)},
    {S(  21,   -5), S(  16,  124), S(  12,   -4), S(  34,  -24), S(  24,  -21), S(  -6,  -27), S( -61,  -38), S(   0,    0)},
    {S(  15,   17), S(   3,   13), S(   2,   12), S(  28,    7), S(  33,    4), S(   8,    9), S( -84,   12), S(   0,    0)}
};
constexpr PackedScore SAFE_KNIGHT_CHECK = S( 109,    7);
constexpr PackedScore SAFE_BISHOP_CHECK = S(  72,   19);
constexpr PackedScore SAFE_ROOK_CHECK = S( 115,   15);
constexpr PackedScore SAFE_QUEEN_CHECK = S(  55,   27);
constexpr PackedScore UNSAFE_KNIGHT_CHECK = S(  16,    2);
constexpr PackedScore UNSAFE_BISHOP_CHECK = S(  38,   10);
constexpr PackedScore UNSAFE_ROOK_CHECK = S(  39,    3);
constexpr PackedScore UNSAFE_QUEEN_CHECK = S(  16,    3);
constexpr PackedScore QUEENLESS_ATTACK = S(-145,  139);
constexpr PackedScore KING_ATTACKER_WEIGHT[4] = {S(  57,   -5), S(  22,    0), S(  29,  -13), S(   4,  -10)};
constexpr PackedScore KING_ATTACKS = S(   7,    0);
constexpr PackedScore WEAK_KING_RING = S(   8,   -1);
constexpr PackedScore KING_FLANK_ATTACKS[2] = {S(  11,   -4), S(   7,    1)};
constexpr PackedScore KING_FLANK_DEFENSES[2] = {S(  -6,    0), S( -10,    2)};
constexpr PackedScore SAFETY_OFFSET = S(  79,  206);

constexpr PackedScore PAWNLESS_FLANK = S( -33,   63);

constexpr PackedScore MINOR_BEHIND_PAWN = S(   6,   12);
constexpr PackedScore KNIGHT_OUTPOST = S(  23,   16);
constexpr PackedScore BISHOP_PAWNS[7] = {S(   3,   21), S(   5,   19), S(   3,   11), S(   1,    4), S(  -2,   -5), S(  -2,  -18), S(  -6,  -31)};
constexpr PackedScore BISHOP_PAIR = S(  19,   60);
constexpr PackedScore LONG_DIAG_BISHOP = S(  15,    8);
constexpr PackedScore ROOK_OPEN[2] = {S(  23,    4), S(  12,    5)};

constexpr PackedScore TEMPO = S(  32,   34);

constexpr PackedScore COMPLEXITY_PAWNS = S(   0,   10);
constexpr PackedScore COMPLEXITY_PAWNS_BOTH_SIDES = S(   0,   63);
constexpr PackedScore COMPLEXITY_PAWN_ENDGAME = S(   0,   78);
constexpr PackedScore COMPLEXITY_OFFSET = S(   0, -133);

#undef S


}