#pragma once

#include "../defs.h"

namespace eval
{

// clang-format off
#define S(mg, eg) ScorePair(mg, eg)

constexpr ScorePair MATERIAL[6] = {S(  61,  131), S( 286,  430), S( 306,  443), S( 386,  786), S( 744, 1614), S(0, 0)};

constexpr ScorePair PSQT[6][64] = {
    {
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  49,   80), S(  34,   88), S(  25,   90), S(  53,   70), S(  73,   52), S(  53,   70), S(  42,   91), S(  64,   76),
        S(   5,    1), S( -12,   30), S(  10,   -9), S(   9,  -38), S(   1,  -38), S(   3,  -24), S( -19,   14), S(  -6,    2),
        S(  13,    3), S(  -4,   15), S(  11,  -10), S(  11,  -23), S(  -1,  -23), S(   0,  -17), S(  -8,    8), S(  -9,    6),
        S(   4,   -5), S(  -5,   15), S(  12,  -21), S(  16,  -17), S(   9,  -16), S(   0,  -15), S( -13,    9), S( -12,   -4),
        S(  -1,   -6), S(   8,    9), S(   4,    0), S(   2,   -2), S(  -7,   -2), S(  -8,   -9), S( -21,    8), S( -22,   -5),
        S(   9,   -8), S(  23,   10), S(  30,  119), S(   9,   -1), S(  -1,  -11), S(  -5,   -8), S( -14,   12), S( -14,   -2),
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
    },
    {
        S( -68,  -96), S( -76,  -23), S( -28,  -18), S(   0,  -10), S( -31,    1), S( -57,    3), S( -98,    2), S( -83,  -59),
        S( -15,  -14), S(  14,    1), S(  25,   -2), S(   0,    9), S(   5,   11), S(   5,   10), S(   0,   12), S( -10,   -1),
        S(   4,   -6), S(  -8,    7), S(  32,   -4), S(  20,   16), S(   8,   23), S(  16,   11), S(   9,    1), S(  -5,   -2),
        S(  25,    5), S(  22,   16), S(  34,   18), S(  20,   25), S(  21,   26), S(  27,   14), S(  20,    2), S(  12,    8),
        S(   9,   17), S(  14,   17), S(  18,   20), S(  18,   28), S(  20,   20), S(  19,   17), S(  22,   -1), S(  10,    2),
        S(  15,    1), S(  16,    6), S(  17,    4), S(  15,   16), S(   6,   16), S(   3,    0), S(   7,   -7), S(  -6,   -6),
        S(  10,    1), S(  11,   -3), S(   9,   -4), S(  13,    0), S(   8,    0), S(  -3,   -3), S(  -2,   -7), S( -13,   -7),
        S(  -3,  -14), S(  -5,  -10), S(   3,   -9), S(   8,    2), S(   1,   -1), S( -16,   -8), S(  -8,  -16), S( -40,   -5),
    },
    {
        S( -48,  -12), S( -26,    6), S(  -9,   -3), S( -69,    9), S( -63,   16), S( -57,    5), S( -30,    6), S( -33,    5),
        S( -22,   -9), S( -42,    4), S( -12,    3), S(  -7,    2), S( -21,   11), S(   3,   -1), S( -11,   -6), S(  -3,   -8),
        S(  11,   12), S(  -1,    8), S(  23,    6), S(   7,   12), S(  19,    5), S(   2,    0), S(  11,    4), S(   7,    0),
        S( -10,    5), S(   3,   13), S(   3,   17), S(  20,   19), S(  25,   23), S(  21,    7), S(   7,   12), S(  -3,    0),
        S(  17,   -6), S(  -3,   13), S(   8,   12), S(  15,   15), S(  23,   12), S(   6,   14), S(   5,    5), S(   5,   -2),
        S(  20,   -9), S(  22,   -1), S(   3,   -1), S(  10,   12), S(   1,    8), S(   4,   -3), S(  19,    1), S(   7,   -9),
        S(  26,  -19), S(  24,  -23), S(  27,   -9), S(   6,   -4), S(  -2,   -1), S(  11,  -16), S(   5,  -26), S(  16,  -12),
        S(  28,  -37), S(  20,  -15), S(  -5,   -2), S(  18,   -5), S(   0,   -3), S(  -1,    1), S(  10,   -3), S(   6,  -18),
    },
    {
        S(  16,    8), S( -15,   30), S(  -9,   23), S( -19,   21), S( -10,   20), S( -12,   27), S(   8,   15), S(  11,   15),
        S(  28,    0), S(  31,    6), S(  14,   15), S(  -3,   19), S(  25,   12), S(  12,   22), S(   9,   18), S(  13,   10),
        S(  -5,    4), S(  22,    7), S(   7,    7), S(   8,    9), S(   6,    8), S(   2,   17), S(  16,   11), S(  -4,   14),
        S( -10,   11), S( -16,   21), S(  -6,   17), S(  -7,   11), S(  -1,   10), S(   4,   13), S(   5,   11), S(  -8,   14),
        S( -19,    7), S(   0,   11), S( -19,   16), S(  -6,   10), S(  -6,    5), S(  -9,    7), S( -10,    7), S(  -9,    5),
        S(   4,  -19), S(  22,  -22), S(  -1,   -9), S(  -1,  -11), S(  -5,  -11), S(  -8,  -12), S(  -5,  -14), S( -12,  -10),
        S(  -6,  -25), S(  26,  -34), S(   7,  -20), S(   3,  -17), S(   4,  -20), S(   2,  -17), S(  -7,  -16), S( -11,  -20),
        S(  -5,  -37), S(  -2,  -17), S(   3,  -17), S(   9,  -22), S(   7,  -23), S(  -1,  -18), S(   0,  -22), S(  -2,  -19),
    },
    {
        S(  11,   -7), S(  57,  -37), S( -11,   35), S(  -8,   19), S(  18,    1), S( -11,   19), S( -23,    7), S( -16,   12),
        S(  36,    7), S(  13,   10), S(  -4,   22), S( -30,   51), S(  -4,   30), S(  18,   -1), S(  28,  -23), S(  20,   -9),
        S(   4,   12), S(  -1,    1), S(  -6,   16), S( -12,   14), S(  11,   10), S(  23,    1), S(  21,  -20), S(  30,  -16),
        S(  -6,   18), S( -16,   34), S(  -8,   15), S( -15,   25), S(  -2,   23), S(  12,    3), S(  10,    6), S(   6,    1),
        S(  -6,   17), S(  -3,   15), S( -14,   22), S(  -9,   29), S( -12,   36), S(  -3,   20), S(   4,   14), S(   1,    5),
        S(   1,   -9), S(   4,   -3), S(  -7,   10), S( -14,   17), S( -10,   15), S(  -6,   16), S(  10,   -9), S(   9,  -16),
        S(   1,  -40), S(  10,  -58), S(   1,  -27), S(  -1,  -11), S(  -2,   -2), S(   1,  -15), S(   3,  -20), S(   9,  -36),
        S(   8,  -57), S( -17,  -39), S( -19,  -21), S( -11,  -17), S(  -8,  -18), S( -12,  -12), S( -15,  -16), S( -13,  -15),
    },
    {
        S(  54,  -84), S(  35,  -15), S( -44,  -27), S( -66,   -6), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S( -17,   17), S(  23,   51), S(  -9,   24), S( -19,   27), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  32,   15), S(  47,   52), S(  23,   31), S( -35,   53), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S( -17,   20), S( -15,   55), S( -41,   33), S( -87,   48), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S( -56,   15), S( -50,   45), S( -49,   13), S( -86,   30), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S( -13,   -2), S(  -8,   22), S( -32,   -7), S( -52,    8), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  39,  -23), S(  33,    1), S(   7,  -29), S( -22,  -17), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  38,  -55), S(  38,  -20), S(  13,  -50), S(   2,  -48), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
    },
};

constexpr ScorePair MOBILITY[4][28] = {
    {S(  -2,  -29), S( -39,  -47), S( -17,  -16), S(  -9,    0), S(   2,    8), S(   6,   18), S(  13,   22), S(  20,   26), S(  30,   19), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S( -10,  -45), S( -30,  -60), S( -18,  -31), S( -11,  -13), S(  -3,   -3), S(   2,    7), S(   4,   16), S(   7,   19), S(   7,   22), S(   9,   23), S(  10,   22), S(  14,   17), S(  13,   23), S(  17,    3), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S( -12,  -45), S( -29,  -68), S( -14,  -53), S(  -2,  -32), S(   0,  -17), S(  -1,   -6), S(  -1,    1), S(   2,    7), S(   3,   11), S(   6,   17), S(   4,   27), S(   4,   34), S(   6,   38), S(   9,   39), S(  16,   36), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S(  -1,   13), S( -31,  -71), S( -60, -112), S( -19, -196), S( -23,  -63), S( -15,  -11), S(  -6,  -23), S(  -3,   -5), S(  -3,   12), S(   0,   21), S(   3,   25), S(   6,   27), S(   6,   37), S(  10,   36), S(  10,   43), S(  12,   44), S(  13,   45), S(  15,   47), S(  14,   46), S(  21,   38), S(  24,   30), S(  30,   14), S(  26,   21), S(  37,   -8), S(  33,   -6), S(   8,   -4), S(  -7,  -16), S(-119,   16)}
};

constexpr ScorePair THREAT_BY_PAWN[6] = {S(   4,  -17), S(  65,   28), S(  60,   60), S(  81,   24), S(  72,   -1), S(   0,    0)};
constexpr ScorePair THREAT_BY_KNIGHT[2][6] = {
    {S(   3,   28), S(  14,   36), S(  35,   43), S(  73,   12), S(  53,  -31), S(   0,    0)},
    {S(  -7,    9), S(   6,   37), S(  29,   29), S(  64,   34), S(  60,   -1), S(   0,    0)}
};
constexpr ScorePair THREAT_BY_BISHOP[2][6] = {
    {S(  -3,   34), S(  38,   32), S( -15,   35), S(  67,   15), S(  68,   44), S(   0,    0)},
    {S(  -4,    6), S(  17,   22), S( -26,  -12), S(  44,   44), S(  47,  111), S(   0,    0)}
};
constexpr ScorePair THREAT_BY_ROOK[2][6] = {
    {S(  -2,   40), S(  15,   57), S(  25,   53), S( -12,  -35), S(  60,   13), S(   0,    0)},
    {S(  -8,    8), S(   1,   15), S(  14,    3), S( -12,  -69), S(  41,   64), S(   0,    0)}
};
constexpr ScorePair THREAT_BY_QUEEN[2][6] = {
    {S(   6,    6), S(  23,   19), S(  10,   42), S(  14,    0), S(  10,  -57), S( 100,   52)},
    {S(  -3,   13), S(   1,    8), S(  -5,   15), S(  -3,    2), S( -15,  -73), S( 118,   55)}
};
constexpr ScorePair THREAT_BY_KING[6] = {S( -13,   42), S(   9,   48), S(  28,   41), S(  82,    7), S(   0,    0), S(   0,    0)};
constexpr ScorePair KNIGHT_HIT_QUEEN = S(  10,    3);
constexpr ScorePair BISHOP_HIT_QUEEN = S(  16,    9);
constexpr ScorePair ROOK_HIT_QUEEN = S(  18,   -5);
constexpr ScorePair PUSH_THREAT = S(  14,   17);
constexpr ScorePair RESTRICTED_SQUARES = S(   2,    3);

constexpr ScorePair ISOLATED_PAWN[8] = {S(  -8,    6), S(  -4,  -16), S( -12,   -8), S( -10,  -16), S( -12,  -14), S(  -8,   -7), S(  -4,  -14), S( -12,    7)};
constexpr ScorePair DOUBLED_PAWN[8] = {S(  -1,  -60), S(  13,  -37), S(   0,  -27), S(  -2,  -17), S(  -6,  -12), S(  -8,  -20), S(   5,  -38), S(   6,  -70)};
constexpr ScorePair BACKWARDS_PAWN[8] = {S(   0,    0), S(  -8,  -12), S(  -2,  -14), S(  -7,  -12), S(   2,  -19), S(  31,  -10), S(   0,    0), S(   0,    0)};
constexpr ScorePair PAWN_PHALANX[8] = {S(   0,    0), S(   5,   -4), S(  11,   -2), S(  20,    8), S(  40,   32), S( 101,  159), S( -48,  121), S(   0,    0)};
constexpr ScorePair DEFENDED_PAWN[8] = {S(   0,    0), S(   0,    0), S(  18,    6), S(  11,    8), S(  17,   21), S(  33,   65), S( 147,   74), S(   0,    0)};
constexpr ScorePair CANDIDATE_PASSER[2][8] = {
    {S(   0,    0), S( -32,  -15), S( -17,   -8), S(   0,   26), S(  24,   53), S(  67,  116), S(   0,    0), S(   0,    0)},
    {S(   0,    0), S( -17,  -10), S(  -8,   13), S(  -5,   28), S(  17,   46), S(  29,  178), S(   0,    0), S(   0,    0)}
};

constexpr ScorePair PASSED_PAWN[2][2][8] = {
    {
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -38,  -38), S( -17,   21), S(   5,  156), S(  45,  211), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -25,  -50), S(   3,  -21), S(  36,   37), S(  73,   21), S(   0,    0)}
    },
    {
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -27,  -53), S(  -3,  -17), S(  40,   35), S(  71,    0), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -32,  -53), S(  -5,  -25), S(  17,   17), S(  -5,  -13), S(   0,    0)}
    }
};
constexpr ScorePair OUR_PASSER_PROXIMITY[8] = {S(  73,   98), S(  64,   92), S(  43,   72), S(   4,   58), S(   2,   38), S(   5,   26), S(  12,   17), S(  -8,   24)};
constexpr ScorePair THEIR_PASSER_PROXIMITY[8] = {S( -39,  -12), S(  -3,    0), S(  24,   -2), S(  17,   29), S(  12,   62), S(  16,   76), S(  22,   78), S(  27,   66)};
constexpr ScorePair PASSER_DEFENDED_PUSH[8] = {S(   0,    0), S(   0,    0), S(   0,    0), S(  13,    1), S(  12,   11), S(  25,   33), S(   7,  125), S(   0,    0)};

constexpr ScorePair PAWN_STORM[2][4][8] = {
    {
        {S(  40,   36), S(-113,  -46), S( -49,  -33), S(  59,    1), S(  27,   21), S(   0,   30), S( -10,   30), S(   0,    0)},
        {S(  33,    7), S(  40, -119), S(  87,  -82), S(  57,  -20), S(  16,   -2), S( -20,    8), S(   5,    7), S(   0,    0)},
        {S(   8,   20), S(  93,  -90), S(  97,  -50), S(  60,   -2), S(  15,   15), S( -13,   22), S( -15,   26), S(   0,    0)},
        {S(  17,    5), S( 144,  -70), S( 114,  -23), S(  69,    5), S(  10,   15), S( -14,    9), S( -20,   19), S(   0,    0)}
    },
    {
        {S(   0,    0), S(   0,    0), S(  61,   61), S( -22,   33), S( -24,   40), S( -15,   57), S(  -5,   42), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(  97,   18), S(  -4,   19), S( -15,   27), S( -28,   42), S( -42,   33), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S( 109,   16), S(  10,   24), S( -14,   39), S(  15,   43), S(  51,   28), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(  89,   16), S(  16,   24), S( -25,   25), S( -23,   22), S(  -7,   18), S(   0,    0)}
    }
};
constexpr ScorePair PAWN_SHIELD[4][8] = {
    {S(  46,   35), S( -19,   50), S( -12,   41), S(  39,   30), S(  43,   16), S( -26,    0), S( -62,  -10), S(   0,    0)},
    {S(  49,    9), S( -24,   19), S(   9,    7), S(  53,   -2), S(  43,  -16), S(  19,  -18), S( -45,  -20), S(   0,    0)},
    {S(  21,   -3), S(  15,  117), S(  12,   -2), S(  34,  -22), S(  23,  -20), S(  -3,  -24), S( -54,  -38), S(   0,    0)},
    {S(  14,   16), S(   2,   12), S(   1,   10), S(  27,    4), S(  32,    0), S(  11,    5), S( -69,   13), S(   0,    0)}
};
constexpr ScorePair SAFE_KNIGHT_CHECK = S( 109,    7);
constexpr ScorePair SAFE_BISHOP_CHECK = S(  71,   19);
constexpr ScorePair SAFE_ROOK_CHECK = S( 114,   15);
constexpr ScorePair SAFE_QUEEN_CHECK = S(  55,   26);
constexpr ScorePair UNSAFE_KNIGHT_CHECK = S(  16,    2);
constexpr ScorePair UNSAFE_BISHOP_CHECK = S(  38,   10);
constexpr ScorePair UNSAFE_ROOK_CHECK = S(  39,    3);
constexpr ScorePair UNSAFE_QUEEN_CHECK = S(  15,    4);
constexpr ScorePair QUEENLESS_ATTACK = S(-147,  146);
constexpr ScorePair KING_ATTACKER_WEIGHT[4] = {S(  56,   -4), S(  21,    0), S(  29,  -12), S(   4,   -9)};
constexpr ScorePair KING_ATTACKS = S(   7,   -1);
constexpr ScorePair WEAK_KING_RING = S(   8,   -1);
constexpr ScorePair KING_FLANK_ATTACKS[2] = {S(  12,   -3), S(   5,   -1)};
constexpr ScorePair KING_FLANK_DEFENSES[2] = {S(  -7,    0), S(  -8,    3)};
constexpr ScorePair SAFETY_OFFSET = S(  79,  204);

constexpr ScorePair MINOR_BEHIND_PAWN = S(   5,   12);
constexpr ScorePair KNIGHT_OUTPOST = S(  23,   16);
constexpr ScorePair BISHOP_PAWNS[7] = {S(   4,   19), S(   5,   18), S(   4,   10), S(   1,    4), S(  -2,   -5), S(  -1,  -18), S(  -5,  -31)};
constexpr ScorePair BISHOP_PAIR = S(  19,   60);
constexpr ScorePair LONG_DIAG_BISHOP = S(  16,    8);
constexpr ScorePair ROOK_OPEN[2] = {S(  24,    3), S(  12,    5)};

constexpr ScorePair TEMPO = S(  32,   34);

constexpr ScorePair COMPLEXITY_PAWNS = S(   0,   10);
constexpr ScorePair COMPLEXITY_PAWNS_BOTH_SIDES = S(   0,   63);
constexpr ScorePair COMPLEXITY_PAWN_ENDGAME = S(   0,   81);
constexpr ScorePair COMPLEXITY_OFFSET = S(   0, -134);

#undef S
// clang-format on

}
