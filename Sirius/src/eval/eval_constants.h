#pragma once

#include "../defs.h"

namespace eval
{

#define S(mg, eg) PackedScore(mg, eg)

constexpr PackedScore MATERIAL[6] = {S(  62,  126), S( 284,  430), S( 306,  443), S( 385,  784), S( 746, 1618), S(0, 0)};

constexpr PackedScore PSQT[6][64] = {
    {
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  59,   83), S(  38,   95), S(  20,  106), S(  52,   83), S(  71,   67), S(  54,   81), S(  47,   96), S(  69,   81),
        S(  14,    9), S(  -9,   40), S(   4,    2), S(  11,  -20), S(   5,  -19), S(   7,  -11), S( -17,   26), S(   0,   13),
        S(  14,    3), S(  -4,   12), S(  14,  -19), S(  10,  -22), S(  -2,  -21), S(   0,  -16), S(  -8,    9), S(  -9,   10),
        S(   6,   -4), S(  -4,   14), S(  15,  -26), S(  16,  -16), S(   9,  -14), S(  -1,  -14), S( -14,   10), S( -13,    1),
        S(  -1,   -5), S(   8,    8), S(   5,   -3), S(   1,   -1), S(  -8,   -1), S(  -9,   -8), S( -21,    9), S( -24,   -1),
        S(   9,   -6), S(  25,   10), S(  32,  116), S(   9,    2), S(  -1,   -8), S(  -5,   -6), S( -14,   12), S( -15,    3),
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
    },
    {
        S( -68,  -96), S( -77,  -25), S( -27,  -19), S(  -6,   -5), S( -31,    1), S( -57,    4), S( -96,    1), S( -84,  -57),
        S( -19,  -12), S(  11,    3), S(  23,   -1), S(  -3,    9), S(   2,   13), S(   5,   11), S(   1,   12), S( -10,   -2),
        S(   3,   -7), S(  -9,    6), S(  29,   -2), S(  20,   16), S(   8,   23), S(  15,   13), S(   7,    3), S(  -4,   -1),
        S(  28,    3), S(  23,   16), S(  37,   18), S(  21,   25), S(  23,   27), S(  29,   14), S(  22,    3), S(  13,    7),
        S(  11,   16), S(  15,   16), S(  21,   19), S(  20,   28), S(  22,   21), S(  20,   17), S(  23,    1), S(  11,    2),
        S(  16,   -1), S(  17,    4), S(  19,    3), S(  17,   15), S(   7,   16), S(   6,   -1), S(   8,   -7), S(  -5,   -8),
        S(  10,   -1), S(  12,   -5), S(  10,   -4), S(  14,    0), S(   9,   -1), S(  -1,   -4), S(  -1,   -8), S( -12,  -10),
        S(  -2,  -16), S(  -4,  -12), S(   5,  -10), S(   9,    1), S(   2,   -2), S( -14,   -9), S(  -7,  -16), S( -41,   -6),
    },
    {
        S( -46,  -15), S( -29,    7), S(  -9,   -2), S( -72,   11), S( -63,   15), S( -57,    6), S( -30,    7), S( -33,    7),
        S( -23,   -9), S( -44,    4), S( -13,    3), S( -10,    3), S( -24,   12), S(   1,   -1), S( -13,   -6), S(  -3,   -7),
        S(  10,   13), S(  -1,    7), S(  21,    5), S(   4,   11), S(  16,    5), S(   1,    0), S(  10,    5), S(   6,    1),
        S( -11,    5), S(   2,   13), S(   2,   16), S(  17,   18), S(  22,   23), S(  19,    8), S(   6,   11), S(  -4,    1),
        S(  16,   -6), S(  -4,   13), S(   7,   12), S(  15,   14), S(  21,   12), S(   6,   13), S(   4,    4), S(   5,   -2),
        S(  19,   -9), S(  22,   -2), S(   4,   -2), S(  10,   12), S(   1,    8), S(   5,   -3), S(  19,    0), S(   6,   -9),
        S(  25,  -18), S(  24,  -24), S(  27,   -8), S(   7,   -4), S(  -1,    0), S(  12,  -17), S(   6,  -26), S(  16,  -12),
        S(  27,  -36), S(  21,  -16), S(  -5,   -2), S(  19,   -5), S(   1,   -3), S(   0,    1), S(  11,   -4), S(   7,  -20),
    },
    {
        S(  21,    8), S( -18,   33), S(  -5,   23), S( -21,   23), S( -11,   21), S( -10,   27), S(  11,   15), S(  11,   16),
        S(  25,    2), S(  31,    7), S(  12,   16), S(  -5,   19), S(  23,   13), S(  11,   23), S(   7,   19), S(  11,   12),
        S(  -5,    4), S(  22,    7), S(   3,    9), S(   6,   10), S(   5,    9), S(   2,   16), S(  16,   11), S(  -4,   13),
        S( -10,   10), S( -16,   20), S(  -6,   15), S(  -8,   11), S(  -2,    9), S(   5,   11), S(   6,    9), S(  -6,   12),
        S( -19,    4), S(  -1,    9), S( -19,   13), S(  -8,    9), S(  -7,    3), S( -10,    6), S(  -9,    5), S(  -9,    3),
        S(   4,  -20), S(  22,  -24), S(  -1,  -12), S(  -2,  -13), S(  -5,  -12), S(  -8,  -13), S(  -5,  -14), S( -12,  -11),
        S(  -6,  -27), S(  26,  -37), S(   6,  -22), S(   3,  -20), S(   3,  -21), S(   2,  -19), S(  -7,  -18), S( -11,  -23),
        S(  -6,  -39), S(  -2,  -19), S(   2,  -19), S(   9,  -24), S(   6,  -25), S(  -1,  -20), S(  -1,  -23), S(  -2,  -22),
    },
    {
        S(  11,   -6), S(  52,  -30), S( -15,   41), S( -15,   26), S(  20,    1), S(  -7,   15), S( -27,   11), S( -15,    9),
        S(  36,    6), S(  17,    7), S(  -7,   26), S( -32,   54), S(  -6,   35), S(  15,    2), S(  26,  -21), S(  19,   -7),
        S(   5,   10), S(  -1,    4), S(  -8,   20), S( -15,   15), S(   8,   12), S(  20,    4), S(  21,  -17), S(  30,  -17),
        S(  -6,   17), S( -16,   34), S( -10,   15), S( -16,   25), S(  -4,   23), S(  12,    2), S(  10,    4), S(   8,   -3),
        S(  -5,   14), S(  -3,   13), S( -15,   20), S(  -8,   26), S( -12,   35), S(  -3,   18), S(   4,   13), S(   2,    4),
        S(   2,  -12), S(   5,   -5), S(  -7,    9), S( -14,   16), S(  -9,   14), S(  -4,   12), S(  11,  -11), S(  10,  -20),
        S(   1,  -40), S(  10,  -61), S(   1,  -29), S(   0,  -13), S(  -2,   -4), S(   2,  -17), S(   3,  -23), S(   9,  -38),
        S(   9,  -61), S( -17,  -40), S( -20,  -21), S( -11,  -19), S(  -8,  -19), S( -12,  -14), S( -14,  -18), S( -13,  -17),
    },
    {
        S(  62,  -77), S(  34,   -6), S( -42,  -16), S( -68,   12), S(   8,   -6), S(   8,   -6), S(   8,   -6), S(   8,   -6),
        S(  -5,   16), S(  32,   53), S(  -7,   32), S(  -3,   37), S(   8,   -6), S(   8,   -6), S(   8,   -6), S(   8,   -6),
        S(  34,   11), S(  56,   47), S(  34,   29), S( -23,   56), S(   8,   -6), S(   8,   -6), S(   8,   -6), S(   8,   -6),
        S( -16,   15), S( -11,   49), S( -39,   31), S( -82,   52), S(   8,   -6), S(   8,   -6), S(   8,   -6), S(   8,   -6),
        S( -58,   10), S( -50,   39), S( -48,   10), S( -83,   33), S(   8,   -6), S(   8,   -6), S(   8,   -6), S(   8,   -6),
        S( -16,   -7), S( -11,   17), S( -31,  -10), S( -53,   11), S(   8,   -6), S(   8,   -6), S(   8,   -6), S(   8,   -6),
        S(  36,  -27), S(  29,   -4), S(   5,  -31), S( -25,  -13), S(   8,   -6), S(   8,   -6), S(   8,   -6), S(   8,   -6),
        S(  35,  -59), S(  35,  -24), S(  10,  -51), S(  -1,  -43), S(   8,   -6), S(   8,   -6), S(   8,   -6), S(   8,   -6),
    },
};

constexpr PackedScore MOBILITY[4][28] = {
    {S(  -4,  -30), S( -37,  -47), S( -16,  -16), S(  -8,    0), S(   2,    8), S(   6,   17), S(  13,   21), S(  20,   25), S(  30,   19), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S( -10,  -47), S( -30,  -61), S( -18,  -33), S( -12,  -14), S(  -3,   -5), S(   1,    6), S(   3,   14), S(   6,   18), S(   6,   21), S(   8,   22), S(  10,   22), S(  14,   17), S(  13,   24), S(  17,    5), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S( -13,  -43), S( -28,  -69), S( -14,  -52), S(  -2,  -31), S(   0,  -17), S(  -1,   -6), S(  -1,    1), S(   2,    8), S(   3,   11), S(   6,   17), S(   4,   27), S(   5,   34), S(   7,   38), S(  11,   39), S(  18,   36), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S(  -4,    8), S( -36,  -77), S( -66, -116), S( -20, -198), S( -22,  -67), S( -15,  -14), S(  -6,  -25), S(  -4,   -6), S(  -3,   11), S(   0,   20), S(   2,   24), S(   6,   26), S(   6,   37), S(  10,   36), S(  10,   42), S(  12,   43), S(  13,   46), S(  15,   47), S(  15,   46), S(  21,   40), S(  26,   30), S(  32,   14), S(  28,   21), S(  37,   -4), S(  37,   -7), S(   7,    0), S(  -7,  -13), S(-113,   11)}
};

constexpr PackedScore THREAT_BY_PAWN[6] = {S(   5,  -18), S(  66,   28), S(  59,   59), S(  80,   25), S(  72,   -3), S(   0,    0)};
constexpr PackedScore THREAT_BY_KNIGHT[2][6] = {
    {S(   5,   28), S(  15,   40), S(  38,   44), S(  73,   15), S(  60,  -31), S(   0,    0)},
    {S(  -8,    9), S(   6,   36), S(  28,   29), S(  64,   33), S(  60,   -1), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_BISHOP[2][6] = {
    {S(  -2,   34), S(  39,   31), S( -13,   34), S(  67,   14), S(  70,   43), S(   0,    0)},
    {S(  -4,    5), S(  17,   22), S( -25,  -12), S(  44,   44), S(  46,  109), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_ROOK[2][6] = {
    {S(  -1,   41), S(  15,   59), S(  25,   55), S(  -9,  -26), S(  59,   19), S(   0,    0)},
    {S(  -7,    7), S(   1,   15), S(  13,    3), S( -11,  -66), S(  40,   63), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_QUEEN[2][6] = {
    {S(   7,    7), S(  24,   22), S(   9,   50), S(  18,   16), S(  10,  -54), S(  93,   51)},
    {S(  -3,   11), S(   1,    8), S(  -5,   14), S(  -4,    4), S( -17,  -73), S( 111,   53)}
};
constexpr PackedScore THREAT_BY_KING[6] = {S( -21,   44), S(   8,   48), S(  27,   41), S(  82,    9), S(   0,    0), S(   0,    0)};
constexpr PackedScore KNIGHT_HIT_QUEEN = S(  11,    2);
constexpr PackedScore BISHOP_HIT_QUEEN = S(  17,   11);
constexpr PackedScore ROOK_HIT_QUEEN = S(  20,   -2);
constexpr PackedScore PUSH_THREAT = S(  14,   17);

constexpr PackedScore ISOLATED_PAWN[8] = {S(  -8,    3), S(  -3,  -15), S( -12,   -9), S( -10,  -17), S( -12,  -16), S(  -7,   -9), S(  -4,  -14), S( -11,    3)};
constexpr PackedScore DOUBLED_PAWN[8] = {S(  -1,  -58), S(  13,  -33), S(   0,  -24), S(  -2,  -16), S(  -5,  -10), S(  -8,  -15), S(   5,  -36), S(   6,  -67)};
constexpr PackedScore BACKWARDS_PAWN[8] = {S(   0,    0), S(  -7,  -14), S(  -2,  -14), S(  -8,  -12), S(   1,  -17), S(  26,    2), S(   0,    0), S(   0,    0)};
constexpr PackedScore PAWN_PHALANX[8] = {S(   0,    0), S(   5,   -4), S(  11,   -2), S(  20,    8), S(  40,   42), S( 115,  212), S(  16,  325), S(   0,    0)};
constexpr PackedScore DEFENDED_PAWN[8] = {S(   0,    0), S(   0,    0), S(  18,    7), S(  11,    8), S(  16,   21), S(  31,   60), S( 138,   75), S(   0,    0)};
constexpr PackedScore CANDIDATE_PASSER[2][8] = {
    {S(   0,    0), S( -31,  -19), S( -18,   -7), S(  -1,   26), S(  26,   53), S(  59,   87), S(   0,    0), S(   0,    0)},
    {S(   0,    0), S( -19,   -6), S(  -9,   14), S(  -5,   28), S(  19,   41), S(  28,  155), S(   0,    0), S(   0,    0)}
};

constexpr PackedScore PASSED_PAWN[2][2][8] = {
    {
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -36,  -39), S( -16,   25), S(   5,  151), S(  67,  219), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -23,  -49), S(   3,  -15), S(  33,   25), S(  65,   28), S(   0,    0)}
    },
    {
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -29,  -53), S(  -5,  -14), S(  34,   20), S(  70,   -2), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -31,  -51), S(  -6,  -18), S(  12,    1), S(  -9,  -10), S(   0,    0)}
    }
};
constexpr PackedScore OUR_PASSER_PROXIMITY[8] = {S(  69,   96), S(  60,   99), S(  42,   70), S(   5,   58), S(   5,   37), S(   7,   23), S(  12,   15), S(  -7,   21)};
constexpr PackedScore THEIR_PASSER_PROXIMITY[8] = {S( -57,  -18), S(  -1,   -8), S(  27,   -3), S(  19,   31), S(  14,   65), S(  18,   80), S(  24,   82), S(  28,   72)};

constexpr PackedScore PAWN_STORM[2][4][8] = {
    {
        {S(  43,   33), S(-127,  -47), S( -11,   17), S(  31,   15), S(  17,   25), S(  -3,   29), S( -10,   29), S(   0,    0)},
        {S(  33,    5), S(  44, -123), S(  91,  -47), S(  37,   -3), S(  10,    3), S( -26,    9), S(   2,    5), S(   0,    0)},
        {S(  12,   18), S( 102,  -99), S( 106,  -18), S(  54,    9), S(  12,   20), S( -11,   22), S( -13,   24), S(   0,    0)},
        {S(  18,    4), S( 145,  -75), S( 117,  -10), S(  43,   15), S(  -1,   20), S( -18,   11), S( -21,   19), S(   0,    0)}
    },
    {
        {S(   0,    0), S(   0,    0), S(  33,   41), S( -25,   28), S(  -5,   30), S(  21,   30), S(  -8,   28), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(  92,   -1), S(   4,    7), S( -11,   18), S(  -3,   14), S(   2,    5), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(  86,    9), S(   0,   14), S(   0,   26), S(  25,   24), S(   2,   21), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(  44,    2), S(  20,   18), S( -28,   17), S(  -6,   12), S(  -3,   13), S(   0,    0)}
    }
};
constexpr PackedScore PAWN_SHIELD[4][8] = {
    {S(  45,   33), S( -16,   49), S( -13,   41), S(  29,   34), S(  35,   28), S( -26,   -5), S( -73,  -22), S(   0,    0)},
    {S(  50,    1), S( -21,   16), S(   7,    6), S(  49,    1), S(  37,   -5), S(  -1,  -23), S( -39,  -43), S(   0,    0)},
    {S(  19,   -3), S(  19,  115), S(   7,   -3), S(  29,  -21), S(  26,  -17), S(  -1,  -30), S( -63,  -44), S(   0,    0)},
    {S(  18,   15), S(   8,   11), S(  -3,   13), S(  21,    9), S(  30,    8), S(  11,    3), S( -87,    6), S(   0,    0)}
};
constexpr PackedScore SAFE_KNIGHT_CHECK = S( 111,    6);
constexpr PackedScore SAFE_BISHOP_CHECK = S(  62,   18);
constexpr PackedScore SAFE_ROOK_CHECK = S( 104,   17);
constexpr PackedScore SAFE_QUEEN_CHECK = S(  53,   26);
constexpr PackedScore UNSAFE_KNIGHT_CHECK = S(  17,    2);
constexpr PackedScore UNSAFE_BISHOP_CHECK = S(  39,   11);
constexpr PackedScore UNSAFE_ROOK_CHECK = S(  39,    3);
constexpr PackedScore UNSAFE_QUEEN_CHECK = S(  16,    4);
constexpr PackedScore QUEENLESS_ATTACK = S(-141,  159);
constexpr PackedScore KING_ATTACKER_WEIGHT[4] = {S(  56,   -5), S(  22,    0), S(  28,  -13), S(   3,  -10)};
constexpr PackedScore KING_ATTACKS = S(   7,    0);
constexpr PackedScore WEAK_KING_RING = S(   7,   -1);
constexpr PackedScore KING_FLANK_ATTACKS[2] = {S(  12,   -4), S(   7,    1)};
constexpr PackedScore KING_FLANK_DEFENSES[2] = {S(  -6,    0), S( -10,    2)};
constexpr PackedScore SAFETY_OFFSET = S(  72,  196);

constexpr PackedScore PAWNLESS_FLANK = S(  -3,  -33);

constexpr PackedScore MINOR_BEHIND_PAWN = S(   5,   12);
constexpr PackedScore KNIGHT_OUTPOST = S(  22,   16);
constexpr PackedScore BISHOP_PAWNS[7] = {S(   3,   21), S(   5,   18), S(   3,   10), S(   1,    3), S(  -2,   -6), S(  -2,  -18), S(  -6,  -30)};
constexpr PackedScore BISHOP_PAIR = S(  19,   59);
constexpr PackedScore LONG_DIAG_BISHOP = S(  15,    8);
constexpr PackedScore ROOK_OPEN[2] = {S(  24,    4), S(  13,    5)};

constexpr PackedScore TEMPO = S(  32,   33);

constexpr PackedScore COMPLEXITY_PAWNS = S(   0,   10);
constexpr PackedScore COMPLEXITY_PASSERS = S(   0,    0);
constexpr PackedScore COMPLEXITY_PAWNS_BOTH_SIDES = S(   0,   66);
constexpr PackedScore COMPLEXITY_PAWN_ENDGAME = S(   0,   79);
constexpr PackedScore COMPLEXITY_OFFSET = S(   0, -131);

#undef S


}