#pragma once

#include "../defs.h"

namespace eval
{

#define S(mg, eg) PackedScore(mg, eg)

constexpr PackedScore MATERIAL[6] = {S(  59,  148), S( 291,  429), S( 316,  436), S( 394,  784), S( 791, 1467), S(0, 0)};

constexpr PackedScore PSQT[6][64] = {
	{
		S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
		S( 112,  226), S(  70,  248), S(  76,  211), S(  85,  175), S(  89,  176), S(  69,  222), S(  83,  243), S( 110,  215),
		S(  20,  127), S(  20,  156), S(  36,  100), S(  53,   72), S(  45,   84), S(  26,  113), S(  -5,  143), S(  10,  114),
		S(  18,   31), S(   9,   26), S(  14,    1), S(  18,   -8), S(   8,   -4), S(   1,   10), S(  -4,   31), S(  -9,   36),
		S(   5,    0), S(   5,    7), S(   6,  -28), S(  11,  -18), S(   5,  -16), S(  -6,  -11), S( -14,   14), S( -16,    7),
		S(   0,  -10), S(   9,   -9), S(   3,  -45), S(  -1,   -5), S(  -7,   -5), S( -15,  -13), S( -23,    7), S( -29,    3),
		S(  14,   -3), S(  33,   -4), S(  16,  -27), S(   9,   10), S(  -5,    4), S(  -7,   -5), S( -13,   19), S( -18,   10),
		S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
	},
	{
		S( -71,  -85), S( -78,  -22), S( -26,  -19), S(  16,  -16), S( -31,    2), S( -70,    6), S(-112,   17), S( -85,  -38),
		S(  -2,  -19), S(  20,   -1), S(  35,   -9), S(  15,    0), S(  16,    3), S(   5,    6), S(  -3,   18), S(  -9,    2),
		S(  18,  -10), S(  14,   -6), S(  58,  -21), S(  41,   -3), S(  23,    7), S(  13,    5), S(   2,    5), S(  -6,    2),
		S(  37,   -2), S(  37,    5), S(  50,    4), S(  36,   13), S(  32,   16), S(  30,    8), S(  19,    4), S(   6,   17),
		S(  10,   14), S(  22,    8), S(  28,   10), S(  21,   20), S(  26,   14), S(  19,   17), S(  20,    6), S(   1,   11),
		S(   2,   -1), S(  17,   -2), S(   7,   -7), S(  16,   11), S(   6,    9), S(  -2,   -3), S(  -2,   -3), S( -15,   -1),
		S(   2,    7), S(   4,   -4), S(   4,   -5), S(   4,    1), S(   4,    1), S(  -8,   -2), S( -14,    0), S( -21,    2),
		S( -15,   -1), S( -13,    0), S(  -4,   -9), S(  -3,    6), S(  -9,    2), S( -24,   -1), S( -17,   -2), S( -52,   15),
	},
	{
		S( -35,   -8), S( -39,    2), S( -12,   -1), S( -74,    8), S( -70,   16), S( -54,    4), S( -29,    8), S( -13,   12),
		S( -23,   -6), S( -38,   12), S(  -7,   -4), S(  -3,    0), S( -19,    2), S(   2,   -4), S(  -2,    0), S(  -3,  -10),
		S(  21,    6), S(  13,   -1), S(  42,    5), S(  10,    4), S(  16,   -1), S(   8,    2), S(   7,    3), S(   7,    2),
		S(  -3,    4), S(   8,    9), S(   7,   12), S(  18,   14), S(  17,   18), S(  12,    6), S(   4,   10), S(  -8,    7),
		S(  14,   -5), S(   2,    8), S(   4,    8), S(   7,   10), S(  15,    9), S(  -5,   14), S(  -3,    9), S(   0,    0),
		S(  21,  -10), S(  22,   -9), S(  12,   -2), S(   2,    9), S(  -5,    3), S(   5,    5), S(   9,    3), S(   0,   -4),
		S(  21,  -18), S(  30,  -23), S(  19,  -14), S(   3,   -3), S(  -5,    4), S(   7,  -15), S(   5,  -15), S(  13,   -6),
		S(  35,  -28), S(  18,  -16), S(  -5,    2), S(  14,   -1), S(  -1,    0), S(   1,    7), S(  11,    3), S(  11,   -1),
	},
	{
		S(  16,    4), S( -35,   39), S(  -9,   26), S( -13,   17), S( -28,   27), S( -25,   29), S( -11,   21), S(  -4,   14),
		S(  29,   -7), S(  27,    7), S(  23,    7), S(   7,    8), S(  19,   11), S(   1,   25), S(  -1,   20), S(   2,   10),
		S(  12,   -3), S(  41,    5), S(  36,   -2), S(  28,   -1), S(   6,   10), S(   2,   20), S(  14,   15), S(  -5,   15),
		S(   3,    7), S(   6,   11), S(  18,    8), S(  12,    2), S(   4,    9), S(   6,   17), S(   8,   14), S(  -6,   13),
		S(  -7,   -6), S(  13,   -1), S(  -2,    6), S(   6,    2), S(  -5,    6), S(  -7,    8), S( -11,    8), S( -14,    6),
		S(   7,  -26), S(  17,  -25), S(   0,  -14), S(  -1,  -13), S( -13,   -7), S( -17,   -7), S( -15,   -9), S( -22,   -6),
		S(  -8,  -24), S(  17,  -33), S(   2,  -19), S(   0,  -19), S(  -7,  -13), S(  -8,  -11), S( -18,   -9), S( -22,  -12),
		S( -11,  -31), S( -10,  -11), S(  -4,  -15), S(   3,  -22), S(  -5,  -17), S( -12,   -9), S( -11,  -13), S( -12,  -11),
	},
	{
		S(   2,  -23), S(  40,  -46), S(  -2,   11), S(  -2,   -3), S(  14,  -23), S( -15,    0), S( -36,   -5), S( -12,  -23),
		S(  39,   -7), S(  -6,   13), S(  -2,   22), S( -34,   47), S( -29,   37), S(  -7,    5), S(  -7,  -13), S(   6,  -20),
		S(  13,    0), S(  15,    6), S(   6,   17), S(  -5,   28), S(   3,   20), S(   8,   15), S(   7,   -7), S(  20,  -15),
		S(  12,   15), S(  10,   35), S(   9,   12), S( -13,   38), S(  -8,   31), S(   4,   11), S(   5,   13), S(   4,    1),
		S(  13,    3), S(  16,   14), S(   0,   30), S(  -2,   32), S(  -6,   33), S(  -7,   28), S(   1,   19), S(  -2,    8),
		S(  12,  -20), S(  12,   -3), S(   2,   10), S( -10,   26), S(  -9,   17), S(  -9,   21), S(   1,    0), S(   2,  -13),
		S(  12,  -60), S(  16,  -64), S(   6,  -35), S(   2,    0), S(   0,    7), S(   2,  -13), S(   0,  -16), S(   8,  -34),
		S(   1,  -48), S( -11,  -55), S( -19,  -19), S(  -9,  -13), S(  -9,   -6), S( -14,    1), S( -18,   -7), S( -16,   -9),
	},
	{
		S(   3,  -86), S( -20,   -5), S( -43,  -13), S( -22,  -24), S(   8,   -5), S(   8,   -5), S(   8,   -5), S(   8,   -5),
		S( -60,   22), S( -25,   65), S( -23,   47), S(  20,   24), S(   8,   -5), S(   8,   -5), S(   8,   -5), S(   8,   -5),
		S( -17,   24), S(  27,   60), S(  37,   49), S(   2,   52), S(   8,   -5), S(   8,   -5), S(   8,   -5), S(   8,   -5),
		S( -59,   27), S( -17,   57), S(  -9,   46), S( -33,   42), S(   8,   -5), S(   8,   -5), S(   8,   -5), S(   8,   -5),
		S( -70,   13), S( -24,   36), S( -13,   24), S( -29,   24), S(   8,   -5), S(   8,   -5), S(   8,   -5), S(   8,   -5),
		S( -35,   -6), S(   9,   12), S(  -7,    3), S( -10,    2), S(   8,   -5), S(   8,   -5), S(   8,   -5), S(   8,   -5),
		S(  23,  -32), S(  33,   -9), S(  11,  -16), S(  -6,  -18), S(   8,   -5), S(   8,   -5), S(   8,   -5), S(   8,   -5),
		S(  18,  -70), S(  23,  -32), S(   3,  -40), S(  13,  -63), S(   8,   -5), S(   8,   -5), S(   8,   -5), S(   8,   -5),
	},
};

constexpr PackedScore MOBILITY[4][28] = {
	{S( -11,  -21), S( -39,  -60), S( -15,  -29), S(  -7,   -5), S(   3,    8), S(   6,   18), S(  14,   25), S(  22,   30), S(  31,   30), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -20,  -31), S( -53,  -89), S( -30,  -39), S( -23,  -17), S( -11,   -4), S(  -4,    5), S(   1,   16), S(   6,   21), S(   9,   26), S(  14,   27), S(  15,   29), S(  28,   21), S(  30,   21), S(  47,    7), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -28,  -39), S(   5,  -52), S( -25,  -50), S( -13,  -29), S(  -7,  -20), S(  -3,   -2), S(  -1,    5), S(  -5,   11), S(   0,   12), S(   3,   17), S(   8,   22), S(  10,   29), S(  13,   32), S(  21,   31), S(  26,   33), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -33,    8), S( -50,  -84), S( -99,  -69), S( -91, -212), S( -73,  -95), S( -30,  -26), S( -21,   -5), S( -12,   -5), S(  -4,   -3), S(  -4,   21), S(  -2,   27), S(   1,   36), S(   4,   39), S(   8,   42), S(  11,   43), S(  14,   45), S(  16,   45), S(  16,   49), S(  17,   49), S(  20,   47), S(  28,   38), S(  35,   23), S(  38,   20), S(  57,   -2), S(  67,  -18), S(  45,    9), S(  46,  -17), S(  12,  -16)}
};

constexpr PackedScore THREAT_BY_PAWN[6] = {S(   8,  -26), S(  64,   31), S(  64,   62), S(  89,   18), S(  78,  -10), S(   0,    0)};
constexpr PackedScore THREAT_BY_KNIGHT[2][6] = {
	{S(   7,   30), S(  28,   27), S(  38,   42), S(  74,   10), S(  48,  -26), S(   0,    0)},
	{S(  -4,   11), S(  14,   30), S(  30,   31), S(  64,   32), S(  57,   -3), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_BISHOP[2][6] = {
	{S(   1,   39), S(  42,   36), S(  -9,   43), S(  72,   14), S(  68,   66), S(   0,    0)},
	{S(   0,    8), S(  22,   25), S( -23,   -8), S(  44,   45), S(  48,  126), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_ROOK[2][6] = {
	{S(   0,   44), S(  19,   60), S(  28,   55), S(  12,  -43), S(  75,   10), S(   0,    0)},
	{S( -10,    9), S(   2,   14), S(  14,    1), S(  10,  -85), S(  65,   44), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_QUEEN[2][6] = {
	{S(   7,    9), S(  24,   21), S(   9,   50), S(  14,    9), S(  10,  -52), S( 103,   15)},
	{S(  -1,    9), S(   0,    8), S(  -7,   19), S(  -6,    4), S( -19,  -71), S( 109,   66)}
};
constexpr PackedScore THREAT_BY_KING[6] = {S(  -8,   47), S(  -2,   51), S(  22,   40), S(  90,   14), S(   0,    0), S(   0,    0)};
constexpr PackedScore PUSH_THREAT = S(  16,   22);

constexpr PackedScore ISOLATED_PAWN[8] = {S(  -6,   11), S(  -5,   -7), S( -11,   -5), S(  -9,   -9), S( -10,  -11), S(  -8,   -1), S(  -3,   -7), S(  -9,    9)};
constexpr PackedScore PAWN_PHALANX[8] = {S(   0,    0), S(   6,   -6), S(  12,    3), S(  21,   13), S(  46,   61), S( 127,  264), S(  -5,  463), S(   0,    0)};
constexpr PackedScore DEFENDED_PAWN[8] = {S(   0,    0), S(   0,    0), S(  20,   11), S(  14,   10), S(  15,    9), S(  23,   28), S( 131,   94), S(   0,    0)};

constexpr PackedScore PASSED_PAWN[2][2][8] = {
	{
		{S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
		{S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)}
	},
	{
		{S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
		{S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)}
	}
};
constexpr PackedScore OUR_PASSER_PROXIMITY[8] = {S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)};
constexpr PackedScore THEIR_PASSER_PROXIMITY[8] = {S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)};

constexpr PackedScore PAWN_STORM[2][4][8] = {
	{
		{S(  16,   24), S(-203, -126), S(   4,  -79), S(   7,  -27), S(   2,    2), S(  -5,   20), S(  -3,   16), S(   0,    0)},
		{S(  14,    6), S( -77, -187), S(  59, -115), S(   9,  -19), S(   3,   -2), S( -11,   15), S(  -7,   19), S(   0,    0)},
		{S(  -1,   12), S(  27, -148), S(  67, -112), S(  17,  -24), S(   4,    1), S(  -8,   18), S(  -8,   20), S(   0,    0)},
		{S(   9,   -4), S(  54, -133), S(  44,  -75), S(  15,   -6), S(  -1,    8), S(  -9,   10), S(  -3,   11), S(   0,    0)}
	},
	{
		{S(   0,    0), S(  -6,  -31), S( -26,   46), S(  10,  -59), S(  -3,   17), S(   0,   14), S(  -4,   16), S(   0,    0)},
		{S(   0,    0), S( -34, -120), S( -11,  -15), S(  54,  -49), S(   3,    7), S(  -7,   15), S(  -8,   18), S(   0,    0)},
		{S(   0,    0), S(  -1,  -12), S( -71, -179), S(  17,  -36), S(   3,    8), S(  -1,   14), S(  -9,   19), S(   0,    0)},
		{S(   0,    0), S( -28,  -39), S(  58,  -56), S(  21,   -9), S(   2,   16), S(   0,   -2), S(   0,   13), S(   0,    0)}
	}
};
constexpr PackedScore PAWN_SHIELD[4][8] = {
	{S(  16,    6), S(  -8,   32), S( -16,   23), S(  -1,    7), S(   8,  -10), S( -21,  -34), S( -60,  -46), S(   0,    0)},
	{S(  20,    7), S( -15,   17), S( -12,    8), S(  13,   -3), S(  11,  -17), S(   7,  -39), S( -41,  -48), S(   0,    0)},
	{S(   7,   25), S( -15,    8), S(   5,   -9), S(   3,    2), S(   4,   -2), S(  23,  -35), S(   5,  -51), S(   0,    0)},
	{S(  13,    1), S(   3,   11), S(  -5,    9), S(  -1,   -5), S(   9,  -15), S(  40,  -46), S(   0,  -58), S(   0,    0)}
};
constexpr PackedScore SAFE_KNIGHT_CHECK = S(  82,   -3);
constexpr PackedScore SAFE_BISHOP_CHECK = S(  24,   11);
constexpr PackedScore SAFE_ROOK_CHECK = S(  62,    3);
constexpr PackedScore SAFE_QUEEN_CHECK = S(  25,   18);
constexpr PackedScore UNSAFE_KNIGHT_CHECK = S(   6,    1);
constexpr PackedScore UNSAFE_BISHOP_CHECK = S(  12,   13);
constexpr PackedScore UNSAFE_ROOK_CHECK = S(  21,    0);
constexpr PackedScore UNSAFE_QUEEN_CHECK = S(   6,   13);
constexpr PackedScore KING_ATTACKER_WEIGHT[4] = {S(  19,    3), S(  16,    1), S(  19,  -15), S(   5,    0)};
constexpr PackedScore KING_ATTACKS[14] = {S( -43,   23), S( -50,   18), S( -58,   13), S( -63,   16), S( -62,   13), S( -54,    9), S( -39,    4), S( -19,   -6), S(  18,  -22), S(  40,  -22), S(  71,  -32), S(  81,   -5), S( 111,  -75), S(  78,   59)};

constexpr PackedScore MINOR_BEHIND_PAWN = S(   7,   18);
constexpr PackedScore KNIGHT_OUTPOST = S(  26,   19);
constexpr PackedScore BISHOP_PAWNS[7] = {S(   5,   20), S(   7,   21), S(   4,   13), S(   1,    5), S(  -2,   -6), S(  -3,  -20), S(  -7,  -34)};
constexpr PackedScore BISHOP_PAIR = S(  20,   64);
constexpr PackedScore ROOK_OPEN[2] = {S(  24,    9), S(  14,    6)};

constexpr PackedScore TEMPO = S(  32,   35);

constexpr PackedScore COMPLEXITY_PAWNS = S(   0,    7);
constexpr PackedScore COMPLEXITY_PASSERS = S(   0,    4);
constexpr PackedScore COMPLEXITY_PAWNS_BOTH_SIDES = S(   0,   68);
constexpr PackedScore COMPLEXITY_PAWN_ENDGAME = S(   0,   55);
constexpr PackedScore COMPLEXITY_OFFSET = S(   0, -127);

#undef S


}