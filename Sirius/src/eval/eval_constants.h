#pragma once

#include "../defs.h"

namespace eval
{

#define S(mg, eg) PackedScore(mg, eg)

constexpr PackedScore MATERIAL[6] = {S(  60,  132), S( 290,  443), S( 310,  452), S( 385,  811), S( 804, 1492), S(0, 0)};

constexpr PackedScore PSQT[6][64] = {
	{
		S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
		S(  66,   76), S(  27,   94), S(  29,   94), S(  55,   74), S(  63,   68), S(  32,   94), S(  31,  105), S(  65,   84),
		S(   8,   13), S(   0,   42), S(  11,    6), S(  29,  -28), S(  16,  -21), S(   3,    1), S( -17,   34), S(  -3,   19),
		S(  15,    9), S(   5,   14), S(   7,   -9), S(  11,  -24), S(  -1,  -23), S(  -4,   -8), S( -10,   14), S( -13,   12),
		S(   8,    1), S(   4,   17), S(   7,  -15), S(  14,  -15), S(   8,  -13), S(  -4,   -8), S( -15,   16), S( -14,    2),
		S(   3,   -2), S(  11,   13), S(  17,   -4), S(  -2,    1), S(  -7,    0), S( -12,   -4), S( -24,   13), S( -27,    1),
		S(  16,   -3), S(  30,    7), S(  16,   -8), S(   7,    5), S(  -7,   -1), S(  -6,   -4), S( -15,   17), S( -16,    4),
		S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
	},
	{
		S( -73,  -95), S( -76,  -26), S( -27,  -15), S(  12,  -13), S( -31,    4), S( -62,    5), S(-101,    8), S( -83,  -55),
		S(  -9,  -14), S(  24,    0), S(  30,   -5), S(   7,    4), S(  10,    8), S(   2,   13), S(  -3,   19), S(  -8,    3),
		S(  15,   -8), S(   7,    1), S(  49,  -11), S(  37,    7), S(  21,   15), S(  11,   13), S(   4,    7), S(  -6,    5),
		S(  33,    1), S(  33,    9), S(  43,   12), S(  32,   17), S(  25,   24), S(  31,   13), S(  19,    5), S(  10,   13),
		S(  10,   15), S(  15,   15), S(  24,   15), S(  17,   27), S(  25,   18), S(  18,   18), S(  20,    4), S(   4,    7),
		S(  10,    0), S(  16,    2), S(  13,   -2), S(  11,   16), S(   3,   14), S(  -1,    0), S(   0,   -4), S( -14,   -4),
		S(   5,    1), S(  13,   -8), S(   4,   -5), S(   9,    0), S(   3,    0), S(  -7,   -2), S(  -7,   -6), S( -17,   -6),
		S( -10,  -16), S( -12,   -5), S(  -7,   -9), S(  -1,    3), S( -11,    1), S( -23,   -6), S( -15,   -9), S( -47,   -3),
	},
	{
		S( -44,  -14), S( -30,    4), S(  -5,   -2), S( -72,   11), S( -63,   16), S( -49,    2), S( -23,    6), S( -31,    9),
		S( -21,   -7), S( -47,    6), S( -10,    1), S(   1,   -2), S( -18,    9), S(   4,   -1), S( -14,   -5), S(  -3,   -4),
		S(  16,   11), S(  13,    3), S(  28,    3), S(  14,    6), S(  20,    3), S(  -1,    0), S(  10,    7), S(   7,    3),
		S(  -6,    4), S(  11,    7), S(  10,   13), S(  21,   16), S(  22,   23), S(  18,    8), S(   6,   12), S(  -6,    6),
		S(  15,   -6), S(   3,    9), S(   8,    9), S(  11,   15), S(  21,   12), S(   0,   16), S(   0,    7), S(   0,    0),
		S(  19,  -10), S(  22,   -6), S(   3,   -5), S(   7,   11), S(  -1,    7), S(   0,   -2), S(  12,    2), S(   0,   -7),
		S(  28,  -22), S(  18,  -23), S(  26,  -11), S(   5,   -4), S(  -2,    0), S(  10,  -17), S(   2,  -24), S(  15,  -12),
		S(  26,  -39), S(  15,  -16), S( -11,    2), S(  12,   -4), S(  -2,   -2), S(  -4,    4), S(  12,   -3), S(   7,  -18),
	},
	{
		S(  15,    8), S( -25,   36), S( -23,   29), S( -11,   18), S( -28,   28), S( -22,   32), S( -10,   24), S(  -4,   21),
		S(  31,    2), S(  32,   10), S(  12,   16), S(   7,   16), S(  17,   18), S(   4,   30), S(   0,   25), S(   3,   17),
		S(  10,    2), S(  34,    4), S(  18,    4), S(  26,    2), S(   3,   12), S(   1,   20), S(  12,   17), S(  -7,   19),
		S(   5,    5), S(   5,   12), S(  10,    9), S(  10,    1), S(   4,    9), S(   7,   14), S(   5,   15), S(  -6,   16),
		S( -10,   -2), S(  11,    3), S( -10,    8), S(   7,    0), S(  -5,    4), S(  -8,    7), S( -10,    7), S( -13,    6),
		S(   5,  -25), S(  20,  -26), S(  -3,  -15), S(   0,  -16), S( -11,   -9), S( -14,  -10), S( -13,  -11), S( -19,   -9),
		S(  -8,  -27), S(  20,  -36), S(   0,  -22), S(   0,  -21), S(  -6,  -18), S(  -6,  -16), S( -15,  -14), S( -18,  -19),
		S(  -7,  -33), S(  -5,  -16), S(  -2,  -19), S(   8,  -26), S(   0,  -23), S(  -7,  -15), S(  -6,  -19), S(  -8,  -16),
	},
	{
		S(  -1,   -9), S(  39,  -37), S( -23,   31), S( -16,   18), S(  10,   -8), S( -21,   11), S( -41,    9), S( -25,    7),
		S(  42,    0), S(   3,   13), S( -17,   30), S( -28,   50), S( -19,   34), S(  -3,    7), S(  -1,  -11), S(   9,   -9),
		S(  18,    5), S(  10,   12), S(   4,   18), S(  -9,   25), S(   4,   16), S(  10,    7), S(   9,   -9), S(  22,  -13),
		S(  10,   14), S(   7,   30), S(   9,    8), S(  -8,   29), S(  -6,   27), S(   9,    5), S(   7,   11), S(   6,    3),
		S(   9,    6), S(  13,    9), S(   1,   14), S(   3,   24), S(  -4,   31), S(  -3,   21), S(   3,   16), S(   0,    7),
		S(   9,  -18), S(  11,   -7), S(   0,    5), S(  -7,   14), S(  -5,   11), S(  -5,   16), S(   5,   -6), S(   4,  -16),
		S(  11,  -49), S(  11,  -62), S(   6,  -39), S(   3,  -10), S(   2,   -4), S(   4,  -17), S(   3,  -22), S(   8,  -35),
		S(   5,  -46), S( -12,  -48), S( -21,  -22), S(  -5,  -23), S(  -4,  -18), S(  -7,  -15), S( -11,  -18), S( -12,  -14),
	},
	{
		S( -36,  -53), S( -45,   14), S( -79,    9), S( -67,    6), S(   8,   -6), S(   8,   -6), S(   8,   -6), S(   8,   -6),
		S( -72,   33), S( -23,   62), S( -32,   50), S(  17,   20), S(   8,   -6), S(   8,   -6), S(   8,   -6), S(   8,   -6),
		S(   9,   17), S(  33,   50), S(  40,   41), S(  15,   41), S(   8,   -6), S(   8,   -6), S(   8,   -6), S(   8,   -6),
		S( -31,   16), S(  -9,   44), S(  -2,   35), S( -27,   31), S(   8,   -6), S(   8,   -6), S(   8,   -6), S(   8,   -6),
		S( -50,    5), S( -21,   28), S(  -5,   16), S( -26,   14), S(   8,   -6), S(   8,   -6), S(   8,   -6), S(   8,   -6),
		S( -12,  -13), S(  13,    6), S(   1,   -4), S(  -5,   -6), S(   8,   -6), S(   8,   -6), S(   8,   -6), S(   8,   -6),
		S(  27,  -31), S(  27,   -7), S(  10,  -16), S(  -3,  -20), S(   8,   -6), S(   8,   -6), S(   8,   -6), S(   8,   -6),
		S(  16,  -62), S(  23,  -26), S(   1,  -28), S(   8,  -47), S(   8,   -6), S(   8,   -6), S(   8,   -6), S(   8,   -6),
	},
};

constexpr PackedScore MOBILITY[4][28] = {
	{S( -13,  -27), S( -44,  -47), S( -18,  -19), S( -10,    0), S(   2,    8), S(   7,   19), S(  15,   23), S(  25,   27), S(  36,   21), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -22,  -44), S( -43,  -60), S( -24,  -32), S( -15,  -13), S(  -5,   -3), S(   1,    7), S(   4,   17), S(   8,   20), S(  10,   23), S(  13,   23), S(  14,   23), S(  21,   16), S(  19,   22), S(  29,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -22,  -46), S( -50,  -61), S( -19,  -53), S(  -3,  -32), S(  -2,  -14), S(   2,   -8), S(  -3,    3), S(   2,    8), S(   4,   12), S(   8,   17), S(   7,   26), S(  10,   31), S(  13,   36), S(  18,   36), S(  27,   33), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -31,   18), S( -57,  -72), S(-122,  -79), S( -32, -234), S( -38,  -80), S( -24,  -16), S( -10,  -35), S( -10,    0), S(  -8,   15), S(  -7,   29), S(  -4,   35), S(   0,   33), S(   0,   45), S(   4,   45), S(   7,   45), S(   8,   49), S(   9,   51), S(  10,   52), S(  12,   51), S(  16,   46), S(  26,   35), S(  33,   18), S(  36,   20), S(  44,    2), S(  66,  -21), S(  55,  -11), S(  20,   -6), S(  -1,  -35)}
};

constexpr PackedScore THREAT_BY_PAWN[6] = {S(   4,  -22), S(  66,   30), S(  61,   61), S(  78,   29), S(  74,   -7), S(   0,    0)};
constexpr PackedScore THREAT_BY_KNIGHT[2][6] = {
	{S(   7,   29), S(  24,   27), S(  40,   45), S(  74,   15), S(  56,  -25), S(   0,    0)},
	{S(  -7,    8), S(  12,   25), S(  29,   30), S(  64,   34), S(  58,   -2), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_BISHOP[2][6] = {
	{S(  -2,   37), S(  40,   35), S( -10,   28), S(  68,   17), S(  67,   60), S(   0,    0)},
	{S(  -3,    6), S(  18,   23), S( -24,  -21), S(  43,   48), S(  45,  123), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_ROOK[2][6] = {
	{S(   0,   43), S(  18,   62), S(  27,   56), S(   5,  -35), S(  74,   13), S(   0,    0)},
	{S(  -8,    7), S(   2,   15), S(  13,    1), S(   6,  -82), S(  64,   48), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_QUEEN[2][6] = {
	{S(   5,   10), S(  24,   19), S(   9,   49), S(  18,   16), S(  10,  -51), S( 102,   39)},
	{S(  -2,   11), S(   0,    6), S(  -8,   18), S(  -6,    4), S( -17,  -75), S( 113,   66)}
};
constexpr PackedScore THREAT_BY_KING[6] = {S( -28,   49), S(   4,   52), S(  32,   42), S(  75,    9), S(   0,    0), S(   0,    0)};
constexpr PackedScore PUSH_THREAT = S(  15,   20);

constexpr PackedScore ISOLATED_PAWN[8] = {S(  -8,    6), S(  -4,  -16), S( -12,   -9), S( -11,  -16), S( -11,  -16), S(  -7,   -8), S(  -1,  -15), S( -10,    7)};
constexpr PackedScore DOUBLED_PAWN[8] = {S(  -4,  -63), S(  10,  -39), S(  -2,  -30), S(  -4,  -21), S(  -6,  -15), S( -17,  -20), S(   6,  -43), S(   2,  -76)};
constexpr PackedScore BACKWARDS_PAWN[8] = {S(   0,    0), S(  -7,  -14), S(  -2,  -14), S(  -9,  -12), S(   1,  -16), S(  29,   -7), S(   0,    0), S(   0,    0)};
constexpr PackedScore PAWN_PHALANX[8] = {S(   0,    0), S(   4,   -4), S(  11,   -2), S(  21,    7), S(  44,   39), S(  97,  224), S( -22,  349), S(   0,    0)};
constexpr PackedScore DEFENDED_PAWN[8] = {S(   0,    0), S(   0,    0), S(  19,    7), S(  11,    8), S(  17,   21), S(  28,   63), S( 137,   75), S(   0,    0)};
constexpr PackedScore CANDIDATE_PASSER[2][8] = {
	{S(   0,    0), S( -38,  -13), S( -19,   -7), S(   1,   29), S(  30,   56), S(  63,   84), S(   0,    0), S(   0,    0)},
	{S(   0,    0), S( -22,   -6), S( -10,   15), S(  -5,   31), S(  21,   43), S(  38,  150), S(   0,    0), S(   0,    0)}
};

constexpr PackedScore PASSED_PAWN[2][2][8] = {
	{
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -37,  -40), S( -15,   26), S(  -2,  154), S(  35,  235), S(   0,    0)},
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -25,  -53), S(   9,  -21), S(  33,   20), S(  59,   35), S(   0,    0)}
	},
	{
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -33,  -58), S(  -2,  -24), S(  32,    6), S(  60,   -1), S(   0,    0)},
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -33,  -62), S(   0,  -36), S(  11,  -16), S( -10,  -18), S(   0,    0)}
	}
};
constexpr PackedScore OUR_PASSER_PROXIMITY[8] = {S(   0,    0), S(  38,   85), S(   6,   69), S(   3,   43), S(   6,   31), S(  12,   23), S(  21,   21), S(  16,   19)};
constexpr PackedScore THEIR_PASSER_PROXIMITY[8] = {S(   0,    0), S( -41,    7), S(  22,    0), S(  16,   27), S(  20,   47), S(  14,   79), S(  16,   80), S(  17,   69)};

constexpr PackedScore PAWN_STORM[2][4][8] = {
	{
		{S(  16,   14), S(-131,  -49), S(  -9,   -8), S(   5,  -13), S(   0,    0), S(  -5,    9), S(  -4,    8), S(   0,    0)},
		{S(  12,    4), S( -17, -100), S(  41,  -41), S(   6,  -11), S(   2,   -5), S( -10,    7), S(  -7,    9), S(   0,    0)},
		{S(  -3,    6), S(  59,  -98), S(  62,  -45), S(  19,  -18), S(   3,   -1), S(  -6,    7), S(  -8,   12), S(   0,    0)},
		{S(   9,   -7), S( 110,  -85), S(  33,  -21), S(  13,   -1), S(  -1,    4), S(  -8,    0), S(  -3,    1), S(   0,    0)}
	},
	{
		{S(   0,    0), S(  -3,  -29), S( -27,  117), S(  11,  -52), S(  -3,    9), S(  -2,    5), S(  -5,    9), S(   0,    0)},
		{S(   0,    0), S(   7,  -93), S(  -5,   73), S(  53,  -44), S(   1,    3), S(  -7,    6), S(  -7,    8), S(   0,    0)},
		{S(   0,    0), S(  -6,   20), S( -64, -115), S(  21,  -30), S(   2,    4), S(   0,    5), S(  -8,   11), S(   0,    0)},
		{S(   0,    0), S(  -6,  -47), S(  65,   -6), S(  19,    0), S(   2,    8), S(   1,  -10), S(   0,    6), S(   0,    0)}
	}
};
constexpr PackedScore PAWN_SHIELD[4][8] = {
	{S(  17,    1), S(  -8,   25), S( -14,   16), S(  -2,    8), S(   4,    1), S( -41,  -24), S( -81,  -34), S(   0,    0)},
	{S(  16,    0), S( -12,   10), S( -10,    8), S(  11,   -3), S(   8,  -12), S( -15,  -17), S( -55,  -29), S(   0,    0)},
	{S(   4,    8), S( -15,    8), S(  16,    4), S(   1,   -1), S(  -1,   -2), S(   2,  -18), S( -17,  -41), S(   0,    0)},
	{S(  14,   -4), S(   5,   -3), S(  -3,    0), S(   1,   -6), S(   8,   -9), S(  29,  -22), S( -14,  -22), S(   0,    0)}
};
constexpr PackedScore SAFE_KNIGHT_CHECK = S(  91,   -2);
constexpr PackedScore SAFE_BISHOP_CHECK = S(  17,   22);
constexpr PackedScore SAFE_ROOK_CHECK = S(  73,    9);
constexpr PackedScore SAFE_QUEEN_CHECK = S(  29,   31);
constexpr PackedScore UNSAFE_KNIGHT_CHECK = S(  10,    0);
constexpr PackedScore UNSAFE_BISHOP_CHECK = S(  16,   10);
constexpr PackedScore UNSAFE_ROOK_CHECK = S(  22,   -1);
constexpr PackedScore UNSAFE_QUEEN_CHECK = S(   6,   10);
constexpr PackedScore KING_ATTACKER_WEIGHT[4] = {S(  18,   -3), S(  13,   -3), S(  15,  -15), S(   4,    3)};
constexpr PackedScore KING_ATTACKS[14] = {S( -37,    8), S( -44,    6), S( -49,    4), S( -52,    7), S( -51,    6), S( -44,    4), S( -29,    0), S( -12,   -8), S(  16,  -20), S(  37,  -15), S(  56,  -26), S(  59,   18), S(  83,  -20), S(  69,   29)};
constexpr PackedScore WEAK_KING_RING[17] = {S( -30,   47), S( -29,   27), S( -24,   24), S( -21,   20), S( -14,   13), S(  -5,    6), S(   5,    1), S(  20,   -3), S(  36,   -6), S(  50,   -9), S(  62,  -12), S(  66,   -8), S(  77,  -11), S(  79,  -13), S(  79,   -9), S(  99,  -14), S( 108,  -15)};

constexpr PackedScore MINOR_BEHIND_PAWN = S(   7,   13);
constexpr PackedScore KNIGHT_OUTPOST = S(  24,   16);
constexpr PackedScore BISHOP_PAWNS[7] = {S(   4,   21), S(   6,   20), S(   4,   12), S(   1,    5), S(  -2,   -4), S(  -3,  -18), S(  -6,  -30)};
constexpr PackedScore BISHOP_PAIR = S(  20,   62);
constexpr PackedScore LONG_DIAG_BISHOP = S(  15,    8);
constexpr PackedScore ROOK_OPEN[2] = {S(  26,    4), S(  14,    5)};

constexpr PackedScore TEMPO = S(  32,   36);

constexpr PackedScore COMPLEXITY_PAWNS = S(   0,    8);
constexpr PackedScore COMPLEXITY_PASSERS = S(   0,    1);
constexpr PackedScore COMPLEXITY_PAWNS_BOTH_SIDES = S(   0,   69);
constexpr PackedScore COMPLEXITY_PAWN_ENDGAME = S(   0,   65);
constexpr PackedScore COMPLEXITY_OFFSET = S(   0, -131);

#undef S


}