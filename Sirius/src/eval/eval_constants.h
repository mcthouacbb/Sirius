#pragma once

#include "../defs.h"

namespace eval
{

#define S(mg, eg) PackedScore(mg, eg)

constexpr PackedScore MATERIAL[6] = {S(  60,   91), S( 292,  370), S( 289,  381), S( 405,  684), S( 839, 1257), S(0, 0)};

constexpr PackedScore PSQT[6][64] = {
	{
		S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
		S(  35,   77), S(  41,   80), S(  31,   82), S(  70,   38), S(  54,   44), S(  41,   54), S( -25,   93), S( -30,   88),
		S(  14,   41), S(  10,   57), S(  37,   15), S(  47,  -16), S(  53,  -17), S(  85,   -7), S(  45,   39), S(  30,   29),
		S(  -6,   24), S(  -2,   27), S(   5,    3), S(   5,   -8), S(  24,   -9), S(  27,  -10), S(  11,   17), S(  12,    2),
		S( -14,    7), S( -12,   22), S(  -1,   -3), S(   7,   -7), S(   9,   -6), S(  13,  -11), S(   1,   10), S(   0,  -11),
		S( -25,   -1), S( -19,   10), S( -10,   -6), S(  -9,   -2), S(   1,   -2), S(  -4,   -8), S(   5,   -2), S(  -6,  -18),
		S( -17,    4), S( -11,   15), S(  -4,    0), S(  -5,   -2), S(   4,    8), S(  27,   -9), S(  19,    1), S(  -3,  -16),
		S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
	},
	{
		S( -93,  -37), S( -90,   -4), S( -63,    8), S( -15,   -8), S(   3,   -2), S(  -6,  -28), S( -73,   -2), S( -67,  -58),
		S( -14,    6), S(  -3,   11), S(   0,    2), S(   7,    2), S(   6,   -6), S(  28,  -14), S(  14,    1), S(   6,  -11),
		S(   0,    0), S(   3,    2), S(   9,    2), S(  15,    3), S(  27,   -4), S(  55,  -22), S(  12,   -7), S(  21,  -11),
		S(   7,   13), S(  16,    3), S(  27,    4), S(  35,    9), S(  28,   13), S(  43,    3), S(  31,    5), S(  37,    2),
		S(   2,   12), S(  17,    2), S(  18,   12), S(  27,   11), S(  21,   22), S(  25,    7), S(  24,    7), S(   8,   15),
		S( -15,   -1), S(  -4,   -2), S(  -2,   -4), S(   3,   11), S(  17,    9), S(   2,  -10), S(  15,   -7), S(   0,    2),
		S( -19,    6), S( -16,    9), S( -10,   -3), S(   3,   -2), S(   2,   -4), S(   5,   -4), S(   6,   -4), S(   1,   17),
		S( -49,   23), S( -12,   -4), S( -20,   -1), S( -11,    1), S(  -4,    2), S(   0,   -9), S( -11,    4), S( -15,   14),
	},
	{
		S( -10,    2), S( -38,    8), S( -44,    2), S( -68,    8), S( -69,    7), S( -26,   -4), S( -29,    0), S( -51,   -1),
		S(  -8,   -7), S( -13,   -3), S(  -6,   -5), S( -22,    0), S( -10,   -6), S( -20,   -4), S( -52,    9), S( -38,   -1),
		S(   2,    5), S(  12,    1), S(   1,    1), S(  16,   -6), S(   2,    0), S(  33,    6), S(  14,    0), S(  21,    6),
		S(  -6,    5), S(   6,    5), S(  13,    3), S(  20,   15), S(  15,   10), S(  11,    8), S(   7,    9), S(   1,    3),
		S(   2,    1), S(   0,    7), S(   4,    9), S(  16,   11), S(  15,    8), S(   9,    5), S(   5,    4), S(  18,   -8),
		S(   1,   -1), S(  14,    1), S(   7,    3), S(   0,    5), S(   7,    9), S(   8,   -2), S(  18,   -8), S(  16,  -11),
		S(  19,    3), S(   8,  -14), S(  12,  -14), S(  -3,    0), S(   4,   -3), S(  18,  -11), S(  25,  -16), S(  23,  -13),
		S(  12,   -4), S(  16,    4), S(   5,    3), S(  -1,   -4), S(  13,   -6), S(  -2,    7), S(  23,  -12), S(  33,  -25),
	},
	{
		S( -11,   17), S( -19,   23), S( -27,   32), S( -28,   27), S( -17,   21), S(   3,   19), S(  -3,   24), S(  20,   12),
		S(  -3,   13), S(   1,   19), S(   7,   21), S(  23,    9), S(   9,   10), S(  14,    9), S(  25,    4), S(  29,    2),
		S( -10,   12), S(  14,    9), S(   6,   12), S(   7,    6), S(  26,   -1), S(  33,   -7), S(  51,   -6), S(  20,   -7),
		S(  -8,   13), S(   9,    8), S(   9,   11), S(   5,    7), S(  16,   -4), S(  19,   -6), S(  17,    0), S(  11,   -4),
		S( -15,    7), S(  -8,    8), S(  -4,    5), S(   1,    3), S(   7,    1), S(  -4,    5), S(  15,   -2), S(  -6,   -4),
		S( -21,    0), S( -16,   -4), S( -12,   -6), S(  -9,   -5), S(   1,  -10), S(  -4,  -12), S(  19,  -25), S(   1,  -24),
		S( -22,   -7), S( -18,   -6), S(  -7,   -8), S(  -6,  -10), S(  -2,  -16), S(   2,  -18), S(   9,  -22), S( -18,  -18),
		S( -15,   -6), S( -14,  -11), S( -12,   -6), S(  -4,  -14), S(   1,  -20), S(  -4,  -14), S(  -5,  -15), S( -17,  -15),
	},
	{
		S( -23,   -6), S( -42,   11), S( -29,   26), S(   1,   11), S(  -4,   12), S(  -8,   20), S(  40,  -31), S(   3,   -1),
		S(   6,  -18), S( -14,   -5), S( -12,   23), S( -25,   43), S( -28,   59), S(   0,   24), S(  -4,   12), S(  39,    9),
		S(   8,   -8), S(   2,   -3), S(  -5,   21), S(  -2,   25), S( -14,   39), S(   5,   13), S(  22,   -4), S(  27,   -4),
		S(   1,    5), S(   2,   13), S(   5,   10), S( -10,   27), S( -13,   30), S(  10,   14), S(   8,   32), S(  17,   12),
		S(   0,    3), S(   3,   16), S(  -1,   13), S(  -5,   20), S(   6,   22), S(   3,   22), S(  18,    5), S(  16,    8),
		S(   1,  -16), S(   1,   -5), S(  -8,    6), S(  -8,   12), S(  -3,   17), S(   2,    4), S(  14,  -15), S(  15,  -20),
		S(   3,  -29), S(  -2,  -32), S(   2,  -23), S(   2,   -8), S(   2,   -8), S(   8,  -35), S(  17,  -65), S(  30,  -78),
		S( -15,  -26), S( -15,  -23), S( -13,  -13), S( -10,  -15), S(  -9,  -16), S( -18,  -24), S(  -5,  -44), S(   8,  -44),
	},
	{
		S(  42,  -51), S(  72,  -25), S( 104,  -27), S(  47,   -7), S(  55,  -31), S( -42,    9), S(  12,   10), S(  83,  -65),
		S(-103,   28), S(   1,   27), S(  15,   16), S( 142,  -16), S(  88,  -10), S(  49,   25), S(  13,   42), S( -91,   46),
		S(-114,   26), S(  46,   14), S(  34,    8), S(  42,    3), S(  84,    0), S( 102,   10), S(  12,   34), S( -54,   28),
		S( -64,    1), S( -23,    6), S( -19,    7), S( -16,    0), S( -19,   -4), S( -27,   14), S( -52,   21), S(-150,   28),
		S( -73,   -8), S( -29,    0), S( -35,    4), S( -33,    1), S( -35,    0), S( -35,    5), S( -65,   13), S(-147,   18),
		S( -51,   -4), S(   7,   -2), S( -19,    2), S(  -2,   -2), S(  -5,   -3), S( -21,    4), S( -12,    3), S( -69,    9),
		S(  37,  -15), S(  28,   -2), S(  24,   -2), S(   7,   -5), S(   3,   -2), S(  13,   -1), S(  29,   -4), S(  23,  -12),
		S(  27,  -34), S(  61,  -27), S(  33,  -10), S( -20,   -3), S(  16,  -20), S( -14,    3), S(  40,  -17), S(  37,  -40),
	},
};

constexpr PackedScore MOBILITY[4][28] = {
	{S( -16,   -2), S( -40,  -51), S( -19,  -18), S(  -9,    7), S(   1,   19), S(   4,   30), S(  13,   37), S(  22,   43), S(  30,   41), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S(  -6,  -28), S( -41,  -90), S( -20,  -39), S( -13,  -16), S(  -1,   -4), S(   6,    6), S(  11,   17), S(  16,   22), S(  19,   27), S(  22,   30), S(  21,   34), S(  31,   27), S(  25,   32), S(  38,   21), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -50,  -13), S(  -5,  -41), S( -34,  -30), S( -24,  -15), S( -18,  -10), S( -12,    5), S( -11,   12), S( -14,   18), S( -10,   19), S(  -6,   24), S(  -1,   28), S(   1,   34), S(   5,   38), S(  12,   39), S(  17,   34), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -83,   59), S(-100,  -16), S(-146,   -4), S(-106, -227), S(-116,  -53), S( -71,   -2), S( -61,   24), S( -53,   29), S( -46,   37), S( -44,   60), S( -41,   67), S( -37,   76), S( -34,   81), S( -30,   84), S( -27,   87), S( -24,   90), S( -22,   93), S( -23,   98), S( -22,  102), S( -21,  104), S( -14,   99), S(  -8,   87), S(  -4,   88), S(  21,   61), S(  29,   61), S(  76,   20), S(  79,   16), S(  60,    2)}
};

constexpr PackedScore THREAT_BY_PAWN[6] = {S(   7,  -15), S(  63,   29), S(  63,   58), S(  87,    9), S(  74,  -18), S(   0,    0)};
constexpr PackedScore THREAT_BY_KNIGHT[2][6] = {
	{S(   7,   28), S(  30,   23), S(  36,   38), S(  73,    5), S(  42,  -22), S(   0,    0)},
	{S(  -3,   11), S(  13,   43), S(  29,   32), S(  61,   28), S(  53,   -3), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_BISHOP[2][6] = {
	{S(   5,   33), S(  49,   24), S(   3,   31), S(  70,    9), S(  70,   38), S(   0,    0)},
	{S(   1,    9), S(  22,   24), S( -11,    8), S(  44,   40), S(  51,  120), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_ROOK[2][6] = {
	{S(   0,   43), S(  28,   50), S(  28,   48), S(  11,  -27), S(  72,   -0), S(   0,    0)},
	{S(  -6,   13), S(   5,   18), S(  17,    6), S(   7,  -55), S(  57,   54), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_QUEEN[2][6] = {
	{S(  12,    6), S(  36,    8), S(  19,   42), S(  24,   -8), S(  11,  -63), S( 138,  -34)},
	{S(  -1,   15), S(   1,    7), S(  -4,   22), S(  -3,    2), S( -19,  -54), S( 116,   52)}
};
constexpr PackedScore THREAT_BY_KING[6] = {S( -19,   41), S(  27,   43), S(  28,   47), S(  97,    9), S(   0,    0), S(   0,    0)};
constexpr PackedScore PUSH_THREAT = S(  19,   17);

constexpr PackedScore PASSED_PAWN[8] = {S(   0,    0), S( -17,  -70), S( -16,  -55), S( -14,  -20), S(  10,   16), S(  -0,   86), S(  48,  100), S(   0,    0)};
constexpr PackedScore ISOLATED_PAWN[8] = {S(  -4,    7), S(  -2,  -11), S( -10,   -5), S(  -5,  -14), S( -11,  -13), S(  -7,   -4), S(  -1,  -11), S( -10,    8)};
constexpr PackedScore PAWN_PHALANX[8] = {S(   0,    0), S(   5,   -1), S(  12,    6), S(  18,   15), S(  45,   56), S( 114,  189), S(-192,  480), S(   0,    0)};
constexpr PackedScore DEFENDED_PAWN[8] = {S(   0,    0), S(   0,    0), S(  18,   11), S(  12,    8), S(  14,   15), S(  28,   39), S( 182,   24), S(   0,    0)};
constexpr PackedScore OUR_PASSER_PROXIMITY[8] = {S(   0,    0), S(   7,   52), S(  -5,   40), S(  -4,   24), S(  -2,   14), S(   2,   11), S(  16,    9), S(   6,    7)};
constexpr PackedScore THEIR_PASSER_PROXIMITY[8] = {S(   0,    0), S( -75,   -2), S(   8,   -1), S(  -0,   27), S(   5,   37), S(   5,   45), S(   7,   50), S( -10,   49)};

constexpr PackedScore PAWN_STORM[3][8] = {
	{S(  42,  -33), S(  22,  -17), S(  16,   -5), S(   7,   -1), S(   1,    2), S(  -2,    6), S(  -0,    5), S(   7,  -11)},
	{S(   0,    0), S(  11,  -26), S(  25,   -1), S(   3,    1), S(  -5,    7), S(  -6,   12), S(  -6,   13), S(   8,   -3)},
	{S(   1,   -2), S(  -8,    5), S(   3,    8), S(   2,    9), S(   4,    8), S(   4,   10), S(   4,   10), S(  -9,   -4)}
};
constexpr PackedScore PAWN_SHIELD[3][8] = {
	{S(   2,  -13), S(  -8,   -7), S(  -4,  -12), S(   1,  -11), S(  13,  -13), S(  17,  -26), S(  27,  -28), S(   7,    0)},
	{S(   0,    0), S( -15,    3), S(  -8,   -4), S(   9,   -4), S(  19,   -9), S(  32,  -27), S(  53,  -39), S(  16,    2)},
	{S(  -3,   -8), S(  -2,   -5), S(   0,   -5), S(   1,   -1), S(   3,    1), S(   4,    2), S(  23,    8), S( -10,    7)}
};
constexpr PackedScore SAFE_KNIGHT_CHECK = S(  78,   -3);
constexpr PackedScore SAFE_BISHOP_CHECK = S(  16,   -7);
constexpr PackedScore SAFE_ROOK_CHECK = S(  57,   -3);
constexpr PackedScore SAFE_QUEEN_CHECK = S(  30,   12);
constexpr PackedScore KING_ATTACKER_WEIGHT[4] = {S(  15,   -4), S(   7,   -0), S(   7,  -17), S(  -3,   10)};
constexpr PackedScore KING_ATTACKS[14] = {S( -26,    8), S( -28,    4), S( -29,    2), S( -27,    6), S( -18,    4), S(  -3,    1), S(  20,   -6), S(  49,  -18), S(  94,  -38), S( 123,  -43), S( 160,  -57), S( 185,  -46), S( 222, -133), S( 180,   17)};

constexpr PackedScore KNIGHT_OUTPOST = S(  24,   18);
constexpr PackedScore BISHOP_PAWNS[7] = {S(  17,   32), S(  19,   28), S(  17,   21), S(  12,   13), S(   8,    4), S(   6,   -9), S(   0,  -22)};
constexpr PackedScore BISHOP_PAIR = S(  20,   60);
constexpr PackedScore ROOK_OPEN[2] = {S(  20,   11), S(  11,   11)};

constexpr PackedScore TEMPO = S(  29,   30);

#undef S


}
