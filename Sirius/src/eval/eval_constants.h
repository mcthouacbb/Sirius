#pragma once

#include "../defs.h"

namespace eval
{

#define S(mg, eg) PackedScore(mg, eg)

constexpr PackedScore MATERIAL[6] = {S(  61,  129), S( 285,  430), S( 306,  443), S( 387,  787), S( 746, 1620), S(0, 0)};

constexpr PackedScore PSQT[6][64] = {
    {
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  61,   77), S(  38,   92), S(  20,  105), S(  51,   81), S(  72,   64), S(  56,   76), S(  46,   96), S(  70,   78),
        S(  16,    6), S(  -7,   38), S(   6,    1), S(  12,  -21), S(   5,  -20), S(   8,  -13), S( -16,   26), S(   1,   11),
        S(  14,    4), S(  -5,   13), S(  13,  -18), S(  10,  -22), S(  -1,  -22), S(   0,  -16), S(  -7,    8), S(  -8,    6),
        S(   6,   -4), S(  -5,   15), S(  13,  -25), S(  16,  -15), S(   9,  -15), S(   0,  -13), S( -13,   10), S( -11,   -3),
        S(  -1,   -5), S(   8,    9), S(   4,   -1), S(   1,    0), S(  -8,   -1), S(  -8,   -8), S( -21,    9), S( -22,   -4),
        S(   9,   -5), S(  25,   11), S(  31,  116), S(   9,    2), S(  -1,   -8), S(  -4,   -6), S( -13,   13), S( -14,    0),
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
    },
    {
        S( -68,  -98), S( -77,  -25), S( -29,  -17), S(  -2,   -8), S( -29,    0), S( -61,    7), S( -96,    1), S( -84,  -59),
        S( -18,  -13), S(  11,    3), S(  23,   -1), S(  -3,    9), S(   3,   12), S(   4,   11), S(   0,   12), S( -11,   -1),
        S(   3,   -7), S( -10,    7), S(  29,   -2), S(  18,   17), S(   7,   23), S(  15,   13), S(   6,    3), S(  -6,    0),
        S(  27,    4), S(  22,   17), S(  36,   19), S(  20,   26), S(  22,   28), S(  28,   15), S(  21,    3), S(  12,    8),
        S(  10,   17), S(  15,   17), S(  20,   20), S(  19,   29), S(  21,   21), S(  19,   18), S(  23,    1), S(  10,    2),
        S(  15,   -1), S(  16,    5), S(  18,    3), S(  16,   16), S(   7,   16), S(   5,   -1), S(   8,   -7), S(  -5,   -7),
        S(   9,    0), S(  12,   -5), S(   9,   -4), S(  14,    0), S(   8,   -1), S(  -2,   -4), S(  -1,   -8), S( -13,   -9),
        S(  -3,  -15), S(  -4,  -11), S(   4,  -10), S(   8,    1), S(   1,   -2), S( -14,   -9), S(  -8,  -16), S( -41,   -8),
    },
    {
        S( -45,  -15), S( -26,    5), S(  -9,   -2), S( -70,   10), S( -64,   16), S( -57,    6), S( -30,    7), S( -32,    6),
        S( -22,   -9), S( -44,    5), S( -13,    3), S( -10,    3), S( -22,   11), S(   1,   -1), S( -12,   -6), S(  -4,   -6),
        S(  10,   13), S(  -2,    8), S(  21,    6), S(   4,   12), S(  16,    6), S(   1,    0), S(  10,    5), S(   6,    1),
        S( -11,    5), S(   2,   13), S(   2,   17), S(  17,   19), S(  23,   23), S(  19,    8), S(   6,   11), S(  -4,    1),
        S(  16,   -6), S(  -4,   14), S(   8,   12), S(  15,   14), S(  22,   12), S(   6,   13), S(   4,    5), S(   5,   -2),
        S(  19,   -8), S(  22,   -1), S(   4,   -1), S(  10,   12), S(   1,    8), S(   5,   -3), S(  20,    0), S(   6,   -9),
        S(  26,  -18), S(  24,  -24), S(  27,   -8), S(   7,   -3), S(  -1,    0), S(  12,  -16), S(   6,  -26), S(  16,  -12),
        S(  27,  -36), S(  21,  -15), S(  -4,   -2), S(  19,   -5), S(   1,   -3), S(   0,    1), S(  11,   -3), S(   7,  -19),
    },
    {
        S(  16,   10), S( -11,   30), S(  -8,   25), S( -20,   23), S( -11,   22), S( -12,   29), S(   9,   17), S(   9,   17),
        S(  27,    1), S(  31,    7), S(  12,   16), S(  -5,   19), S(  23,   13), S(  11,   23), S(   7,   20), S(  11,   11),
        S(  -6,    5), S(  22,    7), S(   4,    8), S(   6,    9), S(   5,    8), S(   2,   16), S(  16,   10), S(  -5,   13),
        S( -10,   10), S( -16,   20), S(  -7,   16), S(  -9,   11), S(  -2,    9), S(   5,   11), S(   5,   10), S(  -7,   12),
        S( -19,    4), S(  -1,    9), S( -20,   14), S(  -8,    8), S(  -7,    2), S( -10,    6), S( -10,    5), S(  -9,    3),
        S(   3,  -20), S(  22,  -25), S(  -2,  -12), S(  -2,  -13), S(  -6,  -12), S(  -8,  -13), S(  -5,  -15), S( -12,  -12),
        S(  -6,  -28), S(  25,  -36), S(   5,  -23), S(   2,  -20), S(   3,  -22), S(   1,  -20), S(  -8,  -18), S( -12,  -23),
        S(  -6,  -40), S(  -3,  -19), S(   2,  -19), S(   8,  -25), S(   6,  -26), S(  -1,  -20), S(  -1,  -24), S(  -3,  -22),
    },
    {
        S(  13,   -8), S(  53,  -30), S( -15,   43), S( -12,   24), S(  18,    4), S(  -8,   18), S( -22,    7), S( -13,    8),
        S(  38,    5), S(  17,    8), S(  -6,   26), S( -32,   56), S(  -5,   35), S(  16,    1), S(  27,  -22), S(  20,   -8),
        S(   6,   10), S(   0,    3), S(  -8,   20), S( -14,   15), S(   9,   12), S(  21,    5), S(  22,  -19), S(  31,  -17),
        S(  -5,   17), S( -16,   34), S( -10,   15), S( -16,   24), S(  -3,   23), S(  12,    3), S(  11,    4), S(   8,   -3),
        S(  -5,   15), S(  -3,   13), S( -14,   19), S(  -8,   26), S( -11,   34), S(  -3,   18), S(   5,   13), S(   2,    3),
        S(   1,  -10), S(   5,   -6), S(  -7,    8), S( -13,   16), S(  -9,   14), S(  -4,   13), S(  12,  -11), S(  10,  -18),
        S(   2,  -43), S(  10,  -61), S(   1,  -30), S(   0,  -14), S(  -1,   -4), S(   2,  -17), S(   4,  -23), S(   9,  -38),
        S(   9,  -59), S( -17,  -39), S( -20,  -22), S( -11,  -20), S(  -8,  -20), S( -12,  -14), S( -14,  -19), S( -12,  -18),
    },
    {
        S(  50,  -74), S(  24,   -1), S( -41,  -21), S( -65,    2), S(   9,   -5), S(   9,   -5), S(   9,   -5), S(   9,   -5),
        S( -11,   20), S(  24,   57), S(  -8,   31), S(  -7,   31), S(   9,   -5), S(   9,   -5), S(   9,   -5), S(   9,   -5),
        S(  33,   14), S(  54,   50), S(  28,   31), S( -25,   52), S(   9,   -5), S(   9,   -5), S(   9,   -5), S(   9,   -5),
        S( -16,   18), S( -12,   53), S( -38,   33), S( -84,   48), S(   9,   -5), S(   9,   -5), S(   9,   -5), S(   9,   -5),
        S( -56,   14), S( -51,   44), S( -49,   13), S( -84,   30), S(   9,   -5), S(   9,   -5), S(   9,   -5), S(   9,   -5),
        S( -15,   -3), S(  -9,   21), S( -30,   -8), S( -51,    8), S(   9,   -5), S(   9,   -5), S(   9,   -5), S(   9,   -5),
        S(  37,  -23), S(  31,    0), S(   6,  -29), S( -23,  -17), S(   9,   -5), S(   9,   -5), S(   9,   -5), S(   9,   -5),
        S(  36,  -56), S(  36,  -21), S(  12,  -50), S(   0,  -47), S(   9,   -5), S(   9,   -5), S(   9,   -5), S(   9,   -5),
    },
};

constexpr PackedScore MOBILITY[4][28] = {
    {S(  -3,  -29), S( -37,  -46), S( -16,  -15), S(  -8,    1), S(   2,    9), S(   6,   19), S(  13,   22), S(  21,   27), S(  30,   20), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S( -10,  -46), S( -29,  -61), S( -17,  -32), S( -11,  -14), S(  -3,   -4), S(   2,    6), S(   3,   15), S(   6,   19), S(   6,   22), S(   8,   23), S(  10,   23), S(  14,   18), S(  13,   24), S(  17,    5), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S( -13,  -43), S( -29,  -70), S( -14,  -53), S(  -3,  -31), S(   0,  -17), S(  -1,   -6), S(  -1,    1), S(   2,    7), S(   3,   11), S(   6,   17), S(   4,   27), S(   4,   34), S(   7,   38), S(  10,   39), S(  18,   36), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S(  -3,    9), S( -36,  -74), S( -64, -117), S( -18, -202), S( -22,  -66), S( -14,  -14), S(  -6,  -25), S(  -3,   -6), S(  -2,   12), S(   0,   21), S(   3,   24), S(   6,   26), S(   7,   37), S(  10,   36), S(  11,   42), S(  13,   44), S(  14,   46), S(  16,   47), S(  16,   47), S(  21,   41), S(  26,   32), S(  33,   14), S(  29,   22), S(  39,   -5), S(  39,   -8), S(   3,    6), S(  -6,  -13), S(-116,   21)}
};

constexpr PackedScore THREAT_BY_PAWN[6] = {S(   4,  -18), S(  66,   28), S(  59,   60), S(  80,   24), S(  72,   -2), S(   0,    0)};
constexpr PackedScore THREAT_BY_KNIGHT[2][6] = {
    {S(   4,   29), S(  15,   37), S(  37,   44), S(  73,   15), S(  60,  -31), S(   0,    0)},
    {S(  -8,    9), S(   7,   35), S(  29,   29), S(  64,   33), S(  61,   -2), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_BISHOP[2][6] = {
    {S(  -2,   34), S(  39,   32), S( -13,   34), S(  68,   14), S(  69,   45), S(   0,    0)},
    {S(  -4,    5), S(  17,   22), S( -25,  -12), S(  44,   44), S(  46,  111), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_ROOK[2][6] = {
    {S(  -1,   42), S(  15,   60), S(  25,   55), S( -10,  -26), S(  59,   19), S(   0,    0)},
    {S(  -7,    7), S(   1,   15), S(  13,    3), S( -11,  -67), S(  40,   63), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_QUEEN[2][6] = {
    {S(   6,    8), S(  24,   22), S(  10,   49), S(  18,   16), S(  10,  -55), S(  94,   49)},
    {S(  -3,   11), S(   1,    8), S(  -5,   14), S(  -4,    4), S( -16,  -74), S( 112,   52)}
};
constexpr PackedScore THREAT_BY_KING[6] = {S( -20,   44), S(   9,   48), S(  27,   40), S(  83,    8), S(   0,    0), S(   0,    0)};
constexpr PackedScore KNIGHT_HIT_QUEEN = S(  11,    2);
constexpr PackedScore BISHOP_HIT_QUEEN = S(  17,   11);
constexpr PackedScore ROOK_HIT_QUEEN = S(  20,   -2);
constexpr PackedScore PUSH_THREAT = S(  14,   17);

constexpr PackedScore ISOLATED_PAWN[8] = {S(  -8,    5), S(  -3,  -16), S( -12,   -8), S( -10,  -16), S( -12,  -14), S(  -8,   -7), S(  -4,  -14), S( -11,    6)};
constexpr PackedScore DOUBLED_PAWN[8] = {S(  -1,  -59), S(  13,  -35), S(   1,  -27), S(  -2,  -17), S(  -5,  -12), S(  -6,  -19), S(   6,  -37), S(   7,  -71)};
constexpr PackedScore BACKWARDS_PAWN[8] = {S(   0,    0), S(  -7,  -14), S(  -2,  -14), S(  -8,  -11), S(   1,  -17), S(  28,   -2), S(   0,    0), S(   0,    0)};
constexpr PackedScore PAWN_PHALANX[8] = {S(   0,    0), S(   5,   -4), S(  11,   -2), S(  20,    8), S(  40,   41), S( 115,  213), S(   5,  342), S(   0,    0)};
constexpr PackedScore DEFENDED_PAWN[8] = {S(   0,    0), S(   0,    0), S(  18,    6), S(  11,    8), S(  17,   21), S(  30,   63), S( 138,   76), S(   0,    0)};
constexpr PackedScore CANDIDATE_PASSER[2][8] = {
    {S(   0,    0), S( -32,  -17), S( -18,   -7), S(   0,   26), S(  27,   52), S(  59,   86), S(   0,    0), S(   0,    0)},
    {S(   0,    0), S( -19,   -7), S(  -9,   14), S(  -5,   28), S(  19,   41), S(  29,  152), S(   0,    0), S(   0,    0)}
};

constexpr PackedScore PASSED_PAWN[2][2][8] = {
    {
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -36,  -39), S( -16,   26), S(   6,  149), S(  66,  218), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -23,  -48), S(   4,  -15), S(  34,   23), S(  67,   27), S(   0,    0)}
    },
    {
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -29,  -52), S(  -4,  -13), S(  35,   19), S(  70,   -1), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -30,  -51), S(  -5,  -18), S(  13,    0), S(  -9,   -9), S(   0,    0)}
    }
};
constexpr PackedScore OUR_PASSER_PROXIMITY[8] = {S(  72,  100), S(  63,  102), S(  42,   72), S(   5,   57), S(   4,   36), S(   7,   23), S(  11,   16), S(  -7,   21)};
constexpr PackedScore THEIR_PASSER_PROXIMITY[8] = {S( -59,  -16), S(  -3,   -6), S(  27,   -2), S(  19,   31), S(  14,   65), S(  19,   79), S(  24,   81), S(  28,   70)};

constexpr PackedScore PAWN_STORM[2][4][8] = {
    {
        {S(  43,   34), S(-127,  -42), S( -10,   16), S(  31,   14), S(  17,   25), S(  -2,   29), S(  -9,   29), S(   0,    0)},
        {S(  33,    6), S(  45, -120), S(  90,  -45), S(  37,   -4), S(  10,    3), S( -26,   10), S(   2,    6), S(   0,    0)},
        {S(  12,   18), S( 100,  -96), S( 105,  -17), S(  54,    7), S(  12,   20), S( -11,   23), S( -12,   25), S(   0,    0)},
        {S(  19,    3), S( 146,  -77), S( 116,  -12), S(  44,   13), S(   0,   19), S( -17,    9), S( -21,   18), S(   0,    0)}
    },
    {
        {S(   0,    0), S(   0,    0), S(  33,   42), S( -24,   27), S(  -4,   30), S(  21,   31), S(  -8,   29), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(  92,   -1), S(   4,    7), S( -10,   18), S(  -2,   15), S(   2,    6), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(  86,    7), S(   1,   13), S(   1,   26), S(  25,   24), S(   3,   22), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(  42,    2), S(  20,   17), S( -27,   16), S(  -5,   11), S(  -3,   12), S(   0,    0)}
    }
};
constexpr PackedScore PAWN_SHIELD[4][8] = {
    {S(  47,   33), S( -16,   49), S( -12,   40), S(  28,   33), S(  34,   26), S( -26,   -2), S( -68,  -21), S(   0,    0)},
    {S(  51,    5), S( -22,   17), S(   7,    6), S(  49,    0), S(  37,   -8), S(   1,  -18), S( -39,  -34), S(   0,    0)},
    {S(  23,   -2), S(  19,  115), S(   6,   -3), S(  28,  -23), S(  26,  -21), S(   3,  -26), S( -66,  -32), S(   0,    0)},
    {S(  19,   14), S(   8,    9), S(  -4,   10), S(  21,    6), S(  29,    4), S(  11,    5), S( -85,    9), S(   0,    0)}
};
constexpr PackedScore SAFE_KNIGHT_CHECK = S( 111,    6);
constexpr PackedScore SAFE_BISHOP_CHECK = S(  62,   18);
constexpr PackedScore SAFE_ROOK_CHECK = S( 104,   17);
constexpr PackedScore SAFE_QUEEN_CHECK = S(  53,   26);
constexpr PackedScore UNSAFE_KNIGHT_CHECK = S(  17,    2);
constexpr PackedScore UNSAFE_BISHOP_CHECK = S(  39,   11);
constexpr PackedScore UNSAFE_ROOK_CHECK = S(  39,    2);
constexpr PackedScore UNSAFE_QUEEN_CHECK = S(  16,    4);
constexpr PackedScore QUEENLESS_ATTACK = S(-138,  157);
constexpr PackedScore KING_ATTACKER_WEIGHT[4] = {S(  55,   -5), S(  22,    0), S(  28,  -13), S(   3,  -10)};
constexpr PackedScore KING_ATTACKS = S(   7,   -1);
constexpr PackedScore WEAK_KING_RING = S(   7,    0);
constexpr PackedScore KING_FLANK_ATTACKS[2] = {S(  12,   -4), S(   7,    1)};
constexpr PackedScore KING_FLANK_DEFENSES[2] = {S(  -6,    0), S( -10,    2)};
constexpr PackedScore SAFETY_OFFSET = S(  73,  188);

constexpr PackedScore MINOR_BEHIND_PAWN = S(   5,   12);
constexpr PackedScore KNIGHT_OUTPOST = S(  22,   16);
constexpr PackedScore BISHOP_PAWNS[7] = {S(   3,   20), S(   5,   19), S(   4,   11), S(   1,    4), S(  -2,   -5), S(  -2,  -18), S(  -6,  -31)};
constexpr PackedScore BISHOP_PAIR = S(  18,   60);
constexpr PackedScore LONG_DIAG_BISHOP = S(  15,    8);
constexpr PackedScore ROOK_OPEN[2] = {S(  24,    4), S(  12,    5)};

constexpr PackedScore TEMPO = S(  31,   34);

constexpr PackedScore COMPLEXITY_PAWNS = S(   0,   10);
constexpr PackedScore COMPLEXITY_PAWNS_BOTH_SIDES = S(   0,   63);
constexpr PackedScore COMPLEXITY_PAWN_ENDGAME = S(   0,   80);
constexpr PackedScore COMPLEXITY_OFFSET = S(   0, -133);

#undef S


}