#pragma once

#include "../defs.h"

namespace eval
{

// clang-format off
#define S(mg, eg) ScorePair(mg, eg)

constexpr ScorePair MATERIAL[6] = {S(  62,  137), S( 313,  463), S( 330,  484), S( 421,  829), S( 895, 1767), S(0, 0)};

constexpr ScorePair PSQT[6][64] = {
    {
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  80,   82), S(  20,   95), S(  23,   80), S(  60,   77), S(  59,   59), S(  29,   74), S(  43,   85), S(  75,   80),
        S(   5,   13), S( -10,   21), S(   5,   -2), S(   0,   -4), S(  -8,  -14), S(  -8,   -5), S( -17,   21), S(  -1,   12),
        S(   5,   10), S(   5,   20), S(  11,   -7), S(   8,  -15), S(   2,  -15), S(  -1,   -8), S(   0,   10), S(  -6,   10),
        S(  -7,   -3), S(  -6,   13), S(  16,  -26), S(  17,  -18), S(  12,  -19), S(   2,  -12), S( -14,   12), S( -16,   -4),
        S( -14,   -5), S(  12,    6), S(   3,    2), S(   7,    0), S(  -3,    0), S(  -9,    0), S( -15,   12), S( -23,   -4),
        S(  -4,  -10), S(  25,    7), S(  23,   42), S(   4,   12), S(  -1,    2), S(  -4,    1), S(  -7,   12), S( -18,   -3),
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
    },
    {
        S( -64, -119), S(-103,   44), S(-125,   46), S(  15,   12), S( -47,   28), S( -59,    7), S( -91,   13), S( -90,  -85),
        S(   5,  -15), S(  -4,    4), S(  25,    9), S(  31,   18), S(  15,   25), S(  17,    2), S( -10,    7), S(  -4,  -15),
        S(  19,   -5), S(  10,   18), S(  36,   12), S(  25,   20), S(  19,   20), S(  18,   15), S(   8,    8), S(  -2,   -3),
        S(  28,    6), S(  34,    9), S(  35,   18), S(  29,   31), S(  36,   25), S(  19,   17), S(  21,    7), S(   8,    5),
        S(  20,    7), S(  22,   11), S(  25,   15), S(  22,   29), S(  20,   23), S(  21,   15), S(  17,    4), S(   6,    5),
        S(   4,   -7), S(  19,   -2), S(  16,    0), S(  19,   14), S(  11,   14), S(  -1,    1), S(   5,   -8), S(  -6,  -14),
        S(  10,   -8), S(   7,    3), S(   9,  -14), S(  12,   -1), S(   3,    0), S(   0,  -13), S(  -5,   -9), S( -10,  -36),
        S( -11,  -20), S( -10,  -23), S(   7,  -18), S(   7,   -8), S(  -2,   -6), S( -10,  -13), S( -17,  -22), S( -22,  -50),
    },
    {
        S( -24,  -42), S( -50,   18), S( -99,   23), S( -46,   17), S( -67,   22), S( -64,   21), S( -51,   20), S( -40,   -9),
        S( -21,   -3), S( -41,    5), S( -11,    9), S( -33,   23), S( -22,   19), S( -12,    8), S( -13,  -14), S(   0,  -10),
        S(  21,   -6), S(  17,    9), S(  25,    8), S(  19,   16), S(  12,   15), S(   7,    5), S(  10,    5), S(   9,   -8),
        S(   3,    0), S(  12,   14), S(  15,   15), S(  13,   31), S(  21,   30), S(  19,   10), S(  17,   10), S(  -3,   -2),
        S(  14,  -12), S(   8,    7), S(  10,   15), S(  20,   18), S(  20,   18), S(  12,   13), S(   6,    2), S(  14,  -12),
        S(  19,  -12), S(  20,   -3), S(  11,   -7), S(  12,   11), S(  10,    5), S(   4,  -10), S(  25,   -4), S(  17,  -15),
        S(  16,  -19), S(  26,  -30), S(  25,  -18), S(  10,   -5), S(  -2,   -4), S(  11,  -16), S(   6,  -26), S(  27,  -12),
        S(  11,  -34), S(  14,  -15), S( -15,   -7), S(  10,  -18), S(   3,  -14), S(  -6,   -8), S(  15,  -20), S(   6,  -22),
    },
    {
        S(  34,    2), S(  36,    7), S(  32,   15), S(   5,   25), S(  14,   24), S(  12,   21), S(  23,   18), S(  30,   19),
        S(  20,   14), S(  12,   20), S(  22,   20), S(   9,   29), S(  22,   28), S(  14,   27), S(   3,   31), S(  15,   25),
        S( -15,   21), S(  10,   12), S(  11,   10), S(  10,   11), S(   9,   15), S(   2,   16), S(   4,   21), S(   0,   22),
        S( -16,    8), S( -10,   15), S(  -6,   18), S(  -7,   12), S(  -2,    7), S(   4,   11), S(  -5,   15), S( -10,   17),
        S( -24,   -6), S(  -8,    0), S( -18,   17), S(  -7,    7), S( -12,    5), S( -16,   10), S( -14,    8), S( -16,    2),
        S( -21,  -26), S(   3,  -25), S(  -6,  -11), S(  -4,  -13), S(   3,  -20), S(  -6,  -15), S(  -5,  -19), S( -15,  -16),
        S( -58,  -31), S( -11,  -33), S(   6,  -32), S(   3,  -27), S(  -3,  -24), S(  -3,  -23), S( -13,  -25), S( -17,  -25),
        S( -16,  -37), S( -24,  -18), S(   9,  -28), S(  15,  -31), S(   6,  -30), S(  -3,  -21), S(   1,  -28), S(  -1,  -24),
    },
    {
        S(  -2,   36), S(  54,  -11), S(  38,   12), S(  18,   27), S(  24,   20), S(  20,   19), S(  15,    9), S( -15,   36),
        S(  29,   -2), S(  26,   -2), S(  13,   16), S( -14,   39), S(   7,   25), S(   6,    9), S(  20,  -11), S(  13,    0),
        S(   3,    9), S(  23,   -1), S(   3,   13), S( -14,   33), S(   9,   24), S(  14,    3), S(  16,   -3), S(  21,  -14),
        S(  -1,   14), S( -14,   28), S(  -9,   13), S( -23,   33), S( -19,   41), S(   0,   18), S(  -3,   27), S(   4,    6),
        S( -18,   25), S(  -4,    9), S( -14,   16), S( -16,   26), S( -20,   44), S(  -7,   22), S(  -4,   14), S(  -3,    5),
        S(  -5,  -12), S(  -1,  -15), S(  -5,   -6), S( -17,   11), S(  -9,   11), S(  -8,   11), S(   8,   -6), S(  -1,    3),
        S(  -7,  -50), S(   2,  -66), S(  -1,  -50), S(  -5,  -21), S(  -8,  -12), S(   4,  -31), S(  -6,  -14), S(   0,  -22),
        S( -11,  -27), S( -17,  -86), S( -21,  -54), S( -11,  -44), S(  -3,  -39), S( -12,  -30), S( -12,  -33), S( -12,  -19),
    },
    {
        S( -41, -152), S( -13,   70), S(  -8,   44), S(  -8,   40), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S( -12,   -2), S(  20,   79), S( -34,   72), S( -31,   64), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  23,   38), S( -15,   98), S( -38,   58), S(-128,   22), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S( -44,   39), S( -34,   79), S( -71,   45), S(-128,   14), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S( -64,   27), S( -57,   60), S( -78,   29), S(-111,    2), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(   3,    4), S(   0,   31), S( -42,    9), S( -61,  -19), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  62,  -23), S(  47,    4), S(  18,  -28), S(  -7,  -52), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  60,  -58), S(  59,  -20), S(  21,  -50), S(  19,  -95), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
    },
};

constexpr ScorePair MOBILITY[4][28] = {
    {S(  -5,  -24), S( -35,  -58), S( -23,  -15), S( -10,    2), S(  -1,   11), S(   6,   21), S(  14,   24), S(  21,   29), S(  32,   17), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S(   0,  -38), S( -42,  -59), S( -23,  -32), S( -11,  -12), S(  -6,    1), S(  -1,   11), S(   2,   18), S(   5,   22), S(   3,   24), S(   9,   23), S(   4,   27), S(  17,   14), S(  10,   22), S(  39,  -18), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S( -28,  -63), S( -59,  -71), S( -21,  -43), S( -13,  -24), S(  -4,  -15), S(   1,   -2), S(   1,    8), S(   4,   12), S(   5,   17), S(   7,   23), S(   8,   31), S(  10,   39), S(  12,   43), S(  14,   43), S(  49,   15), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S( -19,   57), S(  -7,  -19), S( -42,  -68), S( -46,  -97), S( -18, -150), S( -14,  -84), S(  -9,  -52), S(  -9,  -24), S(  -8,   -3), S(  -7,    6), S(  -6,   17), S(  -4,   27), S(  -5,   36), S(  -3,   40), S(  -1,   44), S(   0,   47), S(   1,   46), S(   4,   48), S(   1,   51), S(   3,   50), S(   6,   47), S(  10,   39), S(  16,   31), S(  23,   11), S(  26,    2), S(  58,  -34), S(  54,  -20), S(  -6,  -21)}
};

constexpr ScorePair THREAT_BY_PAWN[6] = {S( -10,  -22), S(  76,   38), S(  62,   79), S(  69,   55), S(  61,   26), S(   0,    0)};
constexpr ScorePair THREAT_BY_KNIGHT[2][6] = {
    {S(   5,   38), S(   6,   69), S(  46,   36), S(  81,   18), S(  48,   -4), S(   0,    0)},
    {S(  -8,   10), S(  10,   54), S(  38,   30), S(  72,   46), S(  57,   40), S(   0,    0)}
};
constexpr ScorePair THREAT_BY_BISHOP[2][6] = {
    {S(   3,   34), S(  37,   42), S(   9,   23), S(  56,   33), S(  60,   54), S(   0,    0)},
    {S(  -5,    3), S(  19,   22), S(   0,   -1), S(  57,   72), S(  59,   76), S(   0,    0)}
};
constexpr ScorePair THREAT_BY_ROOK[2][6] = {
    {S(  -2,   50), S(  36,   54), S(  48,   48), S( -10,  -61), S(  73,  -23), S(   0,    0)},
    {S( -10,    8), S(   8,   14), S(  19,    4), S(  15, -103), S(  52,   88), S(   0,    0)}
};
constexpr ScorePair THREAT_BY_QUEEN[2][6] = {
    {S(   6,   26), S(  21,   36), S(  17,   58), S(  16,   14), S(   2,  -44), S( 243,   38)},
    {S(  -6,   18), S(   1,    7), S(  -8,   24), S(  -4,   -8), S( -13,  -45), S( 106,  215)}
};
constexpr ScorePair THREAT_BY_KING[6] = {S(  53,   11), S(  20,   41), S(  98,   38), S(  77,   13), S(   0,    0), S(   0,    0)};
constexpr ScorePair KNIGHT_HIT_QUEEN = S(   7,   -1);
constexpr ScorePair BISHOP_HIT_QUEEN = S(  16,   16);
constexpr ScorePair ROOK_HIT_QUEEN = S(  22,   -6);
constexpr ScorePair PUSH_THREAT = S(  14,   18);
constexpr ScorePair RESTRICTED_SQUARES = S(   3,    2);

constexpr ScorePair ISOLATED_PAWN[8] = {S(  -3,    2), S(  -5,  -16), S(  -7,  -14), S(  -8,  -16), S( -13,  -13), S(  -9,   -7), S(  -6,  -11), S(  -6,    0)};
constexpr ScorePair DOUBLED_PAWN[8] = {S(  -3,  -52), S(   5,  -42), S(   0,  -26), S(  -9,  -13), S( -13,   -3), S(  -6,  -21), S(   6,  -40), S(   4,  -48)};
constexpr ScorePair BACKWARDS_PAWN[8] = {S(   0,    0), S(  -7,  -15), S(   0,  -16), S(  -7,  -13), S(   8,  -20), S(  22,   26), S(   0,    0), S(   0,    0)};
constexpr ScorePair PAWN_PHALANX[8] = {S(   0,    0), S(   5,   -7), S(  12,   -3), S(  18,   11), S(  39,   38), S(  90,  137), S(  39,  306), S(   0,    0)};
constexpr ScorePair DEFENDED_PAWN[8] = {S(   0,    0), S(   0,    0), S(  18,    5), S(  12,    9), S(  18,   24), S(  47,   57), S(  93,  109), S(   0,    0)};
constexpr ScorePair CANDIDATE_PASSER[2][8] = {
    {S(   0,    0), S(  -9,  -11), S(  -9,  -18), S(  -4,    7), S(  15,   26), S(  52,   72), S(   0,    0), S(   0,    0)},
    {S(   0,    0), S( -14,   -7), S(  -8,   10), S(  -5,   25), S(   8,   38), S(  39,  107), S(   0,    0), S(   0,    0)}
};

constexpr ScorePair PASSED_PAWN[2][2][8] = {
    {
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -28,  -29), S( -13,   30), S(  32,  133), S( 132,  200), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -23,  -38), S(  -2,  -10), S(  34,   55), S(  73,   80), S(   0,    0)}
    },
    {
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -22,  -44), S(  -9,   -8), S(  32,   54), S(  30,   47), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -27,  -54), S(  -2,  -29), S(  16,   29), S(  -3,   23), S(   0,    0)}
    }
};
constexpr ScorePair OUR_PASSER_PROXIMITY[8] = {S(  73,  110), S( 118,   64), S(  45,   67), S(  -9,   61), S(  -5,   34), S(  -1,   23), S(  15,    9), S(   9,   13)};
constexpr ScorePair THEIR_PASSER_PROXIMITY[8] = {S( -50,    6), S(  12,   -6), S(  26,    2), S(  22,   26), S(  17,   58), S(  14,   75), S(  19,   78), S(  21,   60)};
constexpr ScorePair PASSER_DEFENDED_PUSH[8] = {S(   0,    0), S(   0,    0), S(   0,    0), S(   8,    7), S(  12,   18), S(  34,   35), S(  53,  100), S(   0,    0)};

constexpr ScorePair PAWN_STORM[2][4][8] = {
    {
        {S(  32,   16), S(-107, -140), S( -18,  -66), S(  42,   -7), S(  19,   12), S(   7,   14), S(   0,   20), S(   0,    0)},
        {S(  20,    9), S(  15, -143), S(  69,  -99), S(  30,  -17), S(  13,    5), S( -20,   10), S(   4,    9), S(   0,    0)},
        {S(   6,    2), S(  76, -151), S(  96,  -92), S(  61,  -22), S(   9,    5), S( -16,    8), S(  -6,    3), S(   0,    0)},
        {S(   7,  -13), S( 120, -184), S( 110,  -95), S(  61,  -18), S(   8,   -1), S( -25,   -9), S( -26,   -8), S(   0,    0)}
    },
    {
        {S(   0,    0), S(   0,    0), S(  93,   31), S(  -7,   17), S(  -2,   25), S(  23,   33), S(  36,   22), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S( 155,   27), S( -23,   22), S(  -3,   27), S(   4,   42), S(  19,   19), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S( 126,    1), S(   5,   12), S(  -1,   23), S(   8,   21), S(  50,   -2), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S( 141,  -10), S(  18,   12), S( -18,   12), S(  -6,    7), S( -31,  -28), S(   0,    0)}
    }
};
constexpr ScorePair PAWN_SHIELD[4][8] = {
    {S(  55,   14), S(   7,   27), S( -15,   20), S(  29,   11), S(  39,   -2), S(   3,    1), S(  -4,    1), S(   0,    0)},
    {S(  39,   12), S( -28,   20), S(   7,    9), S(  39,   -4), S(  30,  -11), S(  -5,  -21), S( -58,  -38), S(   0,    0)},
    {S(  26,    5), S(  10,   41), S(   8,   -8), S(  37,  -30), S(  29,  -24), S(   4,  -25), S( -40,  -41), S(   0,    0)},
    {S(  15,   -1), S( -24,  -13), S(   6,  -25), S(  26,  -29), S(  17,  -26), S(  28,  -13), S( -10,  -15), S(   0,    0)}
};
constexpr ScorePair SAFE_KNIGHT_CHECK = S( 102,    0);
constexpr ScorePair SAFE_BISHOP_CHECK = S(  75,   22);
constexpr ScorePair SAFE_ROOK_CHECK = S( 115,    9);
constexpr ScorePair SAFE_QUEEN_CHECK = S(  69,   31);
constexpr ScorePair UNSAFE_KNIGHT_CHECK = S(  18,    0);
constexpr ScorePair UNSAFE_BISHOP_CHECK = S(  41,    7);
constexpr ScorePair UNSAFE_ROOK_CHECK = S(  45,    1);
constexpr ScorePair UNSAFE_QUEEN_CHECK = S(  19,   23);
constexpr ScorePair QUEENLESS_ATTACK = S(-101,  402);
constexpr ScorePair KING_ATTACKER_WEIGHT[4] = {S(  58,   -6), S(  20,    0), S(  20,  -12), S(   6,  -94)};
constexpr ScorePair KING_ATTACKS = S(   8,   -1);
constexpr ScorePair WEAK_KING_RING = S(   4,    1);
constexpr ScorePair KING_FLANK_ATTACKS[2] = {S(  12,   -5), S(   3,    0)};
constexpr ScorePair KING_FLANK_DEFENSES[2] = {S(  -9,    0), S(  -7,    5)};
constexpr ScorePair SAFETY_OFFSET = S(  81,  -16);

constexpr ScorePair MINOR_BEHIND_PAWN = S(   1,   11);
constexpr ScorePair KNIGHT_OUTPOST = S(  18,   15);
constexpr ScorePair BISHOP_PAWNS[7] = {S(  10,    2), S(   4,   15), S(   3,    9), S(   0,    4), S(  -4,   -2), S(  -7,   -9), S( -11,  -18)};
constexpr ScorePair BISHOP_PAIR = S(  22,   69);
constexpr ScorePair LONG_DIAG_BISHOP = S(  12,   13);
constexpr ScorePair ROOK_OPEN[2] = {S(  32,   -2), S(  19,    2)};

constexpr ScorePair TEMPO = S(  25,   17);

constexpr ScorePair COMPLEXITY_PAWNS = S(   0,   10);
constexpr ScorePair COMPLEXITY_PAWNS_BOTH_SIDES = S(   0,  148);
constexpr ScorePair COMPLEXITY_PAWN_ENDGAME = S(   0,  145);
constexpr ScorePair COMPLEXITY_OFFSET = S(   0, -227);

#undef S
// clang-format on

}
