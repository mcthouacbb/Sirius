#pragma once

#include "../defs.h"

namespace eval
{

#define S(mg, eg) PackedScore(mg, eg)

constexpr PackedScore MATERIAL[6] = {S(  61,  129), S( 284,  431), S( 305,  443), S( 385,  787), S( 745, 1618), S(0, 0)};

constexpr PackedScore PSQT[6][64] = {
    {
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  60,   72), S(  38,   86), S(  19,  100), S(  52,   74), S(  74,   57), S(  54,   73), S(  47,   89), S(  69,   73),
        S(  16,    5), S(  -7,   36), S(   6,    1), S(  11,  -21), S(   5,  -20), S(   8,  -14), S( -16,   25), S(   1,    9),
        S(  14,    2), S(  -5,   12), S(  13,  -19), S(  10,  -22), S(  -2,  -22), S(   0,  -16), S(  -7,    7), S(  -8,    5),
        S(   6,   -5), S(  -5,   14), S(  13,  -25), S(  16,  -15), S(   9,  -15), S(   0,  -14), S( -13,    9), S( -11,   -3),
        S(  -1,   -5), S(   8,    9), S(   3,    0), S(   1,    0), S(  -8,    0), S(  -9,   -7), S( -21,    9), S( -22,   -4),
        S(   9,   -6), S(  24,   11), S(  30,  116), S(   9,    3), S(  -1,   -8), S(  -5,   -6), S( -13,   12), S( -14,    0),
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
    },
    {
        S( -68,  -96), S( -77,  -25), S( -28,  -18), S(  -7,   -4), S( -34,    4), S( -57,    4), S(-102,    5), S( -84,  -59),
        S( -18,  -14), S(  11,    2), S(  21,    1), S(  -3,    9), S(   1,   13), S(   4,   12), S(   0,   12), S( -10,   -1),
        S(   3,   -7), S( -10,    7), S(  28,   -1), S(  19,   17), S(   7,   23), S(  16,   12), S(   7,    2), S(  -6,    0),
        S(  27,    4), S(  23,   17), S(  37,   18), S(  21,   25), S(  23,   27), S(  29,   13), S(  22,    2), S(  13,    7),
        S(  11,   16), S(  15,   16), S(  21,   19), S(  20,   27), S(  22,   20), S(  21,   16), S(  24,   -1), S(  11,    0),
        S(  16,   -3), S(  17,    3), S(  19,    2), S(  17,   14), S(   8,   14), S(   6,   -2), S(   9,   -9), S(  -4,   -9),
        S(  11,   -1), S(  12,   -5), S(  10,   -5), S(  15,   -1), S(  10,   -2), S(   0,   -5), S(   0,   -9), S( -12,  -11),
        S(  -2,  -16), S(  -3,  -12), S(   5,  -12), S(   9,   -1), S(   2,   -5), S( -13,  -12), S(  -6,  -18), S( -39,  -12),
    },
    {
        S( -44,  -17), S( -27,    6), S(  -9,   -1), S( -71,   13), S( -68,   21), S( -60,    9), S( -30,    9), S( -31,    6),
        S( -22,   -9), S( -43,    4), S( -13,    4), S( -11,    5), S( -23,   14), S(   2,    0), S( -12,   -5), S(  -3,   -6),
        S(  11,   12), S(  -1,    7), S(  22,    5), S(   5,   12), S(  16,    7), S(   1,    0), S(  11,    6), S(   7,    2),
        S( -10,    5), S(   3,   13), S(   3,   16), S(  19,   18), S(  24,   22), S(  20,    8), S(   7,   11), S(  -2,   -1),
        S(  17,   -6), S(  -3,   14), S(   9,   11), S(  17,   13), S(  23,   11), S(   7,   13), S(   5,    5), S(   6,   -3),
        S(  20,   -9), S(  23,   -1), S(   5,   -1), S(  11,   12), S(   2,    7), S(   6,   -4), S(  21,    0), S(   7,  -10),
        S(  27,  -18), S(  25,  -24), S(  27,   -8), S(   8,   -3), S(   0,    0), S(  13,  -17), S(   7,  -27), S(  18,  -13),
        S(  28,  -36), S(  21,  -14), S(  -4,   -2), S(  20,   -5), S(   3,   -4), S(   2,    0), S(  13,   -5), S(   8,  -21),
    },
    {
        S(  12,   14), S( -23,   39), S( -13,   30), S( -23,   26), S( -12,   25), S( -12,   31), S(   8,   19), S(   9,   19),
        S(  29,    2), S(  27,   12), S(  11,   19), S(  -6,   22), S(  23,   15), S(  10,   27), S(   7,   22), S(  11,   14),
        S(  -7,    8), S(  19,   12), S(   3,   11), S(   5,   12), S(   5,   10), S(   2,   19), S(  16,   12), S(  -5,   15),
        S( -10,   12), S( -16,   23), S(  -6,   18), S(  -7,   12), S(  -2,   11), S(   6,   12), S(   6,   12), S(  -6,   13),
        S( -18,    6), S(  -2,   12), S( -19,   15), S(  -7,    9), S(  -5,    3), S(  -9,    6), S(  -9,    5), S(  -8,    3),
        S(   5,  -21), S(  23,  -24), S(   0,  -13), S(   0,  -14), S(  -3,  -13), S(  -6,  -15), S(  -3,  -17), S( -10,  -13),
        S(  -3,  -31), S(  29,  -39), S(   8,  -25), S(   5,  -22), S(   6,  -24), S(   4,  -22), S(  -5,  -21), S(  -9,  -26),
        S(  -3,  -42), S(   0,  -23), S(   5,  -22), S(  11,  -27), S(   8,  -28), S(   1,  -23), S(   2,  -27), S(   0,  -25),
    },
    {
        S(  13,   -7), S(  53,  -29), S(  -9,   38), S( -17,   31), S(  20,    3), S( -14,   26), S( -24,   11), S( -15,   12),
        S(  38,    7), S(  18,    8), S(  -7,   28), S( -34,   61), S(  -5,   37), S(  16,    4), S(  27,  -21), S(  20,   -8),
        S(   5,   13), S(  -1,    7), S(  -7,   21), S( -14,   15), S(  10,   12), S(  21,    5), S(  21,  -16), S(  30,  -13),
        S(  -4,   15), S( -16,   36), S(  -9,   15), S( -15,   24), S(  -4,   25), S(  12,    5), S(  11,    5), S(   9,   -3),
        S(  -4,   15), S(  -3,   14), S( -14,   19), S(  -8,   27), S( -10,   33), S(  -2,   18), S(   5,   13), S(   3,    4),
        S(   2,  -11), S(   5,   -5), S(  -6,    8), S( -13,   16), S(  -8,   14), S(  -4,   13), S(  12,  -11), S(  10,  -19),
        S(   3,  -44), S(  11,  -61), S(   2,  -31), S(   1,  -14), S(  -1,   -5), S(   2,  -17), S(   5,  -25), S(  10,  -40),
        S(  10,  -60), S( -14,  -46), S( -18,  -24), S( -10,  -20), S(  -7,  -20), S( -11,  -15), S( -13,  -19), S( -11,  -19),
    },
    {
        S(  64,  -85), S(  17,    1), S( -38,  -23), S( -62,   -2), S(   9,   -5), S(   9,   -5), S(   9,   -5), S(   9,   -5),
        S( -16,   20), S(  26,   55), S(  -7,   30), S( -11,   31), S(   9,   -5), S(   9,   -5), S(   9,   -5), S(   9,   -5),
        S(  28,   15), S(  49,   52), S(  27,   32), S( -29,   52), S(   9,   -5), S(   9,   -5), S(   9,   -5), S(   9,   -5),
        S( -19,   20), S( -16,   55), S( -41,   35), S( -87,   49), S(   9,   -5), S(   9,   -5), S(   9,   -5), S(   9,   -5),
        S( -56,   14), S( -54,   45), S( -52,   15), S( -88,   31), S(   9,   -5), S(   9,   -5), S(   9,   -5), S(   9,   -5),
        S( -16,   -2), S( -10,   21), S( -32,   -6), S( -53,    8), S(   9,   -5), S(   9,   -5), S(   9,   -5), S(   9,   -5),
        S(  37,  -24), S(  31,   -1), S(   6,  -29), S( -23,  -18), S(   9,   -5), S(   9,   -5), S(   9,   -5), S(   9,   -5),
        S(  37,  -58), S(  37,  -22), S(  12,  -50), S(   1,  -49), S(   9,   -5), S(   9,   -5), S(   9,   -5), S(   9,   -5),
    },
};

constexpr PackedScore MOBILITY[4][28] = {
    {S(  -3,  -29), S( -37,  -47), S( -16,  -15), S(  -8,    1), S(   2,    9), S(   6,   19), S(  13,   22), S(  21,   27), S(  30,   20), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S( -10,  -46), S( -29,  -61), S( -18,  -32), S( -11,  -14), S(  -3,   -4), S(   2,    6), S(   3,   15), S(   6,   19), S(   6,   22), S(   8,   23), S(  10,   22), S(  14,   17), S(  15,   21), S(  19,    3), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S( -14,  -42), S( -29,  -70), S( -14,  -52), S(  -3,  -31), S(   0,  -17), S(  -2,   -7), S(  -1,    1), S(   2,    7), S(   3,   11), S(   6,   17), S(   3,   27), S(   4,   34), S(   6,   39), S(   9,   40), S(  16,   37), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S(  -5,   11), S( -34,  -81), S( -65, -119), S( -20, -199), S( -23,  -64), S( -15,  -15), S(  -6,  -26), S(  -4,   -6), S(  -3,   11), S(  -1,   20), S(   2,   24), S(   6,   26), S(   6,   37), S(  10,   36), S(  10,   42), S(  12,   44), S(  13,   46), S(  15,   48), S(  15,   47), S(  21,   39), S(  26,   30), S(  32,   14), S(  27,   22), S(  35,   -2), S(  34,   -2), S(   2,    7), S(  -5,  -15), S(-104,    3)}
};

constexpr PackedScore THREAT_BY_PAWN[6] = {S(   4,  -19), S(  65,   29), S(  59,   61), S(  80,   24), S(  73,   -4), S(   0,    0)};
constexpr PackedScore THREAT_BY_KNIGHT[2][6] = {
    {S(   5,   29), S(  14,   43), S(  37,   45), S(  74,   14), S(  60,  -29), S(   0,    0)},
    {S(  -8,    9), S(   6,   42), S(  29,   29), S(  65,   32), S(  61,   -2), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_BISHOP[2][6] = {
    {S(  -2,   34), S(  39,   32), S( -13,   34), S(  67,   15), S(  69,   46), S(   0,    0)},
    {S(  -4,    5), S(  17,   22), S( -25,  -13), S(  44,   44), S(  46,  110), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_ROOK[2][6] = {
    {S(  -1,   41), S(  15,   59), S(  25,   54), S( -10,  -25), S(  60,   18), S(   0,    0)},
    {S(  -7,    6), S(   2,   15), S(  14,    2), S( -11,  -67), S(  40,   63), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_QUEEN[2][6] = {
    {S(   6,    8), S(  24,   24), S(   9,   50), S(  18,   17), S(  10,  -54), S(  95,   47)},
    {S(  -3,   11), S(   1,    8), S(  -5,   13), S(  -4,    4), S( -16,  -76), S( 113,   47)}
};
constexpr PackedScore THREAT_BY_KING[6] = {S( -22,   45), S(   7,   49), S(  26,   41), S(  85,    6), S(   0,    0), S(   0,    0)};
constexpr PackedScore KNIGHT_HIT_QUEEN = S(  11,    2);
constexpr PackedScore BISHOP_HIT_QUEEN = S(  17,   11);
constexpr PackedScore ROOK_HIT_QUEEN = S(  20,   -2);
constexpr PackedScore PUSH_THREAT = S(  13,   18);

constexpr PackedScore ISOLATED_PAWN[8] = {S(  -7,    4), S(  -3,  -16), S( -12,   -9), S( -10,  -16), S( -12,  -14), S(  -8,   -7), S(  -3,  -14), S( -11,    5)};
constexpr PackedScore DOUBLED_PAWN[8] = {S(  -2,  -57), S(  13,  -35), S(   1,  -27), S(  -2,  -17), S(  -5,  -12), S(  -6,  -19), S(   5,  -36), S(   7,  -69)};
constexpr PackedScore BACKWARDS_PAWN[8] = {S(   0,    0), S(  -7,  -14), S(  -2,  -14), S(  -8,  -11), S(   2,  -20), S(  29,   -6), S(   0,    0), S(   0,    0)};
constexpr PackedScore PAWN_PHALANX[8] = {S(   0,    0), S(   5,   -4), S(  11,   -2), S(  20,    8), S(  39,   42), S( 121,  213), S(  19,  331), S(   0,    0)};
constexpr PackedScore DEFENDED_PAWN[8] = {S(   0,    0), S(   0,    0), S(  18,    6), S(  11,    8), S(  16,   21), S(  29,   66), S( 136,   79), S(   0,    0)};
constexpr PackedScore CANDIDATE_PASSER[2][8] = {
    {S(   0,    0), S( -31,  -19), S( -18,   -8), S(   0,   25), S(  27,   51), S(  59,   85), S(   0,    0), S(   0,    0)},
    {S(   0,    0), S( -19,   -8), S(  -9,   13), S(  -5,   28), S(  19,   39), S(  29,  153), S(   0,    0), S(   0,    0)}
};

constexpr PackedScore PASSED_PAWN[2][2][8] = {
    {
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -27,  -47), S(  -4,   13), S(  24,  129), S(  99,  192), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -26,  -37), S(   1,   -5), S(  31,   35), S(  64,   45), S(   0,    0)}
    },
    {
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -29,  -50), S(  -4,  -11), S(  37,   21), S(  70,    9), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -33,  -42), S(  -6,  -11), S(  12,    7), S(  -9,    3), S(   0,    0)}
    }
};
constexpr PackedScore OUR_PASSER_PROXIMITY[8] = {S( 103,   72), S(  71,   94), S(  47,   66), S(  10,   51), S(   6,   30), S(   7,   18), S(  11,   11), S(  -6,   15)};
constexpr PackedScore THEIR_PASSER_PROXIMITY[8] = {S( -62,  -14), S(  -2,  -11), S(  29,   -6), S(  21,   26), S(  16,   59), S(  21,   73), S(  27,   74), S(  31,   64)};
constexpr PackedScore UNCONTESTED_PROMO_PATH = S( -33,   46);

constexpr PackedScore PAWN_STORM[2][4][8] = {
    {
        {S(  43,   32), S(-124,  -45), S(  -8,   15), S(  30,   15), S(  16,   25), S(  -3,   28), S(  -9,   28), S(   0,    0)},
        {S(  33,    6), S(  46, -125), S(  90,  -44), S(  37,   -3), S(  10,    4), S( -26,    9), S(   2,    6), S(   0,    0)},
        {S(  12,   18), S( 100, -101), S( 106,  -19), S(  54,    7), S(  13,   20), S( -11,   22), S( -12,   24), S(   0,    0)},
        {S(  19,    2), S( 147,  -78), S( 117,  -14), S(  43,   14), S(   0,   19), S( -17,    9), S( -21,   18), S(   0,    0)}
    },
    {
        {S(   0,    0), S(   0,    0), S(  33,   41), S( -25,   27), S(  -4,   30), S(  21,   29), S(  -8,   28), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(  92,   -1), S(   4,    8), S( -10,   18), S(  -3,   16), S(   2,    6), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(  86,    7), S(   2,   13), S(   1,   26), S(  25,   24), S(   3,   21), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(  43,    1), S(  21,   16), S( -27,   16), S(  -6,   11), S(  -4,   12), S(   0,    0)}
    }
};
constexpr PackedScore PAWN_SHIELD[4][8] = {
    {S(  47,   33), S( -16,   48), S( -12,   39), S(  28,   32), S(  34,   26), S( -23,   -6), S( -65,  -23), S(   0,    0)},
    {S(  51,    6), S( -22,   16), S(   6,    5), S(  49,    0), S(  37,   -8), S(   2,  -20), S( -33,  -37), S(   0,    0)},
    {S(  22,   -3), S(  18,  115), S(   6,   -4), S(  28,  -24), S(  26,  -22), S(   4,  -28), S( -59,  -39), S(   0,    0)},
    {S(  19,   14), S(   8,    8), S(  -4,    9), S(  21,    5), S(  29,    3), S(  12,    4), S( -84,    7), S(   0,    0)}
};
constexpr PackedScore SAFE_KNIGHT_CHECK = S( 110,    6);
constexpr PackedScore SAFE_BISHOP_CHECK = S(  62,   18);
constexpr PackedScore SAFE_ROOK_CHECK = S( 104,   17);
constexpr PackedScore SAFE_QUEEN_CHECK = S(  53,   27);
constexpr PackedScore UNSAFE_KNIGHT_CHECK = S(  17,    2);
constexpr PackedScore UNSAFE_BISHOP_CHECK = S(  39,   11);
constexpr PackedScore UNSAFE_ROOK_CHECK = S(  39,    2);
constexpr PackedScore UNSAFE_QUEEN_CHECK = S(  16,    4);
constexpr PackedScore QUEENLESS_ATTACK = S(-142,  159);
constexpr PackedScore KING_ATTACKER_WEIGHT[4] = {S(  56,   -5), S(  22,    0), S(  28,  -14), S(   3,  -10)};
constexpr PackedScore KING_ATTACKS = S(   7,   -1);
constexpr PackedScore WEAK_KING_RING = S(   7,    0);
constexpr PackedScore KING_FLANK_ATTACKS[2] = {S(  12,   -4), S(   7,    1)};
constexpr PackedScore KING_FLANK_DEFENSES[2] = {S(  -6,    0), S( -10,    2)};
constexpr PackedScore SAFETY_OFFSET = S(  73,  182);

constexpr PackedScore MINOR_BEHIND_PAWN = S(   6,   12);
constexpr PackedScore KNIGHT_OUTPOST = S(  22,   16);
constexpr PackedScore BISHOP_PAWNS[7] = {S(   4,   19), S(   5,   18), S(   4,   11), S(   1,    4), S(  -2,   -5), S(  -2,  -18), S(  -6,  -31)};
constexpr PackedScore BISHOP_PAIR = S(  18,   60);
constexpr PackedScore LONG_DIAG_BISHOP = S(  15,    8);
constexpr PackedScore ROOK_OPEN[2] = {S(  24,    4), S(  12,    6)};

constexpr PackedScore TEMPO = S(  31,   34);

constexpr PackedScore COMPLEXITY_PAWNS = S(   0,   10);
constexpr PackedScore COMPLEXITY_PASSERS = S(   0,    0);
constexpr PackedScore COMPLEXITY_PAWNS_BOTH_SIDES = S(   0,   66);
constexpr PackedScore COMPLEXITY_PAWN_ENDGAME = S(   0,   78);
constexpr PackedScore COMPLEXITY_OFFSET = S(   0, -133);

#undef S


}