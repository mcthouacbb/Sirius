#pragma once

#include "../defs.h"

namespace eval
{

#define S(mg, eg) PackedScore(mg, eg)

constexpr PackedScore MATERIAL[6] = {S(  50,   77), S( 273,  340), S( 279,  357), S( 386,  627), S( 826, 1174), S(0, 0)};

constexpr PackedScore PSQT[6][64] = {
	{
		S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
		S(  37,  102), S(  48,   98), S(  32,   99), S(  65,   51), S(  42,   54), S(  33,   60), S( -31,  109), S( -30,  104), 
		S(   9,   49), S(   4,   63), S(  29,   18), S(  35,  -16), S(  43,  -20), S(  73,   -6), S(  36,   43), S(  20,   34), 
		S(  -9,   26), S(  -3,   26), S(   2,    3), S(   2,  -10), S(  22,   -9), S(  24,  -10), S(   9,   19), S(   9,    2), 
		S( -16,    5), S(  -9,   17), S(  -4,   -4), S(   4,   -8), S(   7,   -7), S(  12,  -11), S(   1,   10), S(  -3,  -12), 
		S( -24,   -3), S( -16,    6), S( -12,   -7), S( -10,   -4), S(   0,   -2), S(  -4,   -7), S(   4,    0), S(  -7,  -19), 
		S( -14,    2), S(  -6,   13), S(  -3,    1), S(  -3,   -2), S(   4,    8), S(  27,   -6), S(  20,    4), S(  -1,  -16), 
		S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
	},
	{
		S(-102,  -27), S( -95,   -4), S( -63,    9), S( -21,   -4), S(   4,    0), S( -46,  -19), S( -79,    1), S( -73,  -43), 
		S( -16,    3), S(  -2,    8), S(   4,    4), S(  19,    3), S(  14,   -4), S(  34,  -14), S(  14,    0), S(   7,  -10), 
		S(   1,   -3), S(   8,    0), S(  19,    3), S(  23,    5), S(  36,   -2), S(  62,  -22), S(  18,   -9), S(  22,  -12), 
		S(   5,   10), S(  10,    3), S(  25,    5), S(  37,    9), S(  33,    8), S(  39,    1), S(  25,    1), S(  33,    0), 
		S(   0,    9), S(   8,   -1), S(  14,   11), S(  23,   10), S(  16,   20), S(  18,    3), S(  14,    0), S(   2,   10), 
		S( -12,    2), S(  -2,   -1), S(   3,    0), S(   6,   14), S(  17,   11), S(   5,   -6), S(  16,   -6), S(   3,    3), 
		S( -14,    7), S( -12,   10), S(  -4,    0), S(  11,    3), S(   9,    1), S(   8,   -2), S(   9,    0), S(   6,   20), 
		S( -45,   17), S(  -6,    1), S( -21,    0), S(  -9,    2), S(  -5,    6), S(   2,   -6), S(  -3,    8), S( -17,   15), 
	},
	{
		S( -15,    7), S( -47,   13), S( -38,    6), S( -79,   16), S( -66,   12), S( -59,    5), S( -25,    4), S( -53,    3), 
		S( -13,   -5), S( -12,   -3), S( -11,   -3), S( -17,    0), S( -10,   -6), S( -13,   -6), S( -41,    6), S( -26,    1), 
		S(   7,    9), S(  14,   -4), S(   6,   -3), S(  13,  -10), S(   7,   -7), S(  34,   -2), S(  25,   -4), S(  23,   12), 
		S(  -7,    6), S(   3,    3), S(   4,   -3), S(  18,    2), S(   4,   -3), S(   9,    1), S(  -3,    4), S(  -2,    6), 
		S(   2,    4), S(  -9,    3), S(   4,    1), S(   9,   -2), S(  10,   -4), S(  -1,   -4), S(  -3,    0), S(   7,   -2), 
		S(   4,    6), S(  12,   -4), S(   6,   -4), S(  11,    0), S(   9,    2), S(   9,   -6), S(  11,  -11), S(  20,   -2), 
		S(  27,    9), S(  14,   -9), S(  22,  -10), S(   7,    0), S(  16,    1), S(  21,   -7), S(  34,   -8), S(  26,   -4), 
		S(  16,   -1), S(  26,    8), S(  12,    1), S(   4,    2), S(  11,   -2), S(   8,   10), S(  22,   -7), S(  34,  -13), 
	},
	{
		S( -10,   18), S(  -9,   20), S( -14,   29), S( -21,   27), S( -10,   21), S(  11,   14), S(  17,   16), S(  27,   10), 
		S(  -8,   14), S(  -1,   20), S(  12,   22), S(  28,   11), S(  15,   12), S(  25,    6), S(  33,    2), S(  35,   -2), 
		S( -16,   12), S(  14,    7), S(   6,   10), S(   8,    6), S(  28,   -3), S(  39,  -11), S(  61,  -11), S(  23,   -9), 
		S( -16,   12), S(  -2,    6), S(  -5,   11), S(   0,    5), S(   5,   -6), S(  12,  -10), S(  14,   -6), S(   8,   -9), 
		S( -23,    5), S( -24,    6), S( -18,    5), S( -10,    2), S(  -7,    0), S( -18,    0), S(   1,   -8), S( -12,   -8), 
		S( -27,    2), S( -24,   -3), S( -19,   -4), S( -14,   -2), S( -11,   -6), S(  -9,  -11), S(  10,  -24), S(  -1,  -23), 
		S( -23,   -6), S( -18,   -4), S(  -8,   -5), S(  -6,   -6), S(  -1,  -11), S(   2,  -15), S(   9,  -21), S( -16,  -14), 
		S(  -6,    1), S(  -6,   -4), S(  -2,    1), S(   6,   -5), S(  11,  -11), S(   7,   -6), S(   3,   -9), S(  -7,   -8), 
	},
	{
		S( -24,    2), S( -33,   11), S( -22,   33), S(  -6,   28), S( -12,   30), S(  -4,   21), S(  53,  -33), S(  -4,    6), 
		S(  -8,  -13), S( -22,    1), S( -23,   36), S( -33,   54), S( -39,   70), S(  -4,   31), S(  -8,   12), S(  29,   13), 
		S(   2,  -10), S(  -3,   -2), S(  -8,   24), S(  -7,   31), S(   0,   40), S(   8,   13), S(  24,   -2), S(  17,    4), 
		S( -10,    3), S(  -3,   10), S(  -5,   13), S(  -8,   27), S( -16,   29), S(   0,   19), S(  -1,   31), S(   5,   13), 
		S(   1,   -5), S(  -8,   15), S(  -4,   17), S(  -5,   20), S(  -1,   22), S(  -1,   15), S(   6,    7), S(  11,    3), 
		S(   0,  -20), S(   4,   -6), S(  -4,    6), S(  -2,   11), S(   2,   11), S(   6,   -1), S(  16,  -21), S(  15,  -28), 
		S(   6,  -25), S(   0,  -26), S(   8,  -20), S(  10,  -15), S(   9,  -10), S(  15,  -38), S(  20,  -68), S(  33,  -84), 
		S(  -3,  -30), S(   1,  -27), S(   3,  -22), S(   9,   -9), S(   8,  -25), S(  -4,  -34), S(   4,  -49), S(  11,  -50), 
	},
	{
		S(  38,  -61), S(  47,  -31), S( 103,  -36), S(  30,  -11), S(  44,  -30), S(  -4,   -3), S(  27,    7), S( 120,  -78), 
		S(-116,   27), S(   6,   25), S(  21,   14), S( 142,  -18), S(  88,   -9), S(  38,   27), S(  19,   41), S( -65,   43), 
		S(-120,   24), S(  37,   18), S(  36,   10), S(  52,    2), S(  89,   -4), S( 100,   12), S(   3,   39), S( -59,   31), 
		S( -72,    3), S( -28,   14), S(  -4,   11), S(  -1,    3), S(  -8,   -2), S( -23,   17), S( -68,   28), S(-146,   29), 
		S( -75,   -6), S( -30,    6), S( -22,    8), S( -19,    5), S( -28,    4), S( -34,   10), S( -66,   18), S(-147,   21), 
		S( -41,   -7), S(   9,    2), S( -17,    8), S(   1,    2), S(  -1,    2), S( -20,   10), S( -11,    7), S( -66,   12), 
		S(  36,  -19), S(  25,   -2), S(  20,   -1), S(   3,   -5), S(  -1,   -1), S(   6,    3), S(  26,   -1), S(  20,  -11), 
		S(  16,  -43), S(  45,  -29), S(  21,  -15), S( -34,  -13), S(   4,  -25), S( -32,    0), S(  26,  -17), S(  24,  -43), 
	},
};

constexpr PackedScore MOBILITY[4][28] = {
	{S(-123, -107), S( -35,  -59), S( -13,  -30), S(  -4,   -8), S(   5,    4), S(   8,   15), S(  16,   20), S(  26,   24), S(  35,   24), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -24, -168), S( -44,  -93), S( -15,  -47), S(  -6,  -25), S(   5,  -12), S(  12,   -2), S(  18,    9), S(  23,   16), S(  27,   23), S(  32,   27), S(  35,   33), S(  46,   31), S(  47,   41), S(  57,   33), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -50, -100), S( -34,  -85), S( -20,  -36), S( -13,  -21), S(  -7,  -13), S(  -4,   -5), S(  -2,   -0), S(  -0,    5), S(   2,    6), S(   7,    9), S(   9,   13), S(  10,   17), S(  14,   19), S(  16,   20), S(  17,   19), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S(   0,    0), S(   0,    0), S(-161,  -37), S( -28, -240), S( -45,  -95), S( -13,  -88), S(  -8,  -63), S(  -6,  -42), S(  -2,  -27), S(  -1,   -5), S(   3,   -2), S(   8,    2), S(  11,    9), S(  16,    7), S(  17,   10), S(  19,   15), S(  20,   16), S(  20,   21), S(  22,   23), S(  24,   22), S(  30,   21), S(  42,    4), S(  56,   -1), S(  71,  -16), S(  72,  -13), S( 179,  -75), S(  83,  -36), S(  40,  -33)}
};

constexpr PackedScore THREATS[6][6] = {
	{S(  18,   -8), S(  40,    3), S(  40,   34), S(  67,  -18), S(  45,  -45), S(   0,    0)},
	{S(  -5,    8), S(   0,    0), S(  21,   22), S(  50,  -12), S(  24,  -45), S(   0,    0)},
	{S(   1,   15), S(  20,   24), S(   0,    0), S(  31,    2), S(  36,   59), S(   0,    0)},
	{S( -10,   13), S(   2,   18), S(  10,   14), S(   0,    0), S(  45,  -12), S(   0,    0)},
	{S(  -2,    6), S(   1,   10), S(  -2,   25), S(   3,   -4), S(   0,    0), S(   0,    0)},
	{S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)}
};
constexpr PackedScore PAWN_DEFENDED_PIECE[4] = {S(   3,    6), S(   6,   16), S(  12,    8), S(  -4,   15)};

constexpr PackedScore PASSED_PAWN[8] = {S(   0,    0), S(  -3,    4), S(  -7,   13), S(  -8,   36), S(  11,   60), S(   7,  118), S(  47,  108), S(   0,    0)};
constexpr PackedScore ISOLATED_PAWN[8] = {S(   0,    4), S(  -3,  -10), S( -11,   -5), S(  -7,  -12), S( -11,  -13), S(  -7,   -3), S(  -1,  -11), S(  -9,    9)};
constexpr PackedScore PAWN_PHALANX[8] = {S(   0,    0), S(   5,   -1), S(  12,    6), S(  22,   16), S(  48,   56), S( 131,  183), S(-155,  421), S(   0,    0)};
constexpr PackedScore DEFENDED_PAWN[8] = {S(   0,    0), S(   0,    0), S(  18,   11), S(  12,    8), S(  13,   15), S(  26,   36), S( 159,   27), S(   0,    0)};

constexpr PackedScore PAWN_STORM[3][8] = {
	{S(  24,  -35), S(  24,  -19), S(  20,   -4), S(  11,    2), S(   4,    4), S(  -1,    7), S(   1,    5), S(   9,  -12)},
	{S(   0,    0), S( -49,  -31), S(  29,    0), S(   4,    4), S(  -4,   10), S(  -7,   14), S(  -7,   14), S(   8,   -5)},
	{S(   0,   -1), S(   1,    6), S(   8,    9), S(   4,   11), S(   4,    9), S(   3,    9), S(   3,    8), S(  -8,   -2)}
};
constexpr PackedScore PAWN_SHIELD[3][8] = {
	{S(   2,  -15), S(  -9,  -10), S(  -6,  -13), S(  -1,  -10), S(  10,   -9), S(  13,  -18), S(  22,  -19), S(   9,   -1)},
	{S(   0,    0), S( -17,   -1), S( -11,   -6), S(   6,   -1), S(  16,   -2), S(  26,  -14), S(  51,  -25), S(  20,    3)},
	{S(  -1,  -11), S(  -2,   -8), S(   0,   -7), S(   0,   -0), S(   4,    3), S(   3,    6), S(  13,   11), S(  -6,    7)}
};
constexpr PackedScore SAFE_KNIGHT_CHECK = S(  73,   -3);
constexpr PackedScore SAFE_BISHOP_CHECK = S(  15,   -6);
constexpr PackedScore SAFE_ROOK_CHECK = S(  50,   -1);
constexpr PackedScore SAFE_QUEEN_CHECK = S(  28,   13);
constexpr PackedScore KING_ATTACKER_WEIGHT[4] = {S(  14,   -4), S(   9,   -2), S(  10,  -17), S(   0,   13)};
constexpr PackedScore KING_ATTACKS[14] = {S( -25,   10), S( -29,    8), S( -32,    6), S( -31,   11), S( -21,    8), S(  -4,    4), S(  22,   -7), S(  56,  -21), S( 101,  -42), S( 137,  -57), S( 186,  -71), S( 258, -112), S( 267,  -98), S( 262,  -96)};

constexpr PackedScore KNIGHT_OUTPOST = S(  31,   17);
constexpr PackedScore BISHOP_PAIR = S(  21,   58);
constexpr PackedScore ROOK_OPEN[2] = {S(  27,    9), S(  15,    8)};

#undef S


}
