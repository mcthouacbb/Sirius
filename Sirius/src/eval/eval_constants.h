#pragma once

#include "../defs.h"

namespace eval
{

// clang-format off
#define S(mg, eg) ScorePair(mg, eg)

constexpr ScorePair MATERIAL[6] = {S(  63,  135), S( 320,  452), S( 336,  473), S( 430,  811), S( 918, 1692), S(0, 0)};

constexpr ScorePair PSQT[6][64] = {
    {
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  75,   72), S(  13,   96), S(  28,  112), S(  31,   90), S(  63,   61), S(  52,   51), S(  38,   92), S(  85,   80),
        S(   6,   13), S( -11,   25), S(   4,    6), S(   4,   -2), S(  -7,  -10), S(  -2,   -3), S( -14,   21), S(  -2,   11),
        S(   4,    9), S(   5,   17), S(  10,   -8), S(  10,  -17), S(   4,  -16), S(   1,  -10), S(   0,   12), S(  -7,    9),
        S(  -6,   -5), S(  -9,   15), S(  19,  -27), S(  19,  -18), S(  14,  -18), S(   4,  -12), S( -13,   12), S( -14,   -6),
        S( -13,   -6), S(  11,    8), S(   4,    3), S(  10,   -2), S(  -2,    0), S(  -7,   -1), S( -15,   12), S( -22,   -7),
        S(  -5,  -10), S(  23,   11), S(  25,   38), S(   6,    9), S(  -2,    3), S(  -3,    1), S(  -6,   11), S( -17,   -3),
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
    },
    {
        S( -64, -120), S( -87,   14), S(-122,   48), S( -10,   16), S( -18,   12), S( -54,    2), S(-121,    9), S( -91,  -67),
        S(  -2,   -1), S( -16,   25), S(  21,   13), S(  40,   13), S(  22,   20), S(  24,   -9), S( -29,   20), S( -12,  -10),
        S(  16,   -7), S(  13,   12), S(  40,   10), S(  30,   14), S(  23,   14), S(  24,    8), S(   9,   10), S(   8,  -13),
        S(  31,    5), S(  30,   10), S(  35,   16), S(  30,   25), S(  36,   21), S(  16,   18), S(  19,    5), S(   9,    7),
        S(  21,    5), S(  30,    4), S(  25,   16), S(  19,   31), S(  18,   23), S(  18,   16), S(  17,    2), S(   6,    3),
        S(   2,   -7), S(  19,   -1), S(  15,    0), S(  16,   15), S(  13,   10), S(  -1,    0), S(   4,   -6), S(  -8,   -8),
        S(  11,  -11), S(   1,    3), S(   9,  -15), S(  12,    0), S(   3,    1), S(   3,  -12), S(  -6,   -5), S( -16,  -23),
        S( -27,  -26), S( -12,  -20), S(   3,  -17), S(   5,   -8), S(   0,   -4), S(   5,  -25), S( -18,  -20), S( -21,  -38),
    },
    {
        S( -32,  -39), S( -64,   24), S( -96,   26), S( -69,   23), S( -77,   27), S( -65,   19), S( -58,   21), S( -34,  -16),
        S( -15,   -2), S( -40,    5), S( -15,   11), S( -30,   13), S( -18,   15), S( -17,   13), S( -11,  -14), S(  -9,   -2),
        S(  23,  -11), S(   9,   11), S(  22,    6), S(  25,   10), S(  18,   12), S(   8,    3), S(  18,    2), S(   7,   -4),
        S(   9,   -5), S(  12,   15), S(  14,   19), S(  14,   30), S(  26,   26), S(  15,   15), S(  14,    9), S(   6,  -10),
        S(  18,  -10), S(   5,    6), S(   9,   18), S(  21,   15), S(  20,   19), S(  13,   11), S(   6,    7), S(  13,   -9),
        S(  20,  -12), S(  22,   -6), S(  13,   -8), S(  15,   11), S(  14,    4), S(   6,  -10), S(  32,   -9), S(  14,  -13),
        S(  20,  -16), S(  28,  -31), S(  25,  -15), S(  12,   -6), S(   1,   -6), S(  11,  -15), S(   8,  -28), S(  23,  -12),
        S(   9,  -34), S(  18,  -10), S( -12,   -9), S(   6,  -15), S(   5,  -12), S(  -5,   -5), S(  15,  -17), S(   9,  -20),
    },
    {
        S(  15,   16), S(  34,   12), S(  25,   14), S(  14,   27), S(  26,   16), S(  13,   23), S(  20,   23), S(  27,   18),
        S(  24,   13), S(  10,   23), S(  19,   22), S(  11,   26), S(  20,   29), S(  11,   27), S(  12,   23), S(  18,   24),
        S( -21,   21), S(   7,   13), S(  16,   10), S(  18,    9), S(  10,   11), S(   8,   16), S(   4,   20), S(  -4,   24),
        S( -20,   13), S(  -8,   17), S(  -2,   13), S(  -9,   11), S(  -2,    8), S(  -1,   11), S(  -2,   15), S(  -5,   12),
        S( -25,   -2), S( -12,    4), S( -12,    9), S(  -9,    7), S(  -8,    2), S( -14,    9), S( -15,   11), S( -11,    0),
        S( -21,  -24), S(   3,  -26), S(  -9,   -8), S(   2,  -19), S(   2,  -21), S( -14,  -10), S(  -3,  -19), S( -18,  -15),
        S( -62,  -22), S( -11,  -33), S(   4,  -26), S(   1,  -26), S(  -1,  -25), S(  -5,  -21), S( -13,  -26), S( -19,  -23),
        S( -18,  -35), S( -26,  -15), S(   7,  -23), S(  16,  -31), S(   7,  -28), S(  -1,  -22), S(   1,  -26), S(  -1,  -23),
    },
    {
        S(   9,   32), S(  43,    3), S(  20,   32), S(  12,   32), S(  21,   23), S(  27,   15), S(  12,   14), S( -24,   42),
        S(  35,   -5), S(  33,   -9), S(  14,   16), S( -16,   41), S(  13,   26), S(  16,    3), S(  17,   -5), S(   9,    6),
        S(  11,    5), S(  16,    4), S(  -2,   21), S( -19,   34), S(   2,   30), S(  14,    1), S(  30,  -29), S(  20,   -9),
        S(  -3,    7), S( -13,   21), S(  -8,   16), S( -21,   36), S( -20,   37), S(   9,    7), S(  -2,   26), S(   2,    3),
        S( -16,   27), S(  -9,   19), S( -12,   16), S( -17,   30), S( -20,   45), S(  -7,   25), S(  -1,   14), S(  -6,    9),
        S(  -7,  -15), S(  -2,  -16), S(  -8,    0), S( -19,   15), S( -12,   19), S(  -6,    9), S(   6,   -4), S(   3,   -8),
        S(  -3,  -59), S(   8,  -87), S(   1,  -52), S(  -5,  -20), S(  -9,  -10), S(   6,  -32), S(  -1,  -26), S(   1,  -16),
        S(  -2,  -50), S( -24,  -65), S( -17,  -48), S(  -9,  -42), S(  -4,  -31), S( -10,  -31), S( -14,  -27), S( -17,   -6),
    },
    {
        S( -18, -166), S(   5,   69), S( -22,   41), S( -25,   47), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  10,   -6), S(   4,   89), S( -44,   74), S( -55,   80), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  51,   24), S(   7,   95), S( -53,   57), S(-152,   32), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S( -20,   28), S( -42,   80), S( -62,   41), S(-140,   21), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S( -56,   22), S( -50,   57), S( -84,   28), S(-109,    8), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(   3,    1), S(  -3,   29), S( -36,    7), S( -58,  -14), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  61,  -26), S(  48,    2), S(  19,  -28), S(  -8,  -49), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  62,  -60), S(  60,  -23), S(  19,  -51), S(  18,  -93), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
    },
};

constexpr ScorePair MOBILITY[4][28] = {
    {S(  -9,  -21), S( -35,  -56), S( -21,  -17), S(  -9,    0), S(   0,   10), S(   6,   20), S(  14,   24), S(  22,   28), S(  33,   17), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S(  -6,  -31), S( -44,  -59), S( -24,  -32), S( -13,  -10), S(  -6,    0), S(  -2,   11), S(   0,   18), S(   3,   21), S(   3,   24), S(   7,   23), S(   6,   24), S(  14,   15), S(  19,   15), S(  52,  -19), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S( -29,  -61), S( -58,  -64), S( -19,  -42), S( -12,  -25), S(  -3,  -15), S(   3,   -4), S(   2,    8), S(   4,   12), S(   6,   15), S(   8,   22), S(  11,   28), S(  11,   36), S(  11,   41), S(  15,   42), S(  48,   13), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S( -11,   45), S( -33,    3), S( -15,  -70), S( -45, -121), S( -16, -147), S( -14,  -66), S(  -6,  -50), S(  -2,  -31), S(  -3,  -12), S(  -3,    5), S(   0,   10), S(  -1,   21), S(   1,   27), S(   2,   38), S(   3,   41), S(   5,   42), S(   3,   48), S(   4,   48), S(   5,   49), S(   6,   45), S(  11,   42), S(  13,   29), S(  15,   27), S(  20,   17), S(  20,   15), S(  18,    2), S(  37,  -43), S( -29,    2)}
};

constexpr ScorePair THREAT_BY_PAWN[6] = {S(  -3,  -24), S(  71,   43), S(  64,   71), S(  69,   50), S(  55,   26), S(   0,    0)};
constexpr ScorePair THREAT_BY_KNIGHT[2][6] = {
    {S(   5,   37), S(   8,   82), S(  52,   30), S(  84,   13), S(  38,   15), S(   0,    0)},
    {S(  -8,   11), S(   3,   75), S(  39,   30), S(  73,   43), S(  50,   53), S(   0,    0)}
};
constexpr ScorePair THREAT_BY_BISHOP[2][6] = {
    {S(   2,   33), S(  36,   44), S(  10,   29), S(  58,   36), S(  63,   50), S(   0,    0)},
    {S(  -6,    3), S(  19,   21), S(  -1,    0), S(  53,   79), S(  65,   74), S(   0,    0)}
};
constexpr ScorePair THREAT_BY_ROOK[2][6] = {
    {S(  -2,   50), S(  39,   49), S(  47,   47), S(   4,  -73), S(  69,  -16), S(   0,    0)},
    {S( -11,    9), S(   9,   14), S(  19,    4), S(  19, -105), S(  54,   96), S(   0,    0)}
};
constexpr ScorePair THREAT_BY_QUEEN[2][6] = {
    {S(   6,   25), S(  24,   30), S(  21,   57), S(  13,   18), S(   3,  -54), S( 164,   71)},
    {S(  -7,   20), S(   1,    7), S(  -9,   28), S(  -4,   -8), S( -14,  -46), S( 118,  212)}
};
constexpr ScorePair THREAT_BY_KING[6] = {S(  58,   11), S(  25,   41), S(  96,   32), S(  87,    5), S(   0,    0), S(   0,    0)};
constexpr ScorePair KNIGHT_HIT_QUEEN = S(   7,    0);
constexpr ScorePair BISHOP_HIT_QUEEN = S(  17,   16);
constexpr ScorePair ROOK_HIT_QUEEN = S(  21,   -4);
constexpr ScorePair PUSH_THREAT = S(  13,   19);
constexpr ScorePair RESTRICTED_SQUARES = S(   2,    3);

constexpr ScorePair ISOLATED_PAWN[8] = {S(  -3,    3), S(  -4,  -17), S(  -9,  -12), S(  -9,  -16), S( -14,  -14), S(  -9,   -8), S(  -6,  -11), S(  -8,    1)};
constexpr ScorePair DOUBLED_PAWN[8] = {S(   1,  -56), S(   6,  -43), S(  -1,  -28), S(  -6,  -16), S( -17,    4), S(  -5,  -19), S(   6,  -43), S(   9,  -44)};
constexpr ScorePair BACKWARDS_PAWN[8] = {S(   0,    0), S(  -8,  -13), S(   1,  -16), S(  -6,  -14), S(  10,  -22), S(   0,   34), S(   0,    0), S(   0,    0)};
constexpr ScorePair PAWN_PHALANX[8] = {S(   0,    0), S(   5,   -7), S(  11,   -3), S(  19,   10), S(  41,   34), S(  75,  135), S( 119,  184), S(   0,    0)};
constexpr ScorePair DEFENDED_PAWN[8] = {S(   0,    0), S(   0,    0), S(  17,    5), S(  10,    9), S(  18,   24), S(  42,   55), S(  64,  117), S(   0,    0)};
constexpr ScorePair CANDIDATE_PASSER[2][8] = {
    {S(   0,    0), S( -20,  -19), S(  -2,  -18), S(  -2,    3), S(  19,   20), S(  42,   77), S(   0,    0), S(   0,    0)},
    {S(   0,    0), S( -15,  -11), S(  -9,   10), S(  -4,   25), S(  10,   36), S(  53,   87), S(   0,    0), S(   0,    0)}
};

constexpr ScorePair PASSED_PAWN[2][2][8] = {
    {
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -33,  -25), S( -10,   27), S(  29,  132), S( 128,  209), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -23,  -37), S(   0,  -12), S(  33,   52), S(  76,   85), S(   0,    0)}
    },
    {
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -26,  -38), S(  -5,   -8), S(  33,   50), S(  35,   51), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -27,  -50), S(  -2,  -28), S(  22,   23), S(   0,   21), S(   0,    0)}
    }
};
constexpr ScorePair OUR_PASSER_PROXIMITY[8] = {S(  85,  107), S( 129,   61), S(  50,   65), S(  -5,   57), S(  -2,   32), S(   0,   21), S(  15,   10), S(  -4,   21)};
constexpr ScorePair THEIR_PASSER_PROXIMITY[8] = {S( -51,    6), S(   5,   -4), S(  28,    0), S(  22,   24), S(  11,   59), S(  15,   72), S(  20,   75), S(  19,   57)};
constexpr ScorePair PASSER_DEFENDED_PUSH[8] = {S(   0,    0), S(   0,    0), S(   0,    0), S(   8,    7), S(   8,   22), S(  40,   31), S(  61,   96), S(   0,    0)};

constexpr ScorePair PAWN_STORM[2][4][8] = {
    {
        {S(  29,   16), S( -96, -165), S(  -3,  -74), S(  39,   -5), S(  18,   15), S(   5,   14), S(  -2,   22), S(   0,    0)},
        {S(  22,   10), S(  55, -260), S(  72, -110), S(  26,  -15), S(   9,    9), S( -22,   12), S(   3,    9), S(   0,    0)},
        {S(   8,    1), S(  31, -162), S(  91,  -97), S(  62,  -30), S(   8,    4), S( -16,    7), S(  -3,    0), S(   0,    0)},
        {S(   6,  -13), S( 138, -265), S( 114, -109), S(  57,  -20), S(   7,   -3), S( -25,   -8), S( -25,   -7), S(   0,    0)}
    },
    {
        {S(   0,    0), S(   0,    0), S(  81,   34), S(  -6,   23), S(   3,   28), S(  15,   38), S(  36,   25), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S( 152,   29), S( -31,   26), S(  -9,   31), S( -10,   46), S(   2,   27), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S( 137,   -4), S(  12,   10), S(  -3,   25), S(  -3,   31), S(  57,   -8), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S( 146,  -20), S(  17,   13), S( -17,   15), S(  -4,   11), S( -27,  -32), S(   0,    0)}
    }
};
constexpr ScorePair PAWN_SHIELD[4][8] = {
    {S(  55,   16), S(   7,   30), S( -15,   21), S(  28,   13), S(  33,    2), S(   2,   -6), S( -13,    3), S(   0,    0)},
    {S(  41,    7), S( -28,   20), S(   5,    9), S(  38,   -6), S(  34,  -21), S(  -9,  -24), S( -36,  -57), S(   0,    0)},
    {S(  27,    2), S(   9,   35), S(   4,  -10), S(  35,  -36), S(  30,  -38), S(   7,  -23), S( -69,    8), S(   0,    0)},
    {S(  14,   -1), S( -26,  -17), S(   6,  -25), S(  27,  -36), S(  18,  -32), S(  27,  -17), S( -36,   -6), S(   0,    0)}
};
constexpr ScorePair SAFE_KNIGHT_CHECK = S( 102,   -1);
constexpr ScorePair SAFE_BISHOP_CHECK = S(  73,   25);
constexpr ScorePair SAFE_ROOK_CHECK = S( 114,   11);
constexpr ScorePair SAFE_QUEEN_CHECK = S(  70,   34);
constexpr ScorePair UNSAFE_KNIGHT_CHECK = S(  18,   -1);
constexpr ScorePair UNSAFE_BISHOP_CHECK = S(  38,    9);
constexpr ScorePair UNSAFE_ROOK_CHECK = S(  45,    1);
constexpr ScorePair UNSAFE_QUEEN_CHECK = S(  20,   20);
constexpr ScorePair QUEENLESS_ATTACK = S( -96,  382);
constexpr ScorePair KING_ATTACKER_WEIGHT[4] = {S(  57,   -5), S(  23,   -1), S(  22,  -14), S(   9,  -95)};
constexpr ScorePair KING_ATTACKS = S(   7,   -1);
constexpr ScorePair WEAK_KING_RING = S(   5,    1);
constexpr ScorePair KING_FLANK_ATTACKS[2] = {S(  12,   -6), S(   3,    1)};
constexpr ScorePair KING_FLANK_DEFENSES[2] = {S(  -8,    0), S(  -6,    5)};
constexpr ScorePair SAFETY_OFFSET = S(  76,  -30);

constexpr ScorePair MINOR_BEHIND_PAWN = S(   1,   10);
constexpr ScorePair KNIGHT_OUTPOST = S(  17,   18);
constexpr ScorePair BISHOP_PAWNS[7] = {S(  12,    2), S(   4,   13), S(   2,    9), S(   0,    3), S(  -4,   -1), S(  -7,   -8), S( -11,  -17)};
constexpr ScorePair BISHOP_PAIR = S(  21,   68);
constexpr ScorePair LONG_DIAG_BISHOP = S(  11,   12);
constexpr ScorePair ROOK_OPEN[2] = {S(  31,    0), S(  19,    1)};

constexpr ScorePair TEMPO = S(  25,   18);

constexpr ScorePair COMPLEXITY_PAWNS = S(   0,    9);
constexpr ScorePair COMPLEXITY_PAWNS_BOTH_SIDES = S(   0,  146);
constexpr ScorePair COMPLEXITY_PAWN_ENDGAME = S(   0,  141);
constexpr ScorePair COMPLEXITY_OFFSET = S(   0, -223);

#undef S
// clang-format on

}
