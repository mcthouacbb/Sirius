#pragma once

#include "../defs.h"

namespace eval
{

#define S(mg, eg) PackedScore(mg, eg)

constexpr PackedScore MATERIAL[6] = {S(  61,  132), S( 289,  441), S( 311,  448), S( 389,  809), S( 803, 1487), S(0, 0)};

constexpr PackedScore PSQT[6][64] = {
	{
		S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
		S(  67,   76), S(  32,   92), S(  32,   95), S(  56,   76), S(  65,   68), S(  34,   94), S(  30,  107), S(  65,   84),
		S(  24,   15), S(  27,   43), S(  27,    9), S(  51,  -24), S(  37,  -17), S(  22,    3), S(   0,   37), S(   8,   21),
		S(  19,   10), S(   7,   16), S(  10,   -7), S(  13,  -21), S(   3,  -20), S(  -1,   -7), S(  -6,   16), S( -10,   13),
		S(   9,    0), S(   5,   17), S(   7,  -14), S(  15,  -14), S(   9,  -13), S(  -4,   -7), S( -15,   15), S( -15,    2),
		S(   3,   -3), S(  11,   12), S(  15,   -5), S(  -2,    2), S(  -7,    1), S( -13,   -4), S( -24,   13), S( -27,    1),
		S(  17,   -3), S(  29,    8), S(  15,   -8), S(   7,    7), S(  -6,    2), S(  -7,   -3), S( -15,   18), S( -16,    5),
		S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
	},
	{
		S( -72,  -82), S( -80,  -19), S( -34,  -14), S(   5,   -9), S( -44,    9), S( -72,    9), S(-104,   14), S( -81,  -45),
		S(  -1,  -10), S(  27,    0), S(  39,   -9), S(  12,    3), S(  17,    6), S(  10,    9), S(   2,   18), S(  -2,    7),
		S(  17,   -8), S(  12,   -3), S(  54,  -18), S(  44,   -2), S(  26,    7), S(  16,    4), S(   8,    3), S(  -5,    6),
		S(  33,    4), S(  33,    7), S(  44,    6), S(  35,   13), S(  29,   19), S(  32,    8), S(  19,    5), S(   8,   17),
		S(   8,   18), S(  17,   12), S(  26,   10), S(  21,   22), S(  28,   13), S(  21,   13), S(  21,    4), S(   3,   13),
		S(   1,    0), S(  15,   -1), S(   6,   -7), S(  13,   10), S(   4,    9), S(  -1,   -4), S(  -1,   -4), S( -15,    0),
		S(   4,    7), S(  10,   -5), S(   4,   -6), S(   5,   -1), S(   4,   -1), S(  -7,   -3), S( -12,   -2), S( -18,    1),
		S( -12,   -4), S( -12,    2), S(  -6,   -6), S(  -4,    7), S( -10,    3), S( -22,   -4), S( -16,    0), S( -50,   12),
	},
	{
		S( -45,  -12), S( -33,    5), S( -13,    1), S( -76,   11), S( -70,   17), S( -54,    4), S( -26,    8), S( -33,   10),
		S( -17,   -7), S( -44,    4), S(  -6,   -1), S(   8,   -5), S( -11,    7), S(   7,   -3), S( -11,   -6), S(  -1,   -5),
		S(  18,   11), S(  14,    1), S(  29,    1), S(  14,    4), S(  21,    0), S(  -1,   -2), S(   9,    6), S(   8,    4),
		S(  -4,    5), S(  12,    6), S(   9,   13), S(  22,   15), S(  22,   21), S(  17,    7), S(   8,   10), S(  -5,    7),
		S(  15,   -4), S(   4,    8), S(   8,    8), S(  10,   13), S(  20,   10), S(  -1,   15), S(   1,    8), S(   2,    2),
		S(  18,   -8), S(  21,   -7), S(   1,   -7), S(   4,   10), S(  -3,    6), S(  -2,   -2), S(  11,    3), S(   1,   -4),
		S(  23,  -19), S(  17,  -23), S(  20,  -11), S(   4,   -3), S(  -4,    2), S(   9,  -15), S(   1,  -22), S(  15,   -6),
		S(  27,  -35), S(  16,  -15), S(  -8,    4), S(  12,   -2), S(   0,    0), S(   0,    9), S(  12,   -1), S(   6,  -13),
	},
	{
		S(  16,   11), S( -20,   36), S( -17,   28), S(  -3,   16), S( -19,   25), S( -16,   31), S(  -2,   23), S(  12,   16),
		S(  30,    3), S(  32,    9), S(  13,   16), S(   8,   14), S(  17,   18), S(   4,   30), S(   1,   25), S(   3,   18),
		S(  10,    3), S(  39,    2), S(  21,    3), S(  28,    2), S(   6,   13), S(   4,   21), S(  15,   18), S(  -6,   21),
		S(   3,    7), S(   4,   13), S(  11,    9), S(  11,    1), S(   5,   11), S(   9,   15), S(   6,   16), S(  -6,   17),
		S( -11,   -1), S(  11,    2), S(  -8,    6), S(   9,   -1), S(  -3,    4), S(  -7,    7), S(  -9,    7), S( -13,    7),
		S(   4,  -25), S(  18,  -26), S(  -4,  -16), S(   0,  -17), S( -12,  -10), S( -14,  -10), S( -14,  -10), S( -20,   -8),
		S( -10,  -26), S(  17,  -35), S(   0,  -23), S(   0,  -22), S(  -6,  -18), S(  -6,  -16), S( -16,  -13), S( -19,  -19),
		S( -13,  -32), S( -10,  -14), S(  -5,  -20), S(   4,  -27), S(  -3,  -23), S( -10,  -16), S(  -9,  -19), S( -11,  -16),
	},
	{
		S(  11,  -14), S(  49,  -41), S( -17,   29), S(  -9,   17), S(  13,   -5), S( -15,   12), S( -33,    7), S( -13,   -1),
		S(  45,    1), S(   4,   13), S( -17,   29), S( -29,   51), S( -18,   33), S(  -4,    9), S(  -2,  -10), S(   9,   -8),
		S(  19,    7), S(  13,    7), S(   2,   20), S(  -9,   26), S(   3,   16), S(  10,    7), S(   9,  -10), S(  21,  -10),
		S(  11,   15), S(   6,   32), S(   8,    8), S( -10,   30), S(  -8,   30), S(   8,    6), S(   6,   14), S(   6,    6),
		S(   9,    7), S(  13,   10), S(  -1,   15), S(   1,   25), S(  -5,   30), S(  -4,   22), S(   4,   15), S(   0,    8),
		S(  10,  -20), S(   9,   -7), S(  -2,    5), S( -11,   15), S(  -7,   12), S(  -7,   17), S(   4,   -5), S(   4,  -13),
		S(   7,  -52), S(   8,  -62), S(   3,  -39), S(   1,   -9), S(   0,   -2), S(   3,  -17), S(   2,  -21), S(  10,  -35),
		S(   1,  -47), S( -14,  -48), S( -24,  -22), S(  -9,  -21), S(  -8,  -17), S( -11,  -13), S( -14,  -16), S( -15,  -13),
	},
	{
		S( -41,  -50), S( -47,   14), S( -79,    8), S( -64,    3), S(   7,   -6), S(   7,   -6), S(   7,   -6), S(   7,   -6),
		S( -74,   36), S( -23,   62), S( -30,   49), S(  18,   19), S(   7,   -6), S(   7,   -6), S(   7,   -6), S(   7,   -6),
		S(  14,   16), S(  32,   51), S(  40,   41), S(  15,   41), S(   7,   -6), S(   7,   -6), S(   7,   -6), S(   7,   -6),
		S( -28,   16), S(  -6,   44), S(  -2,   35), S( -27,   31), S(   7,   -6), S(   7,   -6), S(   7,   -6), S(   7,   -6),
		S( -47,    6), S( -18,   28), S(  -3,   16), S( -24,   14), S(   7,   -6), S(   7,   -6), S(   7,   -6), S(   7,   -6),
		S( -10,  -13), S(  17,    6), S(   3,   -4), S(  -3,   -6), S(   7,   -6), S(   7,   -6), S(   7,   -6), S(   7,   -6),
		S(  29,  -30), S(  29,   -7), S(  13,  -16), S(  -4,  -20), S(   7,   -6), S(   7,   -6), S(   7,   -6), S(   7,   -6),
		S(  14,  -62), S(  19,  -26), S(  -4,  -29), S(   6,  -48), S(   7,   -6), S(   7,   -6), S(   7,   -6), S(   7,   -6),
	},
};

constexpr PackedScore MOBILITY[4][28] = {
	{S(  -9,  -22), S( -41,  -62), S( -16,  -30), S(  -7,   -5), S(   3,    8), S(   6,   19), S(  13,   26), S(  22,   33), S(  31,   33), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -13,  -37), S( -47,  -92), S( -25,  -36), S( -18,  -14), S(  -7,   -2), S(  -1,    6), S(   3,   17), S(   7,   21), S(   9,   25), S(  13,   26), S(  14,   28), S(  24,   19), S(  21,   23), S(  33,    6), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -20,  -40), S(  12,  -61), S( -24,  -52), S( -13,  -32), S(  -7,  -24), S(  -3,   -6), S(   0,   -1), S(  -5,    9), S(  -1,   12), S(   2,   17), S(   6,   23), S(   7,   32), S(   9,   37), S(  15,   39), S(  22,   36), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -24,   23), S( -52,  -66), S(-103,  -68), S( -79, -250), S( -71,  -98), S( -30,  -31), S( -22,   -6), S( -14,   -3), S(  -5,   -3), S(  -5,   24), S(  -4,   31), S(  -1,   41), S(   2,   44), S(   6,   47), S(   9,   49), S(  11,   50), S(  13,   51), S(  13,   55), S(  14,   54), S(  16,   53), S(  24,   43), S(  33,   24), S(  36,   21), S(  52,    0), S(  59,  -10), S(  59,  -20), S(  40,  -15), S(  11,  -43)}
};

constexpr PackedScore THREAT_BY_PAWN[6] = {S(   8,  -17), S(  66,   31), S(  62,   62), S(  80,   28), S(  76,   -6), S(   0,    0)};
constexpr PackedScore THREAT_BY_KNIGHT[2][6] = {
	{S(   8,   29), S(   8,   15), S(  21,   35), S(  61,    0), S(  37,  -35), S(   0,    0)},
	{S(  -5,   10), S(  -3,   13), S(  13,   20), S(  57,   13), S(  43,  -17), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_BISHOP[2][6] = {
	{S(  -2,   38), S(  22,   26), S( -28,   16), S(  60,   -1), S(  48,   52), S(   0,    0)},
	{S(  -3,    8), S(   1,   14), S( -40,  -35), S(  40,   25), S(  35,  102), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_ROOK[2][6] = {
	{S(   0,   44), S(  -2,   55), S(   7,   49), S(  -2,  -43), S(  51,   11), S(   0,    0)},
	{S(  -8,    9), S( -15,    5), S(  -4,   -7), S(   3,  -95), S(  51,   34), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_QUEEN[2][6] = {
	{S(   6,   11), S(  24,   21), S(  10,   49), S(  19,   16), S(  11,  -52), S( 102,   38)},
	{S(  -1,   10), S(   0,    6), S(  -7,   19), S(  -6,    6), S( -16,  -75), S( 113,   68)}
};
constexpr PackedScore THREAT_BY_KING[6] = {S( -30,   49), S(   5,   52), S(  33,   43), S(  77,    8), S(   0,    0), S(   0,    0)};
constexpr PackedScore THREAT_BY_RANK[8] = {S(  20,   -9), S(  37,   -5), S(  27,    3), S(  22,   10), S(  23,    8), S(  14,    8), S(  19,   18), S(  -3,   28)};
constexpr PackedScore PUSH_THREAT = S(  16,   19);

constexpr PackedScore ISOLATED_PAWN[8] = {S(  -8,    6), S(  -4,  -16), S( -11,   -9), S( -11,  -17), S( -11,  -16), S(  -6,   -8), S(  -1,  -15), S( -10,    7)};
constexpr PackedScore DOUBLED_PAWN[8] = {S(  -4,  -63), S(   9,  -38), S(  -2,  -30), S(  -3,  -21), S(  -5,  -16), S( -16,  -20), S(   5,  -42), S(   1,  -75)};
constexpr PackedScore BACKWARDS_PAWN[8] = {S(   0,    0), S(  -4,  -12), S(  -1,  -14), S(  -9,  -12), S(   0,  -20), S(  21,   -6), S(   0,    0), S(   0,    0)};
constexpr PackedScore PAWN_PHALANX[8] = {S(   0,    0), S(   5,   -5), S(  11,   -1), S(  19,   13), S(  48,   62), S( 117,  223), S( -20,  347), S(   0,    0)};
constexpr PackedScore DEFENDED_PAWN[8] = {S(   0,    0), S(   0,    0), S(  20,    7), S(  12,    8), S(  15,   21), S(  20,   65), S( 135,   75), S(   0,    0)};

constexpr PackedScore PASSED_PAWN[2][2][8] = {
	{
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -34,  -39), S( -13,   25), S( -15,  153), S(  38,  236), S(   0,    0)},
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -22,  -51), S(  10,  -23), S(  18,   17), S(  62,   34), S(   0,    0)}
	},
	{
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -30,  -57), S(   0,  -25), S(  18,    4), S(  68,   -3), S(   0,    0)},
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -30,  -61), S(   1,  -35), S(  -4,  -17), S(  -6,  -17), S(   0,    0)}
	}
};
constexpr PackedScore OUR_PASSER_PROXIMITY[8] = {S(   0,    0), S(  36,   84), S(   4,   68), S(   1,   42), S(   4,   30), S(  10,   23), S(  19,   21), S(  14,   19)};
constexpr PackedScore THEIR_PASSER_PROXIMITY[8] = {S(   0,    0), S( -44,    6), S(  20,   -1), S(  14,   26), S(  18,   46), S(  12,   78), S(  15,   79), S(  16,   68)};

constexpr PackedScore PAWN_STORM[2][4][8] = {
	{
		{S(  16,   14), S(-132,  -49), S( -11,   -7), S(   3,  -13), S(   0,   -1), S(  -5,    9), S(  -3,    8), S(   0,    0)},
		{S(  13,    3), S( -25,  -97), S(  43,  -40), S(   6,  -12), S(   2,   -5), S( -10,    7), S(  -7,    9), S(   0,    0)},
		{S(  -3,    6), S(  58,  -98), S(  61,  -44), S(  18,  -18), S(   3,   -2), S(  -6,    7), S(  -8,   12), S(   0,    0)},
		{S(   9,   -7), S( 108,  -86), S(  37,  -22), S(  14,   -2), S(  -2,    4), S(  -8,    0), S(  -3,    1), S(   0,    0)}
	},
	{
		{S(   0,    0), S(  -3,  -27), S( -29,  121), S(   8,  -34), S(  -3,    7), S(  -2,    4), S(  -4,    9), S(   0,    0)},
		{S(   0,    0), S(  10,  -90), S(  -3,   87), S(  53,  -41), S(   2,    2), S(  -7,    6), S(  -7,    8), S(   0,    0)},
		{S(   0,    0), S(  -6,   17), S( -58, -115), S(  21,  -28), S(   2,    4), S(  -1,    5), S(  -9,   11), S(   0,    0)},
		{S(   0,    0), S(  -9,  -51), S(  62,   -8), S(  21,   -1), S(   0,    8), S(   1,   -9), S(   0,    6), S(   0,    0)}
	}
};
constexpr PackedScore PAWN_SHIELD[4][8] = {
	{S(  16,    2), S(  -7,   25), S( -15,   16), S(  -3,    8), S(   3,    1), S( -35,  -25), S( -83,  -32), S(   0,    0)},
	{S(  16,    0), S( -12,   11), S( -10,    8), S(  11,   -2), S(   7,  -11), S(  -5,  -19), S( -55,  -30), S(   0,    0)},
	{S(   4,    8), S( -15,    8), S(  16,    4), S(   1,   -1), S(  -2,   -1), S(   7,  -18), S( -14,  -41), S(   0,    0)},
	{S(  14,   -4), S(   5,   -3), S(  -3,    0), S(   1,   -6), S(   8,   -9), S(  30,  -22), S(  -8,  -25), S(   0,    0)}
};
constexpr PackedScore SAFE_KNIGHT_CHECK = S(  90,   -3);
constexpr PackedScore SAFE_BISHOP_CHECK = S(  16,   22);
constexpr PackedScore SAFE_ROOK_CHECK = S(  73,    8);
constexpr PackedScore SAFE_QUEEN_CHECK = S(  28,   31);
constexpr PackedScore UNSAFE_KNIGHT_CHECK = S(   9,    1);
constexpr PackedScore UNSAFE_BISHOP_CHECK = S(  15,   11);
constexpr PackedScore UNSAFE_ROOK_CHECK = S(  22,   -2);
constexpr PackedScore UNSAFE_QUEEN_CHECK = S(   6,   10);
constexpr PackedScore KING_ATTACKER_WEIGHT[4] = {S(  18,   -4), S(  15,   -3), S(  16,  -16), S(   4,    4)};
constexpr PackedScore KING_ATTACKS[14] = {S( -36,    9), S( -43,    8), S( -49,    5), S( -52,    9), S( -52,    7), S( -45,    5), S( -30,    1), S( -13,   -7), S(  15,  -20), S(  37,  -15), S(  53,  -21), S(  60,   14), S(  84,  -23), S(  75,   16)};
constexpr PackedScore WEAK_KING_RING[17] = {S( -31,   45), S( -30,   25), S( -24,   21), S( -21,   19), S( -14,   12), S(  -5,    6), S(   5,    1), S(  20,   -3), S(  37,   -6), S(  50,   -9), S(  62,  -11), S(  66,   -7), S(  77,  -10), S(  79,  -12), S(  80,   -8), S(  99,  -12), S( 108,  -14)};

constexpr PackedScore MINOR_BEHIND_PAWN = S(   7,   14);
constexpr PackedScore KNIGHT_OUTPOST = S(  26,   17);
constexpr PackedScore BISHOP_PAWNS[7] = {S(   4,   23), S(   6,   21), S(   4,   13), S(   1,    5), S(  -2,   -5), S(  -2,  -19), S(  -6,  -32)};
constexpr PackedScore BISHOP_PAIR = S(  20,   63);
constexpr PackedScore LONG_DIAG_BISHOP = S(  16,    8);
constexpr PackedScore ROOK_OPEN[2] = {S(  26,    3), S(  15,    4)};

constexpr PackedScore TEMPO = S(  32,   35);

constexpr PackedScore COMPLEXITY_PAWNS = S(   0,    8);
constexpr PackedScore COMPLEXITY_PASSERS = S(   0,    0);
constexpr PackedScore COMPLEXITY_PAWNS_BOTH_SIDES = S(   0,   69);
constexpr PackedScore COMPLEXITY_PAWN_ENDGAME = S(   0,   65);
constexpr PackedScore COMPLEXITY_OFFSET = S(   0, -130);

#undef S


}