#pragma once

#include "../defs.h"

namespace eval
{

#define S(mg, eg) PackedScore(mg, eg)

constexpr PackedScore MATERIAL[6] = {S(  62,  129), S( 286,  429), S( 308,  441), S( 387,  782), S( 748, 1616), S(0, 0)};

constexpr PackedScore PSQT[6][64] = {
    {
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  67,   77), S(  43,   93), S(  17,  105), S(  55,   79), S(  78,   62), S(  61,   75), S(  52,   95), S(  74,   77),
        S(  17,    5), S(  -8,   37), S(   3,    0), S(  10,  -22), S(   4,  -21), S(   6,  -13), S( -17,   25), S(   0,   10),
        S(  14,    3), S(  -5,   12), S(  11,  -19), S(   9,  -22), S(  -2,  -23), S(  -1,  -17), S(  -8,    7), S(  -8,    5),
        S(   6,   -4), S(  -5,   14), S(  13,  -26), S(  15,  -16), S(   9,  -16), S(  -1,  -14), S( -14,    9), S( -12,   -3),
        S(  -1,   -5), S(   7,    9), S(   4,   -2), S(   1,   -1), S(  -8,   -2), S(  -9,   -9), S( -21,    8), S( -23,   -4),
        S(   9,   -6), S(  25,   10), S(  31,  122), S(   9,    1), S(  -2,   -9), S(  -5,   -7), S( -14,   12), S( -14,    0),
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
    },
    {
        S( -69,  -97), S( -78,  -27), S( -27,  -17), S(  -2,   -8), S( -27,   -1), S( -57,    4), S( -98,    4), S( -83,  -59),
        S( -19,  -14), S(  12,    1), S(  24,   -1), S(  -4,   10), S(   1,   12), S(   4,   10), S(   0,   11), S( -10,   -3),
        S(   2,   -8), S( -11,    7), S(  28,   -2), S(  18,   17), S(   7,   22), S(  15,   13), S(   7,    2), S(  -6,   -2),
        S(  27,    4), S(  22,   16), S(  36,   19), S(  20,   26), S(  22,   27), S(  28,   14), S(  22,    2), S(  13,    7),
        S(  10,   16), S(  14,   16), S(  21,   19), S(  20,   28), S(  21,   20), S(  20,   17), S(  23,    0), S(  11,    1),
        S(  15,   -2), S(  16,    4), S(  18,    3), S(  16,   15), S(   7,   15), S(   5,   -1), S(   8,   -7), S(  -5,   -8),
        S(  10,   -1), S(  12,   -5), S(  10,   -5), S(  14,   -1), S(   9,   -1), S(  -1,   -4), S(  -1,   -8), S( -13,   -9),
        S(  -3,  -17), S(  -4,  -12), S(   5,  -11), S(   8,    1), S(   2,   -3), S( -14,  -10), S(  -7,  -17), S( -41,   -9),
    },
    {
        S( -44,  -16), S( -29,    6), S(  -6,   -3), S( -66,    8), S( -60,   15), S( -55,    5), S( -29,    7), S( -31,    5),
        S( -22,   -9), S( -43,    4), S( -13,    2), S( -10,    3), S( -22,   11), S(   1,   -1), S( -12,   -6), S(  -3,   -8),
        S(  10,   12), S(  -3,    8), S(  21,    6), S(   4,   11), S(  15,    6), S(   1,    0), S(  11,    4), S(   7,    0),
        S( -11,    5), S(   1,   12), S(   2,   16), S(  17,   19), S(  23,   22), S(  19,    8), S(   6,   11), S(  -4,    0),
        S(  16,   -6), S(  -4,   13), S(   8,   12), S(  16,   14), S(  22,   12), S(   6,   13), S(   4,    5), S(   5,   -2),
        S(  20,   -8), S(  22,   -1), S(   4,   -2), S(  10,   12), S(   1,    8), S(   5,   -3), S(  20,    0), S(   6,   -9),
        S(  26,  -18), S(  25,  -24), S(  27,   -8), S(   7,   -4), S(  -1,    0), S(  12,  -17), S(   6,  -26), S(  17,  -13),
        S(  28,  -36), S(  20,  -15), S(  -4,   -3), S(  19,   -5), S(   2,   -3), S(   1,    1), S(  11,   -4), S(   7,  -19),
    },
    {
        S(  20,    8), S( -18,   33), S( -10,   26), S( -20,   22), S(  -8,   21), S( -13,   28), S(   6,   17), S(  10,   17),
        S(  32,    0), S(  32,    8), S(  13,   17), S(  -4,   19), S(  27,   11), S(  12,   23), S(   8,   20), S(  12,   12),
        S(  -5,    5), S(  25,    6), S(   5,    8), S(   5,   10), S(   5,    8), S(   3,   16), S(  16,   11), S(  -4,   13),
        S(  -9,   10), S( -15,   20), S(  -6,   16), S(  -9,   11), S(  -1,    9), S(   6,   11), S(   6,   10), S(  -7,   12),
        S( -20,    6), S(  -1,   10), S( -19,   14), S(  -8,    9), S(  -6,    2), S( -10,    6), S(  -9,    4), S(  -9,    3),
        S(   4,  -20), S(  22,  -23), S(  -1,  -11), S(  -1,  -13), S(  -5,  -12), S(  -8,  -13), S(  -4,  -15), S( -11,  -11),
        S(  -5,  -27), S(  27,  -36), S(   6,  -22), S(   3,  -19), S(   4,  -21), S(   2,  -19), S(  -6,  -18), S( -11,  -23),
        S(  -6,  -39), S(  -2,  -19), S(   3,  -18), S(   9,  -24), S(   7,  -25), S(   0,  -20), S(   0,  -23), S(  -2,  -21),
    },
    {
        S(  12,  -12), S(  55,  -38), S( -18,   38), S( -16,   22), S(  19,   -3), S(  -7,   12), S( -27,    8), S( -17,    8),
        S(  37,   11), S(  17,   13), S(  -8,   30), S( -31,   55), S(  -5,   33), S(  16,    2), S(  26,  -19), S(  20,   -7),
        S(   5,   15), S(  -2,   10), S(  -7,   24), S( -16,   18), S(   9,   12), S(  21,    5), S(  20,  -13), S(  30,  -14),
        S(  -6,   19), S( -16,   33), S( -11,   18), S( -18,   30), S(  -5,   27), S(  12,    4), S(   9,    7), S(   7,    1),
        S(  -5,   13), S(  -4,   14), S( -15,   21), S(  -9,   27), S( -12,   36), S(  -2,   16), S(   5,   11), S(   2,    2),
        S(   2,  -12), S(   5,   -6), S(  -7,    8), S( -13,   15), S(  -9,   13), S(  -4,   12), S(  12,  -12), S(  11,  -23),
        S(   2,  -44), S(  12,  -62), S(   2,  -30), S(   1,  -15), S(  -1,   -6), S(   2,  -19), S(   4,  -26), S(  10,  -40),
        S(  10,  -61), S( -15,  -44), S( -19,  -22), S( -10,  -20), S(  -7,  -21), S( -12,  -16), S( -14,  -20), S( -12,  -19),
    },
    {
        S(  61,  -75), S(  47,   -9), S( -39,  -22), S( -50,   -3), S(   7,   -5), S(   7,   -5), S(   7,   -5), S(   7,   -5),
        S( -15,   20), S(  28,   55), S(  -1,   27), S(  -4,   29), S(   7,   -5), S(   7,   -5), S(   7,   -5), S(   7,   -5),
        S(  35,   14), S(  60,   49), S(  37,   28), S( -19,   51), S(   7,   -5), S(   7,   -5), S(   7,   -5), S(   7,   -5),
        S( -21,   19), S( -10,   53), S( -36,   31), S( -80,   47), S(   7,   -5), S(   7,   -5), S(   7,   -5), S(   7,   -5),
        S( -62,   15), S( -48,   43), S( -47,   10), S( -82,   29), S(   7,   -5), S(   7,   -5), S(   7,   -5), S(   7,   -5),
        S( -16,   -2), S( -11,   22), S( -33,   -9), S( -53,    8), S(   7,   -5), S(   7,   -5), S(   7,   -5), S(   7,   -5),
        S(  34,  -22), S(  28,    1), S(   3,  -30), S( -26,  -16), S(   7,   -5), S(   7,   -5), S(   7,   -5), S(   7,   -5),
        S(  34,  -55), S(  33,  -20), S(   8,  -51), S(  -2,  -46), S(   7,   -5), S(   7,   -5), S(   7,   -5), S(   7,   -5),
    },
};

constexpr PackedScore MOBILITY[4][28] = {
    {S(  -4,  -30), S( -37,  -46), S( -16,  -16), S(  -8,    0), S(   2,    8), S(   6,   17), S(  13,   21), S(  21,   25), S(  30,   18), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S( -11,  -46), S( -30,  -60), S( -18,  -32), S( -12,  -14), S(  -4,   -4), S(   1,    6), S(   2,   15), S(   5,   18), S(   6,   21), S(   8,   22), S(   9,   23), S(  14,   17), S(  13,   24), S(  18,    5), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S( -11,  -38), S( -28,  -68), S( -13,  -53), S(  -1,  -31), S(   1,  -17), S(   0,   -7), S(   0,    1), S(   3,    7), S(   4,   10), S(   7,   17), S(   5,   27), S(   5,   34), S(   7,   38), S(  11,   39), S(  17,   35), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S(  -7,   20), S( -36,  -76), S( -65, -122), S( -21, -195), S( -25,  -63), S( -17,  -11), S(  -8,  -22), S(  -6,   -3), S(  -5,   15), S(  -2,   24), S(   0,   27), S(   4,   29), S(   4,   40), S(   8,   39), S(   8,   45), S(  10,   46), S(  11,   49), S(  14,   49), S(  14,   47), S(  20,   40), S(  28,   25), S(  33,   11), S(  30,   15), S(  40,   -9), S(  49,  -21), S(  -1,    1), S(  -1,  -10), S(-100,  -10)}
};

constexpr PackedScore THREAT_BY_PAWN[6] = {S(   5,  -17), S(  65,   26), S(  59,   58), S(  83,   21), S(  70,    6), S(   0,    0)};
constexpr PackedScore THREAT_BY_KNIGHT[2][6] = {
    {S(   5,   28), S(  15,   43), S(  37,   42), S(  74,   13), S(  58,  -24), S(   0,    0)},
    {S(  -8,    9), S(   6,   39), S(  28,   28), S(  65,   31), S(  60,    1), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_BISHOP[2][6] = {
    {S(  -1,   33), S(  39,   30), S( -13,   36), S(  70,   12), S(  68,   50), S(   0,    0)},
    {S(  -4,    5), S(  17,   21), S( -25,   -8), S(  44,   42), S(  45,  116), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_ROOK[2][6] = {
    {S(   0,   41), S(  16,   59), S(  27,   54), S(  -8,  -18), S(  58,   31), S(   0,    0)},
    {S(  -7,    7), S(   1,   16), S(  14,    3), S( -12,  -56), S(  38,   75), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_QUEEN[2][6] = {
    {S(   5,   17), S(  23,   34), S(   7,   63), S(  19,   24), S(   9,  -46), S(  95,   57)},
    {S(  -3,   11), S(   1,    8), S(  -5,   12), S(  -4,    3), S( -15,  -81), S( 113,   53)}
};
constexpr PackedScore THREAT_BY_KING[6] = {S( -11,   42), S(  16,   48), S(  32,   38), S( 103,    3), S(   0,    0), S(   0,    0)};
constexpr PackedScore KNIGHT_HIT_QUEEN = S(  11,    3);
constexpr PackedScore BISHOP_HIT_QUEEN = S(  17,   12);
constexpr PackedScore ROOK_HIT_QUEEN = S(  20,   -3);
constexpr PackedScore PUSH_THREAT = S(  14,   17);

constexpr PackedScore ISOLATED_PAWN[8] = {S(  -8,    5), S(  -3,  -15), S( -12,   -8), S( -10,  -16), S( -12,  -14), S(  -8,   -7), S(  -4,  -13), S( -12,    6)};
constexpr PackedScore DOUBLED_PAWN[8] = {S(  -1,  -59), S(  13,  -35), S(   0,  -26), S(  -2,  -17), S(  -5,  -12), S(  -6,  -19), S(   5,  -37), S(   8,  -71)};
constexpr PackedScore BACKWARDS_PAWN[8] = {S(   0,    0), S(  -7,  -13), S(  -2,  -14), S(  -8,  -11), S(   2,  -18), S(  27,   -3), S(   0,    0), S(   0,    0)};
constexpr PackedScore PAWN_PHALANX[8] = {S(   0,    0), S(   5,   -4), S(  11,   -2), S(  20,    8), S(  40,   41), S( 116,  212), S(  29,  336), S(   0,    0)};
constexpr PackedScore DEFENDED_PAWN[8] = {S(   0,    0), S(   0,    0), S(  18,    6), S(  11,    8), S(  17,   21), S(  30,   63), S( 141,   76), S(   0,    0)};
constexpr PackedScore CANDIDATE_PASSER[2][8] = {
    {S(   0,    0), S( -34,  -14), S( -18,   -7), S(   0,   26), S(  27,   52), S(  60,   87), S(   0,    0), S(   0,    0)},
    {S(   0,    0), S( -19,   -7), S(  -9,   13), S(  -4,   28), S(  20,   40), S(  28,  155), S(   0,    0), S(   0,    0)}
};

constexpr PackedScore PASSED_PAWN[2][2][8] = {
    {
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -37,  -38), S( -17,   26), S(   8,  148), S( 109,  211), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -25,  -47), S(   2,  -15), S(  34,   24), S(  66,   27), S(   0,    0)}
    },
    {
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -30,  -51), S(  -5,  -12), S(  36,   19), S(  67,   -2), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -32,  -50), S(  -7,  -17), S(  13,    0), S( -15,   -9), S(   0,    0)}
    }
};
constexpr PackedScore OUR_PASSER_PROXIMITY[8] = {S(  69,   99), S(  67,  101), S(  44,   72), S(   7,   57), S(   5,   35), S(   7,   22), S(  11,   15), S(  -8,   21)};
constexpr PackedScore THEIR_PASSER_PROXIMITY[8] = {S( -58,  -17), S(  -4,   -6), S(  28,   -3), S(  20,   31), S(  15,   65), S(  20,   78), S(  26,   81), S(  30,   70)};

constexpr PackedScore PAWN_STORM[2][4][8] = {
    {
        {S(  43,   35), S(-123,  -39), S( -11,   18), S(  32,   15), S(  17,   26), S(  -2,   30), S(  -9,   30), S(   0,    0)},
        {S(  30,    6), S(  55, -117), S(  92,  -45), S(  36,   -4), S(   8,    3), S( -28,    9), S(   1,    6), S(   0,    0)},
        {S(   9,   19), S( 112,  -95), S( 110,  -17), S(  54,    8), S(  11,   20), S( -13,   23), S( -14,   25), S(   0,    0)},
        {S(  16,    4), S( 153,  -74), S( 120,  -11), S(  43,   14), S(  -2,   19), S( -19,   10), S( -22,   18), S(   0,    0)}
    },
    {
        {S(   0,    0), S(   0,    0), S(  33,   43), S( -22,   27), S(  -6,   31), S(  22,   32), S(  -8,   30), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(  91,   -1), S(   3,    7), S( -14,   17), S(  -5,   15), S(   0,    6), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(  92,    7), S(  -1,   14), S(  -2,   26), S(  23,   25), S(   1,   22), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(  48,    0), S(  21,   17), S( -30,   16), S(  -8,   12), S(  -4,   12), S(   0,    0)}
    }
};
constexpr PackedScore PAWN_SHIELD[4][8] = {
    {S(  46,   34), S( -16,   49), S( -14,   41), S(  29,   34), S(  36,   27), S( -16,   -3), S( -68,  -18), S(   0,    0)},
    {S(  48,    5), S( -23,   16), S(   3,    5), S(  48,    0), S(  37,   -8), S(   6,  -19), S( -58,  -31), S(   0,    0)},
    {S(  20,   -3), S(  18,  118), S(   5,   -4), S(  28,  -23), S(  25,  -21), S(   9,  -28), S( -89,  -31), S(   0,    0)},
    {S(  19,   15), S(   8,   10), S(  -4,   11), S(  21,    7), S(  30,    4), S(  15,    5), S(-101,   11), S(   0,    0)}
};
constexpr PackedScore SAFE_KNIGHT_CHECK = S(  82,    4);
constexpr PackedScore SAFE_BISHOP_CHECK = S(  39,   15);
constexpr PackedScore SAFE_ROOK_CHECK = S(  83,   14);
constexpr PackedScore SAFE_QUEEN_CHECK = S(  22,   24);
constexpr PackedScore SAFE_CHECK_TEMPO = S(  52,    3);
constexpr PackedScore UNSAFE_KNIGHT_CHECK = S(  17,    2);
constexpr PackedScore UNSAFE_BISHOP_CHECK = S(  39,   10);
constexpr PackedScore UNSAFE_ROOK_CHECK = S(  40,    2);
constexpr PackedScore UNSAFE_QUEEN_CHECK = S(  16,    2);
constexpr PackedScore QUEENLESS_ATTACK = S(-141,  156);
constexpr PackedScore KING_ATTACKER_WEIGHT[4] = {S(  57,   -4), S(  23,    0), S(  30,  -13), S(   4,   -8)};
constexpr PackedScore KING_ATTACKS = S(   7,   -1);
constexpr PackedScore WEAK_KING_RING = S(   7,    0);
constexpr PackedScore KING_FLANK_ATTACKS[2] = {S(  12,   -4), S(   7,    1)};
constexpr PackedScore KING_FLANK_DEFENSES[2] = {S(  -6,    0), S( -10,    2)};
constexpr PackedScore SAFETY_OFFSET = S(  69,  198);

constexpr PackedScore MINOR_BEHIND_PAWN = S(   5,   12);
constexpr PackedScore KNIGHT_OUTPOST = S(  22,   16);
constexpr PackedScore BISHOP_PAWNS[7] = {S(   3,   20), S(   5,   19), S(   3,   11), S(   1,    4), S(  -2,   -5), S(  -2,  -18), S(  -6,  -31)};
constexpr PackedScore BISHOP_PAIR = S(  19,   59);
constexpr PackedScore LONG_DIAG_BISHOP = S(  15,    8);
constexpr PackedScore ROOK_OPEN[2] = {S(  23,    4), S(  12,    5)};

constexpr PackedScore TEMPO = S(  29,   30);

constexpr PackedScore COMPLEXITY_PAWNS = S(   0,   10);
constexpr PackedScore COMPLEXITY_PASSERS = S(   0,   -1);
constexpr PackedScore COMPLEXITY_PAWNS_BOTH_SIDES = S(   0,   64);
constexpr PackedScore COMPLEXITY_PAWN_ENDGAME = S(   0,   79);
constexpr PackedScore COMPLEXITY_OFFSET = S(   0, -126);

#undef S


}