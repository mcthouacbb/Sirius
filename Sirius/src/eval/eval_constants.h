#pragma once

#include "../defs.h"

namespace eval
{

#define S(mg, eg) PackedScore(mg, eg)

constexpr PackedScore MATERIAL[6] = {S(  61,  131), S( 286,  431), S( 306,  444), S( 386,  789), S( 745, 1618), S(0, 0)};

constexpr PackedScore PSQT[6][64] = {
    {
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  54,   79), S(  37,   90), S(  21,  101), S(  55,   77), S(  73,   61), S(  57,   76), S(  47,   95), S(  68,   77),
        S(   4,    1), S( -12,   30), S(   9,   -8), S(   9,  -38), S(   1,  -38), S(   2,  -23), S( -19,   15), S(  -6,    2),
        S(  13,    3), S(  -4,   15), S(  11,   -9), S(  11,  -23), S(  -1,  -23), S(   0,  -16), S(  -8,    8), S(  -9,    6),
        S(   4,   -5), S(  -5,   15), S(  12,  -21), S(  16,  -16), S(   9,  -16), S(   0,  -15), S( -13,    9), S( -12,   -4),
        S(  -2,   -6), S(   8,    9), S(   4,    1), S(   1,   -2), S(  -7,   -2), S(  -8,   -9), S( -21,    8), S( -22,   -5),
        S(   9,   -7), S(  23,   10), S(  30,  122), S(   9,    0), S(  -1,  -11), S(  -5,   -8), S( -14,   12), S( -14,   -2),
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
    },
    {
        S( -67,  -97), S( -74,  -24), S( -27,  -18), S(  -2,   -9), S( -30,    1), S( -57,    4), S( -99,    3), S( -83,  -58),
        S( -15,  -14), S(  13,    2), S(  25,   -2), S(   1,    9), S(   5,   12), S(   5,   11), S(   1,   13), S(  -9,   -1),
        S(   4,   -6), S(  -8,    8), S(  32,   -3), S(  21,   16), S(   8,   23), S(  16,   12), S(   9,    2), S(  -5,    0),
        S(  26,    5), S(  22,   17), S(  35,   18), S(  20,   26), S(  22,   27), S(  28,   14), S(  20,    2), S(  12,    8),
        S(  10,   17), S(  14,   17), S(  19,   20), S(  19,   28), S(  20,   21), S(  19,   17), S(  22,    0), S(  10,    2),
        S(  15,    0), S(  16,    5), S(  17,    3), S(  16,   15), S(   6,   16), S(   4,   -1), S(   7,   -7), S(  -6,   -7),
        S(  10,    0), S(  12,   -4), S(   9,   -5), S(  13,    0), S(   8,   -1), S(  -2,   -4), S(  -2,   -7), S( -13,   -7),
        S(  -2,  -15), S(  -5,  -11), S(   4,  -10), S(   8,    2), S(   1,   -2), S( -15,   -9), S(  -8,  -16), S( -40,   -5),
    },
    {
        S( -47,  -14), S( -28,    6), S(  -8,   -3), S( -69,   10), S( -63,   16), S( -57,    5), S( -30,    7), S( -32,    5),
        S( -22,   -9), S( -43,    6), S( -12,    3), S(  -7,    2), S( -20,   10), S(   4,   -1), S( -11,   -5), S(  -2,   -8),
        S(  11,   12), S(  -1,    8), S(  23,    6), S(   7,   13), S(  19,    6), S(   3,    0), S(  12,    4), S(   7,    1),
        S( -10,    6), S(   3,   13), S(   3,   17), S(  20,   19), S(  25,   23), S(  21,    8), S(   7,   12), S(  -3,    0),
        S(  17,   -6), S(  -2,   13), S(   8,   13), S(  15,   15), S(  23,   12), S(   6,   14), S(   5,    5), S(   5,   -2),
        S(  20,   -9), S(  22,   -1), S(   4,   -1), S(  10,   12), S(   1,    8), S(   4,   -3), S(  19,    1), S(   6,   -9),
        S(  26,  -19), S(  24,  -23), S(  27,  -10), S(   6,   -4), S(  -2,   -1), S(  11,  -16), S(   5,  -26), S(  16,  -12),
        S(  28,  -36), S(  20,  -16), S(  -5,   -2), S(  18,   -5), S(   0,   -3), S(  -1,    1), S(  10,   -3), S(   6,  -18),
    },
    {
        S(  17,    9), S( -14,   31), S(  -9,   25), S( -18,   21), S( -10,   20), S( -14,   29), S(   8,   16), S(   9,   17),
        S(  26,    1), S(  33,    5), S(  13,   16), S(  -3,   19), S(  25,   12), S(  12,   22), S(   9,   18), S(  13,   10),
        S(  -6,    4), S(  23,    6), S(   7,    6), S(   8,    8), S(   6,    7), S(   2,   17), S(  16,   10), S(  -4,   13),
        S( -10,   10), S( -16,   20), S(  -5,   15), S(  -7,   10), S(  -1,    9), S(   5,   11), S(   5,    9), S(  -8,   13),
        S( -19,    5), S(   0,    9), S( -19,   14), S(  -7,    9), S(  -6,    3), S( -10,    6), S( -11,    5), S(  -9,    3),
        S(   4,  -21), S(  22,  -24), S(  -1,  -11), S(  -1,  -13), S(  -5,  -12), S(  -9,  -13), S(  -5,  -15), S( -12,  -11),
        S(  -6,  -27), S(  26,  -35), S(   6,  -22), S(   3,  -19), S(   3,  -22), S(   1,  -19), S(  -7,  -18), S( -11,  -22),
        S(  -5,  -39), S(  -2,  -19), S(   3,  -19), S(   9,  -24), S(   6,  -25), S(  -1,  -19), S(  -1,  -23), S(  -2,  -21),
    },
    {
        S(  11,   -7), S(  54,  -33), S( -12,   37), S(  -8,   19), S(  18,    2), S( -10,   19), S( -23,    8), S( -16,   12),
        S(  35,    7), S(  13,   13), S(  -5,   25), S( -30,   53), S(  -3,   33), S(  18,    3), S(  28,  -22), S(  21,  -10),
        S(   4,   11), S(   0,    1), S(  -5,   16), S( -11,   15), S(  11,   11), S(  23,    1), S(  22,  -19), S(  30,  -16),
        S(  -7,   18), S( -15,   33), S(  -8,   16), S( -15,   25), S(  -3,   24), S(  13,    2), S(  10,    5), S(   7,   -1),
        S(  -6,   15), S(  -3,   14), S( -14,   21), S(  -9,   28), S( -12,   35), S(  -4,   19), S(   4,   13), S(   1,    3),
        S(   1,  -11), S(   4,   -5), S(  -8,    9), S( -14,   16), S( -10,   13), S(  -6,   14), S(  10,  -11), S(   9,  -18),
        S(   1,  -42), S(  10,  -61), S(   1,  -30), S(  -1,  -14), S(  -2,   -5), S(   1,  -17), S(   2,  -23), S(   9,  -38),
        S(   7,  -58), S( -17,  -41), S( -20,  -24), S( -11,  -20), S(  -8,  -21), S( -13,  -15), S( -15,  -18), S( -13,  -19),
    },
    {
        S(  45,  -73), S(  22,   -1), S( -44,  -23), S( -69,    0), S(  10,   -5), S(  10,   -5), S(  10,   -5), S(  10,   -5),
        S(  -9,   18), S(  24,   56), S( -10,   28), S( -19,   31), S(  10,   -5), S(  10,   -5), S(  10,   -5), S(  10,   -5),
        S(  33,   14), S(  46,   53), S(  25,   30), S( -32,   52), S(  10,   -5), S(  10,   -5), S(  10,   -5), S(  10,   -5),
        S( -16,   19), S( -14,   54), S( -40,   32), S( -88,   48), S(  10,   -5), S(  10,   -5), S(  10,   -5), S(  10,   -5),
        S( -55,   14), S( -49,   44), S( -49,   12), S( -86,   29), S(  10,   -5), S(  10,   -5), S(  10,   -5), S(  10,   -5),
        S( -13,   -2), S(  -8,   22), S( -32,   -8), S( -52,    8), S(  10,   -5), S(  10,   -5), S(  10,   -5), S(  10,   -5),
        S(  39,  -23), S(  33,    0), S(   7,  -30), S( -22,  -17), S(  10,   -5), S(  10,   -5), S(  10,   -5), S(  10,   -5),
        S(  39,  -55), S(  39,  -20), S(  13,  -51), S(   2,  -48), S(  10,   -5), S(  10,   -5), S(  10,   -5), S(  10,   -5),
    },
};

constexpr PackedScore MOBILITY[4][28] = {
    {S(  -3,  -29), S( -39,  -47), S( -18,  -16), S(  -9,    0), S(   1,    9), S(   6,   19), S(  13,   22), S(  20,   26), S(  29,   19), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S( -10,  -46), S( -30,  -61), S( -18,  -32), S( -11,  -14), S(  -3,   -4), S(   2,    6), S(   4,   15), S(   7,   19), S(   7,   21), S(   9,   22), S(  10,   22), S(  14,   17), S(  12,   23), S(  17,    4), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S( -12,  -44), S( -29,  -70), S( -14,  -53), S(  -2,  -31), S(   0,  -17), S(  -2,   -6), S(  -1,    2), S(   1,    8), S(   3,   11), S(   6,   17), S(   3,   27), S(   4,   34), S(   6,   38), S(   9,   39), S(  16,   36), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S(   0,    8), S( -32,  -72), S( -61, -112), S( -19, -198), S( -24,  -63), S( -16,  -11), S(  -6,  -23), S(  -4,   -5), S(  -3,   13), S(   0,   22), S(   2,   25), S(   6,   28), S(   6,   38), S(  10,   37), S(  10,   43), S(  12,   44), S(  13,   46), S(  15,   47), S(  15,   46), S(  21,   38), S(  25,   29), S(  31,   13), S(  28,   18), S(  34,   -5), S(  34,   -8), S(   9,   -7), S( -13,  -11), S(-116,   10)}
};

constexpr PackedScore THREAT_BY_PAWN[6] = {S(   4,  -20), S(  66,   28), S(  60,   60), S(  81,   24), S(  72,   -2), S(   0,    0)};
constexpr PackedScore THREAT_BY_KNIGHT[2][6] = {
    {S(   3,   28), S(  14,   36), S(  35,   43), S(  73,   13), S(  53,  -30), S(   0,    0)},
    {S(  -7,    9), S(   6,   36), S(  29,   29), S(  64,   34), S(  60,   -1), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_BISHOP[2][6] = {
    {S(  -3,   34), S(  38,   32), S( -15,   36), S(  67,   15), S(  68,   44), S(   0,    0)},
    {S(  -4,    6), S(  17,   22), S( -26,  -11), S(  44,   44), S(  47,  111), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_ROOK[2][6] = {
    {S(  -2,   40), S(  15,   57), S(  25,   53), S( -13,  -28), S(  60,   13), S(   0,    0)},
    {S(  -8,    7), S(   1,   15), S(  14,    3), S( -12,  -66), S(  42,   62), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_QUEEN[2][6] = {
    {S(   6,    5), S(  23,   19), S(  10,   42), S(  14,    2), S(  10,  -56), S(  99,   54)},
    {S(  -3,   12), S(   0,    8), S(  -5,   15), S(  -3,    3), S( -15,  -74), S( 118,   53)}
};
constexpr PackedScore THREAT_BY_KING[6] = {S( -14,   43), S(   8,   48), S(  28,   41), S(  83,    8), S(   0,    0), S(   0,    0)};
constexpr PackedScore KNIGHT_HIT_QUEEN = S(  10,    3);
constexpr PackedScore BISHOP_HIT_QUEEN = S(  16,    9);
constexpr PackedScore ROOK_HIT_QUEEN = S(  18,   -5);
constexpr PackedScore PUSH_THREAT = S(  14,   18);
constexpr PackedScore RESTRICTED_SQUARES = S(   2,    3);

constexpr PackedScore ISOLATED_PAWN[8] = {S(  -8,    6), S(  -3,  -16), S( -12,   -8), S( -10,  -16), S( -12,  -14), S(  -8,   -7), S(  -4,  -14), S( -12,    7)};
constexpr PackedScore DOUBLED_PAWN[8] = {S(   0,  -61), S(  13,  -37), S(   0,  -27), S(  -2,  -17), S(  -5,  -12), S(  -8,  -20), S(   5,  -38), S(   6,  -71)};
constexpr PackedScore BACKWARDS_PAWN[8] = {S(   0,    0), S(  -8,  -12), S(  -2,  -14), S(  -7,  -12), S(   1,  -18), S(  32,  -13), S(   0,    0), S(   0,    0)};
constexpr PackedScore PAWN_PHALANX[8] = {S(   0,    0), S(   5,   -4), S(  11,   -2), S(  20,    8), S(  39,   41), S( 117,  213), S(   6,  340), S(   0,    0)};
constexpr PackedScore DEFENDED_PAWN[8] = {S(   0,    0), S(   0,    0), S(  18,    6), S(  11,    8), S(  17,   21), S(  33,   64), S( 141,   76), S(   0,    0)};
constexpr PackedScore CANDIDATE_PASSER[2][8] = {
    {S(   0,    0), S( -31,  -17), S( -18,   -7), S(   0,   26), S(  25,   52), S(  65,  114), S(   0,    0), S(   0,    0)},
    {S(   0,    0), S( -17,  -10), S(  -8,   14), S(  -4,   28), S(  18,   41), S(  26,  181), S(   0,    0), S(   0,    0)}
};

constexpr PackedScore PASSED_PAWN[2][2][8] = {
    {
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -36,  -41), S( -16,   22), S(  11,  159), S(  67,  218), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -22,  -53), S(   3,  -20), S(  37,   41), S(  70,   25), S(   0,    0)}
    },
    {
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -29,  -55), S(  -6,  -18), S(  38,   34), S(  69,   -3), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -30,  -56), S(  -7,  -24), S(  16,   19), S(  -9,  -11), S(   0,    0)}
    }
};
constexpr PackedScore OUR_PASSER_PROXIMITY[8] = {S(  79,   98), S(  71,  100), S(  46,   72), S(   6,   58), S(   5,   38), S(   7,   25), S(  12,   17), S(  -8,   24)};
constexpr PackedScore THEIR_PASSER_PROXIMITY[8] = {S( -44,  -10), S(  -2,    3), S(  25,    0), S(  20,   31), S(  14,   64), S(  18,   78), S(  25,   80), S(  30,   69)};

constexpr PackedScore PAWN_STORM[2][4][8] = {
    {
        {S(  40,   36), S(-110,  -51), S( -40,  -35), S(  59,    1), S(  27,   21), S(  -1,   30), S( -10,   30), S(   0,    0)},
        {S(  32,    6), S(  43, -124), S(  92,  -83), S(  58,  -20), S(  16,   -2), S( -21,    8), S(   4,    6), S(   0,    0)},
        {S(   7,   20), S( 101, -103), S( 103,  -51), S(  61,   -2), S(  14,   16), S( -14,   23), S( -15,   26), S(   0,    0)},
        {S(  16,    5), S( 148,  -79), S( 119,  -23), S(  69,    5), S(   9,   15), S( -15,    9), S( -21,   20), S(   0,    0)}
    },
    {
        {S(   0,    0), S(   0,    0), S(  61,   62), S( -22,   33), S( -25,   40), S( -17,   57), S(  -4,   45), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(  96,   17), S(  -4,   18), S( -16,   27), S( -28,   42), S( -40,   34), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S( 109,   16), S(   9,   24), S( -15,   39), S(  14,   43), S(  50,   29), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(  87,   17), S(  16,   25), S( -25,   25), S( -24,   22), S(  -3,   17), S(   0,    0)}
    }
};
constexpr PackedScore PAWN_SHIELD[4][8] = {
    {S(  46,   36), S( -20,   51), S( -12,   41), S(  39,   30), S(  44,   16), S( -27,   -2), S( -67,  -19), S(   0,    0)},
    {S(  49,    9), S( -24,   19), S(   9,    7), S(  53,   -1), S(  43,  -16), S(  14,  -20), S( -42,  -32), S(   0,    0)},
    {S(  22,   -3), S(  15,  118), S(  12,   -2), S(  34,  -22), S(  23,  -20), S(  -6,  -26), S( -59,  -42), S(   0,    0)},
    {S(  14,   16), S(   2,   12), S(   1,   10), S(  27,    4), S(  33,    1), S(   8,    5), S( -84,    7), S(   0,    0)}
};
constexpr PackedScore SAFE_KNIGHT_CHECK = S( 109,    7);
constexpr PackedScore SAFE_BISHOP_CHECK = S(  71,   18);
constexpr PackedScore SAFE_ROOK_CHECK = S( 115,   15);
constexpr PackedScore SAFE_QUEEN_CHECK = S(  55,   26);
constexpr PackedScore UNSAFE_KNIGHT_CHECK = S(  16,    2);
constexpr PackedScore UNSAFE_BISHOP_CHECK = S(  38,   10);
constexpr PackedScore UNSAFE_ROOK_CHECK = S(  39,    3);
constexpr PackedScore UNSAFE_QUEEN_CHECK = S(  15,    4);
constexpr PackedScore QUEENLESS_ATTACK = S(-145,  145);
constexpr PackedScore KING_ATTACKER_WEIGHT[4] = {S(  56,   -4), S(  21,    0), S(  29,  -13), S(   4,   -9)};
constexpr PackedScore KING_ATTACKS = S(   7,    0);
constexpr PackedScore WEAK_KING_RING = S(   8,   -1);
constexpr PackedScore KING_FLANK_ATTACKS[2] = {S(  12,   -3), S(   5,   -1)};
constexpr PackedScore KING_FLANK_DEFENSES[2] = {S(  -7,    0), S(  -8,    3)};
constexpr PackedScore SAFETY_OFFSET = S(  78,  207);

constexpr PackedScore MINOR_BEHIND_PAWN = S(   5,   12);
constexpr PackedScore KNIGHT_OUTPOST = S(  23,   16);
constexpr PackedScore BISHOP_PAWNS[7] = {S(   4,   20), S(   5,   19), S(   4,   11), S(   1,    4), S(  -2,   -5), S(  -2,  -18), S(  -5,  -30)};
constexpr PackedScore BISHOP_PAIR = S(  19,   60);
constexpr PackedScore LONG_DIAG_BISHOP = S(  15,    8);
constexpr PackedScore ROOK_OPEN[2] = {S(  24,    3), S(  12,    5)};

constexpr PackedScore TEMPO = S(  32,   34);

constexpr PackedScore COMPLEXITY_PAWNS = S(   0,   10);
constexpr PackedScore COMPLEXITY_PAWNS_BOTH_SIDES = S(   0,   63);
constexpr PackedScore COMPLEXITY_PAWN_ENDGAME = S(   0,   80);
constexpr PackedScore COMPLEXITY_OFFSET = S(   0, -134);

#undef S


}