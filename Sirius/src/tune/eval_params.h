#pragma once

#include "../board.h"

#include "../defs.h"

namespace tune
{
struct EvalData
{
	int phaseWeights[6];
	int materialMG[6];
	int materialEG[6];
	int psqtMG[6][32];
	int psqtEG[6][32];
};

struct EvalCache
{
	int totalPhase;
};

constexpr size_t NUM_PARAMS = sizeof(EvalData) / sizeof(int);
constexpr double K_VAL = 0.84;

union EvalParams
{
	EvalData data;
	int params[NUM_PARAMS];
};

/*constexpr EvalParams defaultParams = {
	{
		// phase weights
		{0, 105, 40, 30, 15, 0},
		// material middlegame
		{0, 900, 500, 330, 320, 100},
		// material endgame
		{0, 900, 500, 330, 320, 100},
		// psqt middlegame
		{
			// king
			{
				-30,-40,-40,-50,
				-30,-40,-40,-50,
				-30,-40,-40,-50,
				-30,-40,-40,-50,
				-20,-30,-30,-40,
				-10,-20,-20,-20,
				 20, 20,  0,  0,
				 20, 30, 10,  0
			},
			// queen
			{
				-20,-10,-10, -5,
				-10,  0,  0,  0,
				-10,  0,  5,  5,
				 -5,  0,  5,  5,
				  0,  0,  5,  5,
				-10,  5,  5,  5,
				-10,  0,  5,  0,
				-20,-10,-10, -5
			},
			// rook
			{
				  0,  0,  0,  0,
				  5, 10, 10, 10,
				 -5,  0,  0,  0,
				 -5,  0,  0,  0,
				 -5,  0,  0,  0,
				 -5,  0,  0,  0,
				 -5,  0,  0,  0,
				  0,  0,  0,  5
			},
			// bishop
			{
				-20,-10,-10,-10,
				-10,  0,  0,  0,
				-10,  0,  5, 10,
				-10,  5,  5, 10,
				-10,  0, 10, 10,
				-10, 10, 10, 10,
				-10,  5,  0,  0,
				-20,-10,-10,-10
			},
			// knight
			{
				-50,-40,-30,-30,
				-40,-20,  0,  0,
				-30,  0, 10, 15,
				-30,  5, 15, 20,
				-30,  0, 15, 20,
				-30,  5, 10, 15,
				-40,-20,  0,  5,
				-50,-40,-30,-30
			},
			// pawn
			{
				 0,  0,  0,  0,
				50, 50, 50, 50,
				10, 10, 20, 30,
				 5,  5, 10, 25,
				 0,  0,  0, 20,
				 5, -5,-10,  0,
				 5, 10, 10,-20,
				 0,  0,  0,  0
			}
		},
		// psqt endgame
		{
			// king
			{
				-50,-40,-30,-20,
				-30,-20,-10,  0,
				-30,-10, 20, 30,
				-30,-10, 30, 40,
				-30,-10, 30, 40,
				-30,-10, 20, 30,
				-30,-30,  0,  0,
				-50,-30,-30,-30
			},
			// queen
			{
				-20,-10,-10, -5,
				-10,  0,  0,  0,
				-10,  0,  5,  5,
				 -5,  0,  5,  5,
				  0,  0,  5,  5,
				-10,  5,  5,  5,
				-10,  0,  5,  0,
				-20,-10,-10, -5
			},
			// rook
			{
				  0,  0,  0,  0,
				  5, 10, 10, 10,
				 -5,  0,  0,  0,
				 -5,  0,  0,  0,
				 -5,  0,  0,  0,
				 -5,  0,  0,  0,
				 -5,  0,  0,  0,
				  0,  0,  0,  5
			},
			// bishop
			{
				-20,-10,-10,-10,
				-10,  0,  0,  0,
				-10,  0,  5, 10,
				-10,  5,  5, 10,
				-10,  0, 10, 10,
				-10, 10, 10, 10,
				-10,  5,  0,  0,
				-20,-10,-10,-10
			},
			// knight
			{
				-50,-40,-30,-30,
				-40,-20,  0,  0,
				-30,  0, 10, 15,
				-30,  5, 15, 20,
				-30,  0, 15, 20,
				-30,  5, 10, 15,
				-40,-20,  0,  5,
				-50,-40,-30,-30
			},
			// pawn
			{
				 0,  0,  0,  0,
				50, 50, 50, 50,
				10, 10, 20, 30,
				 5,  5, 10, 25,
				 0,  0,  0, 20,
				 5, -5,-10,  0,
				 5, 10, 10,-20,
				 0,  0,  0,  0
			}
		}
	}
};*/

// iteration 28
constexpr EvalParams defaultParams = {
	{
		{ 0, 41, 18, 16, 6, 0 },
		{ 0, 1993, 932, 734, 668, 180 },
		{ 0, 1882, 1033, 568, 515, 257 },
		{
			{
				  13,  173,   38,  -21, 
				 -47,    9,   57,   95, 
				  -5,  135,  154,   51, 
				-106,  -38,  -64,  -90, 
				-173, -109, -153, -205, 
				 -79,  -59, -123, -168, 
				  29,    8,  -85, -149, 
				  34,   62,  -55,   -1, 
			},
			{
				  -5,   35,  112,  111, 
				 -11,  -70,   32,  -30, 
				  42,   44,   33,   20, 
				 -14,  -52,   -1,  -27, 
				 -15,  -22,  -21,  -28, 
				 -26,   14,  -14,  -16, 
				 -57,  -15,   33,   -3, 
				 -15,  -41,  -33,   12, 
			},
			{
				  70,   96,   32,  146, 
				  49,   64,  165,  164, 
				 -18,   59,   61,   47, 
				 -58,  -31,   16,   28, 
				 -81,  -47,  -47,  -16, 
				 -99,  -52,  -47,  -42, 
				-130,  -44,  -46,  -34, 
				 -60,  -62,  -24,    6, 
			},
			{
				 -49,   -7, -162,  -86, 
				 -87,   29,   23,    8, 
				 -24,   69,   88,   70, 
				 -11,   -3,   50,   81, 
				 -19,    9,   13,   48, 
				  -2,   21,   29,   17, 
				   3,   36,   23,   -5, 
				 -78,  -30,  -34,  -46, 
			},
			{
				-321, -152, -144,    5, 
				-111,  -34,  148,   49, 
				  -2,  155,  121,  165, 
				  33,   40,   83,   86, 
				 -18,   28,   40,   41, 
				 -28,   20,   35,   34, 
				 -42,  -68,    0,    5, 
				-125,  -28,  -71,  -49, 
			},
			{
				 -29,  -29,  -29,  -29, 
				  56,  155,  155,  198, 
				 -59,    0,   67,   80, 
				 -62,    3,   -7,   21, 
				 -78,  -23,  -32,    8, 
				 -64,   -7,  -26,  -26, 
				 -84,    0,  -26,  -61, 
				 -29,  -29,  -29,  -29, 
			},
		},
		{
			{
				 -83,  -62,  -19,  -37, 
				   8,   29,   31,    2, 
				  12,   36,   37,   13, 
				   2,   44,   57,   55, 
				 -12,   18,   58,   73, 
				 -19,   10,   39,   60, 
				 -53,  -20,   17,   38, 
				-121,  -71,  -32,  -67, 
			},
			{
				 -11,    3,  -12,    4, 
				 -31,   50,   50,  101, 
				 -40,  -21,   30,   98, 
				  19,   89,   47,  105, 
				 -19,   56,   46,   86, 
				 -11,  -57,   21,   10, 
				 -61,  -72, -100,  -33, 
				 -99,  -68,  -72, -107, 
			},
			{
				   9,    2,   26,    4, 
				  12,   10,  -12,  -12, 
				   7,   -1,   -2,    4, 
				  10,    2,   14,   -1, 
				  -2,    2,    9,    0, 
				 -11,   -5,  -12,   -6, 
				  -2,  -13,   -5,   -4, 
				 -23,    7,    0,   -3, 
			},
			{
				 -25,  -26,   10,    3, 
				   2,   -5,    2,   -5, 
				  18,   -6,    4,    0, 
				  10,   26,   27,   27, 
				  -2,   12,   30,   34, 
				 -14,    0,   18,   33, 
				 -38,  -27,  -11,   17, 
				 -23,   -8,  -37,   -4, 
			},
			{
				 -92,  -50,    3,  -26, 
				 -29,    8,  -24,   24, 
				 -30,  -15,   45,   33, 
				  -6,   41,   66,   78, 
				  -5,   31,   64,   74, 
				 -19,    7,   24,   53, 
				 -53,   -7,    2,   19, 
				 -58,  -77,  -11,   -5, 
			},
			{
				 -60,  -60,  -60,  -60, 
				 322,  286,  234,  201, 
				 124,  130,   67,   51, 
				 -14,  -26,  -46,  -66, 
				 -54,  -53,  -76,  -83, 
				 -71,  -59,  -76,  -63, 
				 -59,  -53,  -55,  -44, 
				 -60,  -60,  -60,  -60, 
			},
		},
	}
};

void printParams(const EvalParams& params, std::ostream& os);
bool isDegenerate(const EvalParams& params);
EvalCache genCache(const EvalParams& params);
int evaluate(const Board& board, const EvalParams& params, const EvalCache& cache);


}