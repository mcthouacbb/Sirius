#pragma once

#include "../board.h"

#include "../defs.h"

namespace tune
{
struct EvalData
{
	int phaseWeights[6];
	int materialMG[6];
	int materialEG[6];
	int psqtMG[6][32];
	int psqtEG[6][32];
};

struct EvalCache
{
	int totalPhase;
};

constexpr size_t NUM_PARAMS = sizeof(EvalData) / sizeof(int);
constexpr double K_VAL = 0.84;

union EvalParams
{
	EvalData data;
	int params[NUM_PARAMS];
};

/*constexpr EvalParams defaultParams = {
	{
		// phase weights
		{0, 105, 40, 30, 15, 0},
		// material middlegame
		{0, 900, 500, 330, 320, 100},
		// material endgame
		{0, 900, 500, 330, 320, 100},
		// psqt middlegame
		{
			// king
			{
				-30,-40,-40,-50,
				-30,-40,-40,-50,
				-30,-40,-40,-50,
				-30,-40,-40,-50,
				-20,-30,-30,-40,
				-10,-20,-20,-20,
				 20, 20,  0,  0,
				 20, 30, 10,  0
			},
			// queen
			{
				-20,-10,-10, -5,
				-10,  0,  0,  0,
				-10,  0,  5,  5,
				 -5,  0,  5,  5,
				  0,  0,  5,  5,
				-10,  5,  5,  5,
				-10,  0,  5,  0,
				-20,-10,-10, -5
			},
			// rook
			{
				  0,  0,  0,  0,
				  5, 10, 10, 10,
				 -5,  0,  0,  0,
				 -5,  0,  0,  0,
				 -5,  0,  0,  0,
				 -5,  0,  0,  0,
				 -5,  0,  0,  0,
				  0,  0,  0,  5
			},
			// bishop
			{
				-20,-10,-10,-10,
				-10,  0,  0,  0,
				-10,  0,  5, 10,
				-10,  5,  5, 10,
				-10,  0, 10, 10,
				-10, 10, 10, 10,
				-10,  5,  0,  0,
				-20,-10,-10,-10
			},
			// knight
			{
				-50,-40,-30,-30,
				-40,-20,  0,  0,
				-30,  0, 10, 15,
				-30,  5, 15, 20,
				-30,  0, 15, 20,
				-30,  5, 10, 15,
				-40,-20,  0,  5,
				-50,-40,-30,-30
			},
			// pawn
			{
				 0,  0,  0,  0,
				50, 50, 50, 50,
				10, 10, 20, 30,
				 5,  5, 10, 25,
				 0,  0,  0, 20,
				 5, -5,-10,  0,
				 5, 10, 10,-20,
				 0,  0,  0,  0
			}
		},
		// psqt endgame
		{
			// king
			{
				-50,-40,-30,-20,
				-30,-20,-10,  0,
				-30,-10, 20, 30,
				-30,-10, 30, 40,
				-30,-10, 30, 40,
				-30,-10, 20, 30,
				-30,-30,  0,  0,
				-50,-30,-30,-30
			},
			// queen
			{
				-20,-10,-10, -5,
				-10,  0,  0,  0,
				-10,  0,  5,  5,
				 -5,  0,  5,  5,
				  0,  0,  5,  5,
				-10,  5,  5,  5,
				-10,  0,  5,  0,
				-20,-10,-10, -5
			},
			// rook
			{
				  0,  0,  0,  0,
				  5, 10, 10, 10,
				 -5,  0,  0,  0,
				 -5,  0,  0,  0,
				 -5,  0,  0,  0,
				 -5,  0,  0,  0,
				 -5,  0,  0,  0,
				  0,  0,  0,  5
			},
			// bishop
			{
				-20,-10,-10,-10,
				-10,  0,  0,  0,
				-10,  0,  5, 10,
				-10,  5,  5, 10,
				-10,  0, 10, 10,
				-10, 10, 10, 10,
				-10,  5,  0,  0,
				-20,-10,-10,-10
			},
			// knight
			{
				-50,-40,-30,-30,
				-40,-20,  0,  0,
				-30,  0, 10, 15,
				-30,  5, 15, 20,
				-30,  0, 15, 20,
				-30,  5, 10, 15,
				-40,-20,  0,  5,
				-50,-40,-30,-30
			},
			// pawn
			{
				 0,  0,  0,  0,
				50, 50, 50, 50,
				10, 10, 20, 30,
				 5,  5, 10, 25,
				 0,  0,  0, 20,
				 5, -5,-10,  0,
				 5, 10, 10,-20,
				 0,  0,  0,  0
			}
		}
	}
};*/

constexpr EvalParams defaultParams = {
	{
		{ 0, 41, 18, 16, 5, 0 },
		{ 0, 2006, 904, 703, 638, 176 },
		{ 0, 1821, 1027, 567, 515, 256 },
		{
			{
				   8,  140,   38,  -12,
				 -41,   18,   39,   96,
				   0,  133,  146,   51,
				 -85,  -27,  -47,  -87,
				-159,  -98, -132, -202,
				 -69,  -54, -119, -158,
				  32,    9,  -79, -149,
				  35,   62,  -55,   -1,
			},
			{
				  -9,   39,  109,  106,
				 -14,  -67,   42,  -24,
				  40,   46,   34,   24,
				 -13,  -50,   -1,  -27,
				 -15,  -22,  -21,  -27,
				 -26,   15,  -14,  -16,
				 -57,  -14,   33,   -4,
				 -17,  -42,  -34,   12,
			},
			{
				  65,   87,   33,  136,
				  49,   63,  145,  154,
				 -20,   58,   55,   45,
				 -58,  -30,   12,   29,
				 -77,  -41,  -45,  -15,
				 -99,  -51,  -46,  -42,
				-126,  -45,  -46,  -38,
				 -60,  -62,  -24,    6,
			},
			{
				 -49,   -1, -157,  -83,
				 -86,   30,   27,   14,
				 -26,   71,   88,   76,
				 -12,   -5,   49,   81,
				 -19,    8,   13,   43,
				  -2,   21,   29,   16,
				   0,   36,   22,   -6,
				 -79,  -34,  -34,  -46,
			},
			{
				-312, -141, -129,   28,
				-110,  -28,  149,   59,
				   3,  158,  126,  167,
				  29,   39,   84,   86,
				 -18,   32,   40,   41,
				 -28,   20,   35,   34,
				 -42,  -67,    0,    5,
				-121,  -27,  -67,  -51,
			},
			{
				 -29,  -29,  -29,  -29,
				  52,  151,  166,  202,
				 -50,    0,   67,   79,
				 -59,    3,   -7,   21,
				 -74,  -23,  -32,    8,
				 -61,   -7,  -26,  -26,
				 -81,    0,  -26,  -60,
				 -29,  -29,  -29,  -29,
			},
		},
		{
			{
				 -76,  -56,  -18,  -39,
				   6,   26,   34,    4,
				  11,   39,   35,   15,
				  -1,   44,   56,   55,
				 -15,   16,   55,   73,
				 -20,    8,   39,   58,
				 -52,  -19,   17,   38,
				-121,  -71,  -32,  -65,
			},
			{
				  -8,    4,  -15,    9,
				 -25,   51,   44,  101,
				 -39,  -21,   33,   98,
				  16,   84,   47,  107,
				 -19,   60,   46,   86,
				 -11,  -57,   19,   10,
				 -61,  -72, -100,  -37,
				-100,  -66,  -69, -107,
			},
			{
				  11,    2,   26,    6,
				  12,   10,   -7,  -11,
				   9,   -1,   -1,    3,
				   9,    2,   14,   -1,
				  -2,    1,    9,    0,
				 -10,   -3,  -12,   -6,
				  -1,  -13,   -5,   -4,
				 -23,    7,    0,   -3,
			},
			{
				 -26,  -28,    8,    3,
				   1,   -4,    1,   -5,
				  13,   -9,    4,   -1,
				   9,   26,   26,   26,
				  -3,   12,   30,   35,
				 -14,   -1,   17,   33,
				 -36,  -27,  -11,   17,
				 -22,   -6,  -37,   -4,
			},
			{
				 -94,  -53,    0,  -28,
				 -31,    3,  -25,   19,
				 -34,  -16,   40,   28,
				  -6,   38,   64,   73,
				  -5,   31,   64,   74,
				 -19,    7,   24,   53,
				 -51,   -7,    1,   19,
				 -61,  -78,  -12,   -5,
			},
			{
				 -60,  -60,  -60,  -60,
				 320,  287,  228,  195,
				 120,  128,   67,   50,
				 -14,  -26,  -46,  -66,
				 -54,  -53,  -76,  -83,
				 -71,  -59,  -76,  -63,
				 -59,  -53,  -55,  -44,
				 -60,  -60,  -60,  -60,
			},
		},
	}
};

void printParams(const EvalParams& params, std::ostream& os);
bool isDegenerate(const EvalParams& params);
EvalCache genCache(const EvalParams& params);
int evaluate(const Board& board, const EvalParams& params, const EvalCache& cache);


}